
ADC_DMA_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005754  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800596c  0800596c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005974  08005974  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800597c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  080059e4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080059e4  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb8a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fcc  00000000  00000000  0002ec65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00030c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a33  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028404  00000000  00000000  000323b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2e0  00000000  00000000  0005a7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc5e3  00000000  00000000  00069a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ee8  00000000  00000000  0016607c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00169f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058cc 	.word	0x080058cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080058cc 	.word	0x080058cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d102      	bne.n	8000580 <__io_putchar+0x14>
    __io_putchar('\r');
 800057a:	200d      	movs	r0, #13
 800057c:	f7ff fff6 	bl	800056c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2201      	movs	r2, #1
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <__io_putchar+0x2c>)
 800058a:	f003 fd0f 	bl	8003fac <HAL_UART_Transmit>

  return 1;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000e8 	.word	0x200000e8

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fb20 	bl	8000be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f823 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f919 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f8e7 	bl	8000780 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005b2:	f000 f86f 	bl	8000694 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80005b6:	217f      	movs	r1, #127	; 0x7f
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <main+0x4c>)
 80005ba:	f001 fdd1 	bl	8002160 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x4c>)
 80005c0:	f000 ff04 	bl	80013cc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x4c>)
 80005ca:	f000 ffb9 	bl	8001540 <HAL_ADC_PollForConversion>

	  uint32_t value = HAL_ADC_GetValue(&hadc1);
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <main+0x4c>)
 80005d0:	f001 f88e 	bl	80016f0 <HAL_ADC_GetValue>
 80005d4:	6078      	str	r0, [r7, #4]
	  printf("ADC = %lu\n", value);
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x50>)
 80005da:	f004 fb01 	bl	8004be0 <iprintf>

	  HAL_Delay(250);
 80005de:	20fa      	movs	r0, #250	; 0xfa
 80005e0:	f000 fb76 	bl	8000cd0 <HAL_Delay>
  {
 80005e4:	e7eb      	b.n	80005be <main+0x22>
 80005e6:	bf00      	nop
 80005e8:	20000084 	.word	0x20000084
 80005ec:	080058e4 	.word	0x080058e4

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fb43 	bl	8004c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f002 f969 	bl	80028ec <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 f90e 	bl	8000840 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000624:	2310      	movs	r3, #16
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000638:	2301      	movs	r3, #1
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000640:	2328      	movs	r3, #40	; 0x28
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f002 f99f 	bl	8002998 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000660:	f000 f8ee 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2104      	movs	r1, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fd67 	bl	8003150 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000688:	f000 f8da 	bl	8000840 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3758      	adds	r7, #88	; 0x58
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006b8:	4a2f      	ldr	r2, [pc, #188]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006bc:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ADC1_Init+0xe0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_ADC1_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	4817      	ldr	r0, [pc, #92]	; (8000774 <MX_ADC1_Init+0xe0>)
 8000718:	f000 fd08 	bl	800112c <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000722:	f000 f88d 	bl	8000840 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <MX_ADC1_Init+0xe0>)
 8000732:	f001 fd75 	bl	8002220 <HAL_ADCEx_MultiModeConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800073c:	f000 f880 	bl	8000840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_ADC1_Init+0xe8>)
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2306      	movs	r3, #6
 8000746:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074c:	237f      	movs	r3, #127	; 0x7f
 800074e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000750:	2304      	movs	r3, #4
 8000752:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_ADC1_Init+0xe0>)
 800075e:	f000 ffd5 	bl	800170c <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000768:	f000 f86a 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000084 	.word	0x20000084
 8000778:	50040000 	.word	0x50040000
 800077c:	80000001 	.word	0x80000001

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_USART2_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007c4:	f003 fba4 	bl	8003f10 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f837 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000e8 	.word	0x200000e8
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_GPIO_Init+0x5c>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	4a10      	ldr	r2, [pc, #64]	; (800083c <MX_GPIO_Init+0x5c>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_GPIO_Init+0x5c>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2120      	movs	r1, #32
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f002 f844 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000818:	2320      	movs	r3, #32
 800081a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f001 fe8c 	bl	800254c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x44>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x44>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6613      	str	r3, [r2, #96]	; 0x60
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x44>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x44>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0a6      	sub	sp, #152	; 0x98
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2288      	movs	r2, #136	; 0x88
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f004 f9f0 	bl	8004c8a <memset>
  if(hadc->Instance==ADC1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <HAL_ADC_MspInit+0x80>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d12b      	bne.n	800090c <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008c2:	2301      	movs	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008ca:	2310      	movs	r3, #16
 80008cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fe57 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80008f0:	f7ff ffa6 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_ADC_MspInit+0x84>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_ADC_MspInit+0x84>)
 80008fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_ADC_MspInit+0x84>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3798      	adds	r7, #152	; 0x98
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	50040000 	.word	0x50040000
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b0ac      	sub	sp, #176	; 0xb0
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2288      	movs	r2, #136	; 0x88
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f004 f9a4 	bl	8004c8a <memset>
  if(huart->Instance==USART2)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a21      	ldr	r2, [pc, #132]	; (80009cc <HAL_UART_MspInit+0xb0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d13b      	bne.n	80009c4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800094c:	2302      	movs	r3, #2
 800094e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000950:	2300      	movs	r3, #0
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fe1d 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000964:	f7ff ff6c 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <HAL_UART_MspInit+0xb4>)
 800096a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096c:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0xb4>)
 800096e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000972:	6593      	str	r3, [r2, #88]	; 0x58
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_UART_MspInit+0xb4>)
 8000976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <HAL_UART_MspInit+0xb4>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <HAL_UART_MspInit+0xb4>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_UART_MspInit+0xb4>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000998:	230c      	movs	r3, #12
 800099a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b0:	2307      	movs	r3, #7
 80009b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f001 fdc4 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	37b0      	adds	r7, #176	; 0xb0
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40021000 	.word	0x40021000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f936 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
  }

  return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fd75 	bl	800056c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
  }
  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f004 f8f8 	bl	8004d28 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20018000 	.word	0x20018000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000170 	.word	0x20000170
 8000b6c:	200002c8 	.word	0x200002c8

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f004 f8b7 	bl	8004d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fce9 	bl	800059c <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bd8:	0800597c 	.word	0x0800597c
  ldr r2, =_sbss
 8000bdc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000be0:	200002c4 	.word	0x200002c4

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>

08000be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f001 fc77 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f80e 	bl	8000c18 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c08:	f7ff fe20 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fc75 	bl	8002532 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f001 fc4d 	bl	80024fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000174 	.word	0x20000174

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000174 	.word	0x20000174

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	609a      	str	r2, [r3, #8]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	609a      	str	r2, [r3, #8]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3360      	adds	r3, #96	; 0x60
 8000d92:	461a      	mov	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LL_ADC_SetOffset+0x44>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	4313      	orrs	r3, r2
 8000db0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	03fff000 	.word	0x03fff000

08000dc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3360      	adds	r3, #96	; 0x60
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3360      	adds	r3, #96	; 0x60
 8000e04:	461a      	mov	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e1e:	bf00      	nop
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3330      	adds	r3, #48	; 0x30
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	f003 030c 	and.w	r3, r3, #12
 8000e6c:	4413      	add	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	211f      	movs	r1, #31
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	401a      	ands	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	0e9b      	lsrs	r3, r3, #26
 8000e88:	f003 011f 	and.w	r1, r3, #31
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	431a      	orrs	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3314      	adds	r3, #20
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0e5b      	lsrs	r3, r3, #25
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	0d1b      	lsrs	r3, r3, #20
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	0d1b      	lsrs	r3, r3, #20
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0318 	and.w	r3, r3, #24
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f24:	40d9      	lsrs	r1, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	400b      	ands	r3, r1
 8000f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0007ffff 	.word	0x0007ffff

08000f48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 031f 	and.w	r3, r3, #31
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6093      	str	r3, [r2, #8]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fb8:	d101      	bne.n	8000fbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001008:	d101      	bne.n	800100e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800102c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001058:	f043 0202 	orr.w	r2, r3, #2
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <LL_ADC_IsEnabled+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_ADC_IsEnabled+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d101      	bne.n	80010aa <LL_ADC_IsDisableOngoing+0x18>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <LL_ADC_IsDisableOngoing+0x1a>
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010cc:	f043 0204 	orr.w	r2, r3, #4
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b08      	cmp	r3, #8
 8001118:	d101      	bne.n	800111e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e130      	b.n	80013a8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fb9d 	bl	8000894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff19 	bl	8000fa4 <LL_ADC_IsDeepPowerDownEnabled>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff feff 	bl	8000f80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff34 	bl	8000ff4 <LL_ADC_IsInternalRegulatorEnabled>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d115      	bne.n	80011be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff18 	bl	8000fcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800119c:	4b84      	ldr	r3, [pc, #528]	; (80013b0 <HAL_ADC_Init+0x284>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	099b      	lsrs	r3, r3, #6
 80011a2:	4a84      	ldr	r2, [pc, #528]	; (80013b4 <HAL_ADC_Init+0x288>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	099b      	lsrs	r3, r3, #6
 80011aa:	3301      	adds	r3, #1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011b0:	e002      	b.n	80011b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f9      	bne.n	80011b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff16 	bl	8000ff4 <LL_ADC_IsInternalRegulatorEnabled>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10d      	bne.n	80011ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d2:	f043 0210 	orr.w	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff76 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 80011f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 80c9 	bne.w	8001396 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 80c5 	bne.w	8001396 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001210:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001214:	f043 0202 	orr.w	r2, r3, #2
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff23 	bl	800106c <LL_ADC_IsEnabled>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d115      	bne.n	8001258 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800122c:	4862      	ldr	r0, [pc, #392]	; (80013b8 <HAL_ADC_Init+0x28c>)
 800122e:	f7ff ff1d 	bl	800106c <LL_ADC_IsEnabled>
 8001232:	4604      	mov	r4, r0
 8001234:	4861      	ldr	r0, [pc, #388]	; (80013bc <HAL_ADC_Init+0x290>)
 8001236:	f7ff ff19 	bl	800106c <LL_ADC_IsEnabled>
 800123a:	4603      	mov	r3, r0
 800123c:	431c      	orrs	r4, r3
 800123e:	4860      	ldr	r0, [pc, #384]	; (80013c0 <HAL_ADC_Init+0x294>)
 8001240:	f7ff ff14 	bl	800106c <LL_ADC_IsEnabled>
 8001244:	4603      	mov	r3, r0
 8001246:	4323      	orrs	r3, r4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4619      	mov	r1, r3
 8001252:	485c      	ldr	r0, [pc, #368]	; (80013c4 <HAL_ADC_Init+0x298>)
 8001254:	f7ff fd60 	bl	8000d18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7e5b      	ldrb	r3, [r3, #25]
 800125c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001262:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001268:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800126e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001276:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d106      	bne.n	8001294 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	3b01      	subs	r3, #1
 800128c:	045b      	lsls	r3, r3, #17
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HAL_ADC_Init+0x29c>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff1c 	bl	8001106 <LL_ADC_INJ_IsConversionOngoing>
 80012ce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d13d      	bne.n	8001352 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d13a      	bne.n	8001352 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012e0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012f8:	f023 0302 	bic.w	r3, r3, #2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	430b      	orrs	r3, r1
 8001304:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800130c:	2b01      	cmp	r3, #1
 800130e:	d118      	bne.n	8001342 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800131a:	f023 0304 	bic.w	r3, r3, #4
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001326:	4311      	orrs	r1, r2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800132c:	4311      	orrs	r1, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001332:	430a      	orrs	r2, r1
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0201 	orr.w	r2, r2, #1
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	e007      	b.n	8001352 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10c      	bne.n	8001374 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	f023 010f 	bic.w	r1, r3, #15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
 8001372:	e007      	b.n	8001384 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 020f 	bic.w	r2, r2, #15
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	f023 0303 	bic.w	r3, r3, #3
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
 8001394:	e007      	b.n	80013a6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	f043 0210 	orr.w	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3724      	adds	r7, #36	; 0x24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	053e2d63 	.word	0x053e2d63
 80013b8:	50040000 	.word	0x50040000
 80013bc:	50040100 	.word	0x50040100
 80013c0:	50040200 	.word	0x50040200
 80013c4:	50040300 	.word	0x50040300
 80013c8:	fff0c007 	.word	0xfff0c007

080013cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013d4:	4857      	ldr	r0, [pc, #348]	; (8001534 <HAL_ADC_Start+0x168>)
 80013d6:	f7ff fdb7 	bl	8000f48 <LL_ADC_GetMultimode>
 80013da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fe7d 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f040 809c 	bne.w	8001526 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_Start+0x30>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e097      	b.n	800152c <HAL_ADC_Start+0x160>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fd73 	bl	8001ef0 <ADC_Enable>
 800140a:	4603      	mov	r3, r0
 800140c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800140e:	7dfb      	ldrb	r3, [r7, #23]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f040 8083 	bne.w	800151c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a42      	ldr	r2, [pc, #264]	; (8001538 <HAL_ADC_Start+0x16c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d002      	beq.n	800143a <HAL_ADC_Start+0x6e>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	e000      	b.n	800143c <HAL_ADC_Start+0x70>
 800143a:	4b40      	ldr	r3, [pc, #256]	; (800153c <HAL_ADC_Start+0x170>)
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	4293      	cmp	r3, r2
 8001442:	d002      	beq.n	800144a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d105      	bne.n	8001456 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001462:	d106      	bne.n	8001472 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f023 0206 	bic.w	r2, r3, #6
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	659a      	str	r2, [r3, #88]	; 0x58
 8001470:	e002      	b.n	8001478 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	221c      	movs	r2, #28
 800147e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <HAL_ADC_Start+0x16c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d002      	beq.n	8001498 <HAL_ADC_Start+0xcc>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	e000      	b.n	800149a <HAL_ADC_Start+0xce>
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_ADC_Start+0x170>)
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	4293      	cmp	r3, r2
 80014a0:	d008      	beq.n	80014b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d002      	beq.n	80014b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d114      	bne.n	80014de <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fdee 	bl	80010b8 <LL_ADC_REG_StartConversion>
 80014dc:	e025      	b.n	800152a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <HAL_ADC_Start+0x16c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d002      	beq.n	80014fa <HAL_ADC_Start+0x12e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	e000      	b.n	80014fc <HAL_ADC_Start+0x130>
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_ADC_Start+0x170>)
 80014fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00f      	beq.n	800152a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001512:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
 800151a:	e006      	b.n	800152a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001524:	e001      	b.n	800152a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001526:	2302      	movs	r3, #2
 8001528:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800152a:	7dfb      	ldrb	r3, [r7, #23]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	50040300 	.word	0x50040300
 8001538:	50040100 	.word	0x50040100
 800153c:	50040000 	.word	0x50040000

08001540 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800154a:	4866      	ldr	r0, [pc, #408]	; (80016e4 <HAL_ADC_PollForConversion+0x1a4>)
 800154c:	f7ff fcfc 	bl	8000f48 <LL_ADC_GetMultimode>
 8001550:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b08      	cmp	r3, #8
 8001558:	d102      	bne.n	8001560 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800155a:	2308      	movs	r3, #8
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e02a      	b.n	80015b6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d002      	beq.n	8001572 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b09      	cmp	r3, #9
 8001570:	d111      	bne.n	8001596 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0a4      	b.n	80016da <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001590:	2304      	movs	r3, #4
 8001592:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001594:	e00f      	b.n	80015b6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001596:	4853      	ldr	r0, [pc, #332]	; (80016e4 <HAL_ADC_PollForConversion+0x1a4>)
 8001598:	f7ff fce4 	bl	8000f64 <LL_ADC_GetMultiDMATransfer>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f043 0220 	orr.w	r2, r3, #32
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e093      	b.n	80016da <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015b2:	2304      	movs	r3, #4
 80015b4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015b6:	f7ff fb7f 	bl	8000cb8 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015bc:	e021      	b.n	8001602 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d01d      	beq.n	8001602 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015c6:	f7ff fb77 	bl	8000cb8 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d302      	bcc.n	80015dc <HAL_ADC_PollForConversion+0x9c>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d112      	bne.n	8001602 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10b      	bne.n	8001602 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	f043 0204 	orr.w	r2, r3, #4
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e06b      	b.n	80016da <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0d6      	beq.n	80015be <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fc02 	bl	8000e2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01c      	beq.n	8001666 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e5b      	ldrb	r3, [r3, #25]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d118      	bne.n	8001666 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b08      	cmp	r3, #8
 8001640:	d111      	bne.n	8001666 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	f043 0201 	orr.w	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <HAL_ADC_PollForConversion+0x1a8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d002      	beq.n	8001676 <HAL_ADC_PollForConversion+0x136>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	e000      	b.n	8001678 <HAL_ADC_PollForConversion+0x138>
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_ADC_PollForConversion+0x1ac>)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4293      	cmp	r3, r2
 800167e:	d008      	beq.n	8001692 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d002      	beq.n	8001692 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b09      	cmp	r3, #9
 8001690:	d104      	bne.n	800169c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	e00c      	b.n	80016b6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_ADC_PollForConversion+0x1a8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d002      	beq.n	80016ac <HAL_ADC_PollForConversion+0x16c>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	e000      	b.n	80016ae <HAL_ADC_PollForConversion+0x16e>
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_ADC_PollForConversion+0x1ac>)
 80016ae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d104      	bne.n	80016c6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2208      	movs	r2, #8
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e008      	b.n	80016d8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d103      	bne.n	80016d8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	220c      	movs	r2, #12
 80016d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	50040300 	.word	0x50040300
 80016e8:	50040100 	.word	0x50040100
 80016ec:	50040000 	.word	0x50040000

080016f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0b6      	sub	sp, #216	; 0xd8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADC_ConfigChannel+0x22>
 800172a:	2302      	movs	r3, #2
 800172c:	e3c9      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x7b6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fcd0 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 83aa 	bne.w	8001e9c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d824      	bhi.n	80017a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	3b02      	subs	r3, #2
 800175e:	2b03      	cmp	r3, #3
 8001760:	d81b      	bhi.n	800179a <HAL_ADC_ConfigChannel+0x8e>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <HAL_ADC_ConfigChannel+0x5c>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001779 	.word	0x08001779
 800176c:	08001781 	.word	0x08001781
 8001770:	08001789 	.word	0x08001789
 8001774:	08001791 	.word	0x08001791
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001778:	230c      	movs	r3, #12
 800177a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800177e:	e010      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001780:	2312      	movs	r3, #18
 8001782:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001786:	e00c      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001788:	2318      	movs	r3, #24
 800178a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800178e:	e008      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001798:	e003      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800179a:	2306      	movs	r3, #6
 800179c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80017b0:	f7ff fb4e 	bl	8000e50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fc91 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 80017be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fc9d 	bl	8001106 <LL_ADC_INJ_IsConversionOngoing>
 80017cc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 81a4 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 819f 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	461a      	mov	r2, r3
 80017f2:	f7ff fb59 	bl	8000ea8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d00a      	beq.n	800182e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6919      	ldr	r1, [r3, #16]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001828:	f7ff faaa 	bl	8000d80 <LL_ADC_SetOffset>
 800182c:	e179      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fac7 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10a      	bne.n	800185a <HAL_ADC_ConfigChannel+0x14e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fabc 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	0e9b      	lsrs	r3, r3, #26
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	e01e      	b.n	8001898 <HAL_ADC_ConfigChannel+0x18c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fab1 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001878:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001888:	2320      	movs	r3, #32
 800188a:	e004      	b.n	8001896 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800188c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x1a4>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0e9b      	lsrs	r3, r3, #26
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	e018      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x1d6>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80018c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80018cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80018d4:	2320      	movs	r3, #32
 80018d6:	e004      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80018d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d106      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fa80 	bl	8000df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa64 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x214>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2101      	movs	r1, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fa59 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	0e9b      	lsrs	r3, r3, #26
 800191a:	f003 021f 	and.w	r2, r3, #31
 800191e:	e01e      	b.n	800195e <HAL_ADC_ConfigChannel+0x252>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2101      	movs	r1, #1
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fa4e 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800193e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800194e:	2320      	movs	r3, #32
 8001950:	e004      	b.n	800195c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x26a>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0e9b      	lsrs	r3, r3, #26
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	e018      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x29c>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800198a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800198e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001992:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800199a:	2320      	movs	r3, #32
 800199c:	e004      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800199e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d106      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fa1d 	bl	8000df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2102      	movs	r1, #2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fa01 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10a      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x2da>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2102      	movs	r1, #2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f9f6 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	0e9b      	lsrs	r3, r3, #26
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	e01e      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x318>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2102      	movs	r1, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f9eb 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001a14:	2320      	movs	r3, #32
 8001a16:	e004      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x330>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	e014      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x35a>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e004      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d106      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2102      	movs	r1, #2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f9be 	bl	8000df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2103      	movs	r1, #3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f9a2 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10a      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x398>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2103      	movs	r1, #3
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f997 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	f003 021f 	and.w	r2, r3, #31
 8001aa2:	e017      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x3c8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f98c 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001abe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	e003      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x3e0>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	e011      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x404>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001afc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e003      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d106      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f969 	bl	8000df4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff faa0 	bl	800106c <LL_ADC_IsEnabled>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 8140 	bne.w	8001db4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f7ff f9dd 	bl	8000f00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	4a8f      	ldr	r2, [pc, #572]	; (8001d88 <HAL_ADC_ConfigChannel+0x67c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	f040 8131 	bne.w	8001db4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x46e>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2b09      	cmp	r3, #9
 8001b70:	bf94      	ite	ls
 8001b72:	2301      	movls	r3, #1
 8001b74:	2300      	movhi	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	e019      	b.n	8001bae <HAL_ADC_ConfigChannel+0x4a2>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001b92:	2320      	movs	r3, #32
 8001b94:	e003      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d079      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d107      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x4c2>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	069b      	lsls	r3, r3, #26
 8001bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bcc:	e015      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x4ee>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bde:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e003      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	069b      	lsls	r3, r3, #26
 8001bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x50e>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0e9b      	lsrs	r3, r3, #26
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	e017      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x53e>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c32:	2320      	movs	r3, #32
 8001c34:	e003      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	ea42 0103 	orr.w	r1, r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x564>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 021f 	and.w	r2, r3, #31
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	051b      	lsls	r3, r3, #20
 8001c6e:	e018      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x596>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e003      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	f003 021f 	and.w	r2, r3, #31
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	e081      	b.n	8001daa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x5b6>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	3301      	adds	r3, #1
 8001cba:	069b      	lsls	r3, r3, #26
 8001cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc0:	e015      	b.n	8001cee <HAL_ADC_ConfigChannel+0x5e2>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	069b      	lsls	r3, r3, #26
 8001cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x602>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	3301      	adds	r3, #1
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	e017      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x632>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	61bb      	str	r3, [r7, #24]
  return result;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e003      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	ea42 0103 	orr.w	r1, r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x65e>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0e9b      	lsrs	r3, r3, #26
 8001d54:	3301      	adds	r3, #1
 8001d56:	f003 021f 	and.w	r2, r3, #31
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	051b      	lsls	r3, r3, #20
 8001d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d68:	e01e      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x69c>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	60fb      	str	r3, [r7, #12]
  return result;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e006      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x688>
 8001d86:	bf00      	nop
 8001d88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	f003 021f 	and.w	r2, r3, #31
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b1e      	subs	r3, #30
 8001da2:	051b      	lsls	r3, r3, #20
 8001da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7ff f87a 	bl	8000ea8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b44      	ldr	r3, [pc, #272]	; (8001ecc <HAL_ADC_ConfigChannel+0x7c0>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d07a      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc0:	4843      	ldr	r0, [pc, #268]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dc2:	f7fe ffcf 	bl	8000d64 <LL_ADC_GetCommonPathInternalCh>
 8001dc6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a41      	ldr	r2, [pc, #260]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d12c      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d126      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3c      	ldr	r2, [pc, #240]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x6e8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a3b      	ldr	r2, [pc, #236]	; (8001edc <HAL_ADC_ConfigChannel+0x7d0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d15d      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001df4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001df8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4834      	ldr	r0, [pc, #208]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e00:	f7fe ff9d 	bl	8000d3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e04:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	4a36      	ldr	r2, [pc, #216]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e1e:	e002      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f9      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e2c:	e040      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2d      	ldr	r2, [pc, #180]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d118      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d112      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x74c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_ADC_ConfigChannel+0x7d0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d12d      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e60:	4619      	mov	r1, r3
 8001e62:	481b      	ldr	r0, [pc, #108]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e64:	f7fe ff6b 	bl	8000d3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e68:	e024      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_ADC_ConfigChannel+0x7e0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d120      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11a      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d115      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e92:	4619      	mov	r1, r3
 8001e94:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e96:	f7fe ff52 	bl	8000d3e <LL_ADC_SetCommonPathInternalCh>
 8001e9a:	e00c      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f043 0220 	orr.w	r2, r3, #32
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001eae:	e002      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eb0:	bf00      	nop
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ebe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	37d8      	adds	r7, #216	; 0xd8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	80080000 	.word	0x80080000
 8001ed0:	50040300 	.word	0x50040300
 8001ed4:	c7520000 	.word	0xc7520000
 8001ed8:	50040000 	.word	0x50040000
 8001edc:	50040200 	.word	0x50040200
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	053e2d63 	.word	0x053e2d63
 8001ee8:	cb840000 	.word	0xcb840000
 8001eec:	80000001 	.word	0x80000001

08001ef0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff f8b3 	bl	800106c <LL_ADC_IsEnabled>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d169      	bne.n	8001fe0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <ADC_Enable+0xfc>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00d      	beq.n	8001f36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f043 0210 	orr.w	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e055      	b.n	8001fe2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f86e 	bl	800101c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f40:	482b      	ldr	r0, [pc, #172]	; (8001ff0 <ADC_Enable+0x100>)
 8001f42:	f7fe ff0f 	bl	8000d64 <LL_ADC_GetCommonPathInternalCh>
 8001f46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <ADC_Enable+0x104>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <ADC_Enable+0x108>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f6a:	e002      	b.n	8001f72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fe9e 	bl	8000cb8 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7e:	e028      	b.n	8001fd2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f871 	bl	800106c <LL_ADC_IsEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d104      	bne.n	8001f9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f841 	bl	800101c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9a:	f7fe fe8d 	bl	8000cb8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d914      	bls.n	8001fd2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d00d      	beq.n	8001fd2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e007      	b.n	8001fe2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d1cf      	bne.n	8001f80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	8000003f 	.word	0x8000003f
 8001ff0:	50040300 	.word	0x50040300
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	053e2d63 	.word	0x053e2d63

08001ffc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f842 	bl	8001092 <LL_ADC_IsDisableOngoing>
 800200e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff f829 	bl	800106c <LL_ADC_IsEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d047      	beq.n	80020b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d144      	bne.n	80020b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 030d 	and.w	r3, r3, #13
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10c      	bne.n	800204e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f803 	bl	8001044 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2203      	movs	r2, #3
 8002044:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002046:	f7fe fe37 	bl	8000cb8 <HAL_GetTick>
 800204a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800204c:	e029      	b.n	80020a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e023      	b.n	80020b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800206a:	f7fe fe25 	bl	8000cb8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d914      	bls.n	80020a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f043 0210 	orr.w	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e007      	b.n	80020b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1dc      	bne.n	800206a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <LL_ADC_IsEnabled>:
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_IsEnabled+0x18>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_IsEnabled+0x1a>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_StartCalibration>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80020f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	609a      	str	r2, [r3, #8]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_ADC_IsCalibrationOnGoing>:
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002126:	d101      	bne.n	800212c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_REG_IsConversionOngoing>:
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b04      	cmp	r3, #4
 800214c:	d101      	bne.n	8002152 <LL_ADC_REG_IsConversionOngoing+0x18>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_ADCEx_Calibration_Start+0x1c>
 8002178:	2302      	movs	r3, #2
 800217a:	e04d      	b.n	8002218 <HAL_ADCEx_Calibration_Start+0xb8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff39 	bl	8001ffc <ADC_Disable>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d136      	bne.n	8002202 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800219c:	f023 0302 	bic.w	r3, r3, #2
 80021a0:	f043 0202 	orr.w	r2, r3, #2
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff96 	bl	80020e0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021b4:	e014      	b.n	80021e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3301      	adds	r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80021c2:	d30d      	bcc.n	80021e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f023 0312 	bic.w	r3, r3, #18
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e01b      	b.n	8002218 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff94 	bl	8002112 <LL_ADC_IsCalibrationOnGoing>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e2      	bne.n	80021b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f023 0303 	bic.w	r3, r3, #3
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002200:	e005      	b.n	800220e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b09f      	sub	sp, #124	; 0x7c
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800223a:	2302      	movs	r3, #2
 800223c:	e093      	b.n	8002366 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002246:	2300      	movs	r3, #0
 8002248:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800224a:	2300      	movs	r3, #0
 800224c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a47      	ldr	r2, [pc, #284]	; (8002370 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d102      	bne.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	e001      	b.n	8002262 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	f043 0220 	orr.w	r2, r3, #32
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e072      	b.n	8002366 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff59 	bl	800213a <LL_ADC_REG_IsConversionOngoing>
 8002288:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff53 	bl	800213a <LL_ADC_REG_IsConversionOngoing>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d154      	bne.n	8002344 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800229a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800229c:	2b00      	cmp	r3, #0
 800229e:	d151      	bne.n	8002344 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022a0:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80022a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d02c      	beq.n	8002306 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80022ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022be:	035b      	lsls	r3, r3, #13
 80022c0:	430b      	orrs	r3, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c8:	4829      	ldr	r0, [pc, #164]	; (8002370 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022ca:	f7ff fef6 	bl	80020ba <LL_ADC_IsEnabled>
 80022ce:	4604      	mov	r4, r0
 80022d0:	4828      	ldr	r0, [pc, #160]	; (8002374 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022d2:	f7ff fef2 	bl	80020ba <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	431c      	orrs	r4, r3
 80022da:	4828      	ldr	r0, [pc, #160]	; (800237c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022dc:	f7ff feed 	bl	80020ba <LL_ADC_IsEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4323      	orrs	r3, r4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d137      	bne.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022f0:	f023 030f 	bic.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	6811      	ldr	r1, [r2, #0]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	6892      	ldr	r2, [r2, #8]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	431a      	orrs	r2, r3
 8002300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002302:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002304:	e028      	b.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800230e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002310:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002312:	4817      	ldr	r0, [pc, #92]	; (8002370 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002314:	f7ff fed1 	bl	80020ba <LL_ADC_IsEnabled>
 8002318:	4604      	mov	r4, r0
 800231a:	4816      	ldr	r0, [pc, #88]	; (8002374 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800231c:	f7ff fecd 	bl	80020ba <LL_ADC_IsEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	431c      	orrs	r4, r3
 8002324:	4815      	ldr	r0, [pc, #84]	; (800237c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002326:	f7ff fec8 	bl	80020ba <LL_ADC_IsEnabled>
 800232a:	4603      	mov	r3, r0
 800232c:	4323      	orrs	r3, r4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d112      	bne.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800233a:	f023 030f 	bic.w	r3, r3, #15
 800233e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002340:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002342:	e009      	b.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002356:	e000      	b.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002358:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002362:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002366:	4618      	mov	r0, r3
 8002368:	377c      	adds	r7, #124	; 0x7c
 800236a:	46bd      	mov	sp, r7
 800236c:	bd90      	pop	{r4, r7, pc}
 800236e:	bf00      	nop
 8002370:	50040000 	.word	0x50040000
 8002374:	50040100 	.word	0x50040100
 8002378:	50040300 	.word	0x50040300
 800237c:	50040200 	.word	0x50040200

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff47 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff5c 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffb0 	bl	80024a0 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e17f      	b.n	800285c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8171 	beq.w	8002856 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d005      	beq.n	800258c <HAL_GPIO_Init+0x40>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d130      	bne.n	80025ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025c2:	2201      	movs	r2, #1
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0201 	and.w	r2, r3, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d118      	bne.n	800262c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b03      	cmp	r3, #3
 8002636:	d017      	beq.n	8002668 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d123      	bne.n	80026bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	6939      	ldr	r1, [r7, #16]
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0203 	and.w	r2, r3, #3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80ac 	beq.w	8002856 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	4b5f      	ldr	r3, [pc, #380]	; (800287c <HAL_GPIO_Init+0x330>)
 8002700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002702:	4a5e      	ldr	r2, [pc, #376]	; (800287c <HAL_GPIO_Init+0x330>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6613      	str	r3, [r2, #96]	; 0x60
 800270a:	4b5c      	ldr	r3, [pc, #368]	; (800287c <HAL_GPIO_Init+0x330>)
 800270c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002716:	4a5a      	ldr	r2, [pc, #360]	; (8002880 <HAL_GPIO_Init+0x334>)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002740:	d025      	beq.n	800278e <HAL_GPIO_Init+0x242>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x338>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x23e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4e      	ldr	r2, [pc, #312]	; (8002888 <HAL_GPIO_Init+0x33c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_GPIO_Init+0x23a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4d      	ldr	r2, [pc, #308]	; (800288c <HAL_GPIO_Init+0x340>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0x236>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4c      	ldr	r2, [pc, #304]	; (8002890 <HAL_GPIO_Init+0x344>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00d      	beq.n	800277e <HAL_GPIO_Init+0x232>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4b      	ldr	r2, [pc, #300]	; (8002894 <HAL_GPIO_Init+0x348>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x22e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4a      	ldr	r2, [pc, #296]	; (8002898 <HAL_GPIO_Init+0x34c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_GPIO_Init+0x22a>
 8002772:	2306      	movs	r3, #6
 8002774:	e00c      	b.n	8002790 <HAL_GPIO_Init+0x244>
 8002776:	2307      	movs	r3, #7
 8002778:	e00a      	b.n	8002790 <HAL_GPIO_Init+0x244>
 800277a:	2305      	movs	r3, #5
 800277c:	e008      	b.n	8002790 <HAL_GPIO_Init+0x244>
 800277e:	2304      	movs	r3, #4
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x244>
 8002782:	2303      	movs	r3, #3
 8002784:	e004      	b.n	8002790 <HAL_GPIO_Init+0x244>
 8002786:	2302      	movs	r3, #2
 8002788:	e002      	b.n	8002790 <HAL_GPIO_Init+0x244>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x244>
 800278e:	2300      	movs	r3, #0
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	f002 0203 	and.w	r2, r2, #3
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	4093      	lsls	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027a0:	4937      	ldr	r1, [pc, #220]	; (8002880 <HAL_GPIO_Init+0x334>)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_GPIO_Init+0x350>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d2:	4a32      	ldr	r2, [pc, #200]	; (800289c <HAL_GPIO_Init+0x350>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027d8:	4b30      	ldr	r3, [pc, #192]	; (800289c <HAL_GPIO_Init+0x350>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027fc:	4a27      	ldr	r2, [pc, #156]	; (800289c <HAL_GPIO_Init+0x350>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_GPIO_Init+0x350>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002826:	4a1d      	ldr	r2, [pc, #116]	; (800289c <HAL_GPIO_Init+0x350>)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_GPIO_Init+0x350>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002850:	4a12      	ldr	r2, [pc, #72]	; (800289c <HAL_GPIO_Init+0x350>)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	f47f ae78 	bne.w	800255c <HAL_GPIO_Init+0x10>
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	40010000 	.word	0x40010000
 8002884:	48000400 	.word	0x48000400
 8002888:	48000800 	.word	0x48000800
 800288c:	48000c00 	.word	0x48000c00
 8002890:	48001000 	.word	0x48001000
 8002894:	48001400 	.word	0x48001400
 8002898:	48001800 	.word	0x48001800
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40007000 	.word	0x40007000

080028ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fa:	d130      	bne.n	800295e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002908:	d038      	beq.n	800297c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2232      	movs	r2, #50	; 0x32
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0c9b      	lsrs	r3, r3, #18
 800292c:	3301      	adds	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002930:	e002      	b.n	8002938 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3b01      	subs	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002944:	d102      	bne.n	800294c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f2      	bne.n	8002932 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002958:	d110      	bne.n	800297c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e00f      	b.n	800297e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296a:	d007      	beq.n	800297c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002974:	4a05      	ldr	r2, [pc, #20]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40007000 	.word	0x40007000
 8002990:	20000000 	.word	0x20000000
 8002994:	431bde83 	.word	0x431bde83

08002998 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e3ca      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029aa:	4b97      	ldr	r3, [pc, #604]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b4:	4b94      	ldr	r3, [pc, #592]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80e4 	beq.w	8002b94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_RCC_OscConfig+0x4a>
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	f040 808b 	bne.w	8002af0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f040 8087 	bne.w	8002af0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029e2:	4b89      	ldr	r3, [pc, #548]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e3a2      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1a      	ldr	r2, [r3, #32]
 80029fe:	4b82      	ldr	r3, [pc, #520]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <HAL_RCC_OscConfig+0x7c>
 8002a0a:	4b7f      	ldr	r3, [pc, #508]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a12:	e005      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
 8002a14:	4b7c      	ldr	r3, [pc, #496]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d223      	bcs.n	8002a6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fd55 	bl	80034d8 <RCC_SetFlashLatencyFromMSIRange>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e383      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a38:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a72      	ldr	r2, [pc, #456]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b70      	ldr	r3, [pc, #448]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	496d      	ldr	r1, [pc, #436]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a56:	4b6c      	ldr	r3, [pc, #432]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	4968      	ldr	r1, [pc, #416]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 8002a6a:	e025      	b.n	8002ab8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6c:	4b66      	ldr	r3, [pc, #408]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a65      	ldr	r2, [pc, #404]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a72:	f043 0308 	orr.w	r3, r3, #8
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4960      	ldr	r1, [pc, #384]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8a:	4b5f      	ldr	r3, [pc, #380]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	495b      	ldr	r1, [pc, #364]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fd15 	bl	80034d8 <RCC_SetFlashLatencyFromMSIRange>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e343      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ab8:	f000 fc4a 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b52      	ldr	r3, [pc, #328]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	4950      	ldr	r1, [pc, #320]	; (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad4:	4a4e      	ldr	r2, [pc, #312]	; (8002c10 <HAL_RCC_OscConfig+0x278>)
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ad8:	4b4e      	ldr	r3, [pc, #312]	; (8002c14 <HAL_RCC_OscConfig+0x27c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f89b 	bl	8000c18 <HAL_InitTick>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d052      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	e327      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d032      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002af8:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a42      	ldr	r2, [pc, #264]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b04:	f7fe f8d8 	bl	8000cb8 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b0c:	f7fe f8d4 	bl	8000cb8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e310      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b1e:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a36      	ldr	r2, [pc, #216]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b30:	f043 0308 	orr.w	r3, r3, #8
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4931      	ldr	r1, [pc, #196]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b48:	4b2f      	ldr	r3, [pc, #188]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	492c      	ldr	r1, [pc, #176]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
 8002b5c:	e01a      	b.n	8002b94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe f8a5 	bl	8000cb8 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b72:	f7fe f8a1 	bl	8000cb8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e2dd      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x1da>
 8002b90:	e000      	b.n	8002b94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d074      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x21a>
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d10e      	bne.n	8002bca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d10b      	bne.n	8002bca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d064      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d160      	bne.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e2ba      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x24a>
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e026      	b.n	8002c30 <HAL_RCC_OscConfig+0x298>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bea:	d115      	bne.n	8002c18 <HAL_RCC_OscConfig+0x280>
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a02      	ldr	r2, [pc, #8]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	e014      	b.n	8002c30 <HAL_RCC_OscConfig+0x298>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	080058f0 	.word	0x080058f0
 8002c10:	20000000 	.word	0x20000000
 8002c14:	20000004 	.word	0x20000004
 8002c18:	4ba0      	ldr	r3, [pc, #640]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a9f      	ldr	r2, [pc, #636]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b9d      	ldr	r3, [pc, #628]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a9c      	ldr	r2, [pc, #624]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f83e 	bl	8000cb8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe f83a 	bl	8000cb8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e276      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c52:	4b92      	ldr	r3, [pc, #584]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2a8>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe f82a 	bl	8000cb8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe f826 	bl	8000cb8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e262      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x2d0>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d060      	beq.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x310>
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d119      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d116      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca8:	4b7c      	ldr	r3, [pc, #496]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x328>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e23f      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc0:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	061b      	lsls	r3, r3, #24
 8002cce:	4973      	ldr	r1, [pc, #460]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd4:	e040      	b.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d023      	beq.n	8002d26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cde:	4b6f      	ldr	r3, [pc, #444]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6e      	ldr	r2, [pc, #440]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fd ffe5 	bl	8000cb8 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7fd ffe1 	bl	8000cb8 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e21d      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	4b65      	ldr	r3, [pc, #404]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b62      	ldr	r3, [pc, #392]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	495f      	ldr	r1, [pc, #380]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
 8002d24:	e018      	b.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5c      	ldr	r2, [pc, #368]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fd ffc1 	bl	8000cb8 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fd ffbd 	bl	8000cb8 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1f9      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d03c      	beq.n	8002dde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	4a4a      	ldr	r2, [pc, #296]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fd ff9c 	bl	8000cb8 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d84:	f7fd ff98 	bl	8000cb8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1d4      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ef      	beq.n	8002d84 <HAL_RCC_OscConfig+0x3ec>
 8002da4:	e01b      	b.n	8002dde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fd ff7f 	bl	8000cb8 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7fd ff7b 	bl	8000cb8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1b7      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd0:	4b32      	ldr	r3, [pc, #200]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ef      	bne.n	8002dbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80a6 	beq.w	8002f38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dec:	2300      	movs	r3, #0
 8002dee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10d      	bne.n	8002e18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e06:	6593      	str	r3, [r2, #88]	; 0x58
 8002e08:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e14:	2301      	movs	r3, #1
 8002e16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCC_OscConfig+0x508>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d118      	bne.n	8002e56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_OscConfig+0x508>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <HAL_RCC_OscConfig+0x508>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e30:	f7fd ff42 	bl	8000cb8 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fd ff3e 	bl	8000cb8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e17a      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_RCC_OscConfig+0x508>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_OscConfig+0x4d8>
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e6e:	e029      	b.n	8002ec4 <HAL_RCC_OscConfig+0x52c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d115      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x50c>
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_RCC_OscConfig+0x504>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e98:	e014      	b.n	8002ec4 <HAL_RCC_OscConfig+0x52c>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	4b9c      	ldr	r3, [pc, #624]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	4a9b      	ldr	r2, [pc, #620]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb4:	4b98      	ldr	r3, [pc, #608]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a97      	ldr	r2, [pc, #604]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d016      	beq.n	8002efa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fd fef4 	bl	8000cb8 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7fd fef0 	bl	8000cb8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e12a      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eea:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ed      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x53c>
 8002ef8:	e015      	b.n	8002f26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd fedd 	bl	8000cb8 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fd fed9 	bl	8000cb8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e113      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f18:	4b7f      	ldr	r3, [pc, #508]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ed      	bne.n	8002f02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2c:	4b7a      	ldr	r3, [pc, #488]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	4a79      	ldr	r2, [pc, #484]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80fe 	beq.w	800313e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	f040 80d0 	bne.w	80030ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f4c:	4b72      	ldr	r3, [pc, #456]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0203 	and.w	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d130      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d127      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d11f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f8c:	2a07      	cmp	r2, #7
 8002f8e:	bf14      	ite	ne
 8002f90:	2201      	movne	r2, #1
 8002f92:	2200      	moveq	r2, #0
 8002f94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d113      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d06e      	beq.n	80030a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d069      	beq.n	800309c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fc8:	4b53      	ldr	r3, [pc, #332]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fd4:	4b50      	ldr	r3, [pc, #320]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0ad      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fe4:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a4b      	ldr	r2, [pc, #300]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8002fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ff0:	f7fd fe62 	bl	8000cb8 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fd fe5e 	bl	8000cb8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e09a      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300a:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	4b40      	ldr	r3, [pc, #256]	; (800311c <HAL_RCC_OscConfig+0x784>)
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003026:	3a01      	subs	r2, #1
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	4311      	orrs	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003030:	0212      	lsls	r2, r2, #8
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003038:	0852      	lsrs	r2, r2, #1
 800303a:	3a01      	subs	r2, #1
 800303c:	0552      	lsls	r2, r2, #21
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003044:	0852      	lsrs	r2, r2, #1
 8003046:	3a01      	subs	r2, #1
 8003048:	0652      	lsls	r2, r2, #25
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003050:	0912      	lsrs	r2, r2, #4
 8003052:	0452      	lsls	r2, r2, #17
 8003054:	430a      	orrs	r2, r1
 8003056:	4930      	ldr	r1, [pc, #192]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8003058:	4313      	orrs	r3, r2
 800305a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800305c:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003066:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a2a      	ldr	r2, [pc, #168]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003072:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003074:	f7fd fe20 	bl	8000cb8 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fd fe1c 	bl	8000cb8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e058      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800309a:	e050      	b.n	800313e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04f      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d148      	bne.n	800313e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030c4:	f7fd fdf8 	bl	8000cb8 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fd fdf4 	bl	8000cb8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e030      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x734>
 80030ea:	e028      	b.n	800313e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d023      	beq.n	800313a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a08      	ldr	r2, [pc, #32]	; (8003118 <HAL_RCC_OscConfig+0x780>)
 80030f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fd fddb 	bl	8000cb8 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003104:	e00c      	b.n	8003120 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7fd fdd7 	bl	8000cb8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d905      	bls.n	8003120 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e013      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
 8003118:	40021000 	.word	0x40021000
 800311c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_OscConfig+0x7b0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ec      	bne.n	8003106 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCC_OscConfig+0x7b0>)
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4905      	ldr	r1, [pc, #20]	; (8003148 <HAL_RCC_OscConfig+0x7b0>)
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_OscConfig+0x7b4>)
 8003134:	4013      	ands	r3, r2
 8003136:	60cb      	str	r3, [r1, #12]
 8003138:	e001      	b.n	800313e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	feeefffc 	.word	0xfeeefffc

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0e7      	b.n	8003334 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b75      	ldr	r3, [pc, #468]	; (800333c <HAL_RCC_ClockConfig+0x1ec>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b72      	ldr	r3, [pc, #456]	; (800333c <HAL_RCC_ClockConfig+0x1ec>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	4970      	ldr	r1, [pc, #448]	; (800333c <HAL_RCC_ClockConfig+0x1ec>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b6e      	ldr	r3, [pc, #440]	; (800333c <HAL_RCC_ClockConfig+0x1ec>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0cf      	b.n	8003334 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d010      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d908      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4960      	ldr	r1, [pc, #384]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d04c      	beq.n	8003268 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d6:	4b5a      	ldr	r3, [pc, #360]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d121      	bne.n	8003226 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0a6      	b.n	8003334 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ee:	4b54      	ldr	r3, [pc, #336]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d115      	bne.n	8003226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e09a      	b.n	8003334 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003206:	4b4e      	ldr	r3, [pc, #312]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e08e      	b.n	8003334 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003216:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e086      	b.n	8003334 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003226:	4b46      	ldr	r3, [pc, #280]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 0203 	bic.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4943      	ldr	r1, [pc, #268]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003238:	f7fd fd3e 	bl	8000cb8 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	e00a      	b.n	8003256 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003240:	f7fd fd3a 	bl	8000cb8 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e06e      	b.n	8003334 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 020c 	and.w	r2, r3, #12
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	429a      	cmp	r2, r3
 8003266:	d1eb      	bne.n	8003240 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	4b31      	ldr	r3, [pc, #196]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003280:	429a      	cmp	r2, r3
 8003282:	d208      	bcs.n	8003296 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	492b      	ldr	r1, [pc, #172]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003296:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCC_ClockConfig+0x1ec>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d210      	bcs.n	80032c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_RCC_ClockConfig+0x1ec>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 0207 	bic.w	r2, r3, #7
 80032ac:	4923      	ldr	r1, [pc, #140]	; (800333c <HAL_RCC_ClockConfig+0x1ec>)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_RCC_ClockConfig+0x1ec>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e036      	b.n	8003334 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4918      	ldr	r1, [pc, #96]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4910      	ldr	r1, [pc, #64]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003304:	f000 f824 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	490b      	ldr	r1, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1f4>)
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
 8003320:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 8003322:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1fc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fc75 	bl	8000c18 <HAL_InitTick>
 800332e:	4603      	mov	r3, r0
 8003330:	72fb      	strb	r3, [r7, #11]

  return status;
 8003332:	7afb      	ldrb	r3, [r7, #11]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40022000 	.word	0x40022000
 8003340:	40021000 	.word	0x40021000
 8003344:	080058f0 	.word	0x080058f0
 8003348:	20000000 	.word	0x20000000
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335e:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003368:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x34>
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d121      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d11e      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e005      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033ac:	4a2b      	ldr	r2, [pc, #172]	; (800345c <HAL_RCC_GetSysClockFreq+0x10c>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d102      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCC_GetSysClockFreq+0x110>)
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	e004      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_RCC_GetSysClockFreq+0x114>)
 80033d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d134      	bne.n	8003448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d003      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0xac>
 80033f4:	e005      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_GetSysClockFreq+0x110>)
 80033f8:	617b      	str	r3, [r7, #20]
      break;
 80033fa:	e005      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCC_GetSysClockFreq+0x114>)
 80033fe:	617b      	str	r3, [r7, #20]
      break;
 8003400:	e002      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	617b      	str	r3, [r7, #20]
      break;
 8003406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	3301      	adds	r3, #1
 8003414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	fb03 f202 	mul.w	r2, r3, r2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	0e5b      	lsrs	r3, r3, #25
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	3301      	adds	r3, #1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003448:	69bb      	ldr	r3, [r7, #24]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	08005908 	.word	0x08005908
 8003460:	00f42400 	.word	0x00f42400
 8003464:	007a1200 	.word	0x007a1200

08003468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4904      	ldr	r1, [pc, #16]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	08005900 	.word	0x08005900

080034ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034b0:	f7ff ffda 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0adb      	lsrs	r3, r3, #11
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4904      	ldr	r1, [pc, #16]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08005900 	.word	0x08005900

080034d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034e4:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034f0:	f7ff f9ee 	bl	80028d0 <HAL_PWREx_GetVoltageRange>
 80034f4:	6178      	str	r0, [r7, #20]
 80034f6:	e014      	b.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	4a24      	ldr	r2, [pc, #144]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003502:	6593      	str	r3, [r2, #88]	; 0x58
 8003504:	4b22      	ldr	r3, [pc, #136]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003510:	f7ff f9de 	bl	80028d0 <HAL_PWREx_GetVoltageRange>
 8003514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003528:	d10b      	bne.n	8003542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d919      	bls.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2ba0      	cmp	r3, #160	; 0xa0
 8003534:	d902      	bls.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003536:	2302      	movs	r3, #2
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e013      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800353c:	2301      	movs	r3, #1
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	e010      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d902      	bls.n	800354e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003548:	2303      	movs	r3, #3
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	e00a      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d102      	bne.n	800355a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003554:	2302      	movs	r3, #2
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	e004      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b70      	cmp	r3, #112	; 0x70
 800355e:	d101      	bne.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003560:	2301      	movs	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 0207 	bic.w	r2, r3, #7
 800356c:	4909      	ldr	r1, [pc, #36]	; (8003594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	40022000 	.word	0x40022000

08003598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a0:	2300      	movs	r3, #0
 80035a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a4:	2300      	movs	r3, #0
 80035a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d041      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035bc:	d02a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035c2:	d824      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035c8:	d008      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ce:	d81e      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d8:	d010      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035da:	e018      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035dc:	4b86      	ldr	r3, [pc, #536]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a85      	ldr	r2, [pc, #532]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e8:	e015      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fabb 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035fa:	e00c      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3320      	adds	r3, #32
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fba6 	bl	8003d54 <RCCEx_PLLSAI2_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	74fb      	strb	r3, [r7, #19]
      break;
 8003612:	e000      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800361c:	4b76      	ldr	r3, [pc, #472]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362a:	4973      	ldr	r1, [pc, #460]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003632:	e001      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d041      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800364c:	d02a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800364e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003652:	d824      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003658:	d008      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800365a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800365e:	d81e      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003668:	d010      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800366a:	e018      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800366c:	4b62      	ldr	r3, [pc, #392]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a61      	ldr	r2, [pc, #388]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003678:	e015      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa73 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800368a:	e00c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3320      	adds	r3, #32
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fb5e 	bl	8003d54 <RCCEx_PLLSAI2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	74fb      	strb	r3, [r7, #19]
      break;
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ac:	4b52      	ldr	r3, [pc, #328]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ba:	494f      	ldr	r1, [pc, #316]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036c2:	e001      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a0 	beq.w	8003816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	4a40      	ldr	r2, [pc, #256]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fa:	6593      	str	r3, [r2, #88]	; 0x58
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003708:	2301      	movs	r3, #1
 800370a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3a      	ldr	r2, [pc, #232]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003718:	f7fd face 	bl	8000cb8 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800371e:	e009      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003720:	f7fd faca 	bl	8000cb8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	74fb      	strb	r3, [r7, #19]
        break;
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d15c      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01f      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	d019      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fd fa89 	bl	8000cb8 <HAL_GetTick>
 80037a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a8:	e00b      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fd fa85 	bl	8000cb8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	74fb      	strb	r3, [r7, #19]
            break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ec      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e6:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ee:	e009      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003804:	7c7b      	ldrb	r3, [r7, #17]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b9e      	ldr	r3, [pc, #632]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	4a9d      	ldr	r2, [pc, #628]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003822:	4b98      	ldr	r3, [pc, #608]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f023 0203 	bic.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	4994      	ldr	r1, [pc, #592]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003844:	4b8f      	ldr	r3, [pc, #572]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f023 020c 	bic.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	498c      	ldr	r1, [pc, #560]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003866:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	4983      	ldr	r1, [pc, #524]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	497b      	ldr	r1, [pc, #492]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	4972      	ldr	r1, [pc, #456]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038cc:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	496a      	ldr	r1, [pc, #424]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ee:	4b65      	ldr	r3, [pc, #404]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	4961      	ldr	r1, [pc, #388]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003910:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391e:	4959      	ldr	r1, [pc, #356]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003932:	4b54      	ldr	r3, [pc, #336]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	4950      	ldr	r1, [pc, #320]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003954:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	4948      	ldr	r1, [pc, #288]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	493f      	ldr	r1, [pc, #252]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d028      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003998:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a6:	4937      	ldr	r1, [pc, #220]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	e011      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ce:	d10c      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f8c8 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d028      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	491f      	ldr	r1, [pc, #124]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a14:	d106      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a20:	60d3      	str	r3, [r2, #12]
 8003a22:	e011      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f899 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02b      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a62:	4908      	ldr	r1, [pc, #32]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a72:	d109      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a02      	ldr	r2, [pc, #8]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7e:	60d3      	str	r3, [r2, #12]
 8003a80:	e014      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a90:	d10c      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f867 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac6:	4928      	ldr	r1, [pc, #160]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2102      	movs	r1, #2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f844 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d014      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	74bb      	strb	r3, [r7, #18]
 8003af2:	e011      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3320      	adds	r3, #32
 8003b02:	2102      	movs	r1, #2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f925 	bl	8003d54 <RCCEx_PLLSAI2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b32:	490d      	ldr	r1, [pc, #52]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021000 	.word	0x40021000

08003b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b7a:	4b75      	ldr	r3, [pc, #468]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d018      	beq.n	8003bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b86:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0203 	and.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d10d      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
       ||
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b9e:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
       ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d047      	beq.n	8003c42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
 8003bb6:	e044      	b.n	8003c42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d018      	beq.n	8003bf2 <RCCEx_PLLSAI1_Config+0x86>
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d825      	bhi.n	8003c10 <RCCEx_PLLSAI1_Config+0xa4>
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d002      	beq.n	8003bce <RCCEx_PLLSAI1_Config+0x62>
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d009      	beq.n	8003be0 <RCCEx_PLLSAI1_Config+0x74>
 8003bcc:	e020      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bce:	4b60      	ldr	r3, [pc, #384]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11d      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bde:	e01a      	b.n	8003c16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003be0:	4b5b      	ldr	r3, [pc, #364]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d116      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf0:	e013      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bf2:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10f      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bfe:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c0e:	e006      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      break;
 8003c14:	e004      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c16:	bf00      	nop
 8003c18:	e002      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e000      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	4944      	ldr	r1, [pc, #272]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d17d      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c48:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a40      	ldr	r2, [pc, #256]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fd f830 	bl	8000cb8 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c5a:	e009      	b.n	8003c70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c5c:	f7fd f82c 	bl	8000cb8 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d902      	bls.n	8003c70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c6e:	e005      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c70:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ef      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d160      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d111      	bne.n	8003cac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c88:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6892      	ldr	r2, [r2, #8]
 8003c98:	0211      	lsls	r1, r2, #8
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	0912      	lsrs	r2, r2, #4
 8003ca0:	0452      	lsls	r2, r2, #17
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	492a      	ldr	r1, [pc, #168]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	610b      	str	r3, [r1, #16]
 8003caa:	e027      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d112      	bne.n	8003cd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb2:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6892      	ldr	r2, [r2, #8]
 8003cc2:	0211      	lsls	r1, r2, #8
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6912      	ldr	r2, [r2, #16]
 8003cc8:	0852      	lsrs	r2, r2, #1
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	0552      	lsls	r2, r2, #21
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	491f      	ldr	r1, [pc, #124]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	610b      	str	r3, [r1, #16]
 8003cd6:	e011      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6892      	ldr	r2, [r2, #8]
 8003ce8:	0211      	lsls	r1, r2, #8
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6952      	ldr	r2, [r2, #20]
 8003cee:	0852      	lsrs	r2, r2, #1
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	0652      	lsls	r2, r2, #25
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	4916      	ldr	r1, [pc, #88]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fc ffd6 	bl	8000cb8 <HAL_GetTick>
 8003d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d0e:	e009      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d10:	f7fc ffd2 	bl	8000cb8 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d902      	bls.n	8003d24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	73fb      	strb	r3, [r7, #15]
          break;
 8003d22:	e005      	b.n	8003d30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ef      	beq.n	8003d10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	4904      	ldr	r1, [pc, #16]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000

08003d54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d62:	4b6a      	ldr	r3, [pc, #424]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d018      	beq.n	8003da0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d6e:	4b67      	ldr	r3, [pc, #412]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d10d      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
       ||
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d86:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
       ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d047      	beq.n	8003e2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
 8003d9e:	e044      	b.n	8003e2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d018      	beq.n	8003dda <RCCEx_PLLSAI2_Config+0x86>
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d825      	bhi.n	8003df8 <RCCEx_PLLSAI2_Config+0xa4>
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d002      	beq.n	8003db6 <RCCEx_PLLSAI2_Config+0x62>
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d009      	beq.n	8003dc8 <RCCEx_PLLSAI2_Config+0x74>
 8003db4:	e020      	b.n	8003df8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003db6:	4b55      	ldr	r3, [pc, #340]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11d      	bne.n	8003dfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc6:	e01a      	b.n	8003dfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d116      	bne.n	8003e02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd8:	e013      	b.n	8003e02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dda:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003de6:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003df6:	e006      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	e004      	b.n	8003e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	430b      	orrs	r3, r1
 8003e24:	4939      	ldr	r1, [pc, #228]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d167      	bne.n	8003f00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a35      	ldr	r2, [pc, #212]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fc ff3c 	bl	8000cb8 <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e44:	f7fc ff38 	bl	8000cb8 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
        break;
 8003e56:	e005      	b.n	8003e64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e58:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ef      	bne.n	8003e44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d14a      	bne.n	8003f00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d111      	bne.n	8003e94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e70:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68d2      	ldr	r2, [r2, #12]
 8003e86:	0912      	lsrs	r2, r2, #4
 8003e88:	0452      	lsls	r2, r2, #17
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	491f      	ldr	r1, [pc, #124]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	614b      	str	r3, [r1, #20]
 8003e92:	e011      	b.n	8003eb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6892      	ldr	r2, [r2, #8]
 8003ea4:	0211      	lsls	r1, r2, #8
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6912      	ldr	r2, [r2, #16]
 8003eaa:	0852      	lsrs	r2, r2, #1
 8003eac:	3a01      	subs	r2, #1
 8003eae:	0652      	lsls	r2, r2, #25
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	4916      	ldr	r1, [pc, #88]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003eb8:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fc fef8 	bl	8000cb8 <HAL_GetTick>
 8003ec8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eca:	e009      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ecc:	f7fc fef4 	bl	8000cb8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d902      	bls.n	8003ee0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	73fb      	strb	r3, [r7, #15]
          break;
 8003ede:	e005      	b.n	8003eec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ef      	beq.n	8003ecc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4904      	ldr	r1, [pc, #16]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000

08003f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e040      	b.n	8003fa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fc fcf2 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fb6a 	bl	8004630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f8af 	bl	80040c0 <UART_SetConfig>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e01b      	b.n	8003fa4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fbe9 	bl	8004774 <UART_CheckIdleState>
 8003fa2:	4603      	mov	r3, r0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d178      	bne.n	80040b6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Transmit+0x24>
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e071      	b.n	80040b8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2221      	movs	r2, #33	; 0x21
 8003fe0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe2:	f7fc fe69 	bl	8000cb8 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d108      	bne.n	8004014 <HAL_UART_Transmit+0x68>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e003      	b.n	800401c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800401c:	e030      	b.n	8004080 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fc4b 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e03c      	b.n	80040b8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	881a      	ldrh	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004050:	b292      	uxth	r2, r2
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	3302      	adds	r3, #2
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e008      	b.n	800406e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b292      	uxth	r2, r2
 8004066:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1c8      	bne.n	800401e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2200      	movs	r2, #0
 8004094:	2140      	movs	r1, #64	; 0x40
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fc14 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d004      	beq.n	80040ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e005      	b.n	80040b8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c4:	b08a      	sub	sp, #40	; 0x28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	431a      	orrs	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4ba4      	ldr	r3, [pc, #656]	; (8004380 <UART_SetConfig+0x2c0>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a99      	ldr	r2, [pc, #612]	; (8004384 <UART_SetConfig+0x2c4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	4313      	orrs	r3, r2
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	430a      	orrs	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a90      	ldr	r2, [pc, #576]	; (8004388 <UART_SetConfig+0x2c8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d126      	bne.n	8004198 <UART_SetConfig+0xd8>
 800414a:	4b90      	ldr	r3, [pc, #576]	; (800438c <UART_SetConfig+0x2cc>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b03      	cmp	r3, #3
 8004156:	d81b      	bhi.n	8004190 <UART_SetConfig+0xd0>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0xa0>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004171 	.word	0x08004171
 8004164:	08004181 	.word	0x08004181
 8004168:	08004179 	.word	0x08004179
 800416c:	08004189 	.word	0x08004189
 8004170:	2301      	movs	r3, #1
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e116      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004178:	2302      	movs	r3, #2
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417e:	e112      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004186:	e10e      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418e:	e10a      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e106      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a7c      	ldr	r2, [pc, #496]	; (8004390 <UART_SetConfig+0x2d0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d138      	bne.n	8004214 <UART_SetConfig+0x154>
 80041a2:	4b7a      	ldr	r3, [pc, #488]	; (800438c <UART_SetConfig+0x2cc>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d82d      	bhi.n	800420c <UART_SetConfig+0x14c>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0xf8>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	0800420d 	.word	0x0800420d
 80041c0:	0800420d 	.word	0x0800420d
 80041c4:	0800420d 	.word	0x0800420d
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	0800420d 	.word	0x0800420d
 80041d0:	0800420d 	.word	0x0800420d
 80041d4:	0800420d 	.word	0x0800420d
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	0800420d 	.word	0x0800420d
 80041e0:	0800420d 	.word	0x0800420d
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004205 	.word	0x08004205
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e0d8      	b.n	80043a6 <UART_SetConfig+0x2e6>
 80041f4:	2302      	movs	r3, #2
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e0d4      	b.n	80043a6 <UART_SetConfig+0x2e6>
 80041fc:	2304      	movs	r3, #4
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e0d0      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004204:	2308      	movs	r3, #8
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e0cc      	b.n	80043a6 <UART_SetConfig+0x2e6>
 800420c:	2310      	movs	r3, #16
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e0c8      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a5e      	ldr	r2, [pc, #376]	; (8004394 <UART_SetConfig+0x2d4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d125      	bne.n	800426a <UART_SetConfig+0x1aa>
 800421e:	4b5b      	ldr	r3, [pc, #364]	; (800438c <UART_SetConfig+0x2cc>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004228:	2b30      	cmp	r3, #48	; 0x30
 800422a:	d016      	beq.n	800425a <UART_SetConfig+0x19a>
 800422c:	2b30      	cmp	r3, #48	; 0x30
 800422e:	d818      	bhi.n	8004262 <UART_SetConfig+0x1a2>
 8004230:	2b20      	cmp	r3, #32
 8004232:	d00a      	beq.n	800424a <UART_SetConfig+0x18a>
 8004234:	2b20      	cmp	r3, #32
 8004236:	d814      	bhi.n	8004262 <UART_SetConfig+0x1a2>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <UART_SetConfig+0x182>
 800423c:	2b10      	cmp	r3, #16
 800423e:	d008      	beq.n	8004252 <UART_SetConfig+0x192>
 8004240:	e00f      	b.n	8004262 <UART_SetConfig+0x1a2>
 8004242:	2300      	movs	r3, #0
 8004244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004248:	e0ad      	b.n	80043a6 <UART_SetConfig+0x2e6>
 800424a:	2302      	movs	r3, #2
 800424c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004250:	e0a9      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004252:	2304      	movs	r3, #4
 8004254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004258:	e0a5      	b.n	80043a6 <UART_SetConfig+0x2e6>
 800425a:	2308      	movs	r3, #8
 800425c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004260:	e0a1      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004262:	2310      	movs	r3, #16
 8004264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004268:	e09d      	b.n	80043a6 <UART_SetConfig+0x2e6>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a4a      	ldr	r2, [pc, #296]	; (8004398 <UART_SetConfig+0x2d8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d125      	bne.n	80042c0 <UART_SetConfig+0x200>
 8004274:	4b45      	ldr	r3, [pc, #276]	; (800438c <UART_SetConfig+0x2cc>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800427e:	2bc0      	cmp	r3, #192	; 0xc0
 8004280:	d016      	beq.n	80042b0 <UART_SetConfig+0x1f0>
 8004282:	2bc0      	cmp	r3, #192	; 0xc0
 8004284:	d818      	bhi.n	80042b8 <UART_SetConfig+0x1f8>
 8004286:	2b80      	cmp	r3, #128	; 0x80
 8004288:	d00a      	beq.n	80042a0 <UART_SetConfig+0x1e0>
 800428a:	2b80      	cmp	r3, #128	; 0x80
 800428c:	d814      	bhi.n	80042b8 <UART_SetConfig+0x1f8>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <UART_SetConfig+0x1d8>
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d008      	beq.n	80042a8 <UART_SetConfig+0x1e8>
 8004296:	e00f      	b.n	80042b8 <UART_SetConfig+0x1f8>
 8004298:	2300      	movs	r3, #0
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e082      	b.n	80043a6 <UART_SetConfig+0x2e6>
 80042a0:	2302      	movs	r3, #2
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e07e      	b.n	80043a6 <UART_SetConfig+0x2e6>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e07a      	b.n	80043a6 <UART_SetConfig+0x2e6>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e076      	b.n	80043a6 <UART_SetConfig+0x2e6>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e072      	b.n	80043a6 <UART_SetConfig+0x2e6>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a35      	ldr	r2, [pc, #212]	; (800439c <UART_SetConfig+0x2dc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d12a      	bne.n	8004320 <UART_SetConfig+0x260>
 80042ca:	4b30      	ldr	r3, [pc, #192]	; (800438c <UART_SetConfig+0x2cc>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d8:	d01a      	beq.n	8004310 <UART_SetConfig+0x250>
 80042da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042de:	d81b      	bhi.n	8004318 <UART_SetConfig+0x258>
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d00c      	beq.n	8004300 <UART_SetConfig+0x240>
 80042e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ea:	d815      	bhi.n	8004318 <UART_SetConfig+0x258>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <UART_SetConfig+0x238>
 80042f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f4:	d008      	beq.n	8004308 <UART_SetConfig+0x248>
 80042f6:	e00f      	b.n	8004318 <UART_SetConfig+0x258>
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e052      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004300:	2302      	movs	r3, #2
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e04e      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004308:	2304      	movs	r3, #4
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e04a      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004310:	2308      	movs	r3, #8
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e046      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004318:	2310      	movs	r3, #16
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e042      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <UART_SetConfig+0x2c4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d13a      	bne.n	80043a0 <UART_SetConfig+0x2e0>
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <UART_SetConfig+0x2cc>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004338:	d01a      	beq.n	8004370 <UART_SetConfig+0x2b0>
 800433a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800433e:	d81b      	bhi.n	8004378 <UART_SetConfig+0x2b8>
 8004340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004344:	d00c      	beq.n	8004360 <UART_SetConfig+0x2a0>
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434a:	d815      	bhi.n	8004378 <UART_SetConfig+0x2b8>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <UART_SetConfig+0x298>
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004354:	d008      	beq.n	8004368 <UART_SetConfig+0x2a8>
 8004356:	e00f      	b.n	8004378 <UART_SetConfig+0x2b8>
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e022      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004360:	2302      	movs	r3, #2
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e01e      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004368:	2304      	movs	r3, #4
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e01a      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004370:	2308      	movs	r3, #8
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	e016      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004378:	2310      	movs	r3, #16
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e012      	b.n	80043a6 <UART_SetConfig+0x2e6>
 8004380:	efff69f3 	.word	0xefff69f3
 8004384:	40008000 	.word	0x40008000
 8004388:	40013800 	.word	0x40013800
 800438c:	40021000 	.word	0x40021000
 8004390:	40004400 	.word	0x40004400
 8004394:	40004800 	.word	0x40004800
 8004398:	40004c00 	.word	0x40004c00
 800439c:	40005000 	.word	0x40005000
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a9f      	ldr	r2, [pc, #636]	; (8004628 <UART_SetConfig+0x568>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d17a      	bne.n	80044a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d824      	bhi.n	8004402 <UART_SetConfig+0x342>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x300>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	08004403 	.word	0x08004403
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	08004403 	.word	0x08004403
 80043d0:	080043f3 	.word	0x080043f3
 80043d4:	08004403 	.word	0x08004403
 80043d8:	08004403 	.word	0x08004403
 80043dc:	08004403 	.word	0x08004403
 80043e0:	080043fb 	.word	0x080043fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7ff f84c 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 80043e8:	61f8      	str	r0, [r7, #28]
        break;
 80043ea:	e010      	b.n	800440e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ec:	4b8f      	ldr	r3, [pc, #572]	; (800462c <UART_SetConfig+0x56c>)
 80043ee:	61fb      	str	r3, [r7, #28]
        break;
 80043f0:	e00d      	b.n	800440e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f2:	f7fe ffad 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 80043f6:	61f8      	str	r0, [r7, #28]
        break;
 80043f8:	e009      	b.n	800440e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fe:	61fb      	str	r3, [r7, #28]
        break;
 8004400:	e005      	b.n	800440e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800440c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80fb 	beq.w	800460c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	429a      	cmp	r2, r3
 8004424:	d305      	bcc.n	8004432 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	429a      	cmp	r2, r3
 8004430:	d903      	bls.n	800443a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004438:	e0e8      	b.n	800460c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2200      	movs	r2, #0
 800443e:	461c      	mov	r4, r3
 8004440:	4615      	mov	r5, r2
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	022b      	lsls	r3, r5, #8
 800444c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004450:	0222      	lsls	r2, r4, #8
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	6849      	ldr	r1, [r1, #4]
 8004456:	0849      	lsrs	r1, r1, #1
 8004458:	2000      	movs	r0, #0
 800445a:	4688      	mov	r8, r1
 800445c:	4681      	mov	r9, r0
 800445e:	eb12 0a08 	adds.w	sl, r2, r8
 8004462:	eb43 0b09 	adc.w	fp, r3, r9
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004474:	4650      	mov	r0, sl
 8004476:	4659      	mov	r1, fp
 8004478:	f7fb fefa 	bl	8000270 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4613      	mov	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448a:	d308      	bcc.n	800449e <UART_SetConfig+0x3de>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004492:	d204      	bcs.n	800449e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	60da      	str	r2, [r3, #12]
 800449c:	e0b6      	b.n	800460c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044a4:	e0b2      	b.n	800460c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ae:	d15e      	bne.n	800456e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d828      	bhi.n	800450a <UART_SetConfig+0x44a>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0x400>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	0800450b 	.word	0x0800450b
 80044d0:	080044fb 	.word	0x080044fb
 80044d4:	0800450b 	.word	0x0800450b
 80044d8:	0800450b 	.word	0x0800450b
 80044dc:	0800450b 	.word	0x0800450b
 80044e0:	08004503 	.word	0x08004503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e4:	f7fe ffcc 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 80044e8:	61f8      	str	r0, [r7, #28]
        break;
 80044ea:	e014      	b.n	8004516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ec:	f7fe ffde 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 80044f0:	61f8      	str	r0, [r7, #28]
        break;
 80044f2:	e010      	b.n	8004516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f4:	4b4d      	ldr	r3, [pc, #308]	; (800462c <UART_SetConfig+0x56c>)
 80044f6:	61fb      	str	r3, [r7, #28]
        break;
 80044f8:	e00d      	b.n	8004516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fa:	f7fe ff29 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 80044fe:	61f8      	str	r0, [r7, #28]
        break;
 8004500:	e009      	b.n	8004516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004506:	61fb      	str	r3, [r7, #28]
        break;
 8004508:	e005      	b.n	8004516 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004514:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d077      	beq.n	800460c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	005a      	lsls	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	441a      	add	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b0f      	cmp	r3, #15
 8004536:	d916      	bls.n	8004566 <UART_SetConfig+0x4a6>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453e:	d212      	bcs.n	8004566 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f023 030f 	bic.w	r3, r3, #15
 8004548:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	b29b      	uxth	r3, r3
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	b29a      	uxth	r2, r3
 8004556:	8afb      	ldrh	r3, [r7, #22]
 8004558:	4313      	orrs	r3, r2
 800455a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	8afa      	ldrh	r2, [r7, #22]
 8004562:	60da      	str	r2, [r3, #12]
 8004564:	e052      	b.n	800460c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800456c:	e04e      	b.n	800460c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800456e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004572:	2b08      	cmp	r3, #8
 8004574:	d827      	bhi.n	80045c6 <UART_SetConfig+0x506>
 8004576:	a201      	add	r2, pc, #4	; (adr r2, 800457c <UART_SetConfig+0x4bc>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045a9 	.word	0x080045a9
 8004584:	080045b1 	.word	0x080045b1
 8004588:	080045c7 	.word	0x080045c7
 800458c:	080045b7 	.word	0x080045b7
 8004590:	080045c7 	.word	0x080045c7
 8004594:	080045c7 	.word	0x080045c7
 8004598:	080045c7 	.word	0x080045c7
 800459c:	080045bf 	.word	0x080045bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a0:	f7fe ff6e 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 80045a4:	61f8      	str	r0, [r7, #28]
        break;
 80045a6:	e014      	b.n	80045d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a8:	f7fe ff80 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 80045ac:	61f8      	str	r0, [r7, #28]
        break;
 80045ae:	e010      	b.n	80045d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b0:	4b1e      	ldr	r3, [pc, #120]	; (800462c <UART_SetConfig+0x56c>)
 80045b2:	61fb      	str	r3, [r7, #28]
        break;
 80045b4:	e00d      	b.n	80045d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b6:	f7fe fecb 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 80045ba:	61f8      	str	r0, [r7, #28]
        break;
 80045bc:	e009      	b.n	80045d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c2:	61fb      	str	r3, [r7, #28]
        break;
 80045c4:	e005      	b.n	80045d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045d0:	bf00      	nop
    }

    if (pclk != 0U)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d019      	beq.n	800460c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	085a      	lsrs	r2, r3, #1
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	441a      	add	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b0f      	cmp	r3, #15
 80045f0:	d909      	bls.n	8004606 <UART_SetConfig+0x546>
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f8:	d205      	bcs.n	8004606 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	e002      	b.n	800460c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004618:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004626:	bf00      	nop
 8004628:	40008000 	.word	0x40008000
 800462c:	00f42400 	.word	0x00f42400

08004630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01a      	beq.n	8004746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800472e:	d10a      	bne.n	8004746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b098      	sub	sp, #96	; 0x60
 8004778:	af02      	add	r7, sp, #8
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004784:	f7fc fa98 	bl	8000cb8 <HAL_GetTick>
 8004788:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b08      	cmp	r3, #8
 8004796:	d12e      	bne.n	80047f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a0:	2200      	movs	r2, #0
 80047a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f88c 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d021      	beq.n	80047f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d0:	647b      	str	r3, [r7, #68]	; 0x44
 80047d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e6      	bne.n	80047b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e062      	b.n	80048bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b04      	cmp	r3, #4
 8004802:	d149      	bne.n	8004898 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480c:	2200      	movs	r2, #0
 800480e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f856 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d03c      	beq.n	8004898 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	623b      	str	r3, [r7, #32]
   return(result);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
 800483e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e6      	bne.n	800481e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004870:	61fa      	str	r2, [r7, #28]
 8004872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	69b9      	ldr	r1, [r7, #24]
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	617b      	str	r3, [r7, #20]
   return(result);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e5      	bne.n	8004850 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e011      	b.n	80048bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3758      	adds	r7, #88	; 0x58
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d4:	e049      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d045      	beq.n	800496a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fc f9eb 	bl	8000cb8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e048      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d031      	beq.n	800496a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d110      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2208      	movs	r2, #8
 800491a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f838 	bl	8004992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2208      	movs	r2, #8
 8004926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e029      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d111      	bne.n	800496a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f81e 	bl	8004992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e00f      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	429a      	cmp	r2, r3
 8004978:	bf0c      	ite	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	2300      	movne	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	429a      	cmp	r2, r3
 8004986:	d0a6      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004992:	b480      	push	{r7}
 8004994:	b095      	sub	sp, #84	; 0x54
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3308      	adds	r3, #8
 80049d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	61fb      	str	r3, [r7, #28]
   return(result);
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d118      	bne.n	8004a3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f023 0310 	bic.w	r3, r3, #16
 8004a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6979      	ldr	r1, [r7, #20]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	613b      	str	r3, [r7, #16]
   return(result);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e6      	bne.n	8004a08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a4e:	bf00      	nop
 8004a50:	3754      	adds	r7, #84	; 0x54
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <std>:
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	b510      	push	{r4, lr}
 8004a60:	4604      	mov	r4, r0
 8004a62:	e9c0 3300 	strd	r3, r3, [r0]
 8004a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a6a:	6083      	str	r3, [r0, #8]
 8004a6c:	8181      	strh	r1, [r0, #12]
 8004a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a70:	81c2      	strh	r2, [r0, #14]
 8004a72:	6183      	str	r3, [r0, #24]
 8004a74:	4619      	mov	r1, r3
 8004a76:	2208      	movs	r2, #8
 8004a78:	305c      	adds	r0, #92	; 0x5c
 8004a7a:	f000 f906 	bl	8004c8a <memset>
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <std+0x58>)
 8004a80:	6263      	str	r3, [r4, #36]	; 0x24
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <std+0x5c>)
 8004a84:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <std+0x60>)
 8004a88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <std+0x64>)
 8004a8c:	6323      	str	r3, [r4, #48]	; 0x30
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <std+0x68>)
 8004a90:	6224      	str	r4, [r4, #32]
 8004a92:	429c      	cmp	r4, r3
 8004a94:	d006      	beq.n	8004aa4 <std+0x48>
 8004a96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004a9a:	4294      	cmp	r4, r2
 8004a9c:	d002      	beq.n	8004aa4 <std+0x48>
 8004a9e:	33d0      	adds	r3, #208	; 0xd0
 8004aa0:	429c      	cmp	r4, r3
 8004aa2:	d105      	bne.n	8004ab0 <std+0x54>
 8004aa4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aac:	f000 b966 	b.w	8004d7c <__retarget_lock_init_recursive>
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	bf00      	nop
 8004ab4:	08004c05 	.word	0x08004c05
 8004ab8:	08004c27 	.word	0x08004c27
 8004abc:	08004c5f 	.word	0x08004c5f
 8004ac0:	08004c83 	.word	0x08004c83
 8004ac4:	20000178 	.word	0x20000178

08004ac8 <stdio_exit_handler>:
 8004ac8:	4a02      	ldr	r2, [pc, #8]	; (8004ad4 <stdio_exit_handler+0xc>)
 8004aca:	4903      	ldr	r1, [pc, #12]	; (8004ad8 <stdio_exit_handler+0x10>)
 8004acc:	4803      	ldr	r0, [pc, #12]	; (8004adc <stdio_exit_handler+0x14>)
 8004ace:	f000 b869 	b.w	8004ba4 <_fwalk_sglue>
 8004ad2:	bf00      	nop
 8004ad4:	2000000c 	.word	0x2000000c
 8004ad8:	08005629 	.word	0x08005629
 8004adc:	20000018 	.word	0x20000018

08004ae0 <cleanup_stdio>:
 8004ae0:	6841      	ldr	r1, [r0, #4]
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <cleanup_stdio+0x34>)
 8004ae4:	4299      	cmp	r1, r3
 8004ae6:	b510      	push	{r4, lr}
 8004ae8:	4604      	mov	r4, r0
 8004aea:	d001      	beq.n	8004af0 <cleanup_stdio+0x10>
 8004aec:	f000 fd9c 	bl	8005628 <_fflush_r>
 8004af0:	68a1      	ldr	r1, [r4, #8]
 8004af2:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <cleanup_stdio+0x38>)
 8004af4:	4299      	cmp	r1, r3
 8004af6:	d002      	beq.n	8004afe <cleanup_stdio+0x1e>
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 fd95 	bl	8005628 <_fflush_r>
 8004afe:	68e1      	ldr	r1, [r4, #12]
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <cleanup_stdio+0x3c>)
 8004b02:	4299      	cmp	r1, r3
 8004b04:	d004      	beq.n	8004b10 <cleanup_stdio+0x30>
 8004b06:	4620      	mov	r0, r4
 8004b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b0c:	f000 bd8c 	b.w	8005628 <_fflush_r>
 8004b10:	bd10      	pop	{r4, pc}
 8004b12:	bf00      	nop
 8004b14:	20000178 	.word	0x20000178
 8004b18:	200001e0 	.word	0x200001e0
 8004b1c:	20000248 	.word	0x20000248

08004b20 <global_stdio_init.part.0>:
 8004b20:	b510      	push	{r4, lr}
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <global_stdio_init.part.0+0x30>)
 8004b24:	4c0b      	ldr	r4, [pc, #44]	; (8004b54 <global_stdio_init.part.0+0x34>)
 8004b26:	4a0c      	ldr	r2, [pc, #48]	; (8004b58 <global_stdio_init.part.0+0x38>)
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2104      	movs	r1, #4
 8004b30:	f7ff ff94 	bl	8004a5c <std>
 8004b34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b38:	2201      	movs	r2, #1
 8004b3a:	2109      	movs	r1, #9
 8004b3c:	f7ff ff8e 	bl	8004a5c <std>
 8004b40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b44:	2202      	movs	r2, #2
 8004b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b4a:	2112      	movs	r1, #18
 8004b4c:	f7ff bf86 	b.w	8004a5c <std>
 8004b50:	200002b0 	.word	0x200002b0
 8004b54:	20000178 	.word	0x20000178
 8004b58:	08004ac9 	.word	0x08004ac9

08004b5c <__sfp_lock_acquire>:
 8004b5c:	4801      	ldr	r0, [pc, #4]	; (8004b64 <__sfp_lock_acquire+0x8>)
 8004b5e:	f000 b90e 	b.w	8004d7e <__retarget_lock_acquire_recursive>
 8004b62:	bf00      	nop
 8004b64:	200002b9 	.word	0x200002b9

08004b68 <__sfp_lock_release>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__sfp_lock_release+0x8>)
 8004b6a:	f000 b909 	b.w	8004d80 <__retarget_lock_release_recursive>
 8004b6e:	bf00      	nop
 8004b70:	200002b9 	.word	0x200002b9

08004b74 <__sinit>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	4604      	mov	r4, r0
 8004b78:	f7ff fff0 	bl	8004b5c <__sfp_lock_acquire>
 8004b7c:	6a23      	ldr	r3, [r4, #32]
 8004b7e:	b11b      	cbz	r3, 8004b88 <__sinit+0x14>
 8004b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b84:	f7ff bff0 	b.w	8004b68 <__sfp_lock_release>
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <__sinit+0x28>)
 8004b8a:	6223      	str	r3, [r4, #32]
 8004b8c:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <__sinit+0x2c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f5      	bne.n	8004b80 <__sinit+0xc>
 8004b94:	f7ff ffc4 	bl	8004b20 <global_stdio_init.part.0>
 8004b98:	e7f2      	b.n	8004b80 <__sinit+0xc>
 8004b9a:	bf00      	nop
 8004b9c:	08004ae1 	.word	0x08004ae1
 8004ba0:	200002b0 	.word	0x200002b0

08004ba4 <_fwalk_sglue>:
 8004ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba8:	4607      	mov	r7, r0
 8004baa:	4688      	mov	r8, r1
 8004bac:	4614      	mov	r4, r2
 8004bae:	2600      	movs	r6, #0
 8004bb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bb4:	f1b9 0901 	subs.w	r9, r9, #1
 8004bb8:	d505      	bpl.n	8004bc6 <_fwalk_sglue+0x22>
 8004bba:	6824      	ldr	r4, [r4, #0]
 8004bbc:	2c00      	cmp	r4, #0
 8004bbe:	d1f7      	bne.n	8004bb0 <_fwalk_sglue+0xc>
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bc6:	89ab      	ldrh	r3, [r5, #12]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d907      	bls.n	8004bdc <_fwalk_sglue+0x38>
 8004bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	d003      	beq.n	8004bdc <_fwalk_sglue+0x38>
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	4306      	orrs	r6, r0
 8004bdc:	3568      	adds	r5, #104	; 0x68
 8004bde:	e7e9      	b.n	8004bb4 <_fwalk_sglue+0x10>

08004be0 <iprintf>:
 8004be0:	b40f      	push	{r0, r1, r2, r3}
 8004be2:	b507      	push	{r0, r1, r2, lr}
 8004be4:	4906      	ldr	r1, [pc, #24]	; (8004c00 <iprintf+0x20>)
 8004be6:	ab04      	add	r3, sp, #16
 8004be8:	6808      	ldr	r0, [r1, #0]
 8004bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bee:	6881      	ldr	r1, [r0, #8]
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	f000 f9e9 	bl	8004fc8 <_vfiprintf_r>
 8004bf6:	b003      	add	sp, #12
 8004bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bfc:	b004      	add	sp, #16
 8004bfe:	4770      	bx	lr
 8004c00:	20000064 	.word	0x20000064

08004c04 <__sread>:
 8004c04:	b510      	push	{r4, lr}
 8004c06:	460c      	mov	r4, r1
 8004c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0c:	f000 f868 	bl	8004ce0 <_read_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	bfab      	itete	ge
 8004c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c16:	89a3      	ldrhlt	r3, [r4, #12]
 8004c18:	181b      	addge	r3, r3, r0
 8004c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c1e:	bfac      	ite	ge
 8004c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c22:	81a3      	strhlt	r3, [r4, #12]
 8004c24:	bd10      	pop	{r4, pc}

08004c26 <__swrite>:
 8004c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	898b      	ldrh	r3, [r1, #12]
 8004c2e:	05db      	lsls	r3, r3, #23
 8004c30:	4605      	mov	r5, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	4616      	mov	r6, r2
 8004c36:	d505      	bpl.n	8004c44 <__swrite+0x1e>
 8004c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f000 f83c 	bl	8004cbc <_lseek_r>
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	4632      	mov	r2, r6
 8004c52:	463b      	mov	r3, r7
 8004c54:	4628      	mov	r0, r5
 8004c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5a:	f000 b853 	b.w	8004d04 <_write_r>

08004c5e <__sseek>:
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	460c      	mov	r4, r1
 8004c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c66:	f000 f829 	bl	8004cbc <_lseek_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	bf15      	itete	ne
 8004c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c7a:	81a3      	strheq	r3, [r4, #12]
 8004c7c:	bf18      	it	ne
 8004c7e:	81a3      	strhne	r3, [r4, #12]
 8004c80:	bd10      	pop	{r4, pc}

08004c82 <__sclose>:
 8004c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c86:	f000 b809 	b.w	8004c9c <_close_r>

08004c8a <memset>:
 8004c8a:	4402      	add	r2, r0
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d100      	bne.n	8004c94 <memset+0xa>
 8004c92:	4770      	bx	lr
 8004c94:	f803 1b01 	strb.w	r1, [r3], #1
 8004c98:	e7f9      	b.n	8004c8e <memset+0x4>
	...

08004c9c <_close_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	; (8004cb8 <_close_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fb fef7 	bl	8000a9a <_close>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_close_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_close_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200002b4 	.word	0x200002b4

08004cbc <_lseek_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d07      	ldr	r5, [pc, #28]	; (8004cdc <_lseek_r+0x20>)
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	602a      	str	r2, [r5, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f7fb ff0c 	bl	8000ae8 <_lseek>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_lseek_r+0x1e>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_lseek_r+0x1e>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	200002b4 	.word	0x200002b4

08004ce0 <_read_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d07      	ldr	r5, [pc, #28]	; (8004d00 <_read_r+0x20>)
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	4611      	mov	r1, r2
 8004cea:	2200      	movs	r2, #0
 8004cec:	602a      	str	r2, [r5, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7fb fe9a 	bl	8000a28 <_read>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_read_r+0x1e>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_read_r+0x1e>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	200002b4 	.word	0x200002b4

08004d04 <_write_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d07      	ldr	r5, [pc, #28]	; (8004d24 <_write_r+0x20>)
 8004d08:	4604      	mov	r4, r0
 8004d0a:	4608      	mov	r0, r1
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f7fb fea5 	bl	8000a62 <_write>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_write_r+0x1e>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_write_r+0x1e>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	200002b4 	.word	0x200002b4

08004d28 <__errno>:
 8004d28:	4b01      	ldr	r3, [pc, #4]	; (8004d30 <__errno+0x8>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000064 	.word	0x20000064

08004d34 <__libc_init_array>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	4d0d      	ldr	r5, [pc, #52]	; (8004d6c <__libc_init_array+0x38>)
 8004d38:	4c0d      	ldr	r4, [pc, #52]	; (8004d70 <__libc_init_array+0x3c>)
 8004d3a:	1b64      	subs	r4, r4, r5
 8004d3c:	10a4      	asrs	r4, r4, #2
 8004d3e:	2600      	movs	r6, #0
 8004d40:	42a6      	cmp	r6, r4
 8004d42:	d109      	bne.n	8004d58 <__libc_init_array+0x24>
 8004d44:	4d0b      	ldr	r5, [pc, #44]	; (8004d74 <__libc_init_array+0x40>)
 8004d46:	4c0c      	ldr	r4, [pc, #48]	; (8004d78 <__libc_init_array+0x44>)
 8004d48:	f000 fdc0 	bl	80058cc <_init>
 8004d4c:	1b64      	subs	r4, r4, r5
 8004d4e:	10a4      	asrs	r4, r4, #2
 8004d50:	2600      	movs	r6, #0
 8004d52:	42a6      	cmp	r6, r4
 8004d54:	d105      	bne.n	8004d62 <__libc_init_array+0x2e>
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5c:	4798      	blx	r3
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7ee      	b.n	8004d40 <__libc_init_array+0xc>
 8004d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d66:	4798      	blx	r3
 8004d68:	3601      	adds	r6, #1
 8004d6a:	e7f2      	b.n	8004d52 <__libc_init_array+0x1e>
 8004d6c:	08005974 	.word	0x08005974
 8004d70:	08005974 	.word	0x08005974
 8004d74:	08005974 	.word	0x08005974
 8004d78:	08005978 	.word	0x08005978

08004d7c <__retarget_lock_init_recursive>:
 8004d7c:	4770      	bx	lr

08004d7e <__retarget_lock_acquire_recursive>:
 8004d7e:	4770      	bx	lr

08004d80 <__retarget_lock_release_recursive>:
 8004d80:	4770      	bx	lr
	...

08004d84 <_free_r>:
 8004d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d86:	2900      	cmp	r1, #0
 8004d88:	d044      	beq.n	8004e14 <_free_r+0x90>
 8004d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d8e:	9001      	str	r0, [sp, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f1a1 0404 	sub.w	r4, r1, #4
 8004d96:	bfb8      	it	lt
 8004d98:	18e4      	addlt	r4, r4, r3
 8004d9a:	f000 f8df 	bl	8004f5c <__malloc_lock>
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <_free_r+0x94>)
 8004da0:	9801      	ldr	r0, [sp, #4]
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	b933      	cbnz	r3, 8004db4 <_free_r+0x30>
 8004da6:	6063      	str	r3, [r4, #4]
 8004da8:	6014      	str	r4, [r2, #0]
 8004daa:	b003      	add	sp, #12
 8004dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004db0:	f000 b8da 	b.w	8004f68 <__malloc_unlock>
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	d908      	bls.n	8004dca <_free_r+0x46>
 8004db8:	6825      	ldr	r5, [r4, #0]
 8004dba:	1961      	adds	r1, r4, r5
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	bf01      	itttt	eq
 8004dc0:	6819      	ldreq	r1, [r3, #0]
 8004dc2:	685b      	ldreq	r3, [r3, #4]
 8004dc4:	1949      	addeq	r1, r1, r5
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	e7ed      	b.n	8004da6 <_free_r+0x22>
 8004dca:	461a      	mov	r2, r3
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b10b      	cbz	r3, 8004dd4 <_free_r+0x50>
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	d9fa      	bls.n	8004dca <_free_r+0x46>
 8004dd4:	6811      	ldr	r1, [r2, #0]
 8004dd6:	1855      	adds	r5, r2, r1
 8004dd8:	42a5      	cmp	r5, r4
 8004dda:	d10b      	bne.n	8004df4 <_free_r+0x70>
 8004ddc:	6824      	ldr	r4, [r4, #0]
 8004dde:	4421      	add	r1, r4
 8004de0:	1854      	adds	r4, r2, r1
 8004de2:	42a3      	cmp	r3, r4
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	d1e0      	bne.n	8004daa <_free_r+0x26>
 8004de8:	681c      	ldr	r4, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	6053      	str	r3, [r2, #4]
 8004dee:	440c      	add	r4, r1
 8004df0:	6014      	str	r4, [r2, #0]
 8004df2:	e7da      	b.n	8004daa <_free_r+0x26>
 8004df4:	d902      	bls.n	8004dfc <_free_r+0x78>
 8004df6:	230c      	movs	r3, #12
 8004df8:	6003      	str	r3, [r0, #0]
 8004dfa:	e7d6      	b.n	8004daa <_free_r+0x26>
 8004dfc:	6825      	ldr	r5, [r4, #0]
 8004dfe:	1961      	adds	r1, r4, r5
 8004e00:	428b      	cmp	r3, r1
 8004e02:	bf04      	itt	eq
 8004e04:	6819      	ldreq	r1, [r3, #0]
 8004e06:	685b      	ldreq	r3, [r3, #4]
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	bf04      	itt	eq
 8004e0c:	1949      	addeq	r1, r1, r5
 8004e0e:	6021      	streq	r1, [r4, #0]
 8004e10:	6054      	str	r4, [r2, #4]
 8004e12:	e7ca      	b.n	8004daa <_free_r+0x26>
 8004e14:	b003      	add	sp, #12
 8004e16:	bd30      	pop	{r4, r5, pc}
 8004e18:	200002bc 	.word	0x200002bc

08004e1c <sbrk_aligned>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4e0e      	ldr	r6, [pc, #56]	; (8004e58 <sbrk_aligned+0x3c>)
 8004e20:	460c      	mov	r4, r1
 8004e22:	6831      	ldr	r1, [r6, #0]
 8004e24:	4605      	mov	r5, r0
 8004e26:	b911      	cbnz	r1, 8004e2e <sbrk_aligned+0x12>
 8004e28:	f000 fcbc 	bl	80057a4 <_sbrk_r>
 8004e2c:	6030      	str	r0, [r6, #0]
 8004e2e:	4621      	mov	r1, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 fcb7 	bl	80057a4 <_sbrk_r>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	d00a      	beq.n	8004e50 <sbrk_aligned+0x34>
 8004e3a:	1cc4      	adds	r4, r0, #3
 8004e3c:	f024 0403 	bic.w	r4, r4, #3
 8004e40:	42a0      	cmp	r0, r4
 8004e42:	d007      	beq.n	8004e54 <sbrk_aligned+0x38>
 8004e44:	1a21      	subs	r1, r4, r0
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 fcac 	bl	80057a4 <_sbrk_r>
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d101      	bne.n	8004e54 <sbrk_aligned+0x38>
 8004e50:	f04f 34ff 	mov.w	r4, #4294967295
 8004e54:	4620      	mov	r0, r4
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	200002c0 	.word	0x200002c0

08004e5c <_malloc_r>:
 8004e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e60:	1ccd      	adds	r5, r1, #3
 8004e62:	f025 0503 	bic.w	r5, r5, #3
 8004e66:	3508      	adds	r5, #8
 8004e68:	2d0c      	cmp	r5, #12
 8004e6a:	bf38      	it	cc
 8004e6c:	250c      	movcc	r5, #12
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	4607      	mov	r7, r0
 8004e72:	db01      	blt.n	8004e78 <_malloc_r+0x1c>
 8004e74:	42a9      	cmp	r1, r5
 8004e76:	d905      	bls.n	8004e84 <_malloc_r+0x28>
 8004e78:	230c      	movs	r3, #12
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	2600      	movs	r6, #0
 8004e7e:	4630      	mov	r0, r6
 8004e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f58 <_malloc_r+0xfc>
 8004e88:	f000 f868 	bl	8004f5c <__malloc_lock>
 8004e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e90:	461c      	mov	r4, r3
 8004e92:	bb5c      	cbnz	r4, 8004eec <_malloc_r+0x90>
 8004e94:	4629      	mov	r1, r5
 8004e96:	4638      	mov	r0, r7
 8004e98:	f7ff ffc0 	bl	8004e1c <sbrk_aligned>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	d155      	bne.n	8004f4e <_malloc_r+0xf2>
 8004ea2:	f8d8 4000 	ldr.w	r4, [r8]
 8004ea6:	4626      	mov	r6, r4
 8004ea8:	2e00      	cmp	r6, #0
 8004eaa:	d145      	bne.n	8004f38 <_malloc_r+0xdc>
 8004eac:	2c00      	cmp	r4, #0
 8004eae:	d048      	beq.n	8004f42 <_malloc_r+0xe6>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	eb04 0903 	add.w	r9, r4, r3
 8004eba:	f000 fc73 	bl	80057a4 <_sbrk_r>
 8004ebe:	4581      	cmp	r9, r0
 8004ec0:	d13f      	bne.n	8004f42 <_malloc_r+0xe6>
 8004ec2:	6821      	ldr	r1, [r4, #0]
 8004ec4:	1a6d      	subs	r5, r5, r1
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f7ff ffa7 	bl	8004e1c <sbrk_aligned>
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d037      	beq.n	8004f42 <_malloc_r+0xe6>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	442b      	add	r3, r5
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d038      	beq.n	8004f52 <_malloc_r+0xf6>
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	42a2      	cmp	r2, r4
 8004ee4:	d12b      	bne.n	8004f3e <_malloc_r+0xe2>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	e00f      	b.n	8004f0c <_malloc_r+0xb0>
 8004eec:	6822      	ldr	r2, [r4, #0]
 8004eee:	1b52      	subs	r2, r2, r5
 8004ef0:	d41f      	bmi.n	8004f32 <_malloc_r+0xd6>
 8004ef2:	2a0b      	cmp	r2, #11
 8004ef4:	d917      	bls.n	8004f26 <_malloc_r+0xca>
 8004ef6:	1961      	adds	r1, r4, r5
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	6025      	str	r5, [r4, #0]
 8004efc:	bf18      	it	ne
 8004efe:	6059      	strne	r1, [r3, #4]
 8004f00:	6863      	ldr	r3, [r4, #4]
 8004f02:	bf08      	it	eq
 8004f04:	f8c8 1000 	streq.w	r1, [r8]
 8004f08:	5162      	str	r2, [r4, r5]
 8004f0a:	604b      	str	r3, [r1, #4]
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	f104 060b 	add.w	r6, r4, #11
 8004f12:	f000 f829 	bl	8004f68 <__malloc_unlock>
 8004f16:	f026 0607 	bic.w	r6, r6, #7
 8004f1a:	1d23      	adds	r3, r4, #4
 8004f1c:	1af2      	subs	r2, r6, r3
 8004f1e:	d0ae      	beq.n	8004e7e <_malloc_r+0x22>
 8004f20:	1b9b      	subs	r3, r3, r6
 8004f22:	50a3      	str	r3, [r4, r2]
 8004f24:	e7ab      	b.n	8004e7e <_malloc_r+0x22>
 8004f26:	42a3      	cmp	r3, r4
 8004f28:	6862      	ldr	r2, [r4, #4]
 8004f2a:	d1dd      	bne.n	8004ee8 <_malloc_r+0x8c>
 8004f2c:	f8c8 2000 	str.w	r2, [r8]
 8004f30:	e7ec      	b.n	8004f0c <_malloc_r+0xb0>
 8004f32:	4623      	mov	r3, r4
 8004f34:	6864      	ldr	r4, [r4, #4]
 8004f36:	e7ac      	b.n	8004e92 <_malloc_r+0x36>
 8004f38:	4634      	mov	r4, r6
 8004f3a:	6876      	ldr	r6, [r6, #4]
 8004f3c:	e7b4      	b.n	8004ea8 <_malloc_r+0x4c>
 8004f3e:	4613      	mov	r3, r2
 8004f40:	e7cc      	b.n	8004edc <_malloc_r+0x80>
 8004f42:	230c      	movs	r3, #12
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4638      	mov	r0, r7
 8004f48:	f000 f80e 	bl	8004f68 <__malloc_unlock>
 8004f4c:	e797      	b.n	8004e7e <_malloc_r+0x22>
 8004f4e:	6025      	str	r5, [r4, #0]
 8004f50:	e7dc      	b.n	8004f0c <_malloc_r+0xb0>
 8004f52:	605b      	str	r3, [r3, #4]
 8004f54:	deff      	udf	#255	; 0xff
 8004f56:	bf00      	nop
 8004f58:	200002bc 	.word	0x200002bc

08004f5c <__malloc_lock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	; (8004f64 <__malloc_lock+0x8>)
 8004f5e:	f7ff bf0e 	b.w	8004d7e <__retarget_lock_acquire_recursive>
 8004f62:	bf00      	nop
 8004f64:	200002b8 	.word	0x200002b8

08004f68 <__malloc_unlock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <__malloc_unlock+0x8>)
 8004f6a:	f7ff bf09 	b.w	8004d80 <__retarget_lock_release_recursive>
 8004f6e:	bf00      	nop
 8004f70:	200002b8 	.word	0x200002b8

08004f74 <__sfputc_r>:
 8004f74:	6893      	ldr	r3, [r2, #8]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	b410      	push	{r4}
 8004f7c:	6093      	str	r3, [r2, #8]
 8004f7e:	da08      	bge.n	8004f92 <__sfputc_r+0x1e>
 8004f80:	6994      	ldr	r4, [r2, #24]
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	db01      	blt.n	8004f8a <__sfputc_r+0x16>
 8004f86:	290a      	cmp	r1, #10
 8004f88:	d103      	bne.n	8004f92 <__sfputc_r+0x1e>
 8004f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f8e:	f000 bb73 	b.w	8005678 <__swbuf_r>
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	1c58      	adds	r0, r3, #1
 8004f96:	6010      	str	r0, [r2, #0]
 8004f98:	7019      	strb	r1, [r3, #0]
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <__sfputs_r>:
 8004fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	460f      	mov	r7, r1
 8004fa8:	4614      	mov	r4, r2
 8004faa:	18d5      	adds	r5, r2, r3
 8004fac:	42ac      	cmp	r4, r5
 8004fae:	d101      	bne.n	8004fb4 <__sfputs_r+0x12>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e007      	b.n	8004fc4 <__sfputs_r+0x22>
 8004fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb8:	463a      	mov	r2, r7
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7ff ffda 	bl	8004f74 <__sfputc_r>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d1f3      	bne.n	8004fac <__sfputs_r+0xa>
 8004fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fc8 <_vfiprintf_r>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	460d      	mov	r5, r1
 8004fce:	b09d      	sub	sp, #116	; 0x74
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	4698      	mov	r8, r3
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	b118      	cbz	r0, 8004fe0 <_vfiprintf_r+0x18>
 8004fd8:	6a03      	ldr	r3, [r0, #32]
 8004fda:	b90b      	cbnz	r3, 8004fe0 <_vfiprintf_r+0x18>
 8004fdc:	f7ff fdca 	bl	8004b74 <__sinit>
 8004fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fe2:	07d9      	lsls	r1, r3, #31
 8004fe4:	d405      	bmi.n	8004ff2 <_vfiprintf_r+0x2a>
 8004fe6:	89ab      	ldrh	r3, [r5, #12]
 8004fe8:	059a      	lsls	r2, r3, #22
 8004fea:	d402      	bmi.n	8004ff2 <_vfiprintf_r+0x2a>
 8004fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fee:	f7ff fec6 	bl	8004d7e <__retarget_lock_acquire_recursive>
 8004ff2:	89ab      	ldrh	r3, [r5, #12]
 8004ff4:	071b      	lsls	r3, r3, #28
 8004ff6:	d501      	bpl.n	8004ffc <_vfiprintf_r+0x34>
 8004ff8:	692b      	ldr	r3, [r5, #16]
 8004ffa:	b99b      	cbnz	r3, 8005024 <_vfiprintf_r+0x5c>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4630      	mov	r0, r6
 8005000:	f000 fb78 	bl	80056f4 <__swsetup_r>
 8005004:	b170      	cbz	r0, 8005024 <_vfiprintf_r+0x5c>
 8005006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005008:	07dc      	lsls	r4, r3, #31
 800500a:	d504      	bpl.n	8005016 <_vfiprintf_r+0x4e>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	b01d      	add	sp, #116	; 0x74
 8005012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	0598      	lsls	r0, r3, #22
 800501a:	d4f7      	bmi.n	800500c <_vfiprintf_r+0x44>
 800501c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800501e:	f7ff feaf 	bl	8004d80 <__retarget_lock_release_recursive>
 8005022:	e7f3      	b.n	800500c <_vfiprintf_r+0x44>
 8005024:	2300      	movs	r3, #0
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
 8005028:	2320      	movs	r3, #32
 800502a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800502e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005032:	2330      	movs	r3, #48	; 0x30
 8005034:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80051e8 <_vfiprintf_r+0x220>
 8005038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800503c:	f04f 0901 	mov.w	r9, #1
 8005040:	4623      	mov	r3, r4
 8005042:	469a      	mov	sl, r3
 8005044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005048:	b10a      	cbz	r2, 800504e <_vfiprintf_r+0x86>
 800504a:	2a25      	cmp	r2, #37	; 0x25
 800504c:	d1f9      	bne.n	8005042 <_vfiprintf_r+0x7a>
 800504e:	ebba 0b04 	subs.w	fp, sl, r4
 8005052:	d00b      	beq.n	800506c <_vfiprintf_r+0xa4>
 8005054:	465b      	mov	r3, fp
 8005056:	4622      	mov	r2, r4
 8005058:	4629      	mov	r1, r5
 800505a:	4630      	mov	r0, r6
 800505c:	f7ff ffa1 	bl	8004fa2 <__sfputs_r>
 8005060:	3001      	adds	r0, #1
 8005062:	f000 80a9 	beq.w	80051b8 <_vfiprintf_r+0x1f0>
 8005066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005068:	445a      	add	r2, fp
 800506a:	9209      	str	r2, [sp, #36]	; 0x24
 800506c:	f89a 3000 	ldrb.w	r3, [sl]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80a1 	beq.w	80051b8 <_vfiprintf_r+0x1f0>
 8005076:	2300      	movs	r3, #0
 8005078:	f04f 32ff 	mov.w	r2, #4294967295
 800507c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005080:	f10a 0a01 	add.w	sl, sl, #1
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800508c:	931a      	str	r3, [sp, #104]	; 0x68
 800508e:	4654      	mov	r4, sl
 8005090:	2205      	movs	r2, #5
 8005092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005096:	4854      	ldr	r0, [pc, #336]	; (80051e8 <_vfiprintf_r+0x220>)
 8005098:	f7fb f89a 	bl	80001d0 <memchr>
 800509c:	9a04      	ldr	r2, [sp, #16]
 800509e:	b9d8      	cbnz	r0, 80050d8 <_vfiprintf_r+0x110>
 80050a0:	06d1      	lsls	r1, r2, #27
 80050a2:	bf44      	itt	mi
 80050a4:	2320      	movmi	r3, #32
 80050a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050aa:	0713      	lsls	r3, r2, #28
 80050ac:	bf44      	itt	mi
 80050ae:	232b      	movmi	r3, #43	; 0x2b
 80050b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b4:	f89a 3000 	ldrb.w	r3, [sl]
 80050b8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ba:	d015      	beq.n	80050e8 <_vfiprintf_r+0x120>
 80050bc:	9a07      	ldr	r2, [sp, #28]
 80050be:	4654      	mov	r4, sl
 80050c0:	2000      	movs	r0, #0
 80050c2:	f04f 0c0a 	mov.w	ip, #10
 80050c6:	4621      	mov	r1, r4
 80050c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050cc:	3b30      	subs	r3, #48	; 0x30
 80050ce:	2b09      	cmp	r3, #9
 80050d0:	d94d      	bls.n	800516e <_vfiprintf_r+0x1a6>
 80050d2:	b1b0      	cbz	r0, 8005102 <_vfiprintf_r+0x13a>
 80050d4:	9207      	str	r2, [sp, #28]
 80050d6:	e014      	b.n	8005102 <_vfiprintf_r+0x13a>
 80050d8:	eba0 0308 	sub.w	r3, r0, r8
 80050dc:	fa09 f303 	lsl.w	r3, r9, r3
 80050e0:	4313      	orrs	r3, r2
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	46a2      	mov	sl, r4
 80050e6:	e7d2      	b.n	800508e <_vfiprintf_r+0xc6>
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	1d19      	adds	r1, r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	9103      	str	r1, [sp, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bfbb      	ittet	lt
 80050f4:	425b      	neglt	r3, r3
 80050f6:	f042 0202 	orrlt.w	r2, r2, #2
 80050fa:	9307      	strge	r3, [sp, #28]
 80050fc:	9307      	strlt	r3, [sp, #28]
 80050fe:	bfb8      	it	lt
 8005100:	9204      	strlt	r2, [sp, #16]
 8005102:	7823      	ldrb	r3, [r4, #0]
 8005104:	2b2e      	cmp	r3, #46	; 0x2e
 8005106:	d10c      	bne.n	8005122 <_vfiprintf_r+0x15a>
 8005108:	7863      	ldrb	r3, [r4, #1]
 800510a:	2b2a      	cmp	r3, #42	; 0x2a
 800510c:	d134      	bne.n	8005178 <_vfiprintf_r+0x1b0>
 800510e:	9b03      	ldr	r3, [sp, #12]
 8005110:	1d1a      	adds	r2, r3, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	9203      	str	r2, [sp, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	f04f 33ff 	movlt.w	r3, #4294967295
 800511e:	3402      	adds	r4, #2
 8005120:	9305      	str	r3, [sp, #20]
 8005122:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80051f8 <_vfiprintf_r+0x230>
 8005126:	7821      	ldrb	r1, [r4, #0]
 8005128:	2203      	movs	r2, #3
 800512a:	4650      	mov	r0, sl
 800512c:	f7fb f850 	bl	80001d0 <memchr>
 8005130:	b138      	cbz	r0, 8005142 <_vfiprintf_r+0x17a>
 8005132:	9b04      	ldr	r3, [sp, #16]
 8005134:	eba0 000a 	sub.w	r0, r0, sl
 8005138:	2240      	movs	r2, #64	; 0x40
 800513a:	4082      	lsls	r2, r0
 800513c:	4313      	orrs	r3, r2
 800513e:	3401      	adds	r4, #1
 8005140:	9304      	str	r3, [sp, #16]
 8005142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005146:	4829      	ldr	r0, [pc, #164]	; (80051ec <_vfiprintf_r+0x224>)
 8005148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800514c:	2206      	movs	r2, #6
 800514e:	f7fb f83f 	bl	80001d0 <memchr>
 8005152:	2800      	cmp	r0, #0
 8005154:	d03f      	beq.n	80051d6 <_vfiprintf_r+0x20e>
 8005156:	4b26      	ldr	r3, [pc, #152]	; (80051f0 <_vfiprintf_r+0x228>)
 8005158:	bb1b      	cbnz	r3, 80051a2 <_vfiprintf_r+0x1da>
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	3307      	adds	r3, #7
 800515e:	f023 0307 	bic.w	r3, r3, #7
 8005162:	3308      	adds	r3, #8
 8005164:	9303      	str	r3, [sp, #12]
 8005166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005168:	443b      	add	r3, r7
 800516a:	9309      	str	r3, [sp, #36]	; 0x24
 800516c:	e768      	b.n	8005040 <_vfiprintf_r+0x78>
 800516e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005172:	460c      	mov	r4, r1
 8005174:	2001      	movs	r0, #1
 8005176:	e7a6      	b.n	80050c6 <_vfiprintf_r+0xfe>
 8005178:	2300      	movs	r3, #0
 800517a:	3401      	adds	r4, #1
 800517c:	9305      	str	r3, [sp, #20]
 800517e:	4619      	mov	r1, r3
 8005180:	f04f 0c0a 	mov.w	ip, #10
 8005184:	4620      	mov	r0, r4
 8005186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800518a:	3a30      	subs	r2, #48	; 0x30
 800518c:	2a09      	cmp	r2, #9
 800518e:	d903      	bls.n	8005198 <_vfiprintf_r+0x1d0>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0c6      	beq.n	8005122 <_vfiprintf_r+0x15a>
 8005194:	9105      	str	r1, [sp, #20]
 8005196:	e7c4      	b.n	8005122 <_vfiprintf_r+0x15a>
 8005198:	fb0c 2101 	mla	r1, ip, r1, r2
 800519c:	4604      	mov	r4, r0
 800519e:	2301      	movs	r3, #1
 80051a0:	e7f0      	b.n	8005184 <_vfiprintf_r+0x1bc>
 80051a2:	ab03      	add	r3, sp, #12
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	462a      	mov	r2, r5
 80051a8:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <_vfiprintf_r+0x22c>)
 80051aa:	a904      	add	r1, sp, #16
 80051ac:	4630      	mov	r0, r6
 80051ae:	f3af 8000 	nop.w
 80051b2:	4607      	mov	r7, r0
 80051b4:	1c78      	adds	r0, r7, #1
 80051b6:	d1d6      	bne.n	8005166 <_vfiprintf_r+0x19e>
 80051b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ba:	07d9      	lsls	r1, r3, #31
 80051bc:	d405      	bmi.n	80051ca <_vfiprintf_r+0x202>
 80051be:	89ab      	ldrh	r3, [r5, #12]
 80051c0:	059a      	lsls	r2, r3, #22
 80051c2:	d402      	bmi.n	80051ca <_vfiprintf_r+0x202>
 80051c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051c6:	f7ff fddb 	bl	8004d80 <__retarget_lock_release_recursive>
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	065b      	lsls	r3, r3, #25
 80051ce:	f53f af1d 	bmi.w	800500c <_vfiprintf_r+0x44>
 80051d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d4:	e71c      	b.n	8005010 <_vfiprintf_r+0x48>
 80051d6:	ab03      	add	r3, sp, #12
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	462a      	mov	r2, r5
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <_vfiprintf_r+0x22c>)
 80051de:	a904      	add	r1, sp, #16
 80051e0:	4630      	mov	r0, r6
 80051e2:	f000 f879 	bl	80052d8 <_printf_i>
 80051e6:	e7e4      	b.n	80051b2 <_vfiprintf_r+0x1ea>
 80051e8:	08005938 	.word	0x08005938
 80051ec:	08005942 	.word	0x08005942
 80051f0:	00000000 	.word	0x00000000
 80051f4:	08004fa3 	.word	0x08004fa3
 80051f8:	0800593e 	.word	0x0800593e

080051fc <_printf_common>:
 80051fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	4616      	mov	r6, r2
 8005202:	4699      	mov	r9, r3
 8005204:	688a      	ldr	r2, [r1, #8]
 8005206:	690b      	ldr	r3, [r1, #16]
 8005208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800520c:	4293      	cmp	r3, r2
 800520e:	bfb8      	it	lt
 8005210:	4613      	movlt	r3, r2
 8005212:	6033      	str	r3, [r6, #0]
 8005214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005218:	4607      	mov	r7, r0
 800521a:	460c      	mov	r4, r1
 800521c:	b10a      	cbz	r2, 8005222 <_printf_common+0x26>
 800521e:	3301      	adds	r3, #1
 8005220:	6033      	str	r3, [r6, #0]
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	0699      	lsls	r1, r3, #26
 8005226:	bf42      	ittt	mi
 8005228:	6833      	ldrmi	r3, [r6, #0]
 800522a:	3302      	addmi	r3, #2
 800522c:	6033      	strmi	r3, [r6, #0]
 800522e:	6825      	ldr	r5, [r4, #0]
 8005230:	f015 0506 	ands.w	r5, r5, #6
 8005234:	d106      	bne.n	8005244 <_printf_common+0x48>
 8005236:	f104 0a19 	add.w	sl, r4, #25
 800523a:	68e3      	ldr	r3, [r4, #12]
 800523c:	6832      	ldr	r2, [r6, #0]
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	42ab      	cmp	r3, r5
 8005242:	dc26      	bgt.n	8005292 <_printf_common+0x96>
 8005244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005248:	1e13      	subs	r3, r2, #0
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	bf18      	it	ne
 800524e:	2301      	movne	r3, #1
 8005250:	0692      	lsls	r2, r2, #26
 8005252:	d42b      	bmi.n	80052ac <_printf_common+0xb0>
 8005254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005258:	4649      	mov	r1, r9
 800525a:	4638      	mov	r0, r7
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d01e      	beq.n	80052a0 <_printf_common+0xa4>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	6922      	ldr	r2, [r4, #16]
 8005266:	f003 0306 	and.w	r3, r3, #6
 800526a:	2b04      	cmp	r3, #4
 800526c:	bf02      	ittt	eq
 800526e:	68e5      	ldreq	r5, [r4, #12]
 8005270:	6833      	ldreq	r3, [r6, #0]
 8005272:	1aed      	subeq	r5, r5, r3
 8005274:	68a3      	ldr	r3, [r4, #8]
 8005276:	bf0c      	ite	eq
 8005278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800527c:	2500      	movne	r5, #0
 800527e:	4293      	cmp	r3, r2
 8005280:	bfc4      	itt	gt
 8005282:	1a9b      	subgt	r3, r3, r2
 8005284:	18ed      	addgt	r5, r5, r3
 8005286:	2600      	movs	r6, #0
 8005288:	341a      	adds	r4, #26
 800528a:	42b5      	cmp	r5, r6
 800528c:	d11a      	bne.n	80052c4 <_printf_common+0xc8>
 800528e:	2000      	movs	r0, #0
 8005290:	e008      	b.n	80052a4 <_printf_common+0xa8>
 8005292:	2301      	movs	r3, #1
 8005294:	4652      	mov	r2, sl
 8005296:	4649      	mov	r1, r9
 8005298:	4638      	mov	r0, r7
 800529a:	47c0      	blx	r8
 800529c:	3001      	adds	r0, #1
 800529e:	d103      	bne.n	80052a8 <_printf_common+0xac>
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	3501      	adds	r5, #1
 80052aa:	e7c6      	b.n	800523a <_printf_common+0x3e>
 80052ac:	18e1      	adds	r1, r4, r3
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	2030      	movs	r0, #48	; 0x30
 80052b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052b6:	4422      	add	r2, r4
 80052b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052c0:	3302      	adds	r3, #2
 80052c2:	e7c7      	b.n	8005254 <_printf_common+0x58>
 80052c4:	2301      	movs	r3, #1
 80052c6:	4622      	mov	r2, r4
 80052c8:	4649      	mov	r1, r9
 80052ca:	4638      	mov	r0, r7
 80052cc:	47c0      	blx	r8
 80052ce:	3001      	adds	r0, #1
 80052d0:	d0e6      	beq.n	80052a0 <_printf_common+0xa4>
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7d9      	b.n	800528a <_printf_common+0x8e>
	...

080052d8 <_printf_i>:
 80052d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052dc:	7e0f      	ldrb	r7, [r1, #24]
 80052de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052e0:	2f78      	cmp	r7, #120	; 0x78
 80052e2:	4691      	mov	r9, r2
 80052e4:	4680      	mov	r8, r0
 80052e6:	460c      	mov	r4, r1
 80052e8:	469a      	mov	sl, r3
 80052ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052ee:	d807      	bhi.n	8005300 <_printf_i+0x28>
 80052f0:	2f62      	cmp	r7, #98	; 0x62
 80052f2:	d80a      	bhi.n	800530a <_printf_i+0x32>
 80052f4:	2f00      	cmp	r7, #0
 80052f6:	f000 80d4 	beq.w	80054a2 <_printf_i+0x1ca>
 80052fa:	2f58      	cmp	r7, #88	; 0x58
 80052fc:	f000 80c0 	beq.w	8005480 <_printf_i+0x1a8>
 8005300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005308:	e03a      	b.n	8005380 <_printf_i+0xa8>
 800530a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800530e:	2b15      	cmp	r3, #21
 8005310:	d8f6      	bhi.n	8005300 <_printf_i+0x28>
 8005312:	a101      	add	r1, pc, #4	; (adr r1, 8005318 <_printf_i+0x40>)
 8005314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005318:	08005371 	.word	0x08005371
 800531c:	08005385 	.word	0x08005385
 8005320:	08005301 	.word	0x08005301
 8005324:	08005301 	.word	0x08005301
 8005328:	08005301 	.word	0x08005301
 800532c:	08005301 	.word	0x08005301
 8005330:	08005385 	.word	0x08005385
 8005334:	08005301 	.word	0x08005301
 8005338:	08005301 	.word	0x08005301
 800533c:	08005301 	.word	0x08005301
 8005340:	08005301 	.word	0x08005301
 8005344:	08005489 	.word	0x08005489
 8005348:	080053b1 	.word	0x080053b1
 800534c:	08005443 	.word	0x08005443
 8005350:	08005301 	.word	0x08005301
 8005354:	08005301 	.word	0x08005301
 8005358:	080054ab 	.word	0x080054ab
 800535c:	08005301 	.word	0x08005301
 8005360:	080053b1 	.word	0x080053b1
 8005364:	08005301 	.word	0x08005301
 8005368:	08005301 	.word	0x08005301
 800536c:	0800544b 	.word	0x0800544b
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	1d1a      	adds	r2, r3, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	602a      	str	r2, [r5, #0]
 8005378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800537c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005380:	2301      	movs	r3, #1
 8005382:	e09f      	b.n	80054c4 <_printf_i+0x1ec>
 8005384:	6820      	ldr	r0, [r4, #0]
 8005386:	682b      	ldr	r3, [r5, #0]
 8005388:	0607      	lsls	r7, r0, #24
 800538a:	f103 0104 	add.w	r1, r3, #4
 800538e:	6029      	str	r1, [r5, #0]
 8005390:	d501      	bpl.n	8005396 <_printf_i+0xbe>
 8005392:	681e      	ldr	r6, [r3, #0]
 8005394:	e003      	b.n	800539e <_printf_i+0xc6>
 8005396:	0646      	lsls	r6, r0, #25
 8005398:	d5fb      	bpl.n	8005392 <_printf_i+0xba>
 800539a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800539e:	2e00      	cmp	r6, #0
 80053a0:	da03      	bge.n	80053aa <_printf_i+0xd2>
 80053a2:	232d      	movs	r3, #45	; 0x2d
 80053a4:	4276      	negs	r6, r6
 80053a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053aa:	485a      	ldr	r0, [pc, #360]	; (8005514 <_printf_i+0x23c>)
 80053ac:	230a      	movs	r3, #10
 80053ae:	e012      	b.n	80053d6 <_printf_i+0xfe>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	1d19      	adds	r1, r3, #4
 80053b6:	6029      	str	r1, [r5, #0]
 80053b8:	0605      	lsls	r5, r0, #24
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0xe8>
 80053bc:	681e      	ldr	r6, [r3, #0]
 80053be:	e002      	b.n	80053c6 <_printf_i+0xee>
 80053c0:	0641      	lsls	r1, r0, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0xe4>
 80053c4:	881e      	ldrh	r6, [r3, #0]
 80053c6:	4853      	ldr	r0, [pc, #332]	; (8005514 <_printf_i+0x23c>)
 80053c8:	2f6f      	cmp	r7, #111	; 0x6f
 80053ca:	bf0c      	ite	eq
 80053cc:	2308      	moveq	r3, #8
 80053ce:	230a      	movne	r3, #10
 80053d0:	2100      	movs	r1, #0
 80053d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053d6:	6865      	ldr	r5, [r4, #4]
 80053d8:	60a5      	str	r5, [r4, #8]
 80053da:	2d00      	cmp	r5, #0
 80053dc:	bfa2      	ittt	ge
 80053de:	6821      	ldrge	r1, [r4, #0]
 80053e0:	f021 0104 	bicge.w	r1, r1, #4
 80053e4:	6021      	strge	r1, [r4, #0]
 80053e6:	b90e      	cbnz	r6, 80053ec <_printf_i+0x114>
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	d04b      	beq.n	8005484 <_printf_i+0x1ac>
 80053ec:	4615      	mov	r5, r2
 80053ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80053f2:	fb03 6711 	mls	r7, r3, r1, r6
 80053f6:	5dc7      	ldrb	r7, [r0, r7]
 80053f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053fc:	4637      	mov	r7, r6
 80053fe:	42bb      	cmp	r3, r7
 8005400:	460e      	mov	r6, r1
 8005402:	d9f4      	bls.n	80053ee <_printf_i+0x116>
 8005404:	2b08      	cmp	r3, #8
 8005406:	d10b      	bne.n	8005420 <_printf_i+0x148>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	07de      	lsls	r6, r3, #31
 800540c:	d508      	bpl.n	8005420 <_printf_i+0x148>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	6861      	ldr	r1, [r4, #4]
 8005412:	4299      	cmp	r1, r3
 8005414:	bfde      	ittt	le
 8005416:	2330      	movle	r3, #48	; 0x30
 8005418:	f805 3c01 	strble.w	r3, [r5, #-1]
 800541c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005420:	1b52      	subs	r2, r2, r5
 8005422:	6122      	str	r2, [r4, #16]
 8005424:	f8cd a000 	str.w	sl, [sp]
 8005428:	464b      	mov	r3, r9
 800542a:	aa03      	add	r2, sp, #12
 800542c:	4621      	mov	r1, r4
 800542e:	4640      	mov	r0, r8
 8005430:	f7ff fee4 	bl	80051fc <_printf_common>
 8005434:	3001      	adds	r0, #1
 8005436:	d14a      	bne.n	80054ce <_printf_i+0x1f6>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	b004      	add	sp, #16
 800543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f043 0320 	orr.w	r3, r3, #32
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	4833      	ldr	r0, [pc, #204]	; (8005518 <_printf_i+0x240>)
 800544c:	2778      	movs	r7, #120	; 0x78
 800544e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	6829      	ldr	r1, [r5, #0]
 8005456:	061f      	lsls	r7, r3, #24
 8005458:	f851 6b04 	ldr.w	r6, [r1], #4
 800545c:	d402      	bmi.n	8005464 <_printf_i+0x18c>
 800545e:	065f      	lsls	r7, r3, #25
 8005460:	bf48      	it	mi
 8005462:	b2b6      	uxthmi	r6, r6
 8005464:	07df      	lsls	r7, r3, #31
 8005466:	bf48      	it	mi
 8005468:	f043 0320 	orrmi.w	r3, r3, #32
 800546c:	6029      	str	r1, [r5, #0]
 800546e:	bf48      	it	mi
 8005470:	6023      	strmi	r3, [r4, #0]
 8005472:	b91e      	cbnz	r6, 800547c <_printf_i+0x1a4>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	f023 0320 	bic.w	r3, r3, #32
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	2310      	movs	r3, #16
 800547e:	e7a7      	b.n	80053d0 <_printf_i+0xf8>
 8005480:	4824      	ldr	r0, [pc, #144]	; (8005514 <_printf_i+0x23c>)
 8005482:	e7e4      	b.n	800544e <_printf_i+0x176>
 8005484:	4615      	mov	r5, r2
 8005486:	e7bd      	b.n	8005404 <_printf_i+0x12c>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	6826      	ldr	r6, [r4, #0]
 800548c:	6961      	ldr	r1, [r4, #20]
 800548e:	1d18      	adds	r0, r3, #4
 8005490:	6028      	str	r0, [r5, #0]
 8005492:	0635      	lsls	r5, r6, #24
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	d501      	bpl.n	800549c <_printf_i+0x1c4>
 8005498:	6019      	str	r1, [r3, #0]
 800549a:	e002      	b.n	80054a2 <_printf_i+0x1ca>
 800549c:	0670      	lsls	r0, r6, #25
 800549e:	d5fb      	bpl.n	8005498 <_printf_i+0x1c0>
 80054a0:	8019      	strh	r1, [r3, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	4615      	mov	r5, r2
 80054a8:	e7bc      	b.n	8005424 <_printf_i+0x14c>
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	1d1a      	adds	r2, r3, #4
 80054ae:	602a      	str	r2, [r5, #0]
 80054b0:	681d      	ldr	r5, [r3, #0]
 80054b2:	6862      	ldr	r2, [r4, #4]
 80054b4:	2100      	movs	r1, #0
 80054b6:	4628      	mov	r0, r5
 80054b8:	f7fa fe8a 	bl	80001d0 <memchr>
 80054bc:	b108      	cbz	r0, 80054c2 <_printf_i+0x1ea>
 80054be:	1b40      	subs	r0, r0, r5
 80054c0:	6060      	str	r0, [r4, #4]
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	2300      	movs	r3, #0
 80054c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054cc:	e7aa      	b.n	8005424 <_printf_i+0x14c>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	462a      	mov	r2, r5
 80054d2:	4649      	mov	r1, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	47d0      	blx	sl
 80054d8:	3001      	adds	r0, #1
 80054da:	d0ad      	beq.n	8005438 <_printf_i+0x160>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	079b      	lsls	r3, r3, #30
 80054e0:	d413      	bmi.n	800550a <_printf_i+0x232>
 80054e2:	68e0      	ldr	r0, [r4, #12]
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	4298      	cmp	r0, r3
 80054e8:	bfb8      	it	lt
 80054ea:	4618      	movlt	r0, r3
 80054ec:	e7a6      	b.n	800543c <_printf_i+0x164>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4632      	mov	r2, r6
 80054f2:	4649      	mov	r1, r9
 80054f4:	4640      	mov	r0, r8
 80054f6:	47d0      	blx	sl
 80054f8:	3001      	adds	r0, #1
 80054fa:	d09d      	beq.n	8005438 <_printf_i+0x160>
 80054fc:	3501      	adds	r5, #1
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	9903      	ldr	r1, [sp, #12]
 8005502:	1a5b      	subs	r3, r3, r1
 8005504:	42ab      	cmp	r3, r5
 8005506:	dcf2      	bgt.n	80054ee <_printf_i+0x216>
 8005508:	e7eb      	b.n	80054e2 <_printf_i+0x20a>
 800550a:	2500      	movs	r5, #0
 800550c:	f104 0619 	add.w	r6, r4, #25
 8005510:	e7f5      	b.n	80054fe <_printf_i+0x226>
 8005512:	bf00      	nop
 8005514:	08005949 	.word	0x08005949
 8005518:	0800595a 	.word	0x0800595a

0800551c <__sflush_r>:
 800551c:	898a      	ldrh	r2, [r1, #12]
 800551e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005522:	4605      	mov	r5, r0
 8005524:	0710      	lsls	r0, r2, #28
 8005526:	460c      	mov	r4, r1
 8005528:	d458      	bmi.n	80055dc <__sflush_r+0xc0>
 800552a:	684b      	ldr	r3, [r1, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	dc05      	bgt.n	800553c <__sflush_r+0x20>
 8005530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	dc02      	bgt.n	800553c <__sflush_r+0x20>
 8005536:	2000      	movs	r0, #0
 8005538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800553e:	2e00      	cmp	r6, #0
 8005540:	d0f9      	beq.n	8005536 <__sflush_r+0x1a>
 8005542:	2300      	movs	r3, #0
 8005544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005548:	682f      	ldr	r7, [r5, #0]
 800554a:	6a21      	ldr	r1, [r4, #32]
 800554c:	602b      	str	r3, [r5, #0]
 800554e:	d032      	beq.n	80055b6 <__sflush_r+0x9a>
 8005550:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	075a      	lsls	r2, r3, #29
 8005556:	d505      	bpl.n	8005564 <__sflush_r+0x48>
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	1ac0      	subs	r0, r0, r3
 800555c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800555e:	b10b      	cbz	r3, 8005564 <__sflush_r+0x48>
 8005560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005562:	1ac0      	subs	r0, r0, r3
 8005564:	2300      	movs	r3, #0
 8005566:	4602      	mov	r2, r0
 8005568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800556a:	6a21      	ldr	r1, [r4, #32]
 800556c:	4628      	mov	r0, r5
 800556e:	47b0      	blx	r6
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	d106      	bne.n	8005584 <__sflush_r+0x68>
 8005576:	6829      	ldr	r1, [r5, #0]
 8005578:	291d      	cmp	r1, #29
 800557a:	d82b      	bhi.n	80055d4 <__sflush_r+0xb8>
 800557c:	4a29      	ldr	r2, [pc, #164]	; (8005624 <__sflush_r+0x108>)
 800557e:	410a      	asrs	r2, r1
 8005580:	07d6      	lsls	r6, r2, #31
 8005582:	d427      	bmi.n	80055d4 <__sflush_r+0xb8>
 8005584:	2200      	movs	r2, #0
 8005586:	6062      	str	r2, [r4, #4]
 8005588:	04d9      	lsls	r1, r3, #19
 800558a:	6922      	ldr	r2, [r4, #16]
 800558c:	6022      	str	r2, [r4, #0]
 800558e:	d504      	bpl.n	800559a <__sflush_r+0x7e>
 8005590:	1c42      	adds	r2, r0, #1
 8005592:	d101      	bne.n	8005598 <__sflush_r+0x7c>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b903      	cbnz	r3, 800559a <__sflush_r+0x7e>
 8005598:	6560      	str	r0, [r4, #84]	; 0x54
 800559a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800559c:	602f      	str	r7, [r5, #0]
 800559e:	2900      	cmp	r1, #0
 80055a0:	d0c9      	beq.n	8005536 <__sflush_r+0x1a>
 80055a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a6:	4299      	cmp	r1, r3
 80055a8:	d002      	beq.n	80055b0 <__sflush_r+0x94>
 80055aa:	4628      	mov	r0, r5
 80055ac:	f7ff fbea 	bl	8004d84 <_free_r>
 80055b0:	2000      	movs	r0, #0
 80055b2:	6360      	str	r0, [r4, #52]	; 0x34
 80055b4:	e7c0      	b.n	8005538 <__sflush_r+0x1c>
 80055b6:	2301      	movs	r3, #1
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b0      	blx	r6
 80055bc:	1c41      	adds	r1, r0, #1
 80055be:	d1c8      	bne.n	8005552 <__sflush_r+0x36>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0c5      	beq.n	8005552 <__sflush_r+0x36>
 80055c6:	2b1d      	cmp	r3, #29
 80055c8:	d001      	beq.n	80055ce <__sflush_r+0xb2>
 80055ca:	2b16      	cmp	r3, #22
 80055cc:	d101      	bne.n	80055d2 <__sflush_r+0xb6>
 80055ce:	602f      	str	r7, [r5, #0]
 80055d0:	e7b1      	b.n	8005536 <__sflush_r+0x1a>
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	e7ad      	b.n	8005538 <__sflush_r+0x1c>
 80055dc:	690f      	ldr	r7, [r1, #16]
 80055de:	2f00      	cmp	r7, #0
 80055e0:	d0a9      	beq.n	8005536 <__sflush_r+0x1a>
 80055e2:	0793      	lsls	r3, r2, #30
 80055e4:	680e      	ldr	r6, [r1, #0]
 80055e6:	bf08      	it	eq
 80055e8:	694b      	ldreq	r3, [r1, #20]
 80055ea:	600f      	str	r7, [r1, #0]
 80055ec:	bf18      	it	ne
 80055ee:	2300      	movne	r3, #0
 80055f0:	eba6 0807 	sub.w	r8, r6, r7
 80055f4:	608b      	str	r3, [r1, #8]
 80055f6:	f1b8 0f00 	cmp.w	r8, #0
 80055fa:	dd9c      	ble.n	8005536 <__sflush_r+0x1a>
 80055fc:	6a21      	ldr	r1, [r4, #32]
 80055fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005600:	4643      	mov	r3, r8
 8005602:	463a      	mov	r2, r7
 8005604:	4628      	mov	r0, r5
 8005606:	47b0      	blx	r6
 8005608:	2800      	cmp	r0, #0
 800560a:	dc06      	bgt.n	800561a <__sflush_r+0xfe>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	f04f 30ff 	mov.w	r0, #4294967295
 8005618:	e78e      	b.n	8005538 <__sflush_r+0x1c>
 800561a:	4407      	add	r7, r0
 800561c:	eba8 0800 	sub.w	r8, r8, r0
 8005620:	e7e9      	b.n	80055f6 <__sflush_r+0xda>
 8005622:	bf00      	nop
 8005624:	dfbffffe 	.word	0xdfbffffe

08005628 <_fflush_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	4605      	mov	r5, r0
 800562e:	460c      	mov	r4, r1
 8005630:	b913      	cbnz	r3, 8005638 <_fflush_r+0x10>
 8005632:	2500      	movs	r5, #0
 8005634:	4628      	mov	r0, r5
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	b118      	cbz	r0, 8005642 <_fflush_r+0x1a>
 800563a:	6a03      	ldr	r3, [r0, #32]
 800563c:	b90b      	cbnz	r3, 8005642 <_fflush_r+0x1a>
 800563e:	f7ff fa99 	bl	8004b74 <__sinit>
 8005642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f3      	beq.n	8005632 <_fflush_r+0xa>
 800564a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800564c:	07d0      	lsls	r0, r2, #31
 800564e:	d404      	bmi.n	800565a <_fflush_r+0x32>
 8005650:	0599      	lsls	r1, r3, #22
 8005652:	d402      	bmi.n	800565a <_fflush_r+0x32>
 8005654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005656:	f7ff fb92 	bl	8004d7e <__retarget_lock_acquire_recursive>
 800565a:	4628      	mov	r0, r5
 800565c:	4621      	mov	r1, r4
 800565e:	f7ff ff5d 	bl	800551c <__sflush_r>
 8005662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005664:	07da      	lsls	r2, r3, #31
 8005666:	4605      	mov	r5, r0
 8005668:	d4e4      	bmi.n	8005634 <_fflush_r+0xc>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	059b      	lsls	r3, r3, #22
 800566e:	d4e1      	bmi.n	8005634 <_fflush_r+0xc>
 8005670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005672:	f7ff fb85 	bl	8004d80 <__retarget_lock_release_recursive>
 8005676:	e7dd      	b.n	8005634 <_fflush_r+0xc>

08005678 <__swbuf_r>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	4614      	mov	r4, r2
 800567e:	4605      	mov	r5, r0
 8005680:	b118      	cbz	r0, 800568a <__swbuf_r+0x12>
 8005682:	6a03      	ldr	r3, [r0, #32]
 8005684:	b90b      	cbnz	r3, 800568a <__swbuf_r+0x12>
 8005686:	f7ff fa75 	bl	8004b74 <__sinit>
 800568a:	69a3      	ldr	r3, [r4, #24]
 800568c:	60a3      	str	r3, [r4, #8]
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	071a      	lsls	r2, r3, #28
 8005692:	d525      	bpl.n	80056e0 <__swbuf_r+0x68>
 8005694:	6923      	ldr	r3, [r4, #16]
 8005696:	b31b      	cbz	r3, 80056e0 <__swbuf_r+0x68>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	6922      	ldr	r2, [r4, #16]
 800569c:	1a98      	subs	r0, r3, r2
 800569e:	6963      	ldr	r3, [r4, #20]
 80056a0:	b2f6      	uxtb	r6, r6
 80056a2:	4283      	cmp	r3, r0
 80056a4:	4637      	mov	r7, r6
 80056a6:	dc04      	bgt.n	80056b2 <__swbuf_r+0x3a>
 80056a8:	4621      	mov	r1, r4
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7ff ffbc 	bl	8005628 <_fflush_r>
 80056b0:	b9e0      	cbnz	r0, 80056ec <__swbuf_r+0x74>
 80056b2:	68a3      	ldr	r3, [r4, #8]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	60a3      	str	r3, [r4, #8]
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	6022      	str	r2, [r4, #0]
 80056be:	701e      	strb	r6, [r3, #0]
 80056c0:	6962      	ldr	r2, [r4, #20]
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d004      	beq.n	80056d2 <__swbuf_r+0x5a>
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	07db      	lsls	r3, r3, #31
 80056cc:	d506      	bpl.n	80056dc <__swbuf_r+0x64>
 80056ce:	2e0a      	cmp	r6, #10
 80056d0:	d104      	bne.n	80056dc <__swbuf_r+0x64>
 80056d2:	4621      	mov	r1, r4
 80056d4:	4628      	mov	r0, r5
 80056d6:	f7ff ffa7 	bl	8005628 <_fflush_r>
 80056da:	b938      	cbnz	r0, 80056ec <__swbuf_r+0x74>
 80056dc:	4638      	mov	r0, r7
 80056de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e0:	4621      	mov	r1, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f806 	bl	80056f4 <__swsetup_r>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d0d5      	beq.n	8005698 <__swbuf_r+0x20>
 80056ec:	f04f 37ff 	mov.w	r7, #4294967295
 80056f0:	e7f4      	b.n	80056dc <__swbuf_r+0x64>
	...

080056f4 <__swsetup_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <__swsetup_r+0xac>)
 80056f8:	4605      	mov	r5, r0
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	460c      	mov	r4, r1
 80056fe:	b118      	cbz	r0, 8005708 <__swsetup_r+0x14>
 8005700:	6a03      	ldr	r3, [r0, #32]
 8005702:	b90b      	cbnz	r3, 8005708 <__swsetup_r+0x14>
 8005704:	f7ff fa36 	bl	8004b74 <__sinit>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800570e:	0718      	lsls	r0, r3, #28
 8005710:	d422      	bmi.n	8005758 <__swsetup_r+0x64>
 8005712:	06d9      	lsls	r1, r3, #27
 8005714:	d407      	bmi.n	8005726 <__swsetup_r+0x32>
 8005716:	2309      	movs	r3, #9
 8005718:	602b      	str	r3, [r5, #0]
 800571a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	e034      	b.n	8005790 <__swsetup_r+0x9c>
 8005726:	0758      	lsls	r0, r3, #29
 8005728:	d512      	bpl.n	8005750 <__swsetup_r+0x5c>
 800572a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800572c:	b141      	cbz	r1, 8005740 <__swsetup_r+0x4c>
 800572e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005732:	4299      	cmp	r1, r3
 8005734:	d002      	beq.n	800573c <__swsetup_r+0x48>
 8005736:	4628      	mov	r0, r5
 8005738:	f7ff fb24 	bl	8004d84 <_free_r>
 800573c:	2300      	movs	r3, #0
 800573e:	6363      	str	r3, [r4, #52]	; 0x34
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005746:	81a3      	strh	r3, [r4, #12]
 8005748:	2300      	movs	r3, #0
 800574a:	6063      	str	r3, [r4, #4]
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	f043 0308 	orr.w	r3, r3, #8
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	b94b      	cbnz	r3, 8005770 <__swsetup_r+0x7c>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005766:	d003      	beq.n	8005770 <__swsetup_r+0x7c>
 8005768:	4621      	mov	r1, r4
 800576a:	4628      	mov	r0, r5
 800576c:	f000 f850 	bl	8005810 <__smakebuf_r>
 8005770:	89a0      	ldrh	r0, [r4, #12]
 8005772:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005776:	f010 0301 	ands.w	r3, r0, #1
 800577a:	d00a      	beq.n	8005792 <__swsetup_r+0x9e>
 800577c:	2300      	movs	r3, #0
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	6963      	ldr	r3, [r4, #20]
 8005782:	425b      	negs	r3, r3
 8005784:	61a3      	str	r3, [r4, #24]
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	b943      	cbnz	r3, 800579c <__swsetup_r+0xa8>
 800578a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800578e:	d1c4      	bne.n	800571a <__swsetup_r+0x26>
 8005790:	bd38      	pop	{r3, r4, r5, pc}
 8005792:	0781      	lsls	r1, r0, #30
 8005794:	bf58      	it	pl
 8005796:	6963      	ldrpl	r3, [r4, #20]
 8005798:	60a3      	str	r3, [r4, #8]
 800579a:	e7f4      	b.n	8005786 <__swsetup_r+0x92>
 800579c:	2000      	movs	r0, #0
 800579e:	e7f7      	b.n	8005790 <__swsetup_r+0x9c>
 80057a0:	20000064 	.word	0x20000064

080057a4 <_sbrk_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4d06      	ldr	r5, [pc, #24]	; (80057c0 <_sbrk_r+0x1c>)
 80057a8:	2300      	movs	r3, #0
 80057aa:	4604      	mov	r4, r0
 80057ac:	4608      	mov	r0, r1
 80057ae:	602b      	str	r3, [r5, #0]
 80057b0:	f7fb f9a8 	bl	8000b04 <_sbrk>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d102      	bne.n	80057be <_sbrk_r+0x1a>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	b103      	cbz	r3, 80057be <_sbrk_r+0x1a>
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	200002b4 	.word	0x200002b4

080057c4 <__swhatbuf_r>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	460c      	mov	r4, r1
 80057c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057cc:	2900      	cmp	r1, #0
 80057ce:	b096      	sub	sp, #88	; 0x58
 80057d0:	4615      	mov	r5, r2
 80057d2:	461e      	mov	r6, r3
 80057d4:	da0d      	bge.n	80057f2 <__swhatbuf_r+0x2e>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	bf0c      	ite	eq
 80057e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80057e6:	2340      	movne	r3, #64	; 0x40
 80057e8:	2000      	movs	r0, #0
 80057ea:	6031      	str	r1, [r6, #0]
 80057ec:	602b      	str	r3, [r5, #0]
 80057ee:	b016      	add	sp, #88	; 0x58
 80057f0:	bd70      	pop	{r4, r5, r6, pc}
 80057f2:	466a      	mov	r2, sp
 80057f4:	f000 f848 	bl	8005888 <_fstat_r>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	dbec      	blt.n	80057d6 <__swhatbuf_r+0x12>
 80057fc:	9901      	ldr	r1, [sp, #4]
 80057fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005802:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005806:	4259      	negs	r1, r3
 8005808:	4159      	adcs	r1, r3
 800580a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800580e:	e7eb      	b.n	80057e8 <__swhatbuf_r+0x24>

08005810 <__smakebuf_r>:
 8005810:	898b      	ldrh	r3, [r1, #12]
 8005812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005814:	079d      	lsls	r5, r3, #30
 8005816:	4606      	mov	r6, r0
 8005818:	460c      	mov	r4, r1
 800581a:	d507      	bpl.n	800582c <__smakebuf_r+0x1c>
 800581c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	6123      	str	r3, [r4, #16]
 8005824:	2301      	movs	r3, #1
 8005826:	6163      	str	r3, [r4, #20]
 8005828:	b002      	add	sp, #8
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	ab01      	add	r3, sp, #4
 800582e:	466a      	mov	r2, sp
 8005830:	f7ff ffc8 	bl	80057c4 <__swhatbuf_r>
 8005834:	9900      	ldr	r1, [sp, #0]
 8005836:	4605      	mov	r5, r0
 8005838:	4630      	mov	r0, r6
 800583a:	f7ff fb0f 	bl	8004e5c <_malloc_r>
 800583e:	b948      	cbnz	r0, 8005854 <__smakebuf_r+0x44>
 8005840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005844:	059a      	lsls	r2, r3, #22
 8005846:	d4ef      	bmi.n	8005828 <__smakebuf_r+0x18>
 8005848:	f023 0303 	bic.w	r3, r3, #3
 800584c:	f043 0302 	orr.w	r3, r3, #2
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	e7e3      	b.n	800581c <__smakebuf_r+0xc>
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	6020      	str	r0, [r4, #0]
 8005858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	9b00      	ldr	r3, [sp, #0]
 8005860:	6163      	str	r3, [r4, #20]
 8005862:	9b01      	ldr	r3, [sp, #4]
 8005864:	6120      	str	r0, [r4, #16]
 8005866:	b15b      	cbz	r3, 8005880 <__smakebuf_r+0x70>
 8005868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800586c:	4630      	mov	r0, r6
 800586e:	f000 f81d 	bl	80058ac <_isatty_r>
 8005872:	b128      	cbz	r0, 8005880 <__smakebuf_r+0x70>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	431d      	orrs	r5, r3
 8005884:	81a5      	strh	r5, [r4, #12]
 8005886:	e7cf      	b.n	8005828 <__smakebuf_r+0x18>

08005888 <_fstat_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d07      	ldr	r5, [pc, #28]	; (80058a8 <_fstat_r+0x20>)
 800588c:	2300      	movs	r3, #0
 800588e:	4604      	mov	r4, r0
 8005890:	4608      	mov	r0, r1
 8005892:	4611      	mov	r1, r2
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	f7fb f90c 	bl	8000ab2 <_fstat>
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	d102      	bne.n	80058a4 <_fstat_r+0x1c>
 800589e:	682b      	ldr	r3, [r5, #0]
 80058a0:	b103      	cbz	r3, 80058a4 <_fstat_r+0x1c>
 80058a2:	6023      	str	r3, [r4, #0]
 80058a4:	bd38      	pop	{r3, r4, r5, pc}
 80058a6:	bf00      	nop
 80058a8:	200002b4 	.word	0x200002b4

080058ac <_isatty_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4d06      	ldr	r5, [pc, #24]	; (80058c8 <_isatty_r+0x1c>)
 80058b0:	2300      	movs	r3, #0
 80058b2:	4604      	mov	r4, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	602b      	str	r3, [r5, #0]
 80058b8:	f7fb f90b 	bl	8000ad2 <_isatty>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_isatty_r+0x1a>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_isatty_r+0x1a>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	200002b4 	.word	0x200002b4

080058cc <_init>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr

080058d8 <_fini>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	bf00      	nop
 80058dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058de:	bc08      	pop	{r3}
 80058e0:	469e      	mov	lr, r3
 80058e2:	4770      	bx	lr
