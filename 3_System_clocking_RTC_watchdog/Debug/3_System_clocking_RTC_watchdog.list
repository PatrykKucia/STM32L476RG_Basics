
3_System_clocking_RTC_watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba4  08004ba4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bac  08004bac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000068  08004c1c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004c1c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cca1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6e  00000000  00000000  0002cd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000882  00000000  00000000  0002f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027731  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd5c  00000000  00000000  000577db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efdcb  00000000  00000000  00065537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033f4  00000000  00000000  00155304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001586f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ae0 	.word	0x08004ae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004ae0 	.word	0x08004ae0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d109      	bne.n	800058e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800057a:	230d      	movs	r3, #13
 800057c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800057e:	f107 010f 	add.w	r1, r7, #15
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <__io_putchar+0x3c>)
 800058a:	f002 fe19 	bl	80031c0 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2201      	movs	r2, #1
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <__io_putchar+0x3c>)
 8000598:	f002 fe12 	bl	80031c0 <HAL_UART_Transmit>
    return 1;
 800059c:	2301      	movs	r3, #1
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000b8 	.word	0x200000b8

080005ac <is_button_pressed>:

bool is_button_pressed(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 80005b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <is_button_pressed+0x20>)
 80005b6:	f000 fea5 	bl	8001304 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d101      	bne.n	80005c4 <is_button_pressed+0x18>
    return true;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <is_button_pressed+0x1a>
  } else {
    return false;
 80005c4:	2300      	movs	r3, #0
  }
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	48000800 	.word	0x48000800

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fb6c 	bl	8000cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f88d 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f959 	bl	8000894 <MX_GPIO_Init>
  MX_RTC_Init();
 80005e2:	f000 f8ff 	bl	80007e4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 f925 	bl	8000834 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80005ea:	f000 f8dd 	bl	80007a8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef new_time = {0}; //variable for new time set
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef new_date = {0}; //variable for new date set
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  new_time.Hours = 15;
 8000602:	230f      	movs	r3, #15
 8000604:	f887 3020 	strb.w	r3, [r7, #32]
  new_time.Minutes = 45;
 8000608:	232d      	movs	r3, #45	; 0x2d
 800060a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  new_time.Seconds = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  new_date.Date = 18;
 8000614:	2312      	movs	r3, #18
 8000616:	77bb      	strb	r3, [r7, #30]
  new_date.Month = 04;
 8000618:	2304      	movs	r3, #4
 800061a:	777b      	strb	r3, [r7, #29]
  new_date.WeekDay = RTC_WEEKDAY_MONDAY;
 800061c:	2301      	movs	r3, #1
 800061e:	773b      	strb	r3, [r7, #28]
  new_date.Year = 24;
 8000620:	2318      	movs	r3, #24
 8000622:	77fb      	strb	r3, [r7, #31]

  HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	2200      	movs	r2, #0
 800062a:	4619      	mov	r1, r3
 800062c:	482f      	ldr	r0, [pc, #188]	; (80006ec <main+0x11c>)
 800062e:	f002 fadb 	bl	8002be8 <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &new_date, RTC_FORMAT_BIN);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	482c      	ldr	r0, [pc, #176]	; (80006ec <main+0x11c>)
 800063c:	f002 fbcd 	bl	8002dda <HAL_RTC_SetDate>

  int i;

  for (i = 0; i < 10; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000644:	e00a      	b.n	800065c <main+0x8c>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000646:	2120      	movs	r1, #32
 8000648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064c:	f000 fe8a 	bl	8001364 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000650:	2064      	movs	r0, #100	; 0x64
 8000652:	f000 fba3 	bl	8000d9c <HAL_Delay>
  for (i = 0; i < 10; i++) {
 8000656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000658:	3301      	adds	r3, #1
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800065c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065e:	2b09      	cmp	r3, #9
 8000660:	ddf1      	ble.n	8000646 <main+0x76>
  }
  int32_t last_ms = HAL_GetTick();
 8000662:	f000 fb8f 	bl	8000d84 <HAL_GetTick>
 8000666:	4603      	mov	r3, r0
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  uint32_t now = HAL_GetTick();
 800066a:	f000 fb8b 	bl	8000d84 <HAL_GetTick>
 800066e:	6378      	str	r0, [r7, #52]	; 0x34
	  if(is_button_pressed())
 8000670:	f7ff ff9c 	bl	80005ac <is_button_pressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d000      	beq.n	800067c <main+0xac>
	   {
		  while(1)
 800067a:	e7fe      	b.n	800067a <main+0xaa>
				  	  	  	  	  //infinity loop
			  	  }
	   }


	  	  if (now - last_ms >= 500) {
 800067c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800067e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000686:	d306      	bcc.n	8000696 <main+0xc6>
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000688:	2120      	movs	r1, #32
 800068a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068e:	f000 fe69 	bl	8001364 <HAL_GPIO_TogglePin>
	  		  last_ms = now;
 8000692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
	  	  }

	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;

	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	4813      	ldr	r0, [pc, #76]	; (80006ec <main+0x11c>)
 80006a0:	f002 fb3f 	bl	8002d22 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	4810      	ldr	r0, [pc, #64]	; (80006ec <main+0x11c>)
 80006ac:	f002 fc1c 	bl	8002ee8 <HAL_RTC_GetDate>

	  printf("time now: %02d:%02d:%02d date:%02d.%02d.%04d \n", time.Hours, time.Minutes, time.Seconds, date.Date, date.Month, 2000 + date.Year);
 80006b0:	7a3b      	ldrb	r3, [r7, #8]
 80006b2:	4618      	mov	r0, r3
 80006b4:	7a7b      	ldrb	r3, [r7, #9]
 80006b6:	461c      	mov	r4, r3
 80006b8:	7abb      	ldrb	r3, [r7, #10]
 80006ba:	461d      	mov	r5, r3
 80006bc:	79bb      	ldrb	r3, [r7, #6]
 80006be:	461a      	mov	r2, r3
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	4619      	mov	r1, r3
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	9101      	str	r1, [sp, #4]
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	462b      	mov	r3, r5
 80006d2:	4622      	mov	r2, r4
 80006d4:	4601      	mov	r1, r0
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <main+0x120>)
 80006d8:	f003 fb8c 	bl	8003df4 <iprintf>
	  HAL_Delay(200);
 80006dc:	20c8      	movs	r0, #200	; 0xc8
 80006de:	f000 fb5d 	bl	8000d9c <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <main+0x124>)
 80006e4:	f000 fea7 	bl	8001436 <HAL_IWDG_Refresh>
  {
 80006e8:	e7bf      	b.n	800066a <main+0x9a>
 80006ea:	bf00      	nop
 80006ec:	20000094 	.word	0x20000094
 80006f0:	08004af8 	.word	0x08004af8
 80006f4:	20000084 	.word	0x20000084

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b096      	sub	sp, #88	; 0x58
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2244      	movs	r2, #68	; 0x44
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fbc9 	bl	8003e9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071e:	f000 feb9 	bl	8001494 <HAL_PWREx_ControlVoltageScaling>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000728:	f000 f902 	bl	8000930 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800072c:	f000 fe94 	bl	8001458 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <SystemClock_Config+0xac>)
 8000732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemClock_Config+0xac>)
 8000738:	f023 0318 	bic.w	r3, r3, #24
 800073c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000740:	231c      	movs	r3, #28
 8000742:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000754:	2360      	movs	r3, #96	; 0x60
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4618      	mov	r0, r3
 8000762:	f000 feed 	bl	8001540 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800076c:	f000 f8e0 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fab5 	bl	8001cf8 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000794:	f000 f8cc 	bl	8000930 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000798:	f001 ffbc 	bl	8002714 <HAL_RCCEx_EnableMSIPLLMode>
}
 800079c:	bf00      	nop
 800079e:	3758      	adds	r7, #88	; 0x58
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_IWDG_Init+0x34>)
 80007ae:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <MX_IWDG_Init+0x38>)
 80007b0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_IWDG_Init+0x34>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_IWDG_Init+0x34>)
 80007ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80007be:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_IWDG_Init+0x34>)
 80007c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80007c6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_IWDG_Init+0x34>)
 80007ca:	f000 fde5 	bl	8001398 <HAL_IWDG_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80007d4:	f000 f8ac 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000084 	.word	0x20000084
 80007e0:	40003000 	.word	0x40003000

080007e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_RTC_Init+0x48>)
 80007ea:	4a11      	ldr	r2, [pc, #68]	; (8000830 <MX_RTC_Init+0x4c>)
 80007ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_RTC_Init+0x48>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_RTC_Init+0x48>)
 80007f6:	227f      	movs	r2, #127	; 0x7f
 80007f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_RTC_Init+0x48>)
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_RTC_Init+0x48>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_RTC_Init+0x48>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_RTC_Init+0x48>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_RTC_Init+0x48>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_RTC_Init+0x48>)
 800081a:	f002 f95d 	bl	8002ad8 <HAL_RTC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000824:	f000 f884 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000094 	.word	0x20000094
 8000830:	40002800 	.word	0x40002800

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART2_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART2_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART2_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000878:	f002 fc54 	bl	8003124 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f855 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000b8 	.word	0x200000b8
 8000890:	40004400 	.word	0x40004400

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_GPIO_Init+0x94>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <MX_GPIO_Init+0x94>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_GPIO_Init+0x94>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_GPIO_Init+0x94>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_GPIO_Init+0x94>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_GPIO_Init+0x94>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2120      	movs	r1, #32
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f000 fd27 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_GPIO_Init+0x98>)
 80008fc:	f000 fb58 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f000 fb49 	bl	8000fb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	48000800 	.word	0x48000800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_MspInit+0x44>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6613      	str	r3, [r2, #96]	; 0x60
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x44>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6593      	str	r3, [r2, #88]	; 0x58
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0a4      	sub	sp, #144	; 0x90
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	2288      	movs	r2, #136	; 0x88
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fa82 	bl	8003e9e <memset>
  if(hrtc->Instance==RTC)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_RTC_MspInit+0x5c>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d118      	bne.n	80009d6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fbc2 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009c2:	f7ff ffb5 	bl	8000930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_RTC_MspInit+0x60>)
 80009c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009cc:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <HAL_RTC_MspInit+0x60>)
 80009ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3790      	adds	r7, #144	; 0x90
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40002800 	.word	0x40002800
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0ac      	sub	sp, #176	; 0xb0
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2288      	movs	r2, #136	; 0x88
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fa48 	bl	8003e9e <memset>
  if(huart->Instance==USART2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <HAL_UART_MspInit+0xb0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d13b      	bne.n	8000a90 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fb8b 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a30:	f7ff ff7e 	bl	8000930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a64:	230c      	movs	r3, #12
 8000a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f000 fa90 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	37b0      	adds	r7, #176	; 0xb0
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f936 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e009      	b.n	8000b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fd0f 	bl	800056c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf1      	blt.n	8000b40 <_write+0x12>
  }
  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_close>:

int _close(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_isatty>:

int _isatty(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f003 f99c 	bl	8003f3c <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20018000 	.word	0x20018000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	20000140 	.word	0x20000140
 8000c38:	20000298 	.word	0x20000298

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f003 f95b 	bl	8003f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c92:	f7ff fc9d 	bl	80005d0 <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca4:	08004bb4 	.word	0x08004bb4
  ldr r2, =_sbss
 8000ca8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cac:	20000294 	.word	0x20000294

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>

08000cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f943 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f000 f80e 	bl	8000ce4 <HAL_InitTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	e001      	b.n	8000cd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd4:	f7ff fe32 	bl	800093c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_InitTick+0x6c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d023      	beq.n	8000d40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_InitTick+0x70>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_InitTick+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f941 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10f      	bne.n	8000d3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d809      	bhi.n	8000d34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f919 	bl	8000f5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_InitTick+0x74>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	e007      	b.n	8000d44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e004      	b.n	8000d44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e001      	b.n	8000d44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000144 	.word	0x20000144

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000144 	.word	0x20000144

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff47 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff5c 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff8e 	bl	8000e9c <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffb0 	bl	8000f04 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e17f      	b.n	80012c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8171 	beq.w	80012ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d005      	beq.n	8000ff0 <HAL_GPIO_Init+0x40>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 0201 	and.w	r2, r3, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b03      	cmp	r3, #3
 800105c:	d118      	bne.n	8001090 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	6939      	ldr	r1, [r7, #16]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80ac 	beq.w	80012ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	4a5e      	ldr	r2, [pc, #376]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6613      	str	r3, [r2, #96]	; 0x60
 800116e:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800117a:	4a5a      	ldr	r2, [pc, #360]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x242>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x338>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x23e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_GPIO_Init+0x33c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x23a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <HAL_GPIO_Init+0x340>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x236>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <HAL_GPIO_Init+0x344>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x232>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_GPIO_Init+0x348>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x22e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_GPIO_Init+0x34c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x22a>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011da:	2307      	movs	r3, #7
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011f2:	2300      	movs	r3, #0
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001204:	4937      	ldr	r1, [pc, #220]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_GPIO_Init+0x350>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001236:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x350>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_GPIO_Init+0x350>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_GPIO_Init+0x350>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x350>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x350>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x350>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_GPIO_Init+0x350>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f47f ae78 	bne.w	8000fc0 <HAL_GPIO_Init+0x10>
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	48000400 	.word	0x48000400
 80012ec:	48000800 	.word	0x48000800
 80012f0:	48000c00 	.word	0x48000c00
 80012f4:	48001000 	.word	0x48001000
 80012f8:	48001400 	.word	0x48001400
 80012fc:	48001800 	.word	0x48001800
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001350:	e002      	b.n	8001358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4013      	ands	r3, r2
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43d9      	mvns	r1, r3
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	400b      	ands	r3, r1
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e041      	b.n	800142e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80013b2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f245 5255 	movw	r2, #21845	; 0x5555
 80013bc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6852      	ldr	r2, [r2, #4]
 80013c6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6892      	ldr	r2, [r2, #8]
 80013d0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80013d2:	f7ff fcd7 	bl	8000d84 <HAL_GetTick>
 80013d6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80013d8:	e00f      	b.n	80013fa <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80013da:	f7ff fcd3 	bl	8000d84 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b31      	cmp	r3, #49	; 0x31
 80013e6:	d908      	bls.n	80013fa <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e019      	b.n	800142e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e8      	bne.n	80013da <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	429a      	cmp	r2, r3
 8001414:	d005      	beq.n	8001422 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68d2      	ldr	r2, [r2, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	e004      	b.n	800142c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800142a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001446:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40007000 	.word	0x40007000

08001478 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <HAL_PWREx_GetVoltageRange+0x18>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40007000 	.word	0x40007000

08001494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a2:	d130      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a4:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b0:	d038      	beq.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ba:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2232      	movs	r2, #50	; 0x32
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0c9b      	lsrs	r3, r3, #18
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d8:	e002      	b.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ec:	d102      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f2      	bne.n	80014da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001500:	d110      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e00f      	b.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d007      	beq.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001522:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40007000 	.word	0x40007000
 8001538:	20000000 	.word	0x20000000
 800153c:	431bde83 	.word	0x431bde83

08001540 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e3ca      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001552:	4b97      	ldr	r3, [pc, #604]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155c:	4b94      	ldr	r3, [pc, #592]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80e4 	beq.w	800173c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_RCC_OscConfig+0x4a>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b0c      	cmp	r3, #12
 800157e:	f040 808b 	bne.w	8001698 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b01      	cmp	r3, #1
 8001586:	f040 8087 	bne.w	8001698 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800158a:	4b89      	ldr	r3, [pc, #548]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x62>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e3a2      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1a      	ldr	r2, [r3, #32]
 80015a6:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <HAL_RCC_OscConfig+0x7c>
 80015b2:	4b7f      	ldr	r3, [pc, #508]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ba:	e005      	b.n	80015c8 <HAL_RCC_OscConfig+0x88>
 80015bc:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d223      	bcs.n	8001614 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fd55 	bl	8002080 <RCC_SetFlashLatencyFromMSIRange>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e383      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a72      	ldr	r2, [pc, #456]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	496d      	ldr	r1, [pc, #436]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fe:	4b6c      	ldr	r3, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	4968      	ldr	r1, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e025      	b.n	8001660 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001614:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a65      	ldr	r2, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4960      	ldr	r1, [pc, #384]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	495b      	ldr	r1, [pc, #364]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fd15 	bl	8002080 <RCC_SetFlashLatencyFromMSIRange>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e343      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001660:	f000 fc4a 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4950      	ldr	r1, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <HAL_RCC_OscConfig+0x278>)
 800167e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001680:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb2d 	bl	8000ce4 <HAL_InitTick>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d052      	beq.n	800173a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	e327      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d032      	beq.n	8001706 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016a0:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a42      	ldr	r2, [pc, #264]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb6a 	bl	8000d84 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b4:	f7ff fb66 	bl	8000d84 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e310      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a36      	ldr	r2, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4931      	ldr	r1, [pc, #196]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f0:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	492c      	ldr	r1, [pc, #176]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e01a      	b.n	800173c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001712:	f7ff fb37 	bl	8000d84 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171a:	f7ff fb33 	bl	8000d84 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e2dd      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x1da>
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800173a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d074      	beq.n	8001832 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b08      	cmp	r3, #8
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x21a>
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d10e      	bne.n	8001772 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d10b      	bne.n	8001772 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d064      	beq.n	8001830 <HAL_RCC_OscConfig+0x2f0>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d160      	bne.n	8001830 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e2ba      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x24a>
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e026      	b.n	80017d8 <HAL_RCC_OscConfig+0x298>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001792:	d115      	bne.n	80017c0 <HAL_RCC_OscConfig+0x280>
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800179a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a02      	ldr	r2, [pc, #8]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e014      	b.n	80017d8 <HAL_RCC_OscConfig+0x298>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	08004b28 	.word	0x08004b28
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004
 80017c0:	4ba0      	ldr	r3, [pc, #640]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a9f      	ldr	r2, [pc, #636]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b9d      	ldr	r3, [pc, #628]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a9c      	ldr	r2, [pc, #624]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fad0 	bl	8000d84 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff facc 	bl	8000d84 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e276      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fa:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2a8>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fabc 	bl	8000d84 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fab8 	bl	8000d84 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e262      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x2d0>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d060      	beq.n	8001900 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x310>
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d119      	bne.n	800187e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d116      	bne.n	800187e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001850:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x328>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e23f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	4973      	ldr	r1, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	e040      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d023      	beq.n	80018ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001886:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fa77 	bl	8000d84 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff fa73 	bl	8000d84 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e21d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ac:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	061b      	lsls	r3, r3, #24
 80018c6:	495f      	ldr	r1, [pc, #380]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
 80018cc:	e018      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5c      	ldr	r2, [pc, #368]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff fa53 	bl	8000d84 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fa4f 	bl	8000d84 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1f9      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d03c      	beq.n	8001986 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01c      	beq.n	800194e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001914:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191a:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fa2e 	bl	8000d84 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fa2a 	bl	8000d84 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1d4      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ef      	beq.n	800192c <HAL_RCC_OscConfig+0x3ec>
 800194c:	e01b      	b.n	8001986 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff fa11 	bl	8000d84 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff fa0d 	bl	8000d84 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1b7      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ef      	bne.n	8001966 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80a6 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6593      	str	r3, [r2, #88]	; 0x58
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019bc:	2301      	movs	r3, #1
 80019be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x508>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d118      	bne.n	80019fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_RCC_OscConfig+0x508>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x508>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d8:	f7ff f9d4 	bl	8000d84 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e0:	f7ff f9d0 	bl	8000d84 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e17a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_RCC_OscConfig+0x508>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4d8>
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a16:	e029      	b.n	8001a6c <HAL_RCC_OscConfig+0x52c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d115      	bne.n	8001a4c <HAL_RCC_OscConfig+0x50c>
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a40:	e014      	b.n	8001a6c <HAL_RCC_OscConfig+0x52c>
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	4b9c      	ldr	r3, [pc, #624]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	4a9b      	ldr	r2, [pc, #620]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5c:	4b98      	ldr	r3, [pc, #608]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4a97      	ldr	r2, [pc, #604]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d016      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff f986 	bl	8000d84 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f982 	bl	8000d84 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e12a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a92:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ed      	beq.n	8001a7c <HAL_RCC_OscConfig+0x53c>
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f96f 	bl	8000d84 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f96b 	bl	8000d84 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e113      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac0:	4b7f      	ldr	r3, [pc, #508]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ed      	bne.n	8001aaa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ace:	7ffb      	ldrb	r3, [r7, #31]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a79      	ldr	r2, [pc, #484]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80fe 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	f040 80d0 	bne.w	8001c94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001af4:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d130      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	3b01      	subs	r3, #1
 8001b14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d127      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d11f      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b34:	2a07      	cmp	r2, #7
 8001b36:	bf14      	ite	ne
 8001b38:	2201      	movne	r2, #1
 8001b3a:	2200      	moveq	r2, #0
 8001b3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d113      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	3b01      	subs	r3, #1
 8001b64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d06e      	beq.n	8001c48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	d069      	beq.n	8001c44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0ad      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4b      	ldr	r2, [pc, #300]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b98:	f7ff f8f4 	bl	8000d84 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f8f0 	bl	8000d84 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e09a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bce:	3a01      	subs	r2, #1
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd8:	0212      	lsls	r2, r2, #8
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001be0:	0852      	lsrs	r2, r2, #1
 8001be2:	3a01      	subs	r2, #1
 8001be4:	0552      	lsls	r2, r2, #21
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bec:	0852      	lsrs	r2, r2, #1
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0652      	lsls	r2, r2, #25
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf8:	0912      	lsrs	r2, r2, #4
 8001bfa:	0452      	lsls	r2, r2, #17
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	4930      	ldr	r1, [pc, #192]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4a2a      	ldr	r2, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c1c:	f7ff f8b2 	bl	8000d84 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f8ae 	bl	8000d84 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e058      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c42:	e050      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e04f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d148      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c6c:	f7ff f88a 	bl	8000d84 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f886 	bl	8000d84 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e030      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x734>
 8001c92:	e028      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d023      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_RCC_OscConfig+0x780>)
 8001ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f86d 	bl	8000d84 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cac:	e00c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff f869 	bl	8000d84 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d905      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e013      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_OscConfig+0x7b0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ec      	bne.n	8001cae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x7b0>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	4905      	ldr	r1, [pc, #20]	; (8001cf0 <HAL_RCC_OscConfig+0x7b0>)
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_RCC_OscConfig+0x7b4>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
 8001ce0:	e001      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	feeefffc 	.word	0xfeeefffc

08001cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0e7      	b.n	8001edc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4970      	ldr	r1, [pc, #448]	; (8001ee4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0cf      	b.n	8001edc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d908      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4960      	ldr	r1, [pc, #384]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d04c      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	4b5a      	ldr	r3, [pc, #360]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d121      	bne.n	8001dce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0a6      	b.n	8001edc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	4b54      	ldr	r3, [pc, #336]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d115      	bne.n	8001dce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e09a      	b.n	8001edc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dae:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e08e      	b.n	8001edc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e086      	b.n	8001edc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4943      	ldr	r1, [pc, #268]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de0:	f7fe ffd0 	bl	8000d84 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7fe ffcc 	bl	8000d84 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e06e      	b.n	8001edc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d010      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d208      	bcs.n	8001e3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	492b      	ldr	r1, [pc, #172]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d210      	bcs.n	8001e6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 0207 	bic.w	r2, r3, #7
 8001e54:	4923      	ldr	r1, [pc, #140]	; (8001ee4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e036      	b.n	8001edc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4918      	ldr	r1, [pc, #96]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d009      	beq.n	8001eac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4910      	ldr	r1, [pc, #64]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eac:	f000 f824 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	490b      	ldr	r1, [pc, #44]	; (8001eec <HAL_RCC_ClockConfig+0x1f4>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x1fc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ff07 	bl	8000ce4 <HAL_InitTick>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eda:	7afb      	ldrb	r3, [r7, #11]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08004b28 	.word	0x08004b28
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f10:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x34>
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d121      	bne.n	8001f6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d11e      	bne.n	8001f6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f2c:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f38:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e005      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f54:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10d      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	e004      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d134      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d003      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xac>
 8001f9c:	e005      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa0:	617b      	str	r3, [r7, #20]
      break;
 8001fa2:	e005      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fa6:	617b      	str	r3, [r7, #20]
      break;
 8001fa8:	e002      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	617b      	str	r3, [r7, #20]
      break;
 8001fae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	3301      	adds	r3, #1
 8001fbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	fb03 f202 	mul.w	r2, r3, r2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	0e5b      	lsrs	r3, r3, #25
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	08004b40 	.word	0x08004b40
 8002008:	00f42400 	.word	0x00f42400
 800200c:	007a1200 	.word	0x007a1200

08002010 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_RCC_GetHCLKFreq+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000

08002028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800202c:	f7ff fff0 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4904      	ldr	r1, [pc, #16]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x28>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	08004b38 	.word	0x08004b38

08002054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002058:	f7ff ffda 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	0adb      	lsrs	r3, r3, #11
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4904      	ldr	r1, [pc, #16]	; (800207c <HAL_RCC_GetPCLK2Freq+0x28>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	08004b38 	.word	0x08004b38

08002080 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002098:	f7ff f9ee 	bl	8001478 <HAL_PWREx_GetVoltageRange>
 800209c:	6178      	str	r0, [r7, #20]
 800209e:	e014      	b.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4a24      	ldr	r2, [pc, #144]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020b8:	f7ff f9de 	bl	8001478 <HAL_PWREx_GetVoltageRange>
 80020bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d0:	d10b      	bne.n	80020ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d919      	bls.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2ba0      	cmp	r3, #160	; 0xa0
 80020dc:	d902      	bls.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020de:	2302      	movs	r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e013      	b.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e4:	2301      	movs	r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	e010      	b.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d902      	bls.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f0:	2303      	movs	r3, #3
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	e00a      	b.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d102      	bne.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020fc:	2302      	movs	r3, #2
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e004      	b.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b70      	cmp	r3, #112	; 0x70
 8002106:	d101      	bne.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002108:	2301      	movs	r3, #1
 800210a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 0207 	bic.w	r2, r3, #7
 8002114:	4909      	ldr	r1, [pc, #36]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	40022000 	.word	0x40022000

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002148:	2300      	movs	r3, #0
 800214a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800214c:	2300      	movs	r3, #0
 800214e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002158:	2b00      	cmp	r3, #0
 800215a:	d041      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002160:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002164:	d02a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002166:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800216a:	d824      	bhi.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800216c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002170:	d008      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002176:	d81e      	bhi.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800217c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002180:	d010      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002182:	e018      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002184:	4b86      	ldr	r3, [pc, #536]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a85      	ldr	r2, [pc, #532]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002190:	e015      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f000 facb 	bl	8002734 <RCCEx_PLLSAI1_Config>
 800219e:	4603      	mov	r3, r0
 80021a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021a2:	e00c      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3320      	adds	r3, #32
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fbb6 	bl	800291c <RCCEx_PLLSAI2_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021b4:	e003      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	74fb      	strb	r3, [r7, #19]
      break;
 80021ba:	e000      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10b      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021c4:	4b76      	ldr	r3, [pc, #472]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d2:	4973      	ldr	r1, [pc, #460]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021da:	e001      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d041      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021f4:	d02a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021fa:	d824      	bhi.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002200:	d008      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002206:	d81e      	bhi.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d010      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002212:	e018      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002214:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a61      	ldr	r2, [pc, #388]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002220:	e015      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fa83 	bl	8002734 <RCCEx_PLLSAI1_Config>
 800222e:	4603      	mov	r3, r0
 8002230:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002232:	e00c      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3320      	adds	r3, #32
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fb6e 	bl	800291c <RCCEx_PLLSAI2_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002244:	e003      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	74fb      	strb	r3, [r7, #19]
      break;
 800224a:	e000      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800224c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002254:	4b52      	ldr	r3, [pc, #328]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002262:	494f      	ldr	r1, [pc, #316]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800226a:	e001      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80a0 	beq.w	80023be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00d      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b41      	ldr	r3, [pc, #260]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	4a40      	ldr	r2, [pc, #256]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6593      	str	r3, [r2, #88]	; 0x58
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b0:	2301      	movs	r3, #1
 80022b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b4:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a3a      	ldr	r2, [pc, #232]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022c0:	f7fe fd60 	bl	8000d84 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022c6:	e009      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe fd5c 	bl	8000d84 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d902      	bls.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	74fb      	strb	r3, [r7, #19]
        break;
 80022da:	e005      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ef      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d15c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01f      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	d019      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002316:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe fd1b 	bl	8000d84 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002350:	e00b      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fd17 	bl	8000d84 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d902      	bls.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	74fb      	strb	r3, [r7, #19]
            break;
 8002368:	e006      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ec      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238e:	4904      	ldr	r1, [pc, #16]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002396:	e009      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	74bb      	strb	r3, [r7, #18]
 800239c:	e006      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ac:	7c7b      	ldrb	r3, [r7, #17]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d105      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b2:	4b9e      	ldr	r3, [pc, #632]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	4a9d      	ldr	r2, [pc, #628]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ca:	4b98      	ldr	r3, [pc, #608]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f023 0203 	bic.w	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	4994      	ldr	r1, [pc, #592]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ec:	4b8f      	ldr	r3, [pc, #572]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 020c 	bic.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	498c      	ldr	r1, [pc, #560]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800240e:	4b87      	ldr	r3, [pc, #540]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4983      	ldr	r1, [pc, #524]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002430:	4b7e      	ldr	r3, [pc, #504]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	497b      	ldr	r1, [pc, #492]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002460:	4972      	ldr	r1, [pc, #456]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002474:	4b6d      	ldr	r3, [pc, #436]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	496a      	ldr	r1, [pc, #424]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002496:	4b65      	ldr	r3, [pc, #404]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	4961      	ldr	r1, [pc, #388]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024b8:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	4959      	ldr	r1, [pc, #356]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024da:	4b54      	ldr	r3, [pc, #336]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e8:	4950      	ldr	r1, [pc, #320]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024fc:	4b4b      	ldr	r3, [pc, #300]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	4948      	ldr	r1, [pc, #288]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800251e:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	493f      	ldr	r1, [pc, #252]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d028      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254e:	4937      	ldr	r1, [pc, #220]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800255e:	d106      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a31      	ldr	r2, [pc, #196]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256a:	60d3      	str	r3, [r2, #12]
 800256c:	e011      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002576:	d10c      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	2101      	movs	r1, #1
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f8d8 	bl	8002734 <RCCEx_PLLSAI1_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d028      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800259e:	4b23      	ldr	r3, [pc, #140]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	491f      	ldr	r1, [pc, #124]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025bc:	d106      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c8:	60d3      	str	r3, [r2, #12]
 80025ca:	e011      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f8a9 	bl	8002734 <RCCEx_PLLSAI1_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d02b      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261a:	d109      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a02      	ldr	r2, [pc, #8]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
 8002628:	e014      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002638:	d10c      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	2101      	movs	r1, #1
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f877 	bl	8002734 <RCCEx_PLLSAI1_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02f      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002660:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800266e:	4928      	ldr	r1, [pc, #160]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800267e:	d10d      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	2102      	movs	r1, #2
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f854 	bl	8002734 <RCCEx_PLLSAI1_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d014      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	74bb      	strb	r3, [r7, #18]
 800269a:	e011      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3320      	adds	r3, #32
 80026aa:	2102      	movs	r1, #2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f935 	bl	800291c <RCCEx_PLLSAI2_Config>
 80026b2:	4603      	mov	r3, r0
 80026b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026da:	490d      	ldr	r1, [pc, #52]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026fe:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002706:	7cbb      	ldrb	r3, [r7, #18]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000

08002734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002742:	4b75      	ldr	r3, [pc, #468]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d018      	beq.n	8002780 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800274e:	4b72      	ldr	r3, [pc, #456]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0203 	and.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d10d      	bne.n	800277a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
       ||
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002766:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
       ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d047      	beq.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e044      	b.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d018      	beq.n	80027ba <RCCEx_PLLSAI1_Config+0x86>
 8002788:	2b03      	cmp	r3, #3
 800278a:	d825      	bhi.n	80027d8 <RCCEx_PLLSAI1_Config+0xa4>
 800278c:	2b01      	cmp	r3, #1
 800278e:	d002      	beq.n	8002796 <RCCEx_PLLSAI1_Config+0x62>
 8002790:	2b02      	cmp	r3, #2
 8002792:	d009      	beq.n	80027a8 <RCCEx_PLLSAI1_Config+0x74>
 8002794:	e020      	b.n	80027d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002796:	4b60      	ldr	r3, [pc, #384]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11d      	bne.n	80027de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a6:	e01a      	b.n	80027de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027a8:	4b5b      	ldr	r3, [pc, #364]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d116      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b8:	e013      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ba:	4b57      	ldr	r3, [pc, #348]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027c6:	4b54      	ldr	r3, [pc, #336]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027d6:	e006      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      break;
 80027dc:	e004      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027de:	bf00      	nop
 80027e0:	e002      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ee:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	430b      	orrs	r3, r1
 8002804:	4944      	ldr	r1, [pc, #272]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d17d      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002810:	4b41      	ldr	r3, [pc, #260]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a40      	ldr	r2, [pc, #256]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800281a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7fe fab2 	bl	8000d84 <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002822:	e009      	b.n	8002838 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002824:	f7fe faae 	bl	8000d84 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d902      	bls.n	8002838 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	73fb      	strb	r3, [r7, #15]
        break;
 8002836:	e005      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002838:	4b37      	ldr	r3, [pc, #220]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ef      	bne.n	8002824 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d160      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d111      	bne.n	8002874 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6892      	ldr	r2, [r2, #8]
 8002860:	0211      	lsls	r1, r2, #8
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	0912      	lsrs	r2, r2, #4
 8002868:	0452      	lsls	r2, r2, #17
 800286a:	430a      	orrs	r2, r1
 800286c:	492a      	ldr	r1, [pc, #168]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	610b      	str	r3, [r1, #16]
 8002872:	e027      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d112      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	0211      	lsls	r1, r2, #8
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6912      	ldr	r2, [r2, #16]
 8002890:	0852      	lsrs	r2, r2, #1
 8002892:	3a01      	subs	r2, #1
 8002894:	0552      	lsls	r2, r2, #21
 8002896:	430a      	orrs	r2, r1
 8002898:	491f      	ldr	r1, [pc, #124]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
 800289e:	e011      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6952      	ldr	r2, [r2, #20]
 80028b6:	0852      	lsrs	r2, r2, #1
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0652      	lsls	r2, r2, #25
 80028bc:	430a      	orrs	r2, r1
 80028be:	4916      	ldr	r1, [pc, #88]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe fa58 	bl	8000d84 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d6:	e009      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d8:	f7fe fa54 	bl	8000d84 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d902      	bls.n	80028ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]
          break;
 80028ea:	e005      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ef      	beq.n	80028d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4904      	ldr	r1, [pc, #16]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800292a:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
       ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800294e:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
       ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d047      	beq.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e044      	b.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d018      	beq.n	80029a2 <RCCEx_PLLSAI2_Config+0x86>
 8002970:	2b03      	cmp	r3, #3
 8002972:	d825      	bhi.n	80029c0 <RCCEx_PLLSAI2_Config+0xa4>
 8002974:	2b01      	cmp	r3, #1
 8002976:	d002      	beq.n	800297e <RCCEx_PLLSAI2_Config+0x62>
 8002978:	2b02      	cmp	r3, #2
 800297a:	d009      	beq.n	8002990 <RCCEx_PLLSAI2_Config+0x74>
 800297c:	e020      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800297e:	4b55      	ldr	r3, [pc, #340]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11d      	bne.n	80029c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298e:	e01a      	b.n	80029c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e013      	b.n	80029ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029a2:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ae:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029be:	e006      	b.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      break;
 80029c4:	e004      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	430b      	orrs	r3, r1
 80029ec:	4939      	ldr	r1, [pc, #228]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d167      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a35      	ldr	r2, [pc, #212]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe f9be 	bl	8000d84 <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a0a:	e009      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a0c:	f7fe f9ba 	bl	8000d84 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a1e:	e005      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a20:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ef      	bne.n	8002a0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d14a      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6892      	ldr	r2, [r2, #8]
 8002a48:	0211      	lsls	r1, r2, #8
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	0912      	lsrs	r2, r2, #4
 8002a50:	0452      	lsls	r2, r2, #17
 8002a52:	430a      	orrs	r2, r1
 8002a54:	491f      	ldr	r1, [pc, #124]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	614b      	str	r3, [r1, #20]
 8002a5a:	e011      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	0211      	lsls	r1, r2, #8
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6912      	ldr	r2, [r2, #16]
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f97a 	bl	8000d84 <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a92:	e009      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a94:	f7fe f976 	bl	8000d84 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa6:	e005      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d079      	beq.n	8002bde <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fd ff40 	bl	8000984 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d058      	beq.n	8002bcc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	22ca      	movs	r2, #202	; 0xca
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2253      	movs	r2, #83	; 0x53
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa4e 	bl	8002fcc <RTC_EnterInitMode>
 8002b30:	4603      	mov	r3, r0
 8002b32:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d127      	bne.n	8002b8a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6899      	ldr	r1, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68d2      	ldr	r2, [r2, #12]
 8002b74:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6919      	ldr	r1, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa52 	bl	8003034 <RTC_ExitInitMode>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d113      	bne.n	8002bc2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0203 	bic.w	r2, r2, #3
 8002ba8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	22ff      	movs	r2, #255	; 0xff
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bca:	e001      	b.n	8002bd0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_RTC_SetTime+0x1a>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e08b      	b.n	8002d1a <HAL_RTC_SetTime+0x132>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	22ca      	movs	r2, #202	; 0xca
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2253      	movs	r2, #83	; 0x53
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f9d2 	bl	8002fcc <RTC_EnterInitMode>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d163      	bne.n	8002cfa <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d126      	bne.n	8002c86 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fa2d 	bl	80030b0 <RTC_ByteToBcd2>
 8002c56:	4603      	mov	r3, r0
 8002c58:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fa26 	bl	80030b0 <RTC_ByteToBcd2>
 8002c64:	4603      	mov	r3, r0
 8002c66:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c68:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	789b      	ldrb	r3, [r3, #2]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fa1e 	bl	80030b0 <RTC_ByteToBcd2>
 8002c74:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c76:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	78db      	ldrb	r3, [r3, #3]
 8002c7e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e018      	b.n	8002cb8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ca6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	78db      	ldrb	r3, [r3, #3]
 8002cb2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cc6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f99f 	bl	8003034 <RTC_ExitInitMode>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	22ff      	movs	r2, #255	; 0xff
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d103      	bne.n	8002d10 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}

08002d22 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d50:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	0d9b      	lsrs	r3, r3, #22
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11a      	bne.n	8002dd0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f9a6 	bl	80030f0 <RTC_Bcd2ToByte>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f99d 	bl	80030f0 <RTC_Bcd2ToByte>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	789b      	ldrb	r3, [r3, #2]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f994 	bl	80030f0 <RTC_Bcd2ToByte>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dda:	b590      	push	{r4, r7, lr}
 8002ddc:	b087      	sub	sp, #28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_RTC_SetDate+0x1a>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e075      	b.n	8002ee0 <HAL_RTC_SetDate+0x106>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10e      	bne.n	8002e28 <HAL_RTC_SetDate+0x4e>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	f023 0310 	bic.w	r3, r3, #16
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	330a      	adds	r3, #10
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	78db      	ldrb	r3, [r3, #3]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f93c 	bl	80030b0 <RTC_ByteToBcd2>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	785b      	ldrb	r3, [r3, #1]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f935 	bl	80030b0 <RTC_ByteToBcd2>
 8002e46:	4603      	mov	r3, r0
 8002e48:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e4a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	789b      	ldrb	r3, [r3, #2]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f92d 	bl	80030b0 <RTC_ByteToBcd2>
 8002e56:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e58:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e00e      	b.n	8002e86 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	78db      	ldrb	r3, [r3, #3]
 8002e6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e74:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	22ca      	movs	r2, #202	; 0xca
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2253      	movs	r2, #83	; 0x53
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f898 	bl	8002fcc <RTC_EnterInitMode>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002eb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002eb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8bc 	bl	8003034 <RTC_ExitInitMode>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}

08002ee8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002efe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	0c1b      	lsrs	r3, r3, #16
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	0b5b      	lsrs	r3, r3, #13
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11a      	bne.n	8002f78 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	78db      	ldrb	r3, [r3, #3]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f8d2 	bl	80030f0 <RTC_Bcd2ToByte>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	785b      	ldrb	r3, [r3, #1]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f8c9 	bl	80030f0 <RTC_Bcd2ToByte>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	789b      	ldrb	r3, [r3, #2]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f8c0 	bl	80030f0 <RTC_Bcd2ToByte>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <HAL_RTC_WaitForSynchro+0x44>)
 8002f92:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002f94:	f7fd fef6 	bl	8000d84 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f9c:	f7fd fef2 	bl	8000d84 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002faa:	d901      	bls.n	8002fb0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e007      	b.n	8002fc0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ee      	beq.n	8002f9c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	0003ff5f 	.word	0x0003ff5f

08002fcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d120      	bne.n	8003028 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295
 8002fee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ff0:	f7fd fec8 	bl	8000d84 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ff6:	e00d      	b.n	8003014 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ff8:	f7fd fec4 	bl	8000d84 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003006:	d905      	bls.n	8003014 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2203      	movs	r2, #3
 8003010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <RTC_EnterInitMode+0x5c>
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d1e7      	bne.n	8002ff8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <RTC_ExitInitMode+0x78>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <RTC_ExitInitMode+0x78>)
 8003046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <RTC_ExitInitMode+0x78>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10c      	bne.n	8003072 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff93 	bl	8002f84 <HAL_RTC_WaitForSynchro>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01e      	beq.n	80030a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2203      	movs	r2, #3
 8003068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e017      	b.n	80030a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <RTC_ExitInitMode+0x78>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <RTC_ExitInitMode+0x78>)
 8003078:	f023 0320 	bic.w	r3, r3, #32
 800307c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ff80 	bl	8002f84 <HAL_RTC_WaitForSynchro>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2203      	movs	r2, #3
 800308e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <RTC_ExitInitMode+0x78>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4a04      	ldr	r2, [pc, #16]	; (80030ac <RTC_ExitInitMode+0x78>)
 800309c:	f043 0320 	orr.w	r3, r3, #32
 80030a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40002800 	.word	0x40002800

080030b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80030c2:	e005      	b.n	80030d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	3b0a      	subs	r3, #10
 80030ce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	2b09      	cmp	r3, #9
 80030d4:	d8f6      	bhi.n	80030c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	7afb      	ldrb	r3, [r7, #11]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b2db      	uxtb	r3, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4413      	add	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	b2da      	uxtb	r2, r3
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	4413      	add	r3, r2
 8003116:	b2db      	uxtb	r3, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e040      	b.n	80031b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fc4e 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fb6a 	bl	8003844 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f8af 	bl	80032d4 <UART_SetConfig>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e01b      	b.n	80031b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fbe9 	bl	8003988 <UART_CheckIdleState>
 80031b6:	4603      	mov	r3, r0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d178      	bne.n	80032ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_Transmit+0x24>
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e071      	b.n	80032cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2221      	movs	r2, #33	; 0x21
 80031f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f6:	f7fd fdc5 	bl	8000d84 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003214:	d108      	bne.n	8003228 <HAL_UART_Transmit+0x68>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	e003      	b.n	8003230 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003230:	e030      	b.n	8003294 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fc4b 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e03c      	b.n	80032cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	881a      	ldrh	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003264:	b292      	uxth	r2, r2
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	3302      	adds	r3, #2
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e008      	b.n	8003282 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b292      	uxth	r2, r2
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3301      	adds	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1c8      	bne.n	8003232 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fc14 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e005      	b.n	80032cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d8:	b08a      	sub	sp, #40	; 0x28
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4ba4      	ldr	r3, [pc, #656]	; (8003594 <UART_SetConfig+0x2c0>)
 8003304:	4013      	ands	r3, r2
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800330c:	430b      	orrs	r3, r1
 800330e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a99      	ldr	r2, [pc, #612]	; (8003598 <UART_SetConfig+0x2c4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333c:	4313      	orrs	r3, r2
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a90      	ldr	r2, [pc, #576]	; (800359c <UART_SetConfig+0x2c8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d126      	bne.n	80033ac <UART_SetConfig+0xd8>
 800335e:	4b90      	ldr	r3, [pc, #576]	; (80035a0 <UART_SetConfig+0x2cc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b03      	cmp	r3, #3
 800336a:	d81b      	bhi.n	80033a4 <UART_SetConfig+0xd0>
 800336c:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <UART_SetConfig+0xa0>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	08003385 	.word	0x08003385
 8003378:	08003395 	.word	0x08003395
 800337c:	0800338d 	.word	0x0800338d
 8003380:	0800339d 	.word	0x0800339d
 8003384:	2301      	movs	r3, #1
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338a:	e116      	b.n	80035ba <UART_SetConfig+0x2e6>
 800338c:	2302      	movs	r3, #2
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003392:	e112      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003394:	2304      	movs	r3, #4
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339a:	e10e      	b.n	80035ba <UART_SetConfig+0x2e6>
 800339c:	2308      	movs	r3, #8
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a2:	e10a      	b.n	80035ba <UART_SetConfig+0x2e6>
 80033a4:	2310      	movs	r3, #16
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033aa:	e106      	b.n	80035ba <UART_SetConfig+0x2e6>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a7c      	ldr	r2, [pc, #496]	; (80035a4 <UART_SetConfig+0x2d0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d138      	bne.n	8003428 <UART_SetConfig+0x154>
 80033b6:	4b7a      	ldr	r3, [pc, #488]	; (80035a0 <UART_SetConfig+0x2cc>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d82d      	bhi.n	8003420 <UART_SetConfig+0x14c>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0xf8>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003421 	.word	0x08003421
 80033d4:	08003421 	.word	0x08003421
 80033d8:	08003421 	.word	0x08003421
 80033dc:	08003411 	.word	0x08003411
 80033e0:	08003421 	.word	0x08003421
 80033e4:	08003421 	.word	0x08003421
 80033e8:	08003421 	.word	0x08003421
 80033ec:	08003409 	.word	0x08003409
 80033f0:	08003421 	.word	0x08003421
 80033f4:	08003421 	.word	0x08003421
 80033f8:	08003421 	.word	0x08003421
 80033fc:	08003419 	.word	0x08003419
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003406:	e0d8      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003408:	2302      	movs	r3, #2
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340e:	e0d4      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003410:	2304      	movs	r3, #4
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003416:	e0d0      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003418:	2308      	movs	r3, #8
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341e:	e0cc      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003420:	2310      	movs	r3, #16
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003426:	e0c8      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a5e      	ldr	r2, [pc, #376]	; (80035a8 <UART_SetConfig+0x2d4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d125      	bne.n	800347e <UART_SetConfig+0x1aa>
 8003432:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <UART_SetConfig+0x2cc>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800343c:	2b30      	cmp	r3, #48	; 0x30
 800343e:	d016      	beq.n	800346e <UART_SetConfig+0x19a>
 8003440:	2b30      	cmp	r3, #48	; 0x30
 8003442:	d818      	bhi.n	8003476 <UART_SetConfig+0x1a2>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d00a      	beq.n	800345e <UART_SetConfig+0x18a>
 8003448:	2b20      	cmp	r3, #32
 800344a:	d814      	bhi.n	8003476 <UART_SetConfig+0x1a2>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <UART_SetConfig+0x182>
 8003450:	2b10      	cmp	r3, #16
 8003452:	d008      	beq.n	8003466 <UART_SetConfig+0x192>
 8003454:	e00f      	b.n	8003476 <UART_SetConfig+0x1a2>
 8003456:	2300      	movs	r3, #0
 8003458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345c:	e0ad      	b.n	80035ba <UART_SetConfig+0x2e6>
 800345e:	2302      	movs	r3, #2
 8003460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003464:	e0a9      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003466:	2304      	movs	r3, #4
 8003468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346c:	e0a5      	b.n	80035ba <UART_SetConfig+0x2e6>
 800346e:	2308      	movs	r3, #8
 8003470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003474:	e0a1      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003476:	2310      	movs	r3, #16
 8003478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347c:	e09d      	b.n	80035ba <UART_SetConfig+0x2e6>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <UART_SetConfig+0x2d8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d125      	bne.n	80034d4 <UART_SetConfig+0x200>
 8003488:	4b45      	ldr	r3, [pc, #276]	; (80035a0 <UART_SetConfig+0x2cc>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003492:	2bc0      	cmp	r3, #192	; 0xc0
 8003494:	d016      	beq.n	80034c4 <UART_SetConfig+0x1f0>
 8003496:	2bc0      	cmp	r3, #192	; 0xc0
 8003498:	d818      	bhi.n	80034cc <UART_SetConfig+0x1f8>
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	d00a      	beq.n	80034b4 <UART_SetConfig+0x1e0>
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d814      	bhi.n	80034cc <UART_SetConfig+0x1f8>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <UART_SetConfig+0x1d8>
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d008      	beq.n	80034bc <UART_SetConfig+0x1e8>
 80034aa:	e00f      	b.n	80034cc <UART_SetConfig+0x1f8>
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e082      	b.n	80035ba <UART_SetConfig+0x2e6>
 80034b4:	2302      	movs	r3, #2
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e07e      	b.n	80035ba <UART_SetConfig+0x2e6>
 80034bc:	2304      	movs	r3, #4
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e07a      	b.n	80035ba <UART_SetConfig+0x2e6>
 80034c4:	2308      	movs	r3, #8
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e076      	b.n	80035ba <UART_SetConfig+0x2e6>
 80034cc:	2310      	movs	r3, #16
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d2:	e072      	b.n	80035ba <UART_SetConfig+0x2e6>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a35      	ldr	r2, [pc, #212]	; (80035b0 <UART_SetConfig+0x2dc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d12a      	bne.n	8003534 <UART_SetConfig+0x260>
 80034de:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <UART_SetConfig+0x2cc>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ec:	d01a      	beq.n	8003524 <UART_SetConfig+0x250>
 80034ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f2:	d81b      	bhi.n	800352c <UART_SetConfig+0x258>
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f8:	d00c      	beq.n	8003514 <UART_SetConfig+0x240>
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fe:	d815      	bhi.n	800352c <UART_SetConfig+0x258>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <UART_SetConfig+0x238>
 8003504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003508:	d008      	beq.n	800351c <UART_SetConfig+0x248>
 800350a:	e00f      	b.n	800352c <UART_SetConfig+0x258>
 800350c:	2300      	movs	r3, #0
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003512:	e052      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003514:	2302      	movs	r3, #2
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351a:	e04e      	b.n	80035ba <UART_SetConfig+0x2e6>
 800351c:	2304      	movs	r3, #4
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003522:	e04a      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003524:	2308      	movs	r3, #8
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352a:	e046      	b.n	80035ba <UART_SetConfig+0x2e6>
 800352c:	2310      	movs	r3, #16
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003532:	e042      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <UART_SetConfig+0x2c4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d13a      	bne.n	80035b4 <UART_SetConfig+0x2e0>
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <UART_SetConfig+0x2cc>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800354c:	d01a      	beq.n	8003584 <UART_SetConfig+0x2b0>
 800354e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003552:	d81b      	bhi.n	800358c <UART_SetConfig+0x2b8>
 8003554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003558:	d00c      	beq.n	8003574 <UART_SetConfig+0x2a0>
 800355a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800355e:	d815      	bhi.n	800358c <UART_SetConfig+0x2b8>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <UART_SetConfig+0x298>
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d008      	beq.n	800357c <UART_SetConfig+0x2a8>
 800356a:	e00f      	b.n	800358c <UART_SetConfig+0x2b8>
 800356c:	2300      	movs	r3, #0
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003572:	e022      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003574:	2302      	movs	r3, #2
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e01e      	b.n	80035ba <UART_SetConfig+0x2e6>
 800357c:	2304      	movs	r3, #4
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e01a      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003584:	2308      	movs	r3, #8
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e016      	b.n	80035ba <UART_SetConfig+0x2e6>
 800358c:	2310      	movs	r3, #16
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e012      	b.n	80035ba <UART_SetConfig+0x2e6>
 8003594:	efff69f3 	.word	0xefff69f3
 8003598:	40008000 	.word	0x40008000
 800359c:	40013800 	.word	0x40013800
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40004400 	.word	0x40004400
 80035a8:	40004800 	.word	0x40004800
 80035ac:	40004c00 	.word	0x40004c00
 80035b0:	40005000 	.word	0x40005000
 80035b4:	2310      	movs	r3, #16
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a9f      	ldr	r2, [pc, #636]	; (800383c <UART_SetConfig+0x568>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d17a      	bne.n	80036ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d824      	bhi.n	8003616 <UART_SetConfig+0x342>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0x300>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	08003617 	.word	0x08003617
 80035dc:	08003601 	.word	0x08003601
 80035e0:	08003617 	.word	0x08003617
 80035e4:	08003607 	.word	0x08003607
 80035e8:	08003617 	.word	0x08003617
 80035ec:	08003617 	.word	0x08003617
 80035f0:	08003617 	.word	0x08003617
 80035f4:	0800360f 	.word	0x0800360f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f8:	f7fe fd16 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 80035fc:	61f8      	str	r0, [r7, #28]
        break;
 80035fe:	e010      	b.n	8003622 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003600:	4b8f      	ldr	r3, [pc, #572]	; (8003840 <UART_SetConfig+0x56c>)
 8003602:	61fb      	str	r3, [r7, #28]
        break;
 8003604:	e00d      	b.n	8003622 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003606:	f7fe fc77 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 800360a:	61f8      	str	r0, [r7, #28]
        break;
 800360c:	e009      	b.n	8003622 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003612:	61fb      	str	r3, [r7, #28]
        break;
 8003614:	e005      	b.n	8003622 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003620:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80fb 	beq.w	8003820 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	429a      	cmp	r2, r3
 8003638:	d305      	bcc.n	8003646 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	429a      	cmp	r2, r3
 8003644:	d903      	bls.n	800364e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800364c:	e0e8      	b.n	8003820 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2200      	movs	r2, #0
 8003652:	461c      	mov	r4, r3
 8003654:	4615      	mov	r5, r2
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	022b      	lsls	r3, r5, #8
 8003660:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003664:	0222      	lsls	r2, r4, #8
 8003666:	68f9      	ldr	r1, [r7, #12]
 8003668:	6849      	ldr	r1, [r1, #4]
 800366a:	0849      	lsrs	r1, r1, #1
 800366c:	2000      	movs	r0, #0
 800366e:	4688      	mov	r8, r1
 8003670:	4681      	mov	r9, r0
 8003672:	eb12 0a08 	adds.w	sl, r2, r8
 8003676:	eb43 0b09 	adc.w	fp, r3, r9
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003688:	4650      	mov	r0, sl
 800368a:	4659      	mov	r1, fp
 800368c:	f7fc fdf0 	bl	8000270 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800369e:	d308      	bcc.n	80036b2 <UART_SetConfig+0x3de>
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a6:	d204      	bcs.n	80036b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	e0b6      	b.n	8003820 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036b8:	e0b2      	b.n	8003820 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c2:	d15e      	bne.n	8003782 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80036c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d828      	bhi.n	800371e <UART_SetConfig+0x44a>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <UART_SetConfig+0x400>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036f9 	.word	0x080036f9
 80036d8:	08003701 	.word	0x08003701
 80036dc:	08003709 	.word	0x08003709
 80036e0:	0800371f 	.word	0x0800371f
 80036e4:	0800370f 	.word	0x0800370f
 80036e8:	0800371f 	.word	0x0800371f
 80036ec:	0800371f 	.word	0x0800371f
 80036f0:	0800371f 	.word	0x0800371f
 80036f4:	08003717 	.word	0x08003717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f8:	f7fe fc96 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 80036fc:	61f8      	str	r0, [r7, #28]
        break;
 80036fe:	e014      	b.n	800372a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7fe fca8 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8003704:	61f8      	str	r0, [r7, #28]
        break;
 8003706:	e010      	b.n	800372a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003708:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <UART_SetConfig+0x56c>)
 800370a:	61fb      	str	r3, [r7, #28]
        break;
 800370c:	e00d      	b.n	800372a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370e:	f7fe fbf3 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8003712:	61f8      	str	r0, [r7, #28]
        break;
 8003714:	e009      	b.n	800372a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371a:	61fb      	str	r3, [r7, #28]
        break;
 800371c:	e005      	b.n	800372a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d077      	beq.n	8003820 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005a      	lsls	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	441a      	add	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b0f      	cmp	r3, #15
 800374a:	d916      	bls.n	800377a <UART_SetConfig+0x4a6>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003752:	d212      	bcs.n	800377a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	b29b      	uxth	r3, r3
 8003758:	f023 030f 	bic.w	r3, r3, #15
 800375c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	b29b      	uxth	r3, r3
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	b29a      	uxth	r2, r3
 800376a:	8afb      	ldrh	r3, [r7, #22]
 800376c:	4313      	orrs	r3, r2
 800376e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	8afa      	ldrh	r2, [r7, #22]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	e052      	b.n	8003820 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003780:	e04e      	b.n	8003820 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003782:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003786:	2b08      	cmp	r3, #8
 8003788:	d827      	bhi.n	80037da <UART_SetConfig+0x506>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <UART_SetConfig+0x4bc>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037b5 	.word	0x080037b5
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037c5 	.word	0x080037c5
 800379c:	080037db 	.word	0x080037db
 80037a0:	080037cb 	.word	0x080037cb
 80037a4:	080037db 	.word	0x080037db
 80037a8:	080037db 	.word	0x080037db
 80037ac:	080037db 	.word	0x080037db
 80037b0:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b4:	f7fe fc38 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 80037b8:	61f8      	str	r0, [r7, #28]
        break;
 80037ba:	e014      	b.n	80037e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7fe fc4a 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 80037c0:	61f8      	str	r0, [r7, #28]
        break;
 80037c2:	e010      	b.n	80037e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <UART_SetConfig+0x56c>)
 80037c6:	61fb      	str	r3, [r7, #28]
        break;
 80037c8:	e00d      	b.n	80037e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7fe fb95 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 80037ce:	61f8      	str	r0, [r7, #28]
        break;
 80037d0:	e009      	b.n	80037e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d6:	61fb      	str	r3, [r7, #28]
        break;
 80037d8:	e005      	b.n	80037e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037e4:	bf00      	nop
    }

    if (pclk != 0U)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d019      	beq.n	8003820 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	085a      	lsrs	r2, r3, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	441a      	add	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	d909      	bls.n	800381a <UART_SetConfig+0x546>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d205      	bcs.n	800381a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	e002      	b.n	8003820 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800382c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003830:	4618      	mov	r0, r3
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	40008000 	.word	0x40008000
 8003840:	00f42400 	.word	0x00f42400

08003844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01a      	beq.n	800395a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003942:	d10a      	bne.n	800395a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b098      	sub	sp, #96	; 0x60
 800398c:	af02      	add	r7, sp, #8
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003998:	f7fd f9f4 	bl	8000d84 <HAL_GetTick>
 800399c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d12e      	bne.n	8003a0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f88c 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d021      	beq.n	8003a0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039da:	653b      	str	r3, [r7, #80]	; 0x50
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
 80039e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e062      	b.n	8003ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d149      	bne.n	8003aac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f856 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03c      	beq.n	8003aac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
 8003a52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e6      	bne.n	8003a32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a84:	61fa      	str	r2, [r7, #28]
 8003a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	617b      	str	r3, [r7, #20]
   return(result);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e011      	b.n	8003ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3758      	adds	r7, #88	; 0x58
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	e049      	b.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d045      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fd f947 	bl	8000d84 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e048      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d031      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d110      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f838 	bl	8003ba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e029      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b58:	d111      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f81e 	bl	8003ba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e00f      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d0a6      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b095      	sub	sp, #84	; 0x54
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb6:	e853 3f00 	ldrex	r3, [r3]
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e6      	bne.n	8003bae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3308      	adds	r3, #8
 8003be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e5      	bne.n	8003be0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d118      	bne.n	8003c4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f023 0310 	bic.w	r3, r3, #16
 8003c30:	647b      	str	r3, [r7, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6979      	ldr	r1, [r7, #20]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	613b      	str	r3, [r7, #16]
   return(result);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e6      	bne.n	8003c1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c62:	bf00      	nop
 8003c64:	3754      	adds	r7, #84	; 0x54
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <std>:
 8003c70:	2300      	movs	r3, #0
 8003c72:	b510      	push	{r4, lr}
 8003c74:	4604      	mov	r4, r0
 8003c76:	e9c0 3300 	strd	r3, r3, [r0]
 8003c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c7e:	6083      	str	r3, [r0, #8]
 8003c80:	8181      	strh	r1, [r0, #12]
 8003c82:	6643      	str	r3, [r0, #100]	; 0x64
 8003c84:	81c2      	strh	r2, [r0, #14]
 8003c86:	6183      	str	r3, [r0, #24]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	305c      	adds	r0, #92	; 0x5c
 8003c8e:	f000 f906 	bl	8003e9e <memset>
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <std+0x58>)
 8003c94:	6263      	str	r3, [r4, #36]	; 0x24
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <std+0x5c>)
 8003c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <std+0x60>)
 8003c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <std+0x64>)
 8003ca0:	6323      	str	r3, [r4, #48]	; 0x30
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <std+0x68>)
 8003ca4:	6224      	str	r4, [r4, #32]
 8003ca6:	429c      	cmp	r4, r3
 8003ca8:	d006      	beq.n	8003cb8 <std+0x48>
 8003caa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003cae:	4294      	cmp	r4, r2
 8003cb0:	d002      	beq.n	8003cb8 <std+0x48>
 8003cb2:	33d0      	adds	r3, #208	; 0xd0
 8003cb4:	429c      	cmp	r4, r3
 8003cb6:	d105      	bne.n	8003cc4 <std+0x54>
 8003cb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc0:	f000 b966 	b.w	8003f90 <__retarget_lock_init_recursive>
 8003cc4:	bd10      	pop	{r4, pc}
 8003cc6:	bf00      	nop
 8003cc8:	08003e19 	.word	0x08003e19
 8003ccc:	08003e3b 	.word	0x08003e3b
 8003cd0:	08003e73 	.word	0x08003e73
 8003cd4:	08003e97 	.word	0x08003e97
 8003cd8:	20000148 	.word	0x20000148

08003cdc <stdio_exit_handler>:
 8003cdc:	4a02      	ldr	r2, [pc, #8]	; (8003ce8 <stdio_exit_handler+0xc>)
 8003cde:	4903      	ldr	r1, [pc, #12]	; (8003cec <stdio_exit_handler+0x10>)
 8003ce0:	4803      	ldr	r0, [pc, #12]	; (8003cf0 <stdio_exit_handler+0x14>)
 8003ce2:	f000 b869 	b.w	8003db8 <_fwalk_sglue>
 8003ce6:	bf00      	nop
 8003ce8:	2000000c 	.word	0x2000000c
 8003cec:	0800483d 	.word	0x0800483d
 8003cf0:	20000018 	.word	0x20000018

08003cf4 <cleanup_stdio>:
 8003cf4:	6841      	ldr	r1, [r0, #4]
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <cleanup_stdio+0x34>)
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	d001      	beq.n	8003d04 <cleanup_stdio+0x10>
 8003d00:	f000 fd9c 	bl	800483c <_fflush_r>
 8003d04:	68a1      	ldr	r1, [r4, #8]
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <cleanup_stdio+0x38>)
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	d002      	beq.n	8003d12 <cleanup_stdio+0x1e>
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f000 fd95 	bl	800483c <_fflush_r>
 8003d12:	68e1      	ldr	r1, [r4, #12]
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <cleanup_stdio+0x3c>)
 8003d16:	4299      	cmp	r1, r3
 8003d18:	d004      	beq.n	8003d24 <cleanup_stdio+0x30>
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d20:	f000 bd8c 	b.w	800483c <_fflush_r>
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	bf00      	nop
 8003d28:	20000148 	.word	0x20000148
 8003d2c:	200001b0 	.word	0x200001b0
 8003d30:	20000218 	.word	0x20000218

08003d34 <global_stdio_init.part.0>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <global_stdio_init.part.0+0x30>)
 8003d38:	4c0b      	ldr	r4, [pc, #44]	; (8003d68 <global_stdio_init.part.0+0x34>)
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <global_stdio_init.part.0+0x38>)
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	4620      	mov	r0, r4
 8003d40:	2200      	movs	r2, #0
 8003d42:	2104      	movs	r1, #4
 8003d44:	f7ff ff94 	bl	8003c70 <std>
 8003d48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	2109      	movs	r1, #9
 8003d50:	f7ff ff8e 	bl	8003c70 <std>
 8003d54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d58:	2202      	movs	r2, #2
 8003d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5e:	2112      	movs	r1, #18
 8003d60:	f7ff bf86 	b.w	8003c70 <std>
 8003d64:	20000280 	.word	0x20000280
 8003d68:	20000148 	.word	0x20000148
 8003d6c:	08003cdd 	.word	0x08003cdd

08003d70 <__sfp_lock_acquire>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__sfp_lock_acquire+0x8>)
 8003d72:	f000 b90e 	b.w	8003f92 <__retarget_lock_acquire_recursive>
 8003d76:	bf00      	nop
 8003d78:	20000289 	.word	0x20000289

08003d7c <__sfp_lock_release>:
 8003d7c:	4801      	ldr	r0, [pc, #4]	; (8003d84 <__sfp_lock_release+0x8>)
 8003d7e:	f000 b909 	b.w	8003f94 <__retarget_lock_release_recursive>
 8003d82:	bf00      	nop
 8003d84:	20000289 	.word	0x20000289

08003d88 <__sinit>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	f7ff fff0 	bl	8003d70 <__sfp_lock_acquire>
 8003d90:	6a23      	ldr	r3, [r4, #32]
 8003d92:	b11b      	cbz	r3, 8003d9c <__sinit+0x14>
 8003d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d98:	f7ff bff0 	b.w	8003d7c <__sfp_lock_release>
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <__sinit+0x28>)
 8003d9e:	6223      	str	r3, [r4, #32]
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <__sinit+0x2c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f5      	bne.n	8003d94 <__sinit+0xc>
 8003da8:	f7ff ffc4 	bl	8003d34 <global_stdio_init.part.0>
 8003dac:	e7f2      	b.n	8003d94 <__sinit+0xc>
 8003dae:	bf00      	nop
 8003db0:	08003cf5 	.word	0x08003cf5
 8003db4:	20000280 	.word	0x20000280

08003db8 <_fwalk_sglue>:
 8003db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dbc:	4607      	mov	r7, r0
 8003dbe:	4688      	mov	r8, r1
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dc8:	f1b9 0901 	subs.w	r9, r9, #1
 8003dcc:	d505      	bpl.n	8003dda <_fwalk_sglue+0x22>
 8003dce:	6824      	ldr	r4, [r4, #0]
 8003dd0:	2c00      	cmp	r4, #0
 8003dd2:	d1f7      	bne.n	8003dc4 <_fwalk_sglue+0xc>
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dda:	89ab      	ldrh	r3, [r5, #12]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d907      	bls.n	8003df0 <_fwalk_sglue+0x38>
 8003de0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003de4:	3301      	adds	r3, #1
 8003de6:	d003      	beq.n	8003df0 <_fwalk_sglue+0x38>
 8003de8:	4629      	mov	r1, r5
 8003dea:	4638      	mov	r0, r7
 8003dec:	47c0      	blx	r8
 8003dee:	4306      	orrs	r6, r0
 8003df0:	3568      	adds	r5, #104	; 0x68
 8003df2:	e7e9      	b.n	8003dc8 <_fwalk_sglue+0x10>

08003df4 <iprintf>:
 8003df4:	b40f      	push	{r0, r1, r2, r3}
 8003df6:	b507      	push	{r0, r1, r2, lr}
 8003df8:	4906      	ldr	r1, [pc, #24]	; (8003e14 <iprintf+0x20>)
 8003dfa:	ab04      	add	r3, sp, #16
 8003dfc:	6808      	ldr	r0, [r1, #0]
 8003dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e02:	6881      	ldr	r1, [r0, #8]
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	f000 f9e9 	bl	80041dc <_vfiprintf_r>
 8003e0a:	b003      	add	sp, #12
 8003e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e10:	b004      	add	sp, #16
 8003e12:	4770      	bx	lr
 8003e14:	20000064 	.word	0x20000064

08003e18 <__sread>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e20:	f000 f868 	bl	8003ef4 <_read_r>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	bfab      	itete	ge
 8003e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e2c:	181b      	addge	r3, r3, r0
 8003e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e32:	bfac      	ite	ge
 8003e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e36:	81a3      	strhlt	r3, [r4, #12]
 8003e38:	bd10      	pop	{r4, pc}

08003e3a <__swrite>:
 8003e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3e:	461f      	mov	r7, r3
 8003e40:	898b      	ldrh	r3, [r1, #12]
 8003e42:	05db      	lsls	r3, r3, #23
 8003e44:	4605      	mov	r5, r0
 8003e46:	460c      	mov	r4, r1
 8003e48:	4616      	mov	r6, r2
 8003e4a:	d505      	bpl.n	8003e58 <__swrite+0x1e>
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	2302      	movs	r3, #2
 8003e52:	2200      	movs	r2, #0
 8003e54:	f000 f83c 	bl	8003ed0 <_lseek_r>
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	4632      	mov	r2, r6
 8003e66:	463b      	mov	r3, r7
 8003e68:	4628      	mov	r0, r5
 8003e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6e:	f000 b853 	b.w	8003f18 <_write_r>

08003e72 <__sseek>:
 8003e72:	b510      	push	{r4, lr}
 8003e74:	460c      	mov	r4, r1
 8003e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7a:	f000 f829 	bl	8003ed0 <_lseek_r>
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	bf15      	itete	ne
 8003e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e8e:	81a3      	strheq	r3, [r4, #12]
 8003e90:	bf18      	it	ne
 8003e92:	81a3      	strhne	r3, [r4, #12]
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <__sclose>:
 8003e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9a:	f000 b809 	b.w	8003eb0 <_close_r>

08003e9e <memset>:
 8003e9e:	4402      	add	r2, r0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d100      	bne.n	8003ea8 <memset+0xa>
 8003ea6:	4770      	bx	lr
 8003ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8003eac:	e7f9      	b.n	8003ea2 <memset+0x4>
	...

08003eb0 <_close_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4d06      	ldr	r5, [pc, #24]	; (8003ecc <_close_r+0x1c>)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f7fc fe53 	bl	8000b66 <_close>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_close_r+0x1a>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_close_r+0x1a>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000284 	.word	0x20000284

08003ed0 <_lseek_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4d07      	ldr	r5, [pc, #28]	; (8003ef0 <_lseek_r+0x20>)
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	4611      	mov	r1, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	602a      	str	r2, [r5, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7fc fe68 	bl	8000bb4 <_lseek>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_lseek_r+0x1e>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_lseek_r+0x1e>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	20000284 	.word	0x20000284

08003ef4 <_read_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d07      	ldr	r5, [pc, #28]	; (8003f14 <_read_r+0x20>)
 8003ef8:	4604      	mov	r4, r0
 8003efa:	4608      	mov	r0, r1
 8003efc:	4611      	mov	r1, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f7fc fdf6 	bl	8000af4 <_read>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_read_r+0x1e>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_read_r+0x1e>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	20000284 	.word	0x20000284

08003f18 <_write_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d07      	ldr	r5, [pc, #28]	; (8003f38 <_write_r+0x20>)
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	4608      	mov	r0, r1
 8003f20:	4611      	mov	r1, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	602a      	str	r2, [r5, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f7fc fe01 	bl	8000b2e <_write>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d102      	bne.n	8003f36 <_write_r+0x1e>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	b103      	cbz	r3, 8003f36 <_write_r+0x1e>
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	20000284 	.word	0x20000284

08003f3c <__errno>:
 8003f3c:	4b01      	ldr	r3, [pc, #4]	; (8003f44 <__errno+0x8>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000064 	.word	0x20000064

08003f48 <__libc_init_array>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	4d0d      	ldr	r5, [pc, #52]	; (8003f80 <__libc_init_array+0x38>)
 8003f4c:	4c0d      	ldr	r4, [pc, #52]	; (8003f84 <__libc_init_array+0x3c>)
 8003f4e:	1b64      	subs	r4, r4, r5
 8003f50:	10a4      	asrs	r4, r4, #2
 8003f52:	2600      	movs	r6, #0
 8003f54:	42a6      	cmp	r6, r4
 8003f56:	d109      	bne.n	8003f6c <__libc_init_array+0x24>
 8003f58:	4d0b      	ldr	r5, [pc, #44]	; (8003f88 <__libc_init_array+0x40>)
 8003f5a:	4c0c      	ldr	r4, [pc, #48]	; (8003f8c <__libc_init_array+0x44>)
 8003f5c:	f000 fdc0 	bl	8004ae0 <_init>
 8003f60:	1b64      	subs	r4, r4, r5
 8003f62:	10a4      	asrs	r4, r4, #2
 8003f64:	2600      	movs	r6, #0
 8003f66:	42a6      	cmp	r6, r4
 8003f68:	d105      	bne.n	8003f76 <__libc_init_array+0x2e>
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
 8003f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f70:	4798      	blx	r3
 8003f72:	3601      	adds	r6, #1
 8003f74:	e7ee      	b.n	8003f54 <__libc_init_array+0xc>
 8003f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7a:	4798      	blx	r3
 8003f7c:	3601      	adds	r6, #1
 8003f7e:	e7f2      	b.n	8003f66 <__libc_init_array+0x1e>
 8003f80:	08004bac 	.word	0x08004bac
 8003f84:	08004bac 	.word	0x08004bac
 8003f88:	08004bac 	.word	0x08004bac
 8003f8c:	08004bb0 	.word	0x08004bb0

08003f90 <__retarget_lock_init_recursive>:
 8003f90:	4770      	bx	lr

08003f92 <__retarget_lock_acquire_recursive>:
 8003f92:	4770      	bx	lr

08003f94 <__retarget_lock_release_recursive>:
 8003f94:	4770      	bx	lr
	...

08003f98 <_free_r>:
 8003f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f9a:	2900      	cmp	r1, #0
 8003f9c:	d044      	beq.n	8004028 <_free_r+0x90>
 8003f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fa2:	9001      	str	r0, [sp, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8003faa:	bfb8      	it	lt
 8003fac:	18e4      	addlt	r4, r4, r3
 8003fae:	f000 f8df 	bl	8004170 <__malloc_lock>
 8003fb2:	4a1e      	ldr	r2, [pc, #120]	; (800402c <_free_r+0x94>)
 8003fb4:	9801      	ldr	r0, [sp, #4]
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	b933      	cbnz	r3, 8003fc8 <_free_r+0x30>
 8003fba:	6063      	str	r3, [r4, #4]
 8003fbc:	6014      	str	r4, [r2, #0]
 8003fbe:	b003      	add	sp, #12
 8003fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fc4:	f000 b8da 	b.w	800417c <__malloc_unlock>
 8003fc8:	42a3      	cmp	r3, r4
 8003fca:	d908      	bls.n	8003fde <_free_r+0x46>
 8003fcc:	6825      	ldr	r5, [r4, #0]
 8003fce:	1961      	adds	r1, r4, r5
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	bf01      	itttt	eq
 8003fd4:	6819      	ldreq	r1, [r3, #0]
 8003fd6:	685b      	ldreq	r3, [r3, #4]
 8003fd8:	1949      	addeq	r1, r1, r5
 8003fda:	6021      	streq	r1, [r4, #0]
 8003fdc:	e7ed      	b.n	8003fba <_free_r+0x22>
 8003fde:	461a      	mov	r2, r3
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	b10b      	cbz	r3, 8003fe8 <_free_r+0x50>
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	d9fa      	bls.n	8003fde <_free_r+0x46>
 8003fe8:	6811      	ldr	r1, [r2, #0]
 8003fea:	1855      	adds	r5, r2, r1
 8003fec:	42a5      	cmp	r5, r4
 8003fee:	d10b      	bne.n	8004008 <_free_r+0x70>
 8003ff0:	6824      	ldr	r4, [r4, #0]
 8003ff2:	4421      	add	r1, r4
 8003ff4:	1854      	adds	r4, r2, r1
 8003ff6:	42a3      	cmp	r3, r4
 8003ff8:	6011      	str	r1, [r2, #0]
 8003ffa:	d1e0      	bne.n	8003fbe <_free_r+0x26>
 8003ffc:	681c      	ldr	r4, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	6053      	str	r3, [r2, #4]
 8004002:	440c      	add	r4, r1
 8004004:	6014      	str	r4, [r2, #0]
 8004006:	e7da      	b.n	8003fbe <_free_r+0x26>
 8004008:	d902      	bls.n	8004010 <_free_r+0x78>
 800400a:	230c      	movs	r3, #12
 800400c:	6003      	str	r3, [r0, #0]
 800400e:	e7d6      	b.n	8003fbe <_free_r+0x26>
 8004010:	6825      	ldr	r5, [r4, #0]
 8004012:	1961      	adds	r1, r4, r5
 8004014:	428b      	cmp	r3, r1
 8004016:	bf04      	itt	eq
 8004018:	6819      	ldreq	r1, [r3, #0]
 800401a:	685b      	ldreq	r3, [r3, #4]
 800401c:	6063      	str	r3, [r4, #4]
 800401e:	bf04      	itt	eq
 8004020:	1949      	addeq	r1, r1, r5
 8004022:	6021      	streq	r1, [r4, #0]
 8004024:	6054      	str	r4, [r2, #4]
 8004026:	e7ca      	b.n	8003fbe <_free_r+0x26>
 8004028:	b003      	add	sp, #12
 800402a:	bd30      	pop	{r4, r5, pc}
 800402c:	2000028c 	.word	0x2000028c

08004030 <sbrk_aligned>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	4e0e      	ldr	r6, [pc, #56]	; (800406c <sbrk_aligned+0x3c>)
 8004034:	460c      	mov	r4, r1
 8004036:	6831      	ldr	r1, [r6, #0]
 8004038:	4605      	mov	r5, r0
 800403a:	b911      	cbnz	r1, 8004042 <sbrk_aligned+0x12>
 800403c:	f000 fcbc 	bl	80049b8 <_sbrk_r>
 8004040:	6030      	str	r0, [r6, #0]
 8004042:	4621      	mov	r1, r4
 8004044:	4628      	mov	r0, r5
 8004046:	f000 fcb7 	bl	80049b8 <_sbrk_r>
 800404a:	1c43      	adds	r3, r0, #1
 800404c:	d00a      	beq.n	8004064 <sbrk_aligned+0x34>
 800404e:	1cc4      	adds	r4, r0, #3
 8004050:	f024 0403 	bic.w	r4, r4, #3
 8004054:	42a0      	cmp	r0, r4
 8004056:	d007      	beq.n	8004068 <sbrk_aligned+0x38>
 8004058:	1a21      	subs	r1, r4, r0
 800405a:	4628      	mov	r0, r5
 800405c:	f000 fcac 	bl	80049b8 <_sbrk_r>
 8004060:	3001      	adds	r0, #1
 8004062:	d101      	bne.n	8004068 <sbrk_aligned+0x38>
 8004064:	f04f 34ff 	mov.w	r4, #4294967295
 8004068:	4620      	mov	r0, r4
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	20000290 	.word	0x20000290

08004070 <_malloc_r>:
 8004070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004074:	1ccd      	adds	r5, r1, #3
 8004076:	f025 0503 	bic.w	r5, r5, #3
 800407a:	3508      	adds	r5, #8
 800407c:	2d0c      	cmp	r5, #12
 800407e:	bf38      	it	cc
 8004080:	250c      	movcc	r5, #12
 8004082:	2d00      	cmp	r5, #0
 8004084:	4607      	mov	r7, r0
 8004086:	db01      	blt.n	800408c <_malloc_r+0x1c>
 8004088:	42a9      	cmp	r1, r5
 800408a:	d905      	bls.n	8004098 <_malloc_r+0x28>
 800408c:	230c      	movs	r3, #12
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	2600      	movs	r6, #0
 8004092:	4630      	mov	r0, r6
 8004094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004098:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800416c <_malloc_r+0xfc>
 800409c:	f000 f868 	bl	8004170 <__malloc_lock>
 80040a0:	f8d8 3000 	ldr.w	r3, [r8]
 80040a4:	461c      	mov	r4, r3
 80040a6:	bb5c      	cbnz	r4, 8004100 <_malloc_r+0x90>
 80040a8:	4629      	mov	r1, r5
 80040aa:	4638      	mov	r0, r7
 80040ac:	f7ff ffc0 	bl	8004030 <sbrk_aligned>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	4604      	mov	r4, r0
 80040b4:	d155      	bne.n	8004162 <_malloc_r+0xf2>
 80040b6:	f8d8 4000 	ldr.w	r4, [r8]
 80040ba:	4626      	mov	r6, r4
 80040bc:	2e00      	cmp	r6, #0
 80040be:	d145      	bne.n	800414c <_malloc_r+0xdc>
 80040c0:	2c00      	cmp	r4, #0
 80040c2:	d048      	beq.n	8004156 <_malloc_r+0xe6>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	4631      	mov	r1, r6
 80040c8:	4638      	mov	r0, r7
 80040ca:	eb04 0903 	add.w	r9, r4, r3
 80040ce:	f000 fc73 	bl	80049b8 <_sbrk_r>
 80040d2:	4581      	cmp	r9, r0
 80040d4:	d13f      	bne.n	8004156 <_malloc_r+0xe6>
 80040d6:	6821      	ldr	r1, [r4, #0]
 80040d8:	1a6d      	subs	r5, r5, r1
 80040da:	4629      	mov	r1, r5
 80040dc:	4638      	mov	r0, r7
 80040de:	f7ff ffa7 	bl	8004030 <sbrk_aligned>
 80040e2:	3001      	adds	r0, #1
 80040e4:	d037      	beq.n	8004156 <_malloc_r+0xe6>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	442b      	add	r3, r5
 80040ea:	6023      	str	r3, [r4, #0]
 80040ec:	f8d8 3000 	ldr.w	r3, [r8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d038      	beq.n	8004166 <_malloc_r+0xf6>
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	42a2      	cmp	r2, r4
 80040f8:	d12b      	bne.n	8004152 <_malloc_r+0xe2>
 80040fa:	2200      	movs	r2, #0
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	e00f      	b.n	8004120 <_malloc_r+0xb0>
 8004100:	6822      	ldr	r2, [r4, #0]
 8004102:	1b52      	subs	r2, r2, r5
 8004104:	d41f      	bmi.n	8004146 <_malloc_r+0xd6>
 8004106:	2a0b      	cmp	r2, #11
 8004108:	d917      	bls.n	800413a <_malloc_r+0xca>
 800410a:	1961      	adds	r1, r4, r5
 800410c:	42a3      	cmp	r3, r4
 800410e:	6025      	str	r5, [r4, #0]
 8004110:	bf18      	it	ne
 8004112:	6059      	strne	r1, [r3, #4]
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	bf08      	it	eq
 8004118:	f8c8 1000 	streq.w	r1, [r8]
 800411c:	5162      	str	r2, [r4, r5]
 800411e:	604b      	str	r3, [r1, #4]
 8004120:	4638      	mov	r0, r7
 8004122:	f104 060b 	add.w	r6, r4, #11
 8004126:	f000 f829 	bl	800417c <__malloc_unlock>
 800412a:	f026 0607 	bic.w	r6, r6, #7
 800412e:	1d23      	adds	r3, r4, #4
 8004130:	1af2      	subs	r2, r6, r3
 8004132:	d0ae      	beq.n	8004092 <_malloc_r+0x22>
 8004134:	1b9b      	subs	r3, r3, r6
 8004136:	50a3      	str	r3, [r4, r2]
 8004138:	e7ab      	b.n	8004092 <_malloc_r+0x22>
 800413a:	42a3      	cmp	r3, r4
 800413c:	6862      	ldr	r2, [r4, #4]
 800413e:	d1dd      	bne.n	80040fc <_malloc_r+0x8c>
 8004140:	f8c8 2000 	str.w	r2, [r8]
 8004144:	e7ec      	b.n	8004120 <_malloc_r+0xb0>
 8004146:	4623      	mov	r3, r4
 8004148:	6864      	ldr	r4, [r4, #4]
 800414a:	e7ac      	b.n	80040a6 <_malloc_r+0x36>
 800414c:	4634      	mov	r4, r6
 800414e:	6876      	ldr	r6, [r6, #4]
 8004150:	e7b4      	b.n	80040bc <_malloc_r+0x4c>
 8004152:	4613      	mov	r3, r2
 8004154:	e7cc      	b.n	80040f0 <_malloc_r+0x80>
 8004156:	230c      	movs	r3, #12
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4638      	mov	r0, r7
 800415c:	f000 f80e 	bl	800417c <__malloc_unlock>
 8004160:	e797      	b.n	8004092 <_malloc_r+0x22>
 8004162:	6025      	str	r5, [r4, #0]
 8004164:	e7dc      	b.n	8004120 <_malloc_r+0xb0>
 8004166:	605b      	str	r3, [r3, #4]
 8004168:	deff      	udf	#255	; 0xff
 800416a:	bf00      	nop
 800416c:	2000028c 	.word	0x2000028c

08004170 <__malloc_lock>:
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <__malloc_lock+0x8>)
 8004172:	f7ff bf0e 	b.w	8003f92 <__retarget_lock_acquire_recursive>
 8004176:	bf00      	nop
 8004178:	20000288 	.word	0x20000288

0800417c <__malloc_unlock>:
 800417c:	4801      	ldr	r0, [pc, #4]	; (8004184 <__malloc_unlock+0x8>)
 800417e:	f7ff bf09 	b.w	8003f94 <__retarget_lock_release_recursive>
 8004182:	bf00      	nop
 8004184:	20000288 	.word	0x20000288

08004188 <__sfputc_r>:
 8004188:	6893      	ldr	r3, [r2, #8]
 800418a:	3b01      	subs	r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	b410      	push	{r4}
 8004190:	6093      	str	r3, [r2, #8]
 8004192:	da08      	bge.n	80041a6 <__sfputc_r+0x1e>
 8004194:	6994      	ldr	r4, [r2, #24]
 8004196:	42a3      	cmp	r3, r4
 8004198:	db01      	blt.n	800419e <__sfputc_r+0x16>
 800419a:	290a      	cmp	r1, #10
 800419c:	d103      	bne.n	80041a6 <__sfputc_r+0x1e>
 800419e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041a2:	f000 bb73 	b.w	800488c <__swbuf_r>
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	1c58      	adds	r0, r3, #1
 80041aa:	6010      	str	r0, [r2, #0]
 80041ac:	7019      	strb	r1, [r3, #0]
 80041ae:	4608      	mov	r0, r1
 80041b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <__sfputs_r>:
 80041b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b8:	4606      	mov	r6, r0
 80041ba:	460f      	mov	r7, r1
 80041bc:	4614      	mov	r4, r2
 80041be:	18d5      	adds	r5, r2, r3
 80041c0:	42ac      	cmp	r4, r5
 80041c2:	d101      	bne.n	80041c8 <__sfputs_r+0x12>
 80041c4:	2000      	movs	r0, #0
 80041c6:	e007      	b.n	80041d8 <__sfputs_r+0x22>
 80041c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041cc:	463a      	mov	r2, r7
 80041ce:	4630      	mov	r0, r6
 80041d0:	f7ff ffda 	bl	8004188 <__sfputc_r>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d1f3      	bne.n	80041c0 <__sfputs_r+0xa>
 80041d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041dc <_vfiprintf_r>:
 80041dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e0:	460d      	mov	r5, r1
 80041e2:	b09d      	sub	sp, #116	; 0x74
 80041e4:	4614      	mov	r4, r2
 80041e6:	4698      	mov	r8, r3
 80041e8:	4606      	mov	r6, r0
 80041ea:	b118      	cbz	r0, 80041f4 <_vfiprintf_r+0x18>
 80041ec:	6a03      	ldr	r3, [r0, #32]
 80041ee:	b90b      	cbnz	r3, 80041f4 <_vfiprintf_r+0x18>
 80041f0:	f7ff fdca 	bl	8003d88 <__sinit>
 80041f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041f6:	07d9      	lsls	r1, r3, #31
 80041f8:	d405      	bmi.n	8004206 <_vfiprintf_r+0x2a>
 80041fa:	89ab      	ldrh	r3, [r5, #12]
 80041fc:	059a      	lsls	r2, r3, #22
 80041fe:	d402      	bmi.n	8004206 <_vfiprintf_r+0x2a>
 8004200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004202:	f7ff fec6 	bl	8003f92 <__retarget_lock_acquire_recursive>
 8004206:	89ab      	ldrh	r3, [r5, #12]
 8004208:	071b      	lsls	r3, r3, #28
 800420a:	d501      	bpl.n	8004210 <_vfiprintf_r+0x34>
 800420c:	692b      	ldr	r3, [r5, #16]
 800420e:	b99b      	cbnz	r3, 8004238 <_vfiprintf_r+0x5c>
 8004210:	4629      	mov	r1, r5
 8004212:	4630      	mov	r0, r6
 8004214:	f000 fb78 	bl	8004908 <__swsetup_r>
 8004218:	b170      	cbz	r0, 8004238 <_vfiprintf_r+0x5c>
 800421a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800421c:	07dc      	lsls	r4, r3, #31
 800421e:	d504      	bpl.n	800422a <_vfiprintf_r+0x4e>
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	b01d      	add	sp, #116	; 0x74
 8004226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422a:	89ab      	ldrh	r3, [r5, #12]
 800422c:	0598      	lsls	r0, r3, #22
 800422e:	d4f7      	bmi.n	8004220 <_vfiprintf_r+0x44>
 8004230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004232:	f7ff feaf 	bl	8003f94 <__retarget_lock_release_recursive>
 8004236:	e7f3      	b.n	8004220 <_vfiprintf_r+0x44>
 8004238:	2300      	movs	r3, #0
 800423a:	9309      	str	r3, [sp, #36]	; 0x24
 800423c:	2320      	movs	r3, #32
 800423e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004242:	f8cd 800c 	str.w	r8, [sp, #12]
 8004246:	2330      	movs	r3, #48	; 0x30
 8004248:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80043fc <_vfiprintf_r+0x220>
 800424c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004250:	f04f 0901 	mov.w	r9, #1
 8004254:	4623      	mov	r3, r4
 8004256:	469a      	mov	sl, r3
 8004258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800425c:	b10a      	cbz	r2, 8004262 <_vfiprintf_r+0x86>
 800425e:	2a25      	cmp	r2, #37	; 0x25
 8004260:	d1f9      	bne.n	8004256 <_vfiprintf_r+0x7a>
 8004262:	ebba 0b04 	subs.w	fp, sl, r4
 8004266:	d00b      	beq.n	8004280 <_vfiprintf_r+0xa4>
 8004268:	465b      	mov	r3, fp
 800426a:	4622      	mov	r2, r4
 800426c:	4629      	mov	r1, r5
 800426e:	4630      	mov	r0, r6
 8004270:	f7ff ffa1 	bl	80041b6 <__sfputs_r>
 8004274:	3001      	adds	r0, #1
 8004276:	f000 80a9 	beq.w	80043cc <_vfiprintf_r+0x1f0>
 800427a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800427c:	445a      	add	r2, fp
 800427e:	9209      	str	r2, [sp, #36]	; 0x24
 8004280:	f89a 3000 	ldrb.w	r3, [sl]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80a1 	beq.w	80043cc <_vfiprintf_r+0x1f0>
 800428a:	2300      	movs	r3, #0
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004294:	f10a 0a01 	add.w	sl, sl, #1
 8004298:	9304      	str	r3, [sp, #16]
 800429a:	9307      	str	r3, [sp, #28]
 800429c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042a0:	931a      	str	r3, [sp, #104]	; 0x68
 80042a2:	4654      	mov	r4, sl
 80042a4:	2205      	movs	r2, #5
 80042a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042aa:	4854      	ldr	r0, [pc, #336]	; (80043fc <_vfiprintf_r+0x220>)
 80042ac:	f7fb ff90 	bl	80001d0 <memchr>
 80042b0:	9a04      	ldr	r2, [sp, #16]
 80042b2:	b9d8      	cbnz	r0, 80042ec <_vfiprintf_r+0x110>
 80042b4:	06d1      	lsls	r1, r2, #27
 80042b6:	bf44      	itt	mi
 80042b8:	2320      	movmi	r3, #32
 80042ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042be:	0713      	lsls	r3, r2, #28
 80042c0:	bf44      	itt	mi
 80042c2:	232b      	movmi	r3, #43	; 0x2b
 80042c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c8:	f89a 3000 	ldrb.w	r3, [sl]
 80042cc:	2b2a      	cmp	r3, #42	; 0x2a
 80042ce:	d015      	beq.n	80042fc <_vfiprintf_r+0x120>
 80042d0:	9a07      	ldr	r2, [sp, #28]
 80042d2:	4654      	mov	r4, sl
 80042d4:	2000      	movs	r0, #0
 80042d6:	f04f 0c0a 	mov.w	ip, #10
 80042da:	4621      	mov	r1, r4
 80042dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042e0:	3b30      	subs	r3, #48	; 0x30
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	d94d      	bls.n	8004382 <_vfiprintf_r+0x1a6>
 80042e6:	b1b0      	cbz	r0, 8004316 <_vfiprintf_r+0x13a>
 80042e8:	9207      	str	r2, [sp, #28]
 80042ea:	e014      	b.n	8004316 <_vfiprintf_r+0x13a>
 80042ec:	eba0 0308 	sub.w	r3, r0, r8
 80042f0:	fa09 f303 	lsl.w	r3, r9, r3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	46a2      	mov	sl, r4
 80042fa:	e7d2      	b.n	80042a2 <_vfiprintf_r+0xc6>
 80042fc:	9b03      	ldr	r3, [sp, #12]
 80042fe:	1d19      	adds	r1, r3, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	9103      	str	r1, [sp, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	bfbb      	ittet	lt
 8004308:	425b      	neglt	r3, r3
 800430a:	f042 0202 	orrlt.w	r2, r2, #2
 800430e:	9307      	strge	r3, [sp, #28]
 8004310:	9307      	strlt	r3, [sp, #28]
 8004312:	bfb8      	it	lt
 8004314:	9204      	strlt	r2, [sp, #16]
 8004316:	7823      	ldrb	r3, [r4, #0]
 8004318:	2b2e      	cmp	r3, #46	; 0x2e
 800431a:	d10c      	bne.n	8004336 <_vfiprintf_r+0x15a>
 800431c:	7863      	ldrb	r3, [r4, #1]
 800431e:	2b2a      	cmp	r3, #42	; 0x2a
 8004320:	d134      	bne.n	800438c <_vfiprintf_r+0x1b0>
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	1d1a      	adds	r2, r3, #4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	9203      	str	r2, [sp, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	bfb8      	it	lt
 800432e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004332:	3402      	adds	r4, #2
 8004334:	9305      	str	r3, [sp, #20]
 8004336:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800440c <_vfiprintf_r+0x230>
 800433a:	7821      	ldrb	r1, [r4, #0]
 800433c:	2203      	movs	r2, #3
 800433e:	4650      	mov	r0, sl
 8004340:	f7fb ff46 	bl	80001d0 <memchr>
 8004344:	b138      	cbz	r0, 8004356 <_vfiprintf_r+0x17a>
 8004346:	9b04      	ldr	r3, [sp, #16]
 8004348:	eba0 000a 	sub.w	r0, r0, sl
 800434c:	2240      	movs	r2, #64	; 0x40
 800434e:	4082      	lsls	r2, r0
 8004350:	4313      	orrs	r3, r2
 8004352:	3401      	adds	r4, #1
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435a:	4829      	ldr	r0, [pc, #164]	; (8004400 <_vfiprintf_r+0x224>)
 800435c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004360:	2206      	movs	r2, #6
 8004362:	f7fb ff35 	bl	80001d0 <memchr>
 8004366:	2800      	cmp	r0, #0
 8004368:	d03f      	beq.n	80043ea <_vfiprintf_r+0x20e>
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <_vfiprintf_r+0x228>)
 800436c:	bb1b      	cbnz	r3, 80043b6 <_vfiprintf_r+0x1da>
 800436e:	9b03      	ldr	r3, [sp, #12]
 8004370:	3307      	adds	r3, #7
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	3308      	adds	r3, #8
 8004378:	9303      	str	r3, [sp, #12]
 800437a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437c:	443b      	add	r3, r7
 800437e:	9309      	str	r3, [sp, #36]	; 0x24
 8004380:	e768      	b.n	8004254 <_vfiprintf_r+0x78>
 8004382:	fb0c 3202 	mla	r2, ip, r2, r3
 8004386:	460c      	mov	r4, r1
 8004388:	2001      	movs	r0, #1
 800438a:	e7a6      	b.n	80042da <_vfiprintf_r+0xfe>
 800438c:	2300      	movs	r3, #0
 800438e:	3401      	adds	r4, #1
 8004390:	9305      	str	r3, [sp, #20]
 8004392:	4619      	mov	r1, r3
 8004394:	f04f 0c0a 	mov.w	ip, #10
 8004398:	4620      	mov	r0, r4
 800439a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800439e:	3a30      	subs	r2, #48	; 0x30
 80043a0:	2a09      	cmp	r2, #9
 80043a2:	d903      	bls.n	80043ac <_vfiprintf_r+0x1d0>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0c6      	beq.n	8004336 <_vfiprintf_r+0x15a>
 80043a8:	9105      	str	r1, [sp, #20]
 80043aa:	e7c4      	b.n	8004336 <_vfiprintf_r+0x15a>
 80043ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80043b0:	4604      	mov	r4, r0
 80043b2:	2301      	movs	r3, #1
 80043b4:	e7f0      	b.n	8004398 <_vfiprintf_r+0x1bc>
 80043b6:	ab03      	add	r3, sp, #12
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	462a      	mov	r2, r5
 80043bc:	4b12      	ldr	r3, [pc, #72]	; (8004408 <_vfiprintf_r+0x22c>)
 80043be:	a904      	add	r1, sp, #16
 80043c0:	4630      	mov	r0, r6
 80043c2:	f3af 8000 	nop.w
 80043c6:	4607      	mov	r7, r0
 80043c8:	1c78      	adds	r0, r7, #1
 80043ca:	d1d6      	bne.n	800437a <_vfiprintf_r+0x19e>
 80043cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043ce:	07d9      	lsls	r1, r3, #31
 80043d0:	d405      	bmi.n	80043de <_vfiprintf_r+0x202>
 80043d2:	89ab      	ldrh	r3, [r5, #12]
 80043d4:	059a      	lsls	r2, r3, #22
 80043d6:	d402      	bmi.n	80043de <_vfiprintf_r+0x202>
 80043d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043da:	f7ff fddb 	bl	8003f94 <__retarget_lock_release_recursive>
 80043de:	89ab      	ldrh	r3, [r5, #12]
 80043e0:	065b      	lsls	r3, r3, #25
 80043e2:	f53f af1d 	bmi.w	8004220 <_vfiprintf_r+0x44>
 80043e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043e8:	e71c      	b.n	8004224 <_vfiprintf_r+0x48>
 80043ea:	ab03      	add	r3, sp, #12
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	462a      	mov	r2, r5
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <_vfiprintf_r+0x22c>)
 80043f2:	a904      	add	r1, sp, #16
 80043f4:	4630      	mov	r0, r6
 80043f6:	f000 f879 	bl	80044ec <_printf_i>
 80043fa:	e7e4      	b.n	80043c6 <_vfiprintf_r+0x1ea>
 80043fc:	08004b70 	.word	0x08004b70
 8004400:	08004b7a 	.word	0x08004b7a
 8004404:	00000000 	.word	0x00000000
 8004408:	080041b7 	.word	0x080041b7
 800440c:	08004b76 	.word	0x08004b76

08004410 <_printf_common>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	4616      	mov	r6, r2
 8004416:	4699      	mov	r9, r3
 8004418:	688a      	ldr	r2, [r1, #8]
 800441a:	690b      	ldr	r3, [r1, #16]
 800441c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004420:	4293      	cmp	r3, r2
 8004422:	bfb8      	it	lt
 8004424:	4613      	movlt	r3, r2
 8004426:	6033      	str	r3, [r6, #0]
 8004428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800442c:	4607      	mov	r7, r0
 800442e:	460c      	mov	r4, r1
 8004430:	b10a      	cbz	r2, 8004436 <_printf_common+0x26>
 8004432:	3301      	adds	r3, #1
 8004434:	6033      	str	r3, [r6, #0]
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	0699      	lsls	r1, r3, #26
 800443a:	bf42      	ittt	mi
 800443c:	6833      	ldrmi	r3, [r6, #0]
 800443e:	3302      	addmi	r3, #2
 8004440:	6033      	strmi	r3, [r6, #0]
 8004442:	6825      	ldr	r5, [r4, #0]
 8004444:	f015 0506 	ands.w	r5, r5, #6
 8004448:	d106      	bne.n	8004458 <_printf_common+0x48>
 800444a:	f104 0a19 	add.w	sl, r4, #25
 800444e:	68e3      	ldr	r3, [r4, #12]
 8004450:	6832      	ldr	r2, [r6, #0]
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	42ab      	cmp	r3, r5
 8004456:	dc26      	bgt.n	80044a6 <_printf_common+0x96>
 8004458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800445c:	1e13      	subs	r3, r2, #0
 800445e:	6822      	ldr	r2, [r4, #0]
 8004460:	bf18      	it	ne
 8004462:	2301      	movne	r3, #1
 8004464:	0692      	lsls	r2, r2, #26
 8004466:	d42b      	bmi.n	80044c0 <_printf_common+0xb0>
 8004468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800446c:	4649      	mov	r1, r9
 800446e:	4638      	mov	r0, r7
 8004470:	47c0      	blx	r8
 8004472:	3001      	adds	r0, #1
 8004474:	d01e      	beq.n	80044b4 <_printf_common+0xa4>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	6922      	ldr	r2, [r4, #16]
 800447a:	f003 0306 	and.w	r3, r3, #6
 800447e:	2b04      	cmp	r3, #4
 8004480:	bf02      	ittt	eq
 8004482:	68e5      	ldreq	r5, [r4, #12]
 8004484:	6833      	ldreq	r3, [r6, #0]
 8004486:	1aed      	subeq	r5, r5, r3
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	bf0c      	ite	eq
 800448c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004490:	2500      	movne	r5, #0
 8004492:	4293      	cmp	r3, r2
 8004494:	bfc4      	itt	gt
 8004496:	1a9b      	subgt	r3, r3, r2
 8004498:	18ed      	addgt	r5, r5, r3
 800449a:	2600      	movs	r6, #0
 800449c:	341a      	adds	r4, #26
 800449e:	42b5      	cmp	r5, r6
 80044a0:	d11a      	bne.n	80044d8 <_printf_common+0xc8>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e008      	b.n	80044b8 <_printf_common+0xa8>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4652      	mov	r2, sl
 80044aa:	4649      	mov	r1, r9
 80044ac:	4638      	mov	r0, r7
 80044ae:	47c0      	blx	r8
 80044b0:	3001      	adds	r0, #1
 80044b2:	d103      	bne.n	80044bc <_printf_common+0xac>
 80044b4:	f04f 30ff 	mov.w	r0, #4294967295
 80044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044bc:	3501      	adds	r5, #1
 80044be:	e7c6      	b.n	800444e <_printf_common+0x3e>
 80044c0:	18e1      	adds	r1, r4, r3
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	2030      	movs	r0, #48	; 0x30
 80044c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ca:	4422      	add	r2, r4
 80044cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044d4:	3302      	adds	r3, #2
 80044d6:	e7c7      	b.n	8004468 <_printf_common+0x58>
 80044d8:	2301      	movs	r3, #1
 80044da:	4622      	mov	r2, r4
 80044dc:	4649      	mov	r1, r9
 80044de:	4638      	mov	r0, r7
 80044e0:	47c0      	blx	r8
 80044e2:	3001      	adds	r0, #1
 80044e4:	d0e6      	beq.n	80044b4 <_printf_common+0xa4>
 80044e6:	3601      	adds	r6, #1
 80044e8:	e7d9      	b.n	800449e <_printf_common+0x8e>
	...

080044ec <_printf_i>:
 80044ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	7e0f      	ldrb	r7, [r1, #24]
 80044f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044f4:	2f78      	cmp	r7, #120	; 0x78
 80044f6:	4691      	mov	r9, r2
 80044f8:	4680      	mov	r8, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	469a      	mov	sl, r3
 80044fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004502:	d807      	bhi.n	8004514 <_printf_i+0x28>
 8004504:	2f62      	cmp	r7, #98	; 0x62
 8004506:	d80a      	bhi.n	800451e <_printf_i+0x32>
 8004508:	2f00      	cmp	r7, #0
 800450a:	f000 80d4 	beq.w	80046b6 <_printf_i+0x1ca>
 800450e:	2f58      	cmp	r7, #88	; 0x58
 8004510:	f000 80c0 	beq.w	8004694 <_printf_i+0x1a8>
 8004514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800451c:	e03a      	b.n	8004594 <_printf_i+0xa8>
 800451e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004522:	2b15      	cmp	r3, #21
 8004524:	d8f6      	bhi.n	8004514 <_printf_i+0x28>
 8004526:	a101      	add	r1, pc, #4	; (adr r1, 800452c <_printf_i+0x40>)
 8004528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800452c:	08004585 	.word	0x08004585
 8004530:	08004599 	.word	0x08004599
 8004534:	08004515 	.word	0x08004515
 8004538:	08004515 	.word	0x08004515
 800453c:	08004515 	.word	0x08004515
 8004540:	08004515 	.word	0x08004515
 8004544:	08004599 	.word	0x08004599
 8004548:	08004515 	.word	0x08004515
 800454c:	08004515 	.word	0x08004515
 8004550:	08004515 	.word	0x08004515
 8004554:	08004515 	.word	0x08004515
 8004558:	0800469d 	.word	0x0800469d
 800455c:	080045c5 	.word	0x080045c5
 8004560:	08004657 	.word	0x08004657
 8004564:	08004515 	.word	0x08004515
 8004568:	08004515 	.word	0x08004515
 800456c:	080046bf 	.word	0x080046bf
 8004570:	08004515 	.word	0x08004515
 8004574:	080045c5 	.word	0x080045c5
 8004578:	08004515 	.word	0x08004515
 800457c:	08004515 	.word	0x08004515
 8004580:	0800465f 	.word	0x0800465f
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	602a      	str	r2, [r5, #0]
 800458c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004594:	2301      	movs	r3, #1
 8004596:	e09f      	b.n	80046d8 <_printf_i+0x1ec>
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	0607      	lsls	r7, r0, #24
 800459e:	f103 0104 	add.w	r1, r3, #4
 80045a2:	6029      	str	r1, [r5, #0]
 80045a4:	d501      	bpl.n	80045aa <_printf_i+0xbe>
 80045a6:	681e      	ldr	r6, [r3, #0]
 80045a8:	e003      	b.n	80045b2 <_printf_i+0xc6>
 80045aa:	0646      	lsls	r6, r0, #25
 80045ac:	d5fb      	bpl.n	80045a6 <_printf_i+0xba>
 80045ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	da03      	bge.n	80045be <_printf_i+0xd2>
 80045b6:	232d      	movs	r3, #45	; 0x2d
 80045b8:	4276      	negs	r6, r6
 80045ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045be:	485a      	ldr	r0, [pc, #360]	; (8004728 <_printf_i+0x23c>)
 80045c0:	230a      	movs	r3, #10
 80045c2:	e012      	b.n	80045ea <_printf_i+0xfe>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	6820      	ldr	r0, [r4, #0]
 80045c8:	1d19      	adds	r1, r3, #4
 80045ca:	6029      	str	r1, [r5, #0]
 80045cc:	0605      	lsls	r5, r0, #24
 80045ce:	d501      	bpl.n	80045d4 <_printf_i+0xe8>
 80045d0:	681e      	ldr	r6, [r3, #0]
 80045d2:	e002      	b.n	80045da <_printf_i+0xee>
 80045d4:	0641      	lsls	r1, r0, #25
 80045d6:	d5fb      	bpl.n	80045d0 <_printf_i+0xe4>
 80045d8:	881e      	ldrh	r6, [r3, #0]
 80045da:	4853      	ldr	r0, [pc, #332]	; (8004728 <_printf_i+0x23c>)
 80045dc:	2f6f      	cmp	r7, #111	; 0x6f
 80045de:	bf0c      	ite	eq
 80045e0:	2308      	moveq	r3, #8
 80045e2:	230a      	movne	r3, #10
 80045e4:	2100      	movs	r1, #0
 80045e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ea:	6865      	ldr	r5, [r4, #4]
 80045ec:	60a5      	str	r5, [r4, #8]
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	bfa2      	ittt	ge
 80045f2:	6821      	ldrge	r1, [r4, #0]
 80045f4:	f021 0104 	bicge.w	r1, r1, #4
 80045f8:	6021      	strge	r1, [r4, #0]
 80045fa:	b90e      	cbnz	r6, 8004600 <_printf_i+0x114>
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	d04b      	beq.n	8004698 <_printf_i+0x1ac>
 8004600:	4615      	mov	r5, r2
 8004602:	fbb6 f1f3 	udiv	r1, r6, r3
 8004606:	fb03 6711 	mls	r7, r3, r1, r6
 800460a:	5dc7      	ldrb	r7, [r0, r7]
 800460c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004610:	4637      	mov	r7, r6
 8004612:	42bb      	cmp	r3, r7
 8004614:	460e      	mov	r6, r1
 8004616:	d9f4      	bls.n	8004602 <_printf_i+0x116>
 8004618:	2b08      	cmp	r3, #8
 800461a:	d10b      	bne.n	8004634 <_printf_i+0x148>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	07de      	lsls	r6, r3, #31
 8004620:	d508      	bpl.n	8004634 <_printf_i+0x148>
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	6861      	ldr	r1, [r4, #4]
 8004626:	4299      	cmp	r1, r3
 8004628:	bfde      	ittt	le
 800462a:	2330      	movle	r3, #48	; 0x30
 800462c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004634:	1b52      	subs	r2, r2, r5
 8004636:	6122      	str	r2, [r4, #16]
 8004638:	f8cd a000 	str.w	sl, [sp]
 800463c:	464b      	mov	r3, r9
 800463e:	aa03      	add	r2, sp, #12
 8004640:	4621      	mov	r1, r4
 8004642:	4640      	mov	r0, r8
 8004644:	f7ff fee4 	bl	8004410 <_printf_common>
 8004648:	3001      	adds	r0, #1
 800464a:	d14a      	bne.n	80046e2 <_printf_i+0x1f6>
 800464c:	f04f 30ff 	mov.w	r0, #4294967295
 8004650:	b004      	add	sp, #16
 8004652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	f043 0320 	orr.w	r3, r3, #32
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	4833      	ldr	r0, [pc, #204]	; (800472c <_printf_i+0x240>)
 8004660:	2778      	movs	r7, #120	; 0x78
 8004662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	6829      	ldr	r1, [r5, #0]
 800466a:	061f      	lsls	r7, r3, #24
 800466c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004670:	d402      	bmi.n	8004678 <_printf_i+0x18c>
 8004672:	065f      	lsls	r7, r3, #25
 8004674:	bf48      	it	mi
 8004676:	b2b6      	uxthmi	r6, r6
 8004678:	07df      	lsls	r7, r3, #31
 800467a:	bf48      	it	mi
 800467c:	f043 0320 	orrmi.w	r3, r3, #32
 8004680:	6029      	str	r1, [r5, #0]
 8004682:	bf48      	it	mi
 8004684:	6023      	strmi	r3, [r4, #0]
 8004686:	b91e      	cbnz	r6, 8004690 <_printf_i+0x1a4>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f023 0320 	bic.w	r3, r3, #32
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	2310      	movs	r3, #16
 8004692:	e7a7      	b.n	80045e4 <_printf_i+0xf8>
 8004694:	4824      	ldr	r0, [pc, #144]	; (8004728 <_printf_i+0x23c>)
 8004696:	e7e4      	b.n	8004662 <_printf_i+0x176>
 8004698:	4615      	mov	r5, r2
 800469a:	e7bd      	b.n	8004618 <_printf_i+0x12c>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	6826      	ldr	r6, [r4, #0]
 80046a0:	6961      	ldr	r1, [r4, #20]
 80046a2:	1d18      	adds	r0, r3, #4
 80046a4:	6028      	str	r0, [r5, #0]
 80046a6:	0635      	lsls	r5, r6, #24
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	d501      	bpl.n	80046b0 <_printf_i+0x1c4>
 80046ac:	6019      	str	r1, [r3, #0]
 80046ae:	e002      	b.n	80046b6 <_printf_i+0x1ca>
 80046b0:	0670      	lsls	r0, r6, #25
 80046b2:	d5fb      	bpl.n	80046ac <_printf_i+0x1c0>
 80046b4:	8019      	strh	r1, [r3, #0]
 80046b6:	2300      	movs	r3, #0
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	4615      	mov	r5, r2
 80046bc:	e7bc      	b.n	8004638 <_printf_i+0x14c>
 80046be:	682b      	ldr	r3, [r5, #0]
 80046c0:	1d1a      	adds	r2, r3, #4
 80046c2:	602a      	str	r2, [r5, #0]
 80046c4:	681d      	ldr	r5, [r3, #0]
 80046c6:	6862      	ldr	r2, [r4, #4]
 80046c8:	2100      	movs	r1, #0
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7fb fd80 	bl	80001d0 <memchr>
 80046d0:	b108      	cbz	r0, 80046d6 <_printf_i+0x1ea>
 80046d2:	1b40      	subs	r0, r0, r5
 80046d4:	6060      	str	r0, [r4, #4]
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	6123      	str	r3, [r4, #16]
 80046da:	2300      	movs	r3, #0
 80046dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e0:	e7aa      	b.n	8004638 <_printf_i+0x14c>
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	462a      	mov	r2, r5
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	47d0      	blx	sl
 80046ec:	3001      	adds	r0, #1
 80046ee:	d0ad      	beq.n	800464c <_printf_i+0x160>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	079b      	lsls	r3, r3, #30
 80046f4:	d413      	bmi.n	800471e <_printf_i+0x232>
 80046f6:	68e0      	ldr	r0, [r4, #12]
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	4298      	cmp	r0, r3
 80046fc:	bfb8      	it	lt
 80046fe:	4618      	movlt	r0, r3
 8004700:	e7a6      	b.n	8004650 <_printf_i+0x164>
 8004702:	2301      	movs	r3, #1
 8004704:	4632      	mov	r2, r6
 8004706:	4649      	mov	r1, r9
 8004708:	4640      	mov	r0, r8
 800470a:	47d0      	blx	sl
 800470c:	3001      	adds	r0, #1
 800470e:	d09d      	beq.n	800464c <_printf_i+0x160>
 8004710:	3501      	adds	r5, #1
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	9903      	ldr	r1, [sp, #12]
 8004716:	1a5b      	subs	r3, r3, r1
 8004718:	42ab      	cmp	r3, r5
 800471a:	dcf2      	bgt.n	8004702 <_printf_i+0x216>
 800471c:	e7eb      	b.n	80046f6 <_printf_i+0x20a>
 800471e:	2500      	movs	r5, #0
 8004720:	f104 0619 	add.w	r6, r4, #25
 8004724:	e7f5      	b.n	8004712 <_printf_i+0x226>
 8004726:	bf00      	nop
 8004728:	08004b81 	.word	0x08004b81
 800472c:	08004b92 	.word	0x08004b92

08004730 <__sflush_r>:
 8004730:	898a      	ldrh	r2, [r1, #12]
 8004732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004736:	4605      	mov	r5, r0
 8004738:	0710      	lsls	r0, r2, #28
 800473a:	460c      	mov	r4, r1
 800473c:	d458      	bmi.n	80047f0 <__sflush_r+0xc0>
 800473e:	684b      	ldr	r3, [r1, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	dc05      	bgt.n	8004750 <__sflush_r+0x20>
 8004744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	dc02      	bgt.n	8004750 <__sflush_r+0x20>
 800474a:	2000      	movs	r0, #0
 800474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004752:	2e00      	cmp	r6, #0
 8004754:	d0f9      	beq.n	800474a <__sflush_r+0x1a>
 8004756:	2300      	movs	r3, #0
 8004758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800475c:	682f      	ldr	r7, [r5, #0]
 800475e:	6a21      	ldr	r1, [r4, #32]
 8004760:	602b      	str	r3, [r5, #0]
 8004762:	d032      	beq.n	80047ca <__sflush_r+0x9a>
 8004764:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	075a      	lsls	r2, r3, #29
 800476a:	d505      	bpl.n	8004778 <__sflush_r+0x48>
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	1ac0      	subs	r0, r0, r3
 8004770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004772:	b10b      	cbz	r3, 8004778 <__sflush_r+0x48>
 8004774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004776:	1ac0      	subs	r0, r0, r3
 8004778:	2300      	movs	r3, #0
 800477a:	4602      	mov	r2, r0
 800477c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800477e:	6a21      	ldr	r1, [r4, #32]
 8004780:	4628      	mov	r0, r5
 8004782:	47b0      	blx	r6
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	d106      	bne.n	8004798 <__sflush_r+0x68>
 800478a:	6829      	ldr	r1, [r5, #0]
 800478c:	291d      	cmp	r1, #29
 800478e:	d82b      	bhi.n	80047e8 <__sflush_r+0xb8>
 8004790:	4a29      	ldr	r2, [pc, #164]	; (8004838 <__sflush_r+0x108>)
 8004792:	410a      	asrs	r2, r1
 8004794:	07d6      	lsls	r6, r2, #31
 8004796:	d427      	bmi.n	80047e8 <__sflush_r+0xb8>
 8004798:	2200      	movs	r2, #0
 800479a:	6062      	str	r2, [r4, #4]
 800479c:	04d9      	lsls	r1, r3, #19
 800479e:	6922      	ldr	r2, [r4, #16]
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	d504      	bpl.n	80047ae <__sflush_r+0x7e>
 80047a4:	1c42      	adds	r2, r0, #1
 80047a6:	d101      	bne.n	80047ac <__sflush_r+0x7c>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b903      	cbnz	r3, 80047ae <__sflush_r+0x7e>
 80047ac:	6560      	str	r0, [r4, #84]	; 0x54
 80047ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b0:	602f      	str	r7, [r5, #0]
 80047b2:	2900      	cmp	r1, #0
 80047b4:	d0c9      	beq.n	800474a <__sflush_r+0x1a>
 80047b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047ba:	4299      	cmp	r1, r3
 80047bc:	d002      	beq.n	80047c4 <__sflush_r+0x94>
 80047be:	4628      	mov	r0, r5
 80047c0:	f7ff fbea 	bl	8003f98 <_free_r>
 80047c4:	2000      	movs	r0, #0
 80047c6:	6360      	str	r0, [r4, #52]	; 0x34
 80047c8:	e7c0      	b.n	800474c <__sflush_r+0x1c>
 80047ca:	2301      	movs	r3, #1
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b0      	blx	r6
 80047d0:	1c41      	adds	r1, r0, #1
 80047d2:	d1c8      	bne.n	8004766 <__sflush_r+0x36>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0c5      	beq.n	8004766 <__sflush_r+0x36>
 80047da:	2b1d      	cmp	r3, #29
 80047dc:	d001      	beq.n	80047e2 <__sflush_r+0xb2>
 80047de:	2b16      	cmp	r3, #22
 80047e0:	d101      	bne.n	80047e6 <__sflush_r+0xb6>
 80047e2:	602f      	str	r7, [r5, #0]
 80047e4:	e7b1      	b.n	800474a <__sflush_r+0x1a>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	e7ad      	b.n	800474c <__sflush_r+0x1c>
 80047f0:	690f      	ldr	r7, [r1, #16]
 80047f2:	2f00      	cmp	r7, #0
 80047f4:	d0a9      	beq.n	800474a <__sflush_r+0x1a>
 80047f6:	0793      	lsls	r3, r2, #30
 80047f8:	680e      	ldr	r6, [r1, #0]
 80047fa:	bf08      	it	eq
 80047fc:	694b      	ldreq	r3, [r1, #20]
 80047fe:	600f      	str	r7, [r1, #0]
 8004800:	bf18      	it	ne
 8004802:	2300      	movne	r3, #0
 8004804:	eba6 0807 	sub.w	r8, r6, r7
 8004808:	608b      	str	r3, [r1, #8]
 800480a:	f1b8 0f00 	cmp.w	r8, #0
 800480e:	dd9c      	ble.n	800474a <__sflush_r+0x1a>
 8004810:	6a21      	ldr	r1, [r4, #32]
 8004812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004814:	4643      	mov	r3, r8
 8004816:	463a      	mov	r2, r7
 8004818:	4628      	mov	r0, r5
 800481a:	47b0      	blx	r6
 800481c:	2800      	cmp	r0, #0
 800481e:	dc06      	bgt.n	800482e <__sflush_r+0xfe>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004826:	81a3      	strh	r3, [r4, #12]
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	e78e      	b.n	800474c <__sflush_r+0x1c>
 800482e:	4407      	add	r7, r0
 8004830:	eba8 0800 	sub.w	r8, r8, r0
 8004834:	e7e9      	b.n	800480a <__sflush_r+0xda>
 8004836:	bf00      	nop
 8004838:	dfbffffe 	.word	0xdfbffffe

0800483c <_fflush_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	690b      	ldr	r3, [r1, #16]
 8004840:	4605      	mov	r5, r0
 8004842:	460c      	mov	r4, r1
 8004844:	b913      	cbnz	r3, 800484c <_fflush_r+0x10>
 8004846:	2500      	movs	r5, #0
 8004848:	4628      	mov	r0, r5
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	b118      	cbz	r0, 8004856 <_fflush_r+0x1a>
 800484e:	6a03      	ldr	r3, [r0, #32]
 8004850:	b90b      	cbnz	r3, 8004856 <_fflush_r+0x1a>
 8004852:	f7ff fa99 	bl	8003d88 <__sinit>
 8004856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f3      	beq.n	8004846 <_fflush_r+0xa>
 800485e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004860:	07d0      	lsls	r0, r2, #31
 8004862:	d404      	bmi.n	800486e <_fflush_r+0x32>
 8004864:	0599      	lsls	r1, r3, #22
 8004866:	d402      	bmi.n	800486e <_fflush_r+0x32>
 8004868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800486a:	f7ff fb92 	bl	8003f92 <__retarget_lock_acquire_recursive>
 800486e:	4628      	mov	r0, r5
 8004870:	4621      	mov	r1, r4
 8004872:	f7ff ff5d 	bl	8004730 <__sflush_r>
 8004876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004878:	07da      	lsls	r2, r3, #31
 800487a:	4605      	mov	r5, r0
 800487c:	d4e4      	bmi.n	8004848 <_fflush_r+0xc>
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	059b      	lsls	r3, r3, #22
 8004882:	d4e1      	bmi.n	8004848 <_fflush_r+0xc>
 8004884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004886:	f7ff fb85 	bl	8003f94 <__retarget_lock_release_recursive>
 800488a:	e7dd      	b.n	8004848 <_fflush_r+0xc>

0800488c <__swbuf_r>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	460e      	mov	r6, r1
 8004890:	4614      	mov	r4, r2
 8004892:	4605      	mov	r5, r0
 8004894:	b118      	cbz	r0, 800489e <__swbuf_r+0x12>
 8004896:	6a03      	ldr	r3, [r0, #32]
 8004898:	b90b      	cbnz	r3, 800489e <__swbuf_r+0x12>
 800489a:	f7ff fa75 	bl	8003d88 <__sinit>
 800489e:	69a3      	ldr	r3, [r4, #24]
 80048a0:	60a3      	str	r3, [r4, #8]
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	071a      	lsls	r2, r3, #28
 80048a6:	d525      	bpl.n	80048f4 <__swbuf_r+0x68>
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	b31b      	cbz	r3, 80048f4 <__swbuf_r+0x68>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	6922      	ldr	r2, [r4, #16]
 80048b0:	1a98      	subs	r0, r3, r2
 80048b2:	6963      	ldr	r3, [r4, #20]
 80048b4:	b2f6      	uxtb	r6, r6
 80048b6:	4283      	cmp	r3, r0
 80048b8:	4637      	mov	r7, r6
 80048ba:	dc04      	bgt.n	80048c6 <__swbuf_r+0x3a>
 80048bc:	4621      	mov	r1, r4
 80048be:	4628      	mov	r0, r5
 80048c0:	f7ff ffbc 	bl	800483c <_fflush_r>
 80048c4:	b9e0      	cbnz	r0, 8004900 <__swbuf_r+0x74>
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	701e      	strb	r6, [r3, #0]
 80048d4:	6962      	ldr	r2, [r4, #20]
 80048d6:	1c43      	adds	r3, r0, #1
 80048d8:	429a      	cmp	r2, r3
 80048da:	d004      	beq.n	80048e6 <__swbuf_r+0x5a>
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	07db      	lsls	r3, r3, #31
 80048e0:	d506      	bpl.n	80048f0 <__swbuf_r+0x64>
 80048e2:	2e0a      	cmp	r6, #10
 80048e4:	d104      	bne.n	80048f0 <__swbuf_r+0x64>
 80048e6:	4621      	mov	r1, r4
 80048e8:	4628      	mov	r0, r5
 80048ea:	f7ff ffa7 	bl	800483c <_fflush_r>
 80048ee:	b938      	cbnz	r0, 8004900 <__swbuf_r+0x74>
 80048f0:	4638      	mov	r0, r7
 80048f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f4:	4621      	mov	r1, r4
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 f806 	bl	8004908 <__swsetup_r>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d0d5      	beq.n	80048ac <__swbuf_r+0x20>
 8004900:	f04f 37ff 	mov.w	r7, #4294967295
 8004904:	e7f4      	b.n	80048f0 <__swbuf_r+0x64>
	...

08004908 <__swsetup_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4b2a      	ldr	r3, [pc, #168]	; (80049b4 <__swsetup_r+0xac>)
 800490c:	4605      	mov	r5, r0
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	460c      	mov	r4, r1
 8004912:	b118      	cbz	r0, 800491c <__swsetup_r+0x14>
 8004914:	6a03      	ldr	r3, [r0, #32]
 8004916:	b90b      	cbnz	r3, 800491c <__swsetup_r+0x14>
 8004918:	f7ff fa36 	bl	8003d88 <__sinit>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004922:	0718      	lsls	r0, r3, #28
 8004924:	d422      	bmi.n	800496c <__swsetup_r+0x64>
 8004926:	06d9      	lsls	r1, r3, #27
 8004928:	d407      	bmi.n	800493a <__swsetup_r+0x32>
 800492a:	2309      	movs	r3, #9
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	e034      	b.n	80049a4 <__swsetup_r+0x9c>
 800493a:	0758      	lsls	r0, r3, #29
 800493c:	d512      	bpl.n	8004964 <__swsetup_r+0x5c>
 800493e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004940:	b141      	cbz	r1, 8004954 <__swsetup_r+0x4c>
 8004942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004946:	4299      	cmp	r1, r3
 8004948:	d002      	beq.n	8004950 <__swsetup_r+0x48>
 800494a:	4628      	mov	r0, r5
 800494c:	f7ff fb24 	bl	8003f98 <_free_r>
 8004950:	2300      	movs	r3, #0
 8004952:	6363      	str	r3, [r4, #52]	; 0x34
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800495a:	81a3      	strh	r3, [r4, #12]
 800495c:	2300      	movs	r3, #0
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6923      	ldr	r3, [r4, #16]
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	f043 0308 	orr.w	r3, r3, #8
 800496a:	81a3      	strh	r3, [r4, #12]
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	b94b      	cbnz	r3, 8004984 <__swsetup_r+0x7c>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800497a:	d003      	beq.n	8004984 <__swsetup_r+0x7c>
 800497c:	4621      	mov	r1, r4
 800497e:	4628      	mov	r0, r5
 8004980:	f000 f850 	bl	8004a24 <__smakebuf_r>
 8004984:	89a0      	ldrh	r0, [r4, #12]
 8004986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800498a:	f010 0301 	ands.w	r3, r0, #1
 800498e:	d00a      	beq.n	80049a6 <__swsetup_r+0x9e>
 8004990:	2300      	movs	r3, #0
 8004992:	60a3      	str	r3, [r4, #8]
 8004994:	6963      	ldr	r3, [r4, #20]
 8004996:	425b      	negs	r3, r3
 8004998:	61a3      	str	r3, [r4, #24]
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	b943      	cbnz	r3, 80049b0 <__swsetup_r+0xa8>
 800499e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049a2:	d1c4      	bne.n	800492e <__swsetup_r+0x26>
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
 80049a6:	0781      	lsls	r1, r0, #30
 80049a8:	bf58      	it	pl
 80049aa:	6963      	ldrpl	r3, [r4, #20]
 80049ac:	60a3      	str	r3, [r4, #8]
 80049ae:	e7f4      	b.n	800499a <__swsetup_r+0x92>
 80049b0:	2000      	movs	r0, #0
 80049b2:	e7f7      	b.n	80049a4 <__swsetup_r+0x9c>
 80049b4:	20000064 	.word	0x20000064

080049b8 <_sbrk_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4d06      	ldr	r5, [pc, #24]	; (80049d4 <_sbrk_r+0x1c>)
 80049bc:	2300      	movs	r3, #0
 80049be:	4604      	mov	r4, r0
 80049c0:	4608      	mov	r0, r1
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	f7fc f904 	bl	8000bd0 <_sbrk>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_sbrk_r+0x1a>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_sbrk_r+0x1a>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	20000284 	.word	0x20000284

080049d8 <__swhatbuf_r>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	460c      	mov	r4, r1
 80049dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e0:	2900      	cmp	r1, #0
 80049e2:	b096      	sub	sp, #88	; 0x58
 80049e4:	4615      	mov	r5, r2
 80049e6:	461e      	mov	r6, r3
 80049e8:	da0d      	bge.n	8004a06 <__swhatbuf_r+0x2e>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049f0:	f04f 0100 	mov.w	r1, #0
 80049f4:	bf0c      	ite	eq
 80049f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80049fa:	2340      	movne	r3, #64	; 0x40
 80049fc:	2000      	movs	r0, #0
 80049fe:	6031      	str	r1, [r6, #0]
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	b016      	add	sp, #88	; 0x58
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	466a      	mov	r2, sp
 8004a08:	f000 f848 	bl	8004a9c <_fstat_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	dbec      	blt.n	80049ea <__swhatbuf_r+0x12>
 8004a10:	9901      	ldr	r1, [sp, #4]
 8004a12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a1a:	4259      	negs	r1, r3
 8004a1c:	4159      	adcs	r1, r3
 8004a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a22:	e7eb      	b.n	80049fc <__swhatbuf_r+0x24>

08004a24 <__smakebuf_r>:
 8004a24:	898b      	ldrh	r3, [r1, #12]
 8004a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a28:	079d      	lsls	r5, r3, #30
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	d507      	bpl.n	8004a40 <__smakebuf_r+0x1c>
 8004a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	6123      	str	r3, [r4, #16]
 8004a38:	2301      	movs	r3, #1
 8004a3a:	6163      	str	r3, [r4, #20]
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	ab01      	add	r3, sp, #4
 8004a42:	466a      	mov	r2, sp
 8004a44:	f7ff ffc8 	bl	80049d8 <__swhatbuf_r>
 8004a48:	9900      	ldr	r1, [sp, #0]
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7ff fb0f 	bl	8004070 <_malloc_r>
 8004a52:	b948      	cbnz	r0, 8004a68 <__smakebuf_r+0x44>
 8004a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a58:	059a      	lsls	r2, r3, #22
 8004a5a:	d4ef      	bmi.n	8004a3c <__smakebuf_r+0x18>
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	81a3      	strh	r3, [r4, #12]
 8004a66:	e7e3      	b.n	8004a30 <__smakebuf_r+0xc>
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	6020      	str	r0, [r4, #0]
 8004a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a70:	81a3      	strh	r3, [r4, #12]
 8004a72:	9b00      	ldr	r3, [sp, #0]
 8004a74:	6163      	str	r3, [r4, #20]
 8004a76:	9b01      	ldr	r3, [sp, #4]
 8004a78:	6120      	str	r0, [r4, #16]
 8004a7a:	b15b      	cbz	r3, 8004a94 <__smakebuf_r+0x70>
 8004a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a80:	4630      	mov	r0, r6
 8004a82:	f000 f81d 	bl	8004ac0 <_isatty_r>
 8004a86:	b128      	cbz	r0, 8004a94 <__smakebuf_r+0x70>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	431d      	orrs	r5, r3
 8004a98:	81a5      	strh	r5, [r4, #12]
 8004a9a:	e7cf      	b.n	8004a3c <__smakebuf_r+0x18>

08004a9c <_fstat_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4d07      	ldr	r5, [pc, #28]	; (8004abc <_fstat_r+0x20>)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	f7fc f868 	bl	8000b7e <_fstat>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d102      	bne.n	8004ab8 <_fstat_r+0x1c>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	b103      	cbz	r3, 8004ab8 <_fstat_r+0x1c>
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	bd38      	pop	{r3, r4, r5, pc}
 8004aba:	bf00      	nop
 8004abc:	20000284 	.word	0x20000284

08004ac0 <_isatty_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d06      	ldr	r5, [pc, #24]	; (8004adc <_isatty_r+0x1c>)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fc f867 	bl	8000b9e <_isatty>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_isatty_r+0x1a>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_isatty_r+0x1a>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20000284 	.word	0x20000284

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
