
3_System_clocking_RTC_watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f4  080047f4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047fc  080047fc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  0800486c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  0800486c  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfd2  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c21  00000000  00000000  0002c0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f4  00000000  00000000  0002e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002726a  00000000  00000000  0002ef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000caa6  00000000  00000000  0005619e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef506  00000000  00000000  00062c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003148  00000000  00000000  0015214c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00155294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004744 	.word	0x08004744

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004744 	.word	0x08004744

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d109      	bne.n	800058e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800057a:	230d      	movs	r3, #13
 800057c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800057e:	f107 010f 	add.w	r1, r7, #15
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <__io_putchar+0x3c>)
 800058a:	f002 fc4b 	bl	8002e24 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2201      	movs	r2, #1
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <__io_putchar+0x3c>)
 8000598:	f002 fc44 	bl	8002e24 <HAL_UART_Transmit>
    return 1;
 800059c:	2301      	movs	r3, #1
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000a8 	.word	0x200000a8

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 faea 	bl	8000b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f839 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8d7 	bl	800076c <MX_GPIO_Init>
  MX_RTC_Init();
 80005be:	f000 f87d 	bl	80006bc <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f8a3 	bl	800070c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef new_time = {0}; //variable for new time set
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
  new_time.Hours = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	773b      	strb	r3, [r7, #28]
  new_time.Minutes = 45;
 80005da:	232d      	movs	r3, #45	; 0x2d
 80005dc:	777b      	strb	r3, [r7, #29]
  new_time.Seconds = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	77bb      	strb	r3, [r7, #30]
  HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	4619      	mov	r1, r3
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0x78>)
 80005ec:	f002 f9b6 	bl	800295c <HAL_RTC_SetTime>
  while (1)
  {
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;

	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <main+0x78>)
 80005fa:	f002 fa4c 	bl	8002a96 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <main+0x78>)
 8000606:	f002 faa2 	bl	8002b4e <HAL_RTC_GetDate>

	  printf("time now: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 800060a:	7a3b      	ldrb	r3, [r7, #8]
 800060c:	4619      	mov	r1, r3
 800060e:	7a7b      	ldrb	r3, [r7, #9]
 8000610:	461a      	mov	r2, r3
 8000612:	7abb      	ldrb	r3, [r7, #10]
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x7c>)
 8000616:	f003 fa1f 	bl	8003a58 <iprintf>
	  HAL_Delay(200);
 800061a:	20c8      	movs	r0, #200	; 0xc8
 800061c:	f000 fb2a 	bl	8000c74 <HAL_Delay>
  {
 8000620:	e7e6      	b.n	80005f0 <main+0x44>
 8000622:	bf00      	nop
 8000624:	20000084 	.word	0x20000084
 8000628:	0800475c 	.word	0x0800475c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	; 0x58
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2244      	movs	r2, #68	; 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fa61 	bl	8003b02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000652:	f000 fde9 	bl	8001228 <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800065c:	f000 f8d4 	bl	8000808 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000660:	2318      	movs	r3, #24
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fe29 	bl	80012d4 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000688:	f000 f8be 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 f9f1 	bl	8001a8c <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006b0:	f000 f8aa 	bl	8000808 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3758      	adds	r7, #88	; 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_RTC_Init+0x48>)
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <MX_RTC_Init+0x4c>)
 80006c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_RTC_Init+0x48>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_RTC_Init+0x48>)
 80006ce:	227f      	movs	r2, #127	; 0x7f
 80006d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_RTC_Init+0x48>)
 80006d4:	22ff      	movs	r2, #255	; 0xff
 80006d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_RTC_Init+0x48>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_RTC_Init+0x48>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_RTC_Init+0x48>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_RTC_Init+0x48>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_RTC_Init+0x48>)
 80006f2:	f002 f8ab 	bl	800284c <HAL_RTC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80006fc:	f000 f884 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000084 	.word	0x20000084
 8000708:	40002800 	.word	0x40002800

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART2_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000750:	f002 fb1a 	bl	8002d88 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 f855 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000a8 	.word	0x200000a8
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0x94>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0x94>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0x94>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0x94>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_GPIO_Init+0x94>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_GPIO_Init+0x94>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f000 fd0f 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_GPIO_Init+0x98>)
 80007d4:	f000 fb58 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d8:	2320      	movs	r3, #32
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f000 fb49 	bl	8000e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	48000800 	.word	0x48000800

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6613      	str	r3, [r2, #96]	; 0x60
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x44>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6593      	str	r3, [r2, #88]	; 0x58
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0a4      	sub	sp, #144	; 0x90
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2288      	movs	r2, #136	; 0x88
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f003 f948 	bl	8003b02 <memset>
  if(hrtc->Instance==RTC)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <HAL_RTC_MspInit+0x5c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d118      	bne.n	80008ae <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800087c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fb20 	bl	8001ed4 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800089a:	f7ff ffb5 	bl	8000808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_RTC_MspInit+0x60>)
 80008a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008a4:	4a05      	ldr	r2, [pc, #20]	; (80008bc <HAL_RTC_MspInit+0x60>)
 80008a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3790      	adds	r7, #144	; 0x90
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40002800 	.word	0x40002800
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0ac      	sub	sp, #176	; 0xb0
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2288      	movs	r2, #136	; 0x88
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 f90e 	bl	8003b02 <memset>
  if(huart->Instance==USART2)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <HAL_UART_MspInit+0xb0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d13b      	bne.n	8000968 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fae9 	bl	8001ed4 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000908:	f7ff ff7e 	bl	8000808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_UART_MspInit+0xb4>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	4a18      	ldr	r2, [pc, #96]	; (8000974 <HAL_UART_MspInit+0xb4>)
 8000912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000916:	6593      	str	r3, [r2, #88]	; 0x58
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_UART_MspInit+0xb4>)
 800091a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_UART_MspInit+0xb4>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_UART_MspInit+0xb4>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_UART_MspInit+0xb4>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800093c:	230c      	movs	r3, #12
 800093e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000954:	2307      	movs	r3, #7
 8000956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f000 fa90 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	37b0      	adds	r7, #176	; 0xb0
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40004400 	.word	0x40004400
 8000974:	40021000 	.word	0x40021000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f936 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
  }

  return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fda3 	bl	800056c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>
  }
  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f003 f862 	bl	8003ba0 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20018000 	.word	0x20018000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000130 	.word	0x20000130
 8000b10:	20000288 	.word	0x20000288

08000b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	; (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	; (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f003 f821 	bl	8003bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6a:	f7ff fd1f 	bl	80005ac <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b7c:	08004804 	.word	0x08004804
  ldr r2, =_sbss
 8000b80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b84:	20000284 	.word	0x20000284

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>

08000b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f943 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 f80e 	bl	8000bbc <HAL_InitTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e001      	b.n	8000bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bac:	f7ff fe32 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_InitTick+0x6c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d023      	beq.n	8000c18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_InitTick+0x70>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_InitTick+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f941 	bl	8000e6e <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10f      	bne.n	8000c12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d809      	bhi.n	8000c0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f919 	bl	8000e36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_InitTick+0x74>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e007      	b.n	8000c1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e004      	b.n	8000c1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e001      	b.n	8000c1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000134 	.word	0x20000134

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000134 	.word	0x20000134

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff47 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff5c 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffb0 	bl	8000ddc <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e17f      	b.n	8001198 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8171 	beq.w	8001192 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d005      	beq.n	8000ec8 <HAL_GPIO_Init+0x40>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d130      	bne.n	8000f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	f003 0201 	and.w	r2, r3, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d118      	bne.n	8000f68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	6939      	ldr	r1, [r7, #16]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80ac 	beq.w	8001192 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b5f      	ldr	r3, [pc, #380]	; (80011b8 <HAL_GPIO_Init+0x330>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	4a5e      	ldr	r2, [pc, #376]	; (80011b8 <HAL_GPIO_Init+0x330>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6613      	str	r3, [r2, #96]	; 0x60
 8001046:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <HAL_GPIO_Init+0x330>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001052:	4a5a      	ldr	r2, [pc, #360]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800107c:	d025      	beq.n	80010ca <HAL_GPIO_Init+0x242>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4f      	ldr	r2, [pc, #316]	; (80011c0 <HAL_GPIO_Init+0x338>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01f      	beq.n	80010c6 <HAL_GPIO_Init+0x23e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4e      	ldr	r2, [pc, #312]	; (80011c4 <HAL_GPIO_Init+0x33c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d019      	beq.n	80010c2 <HAL_GPIO_Init+0x23a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <HAL_GPIO_Init+0x340>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x236>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4c      	ldr	r2, [pc, #304]	; (80011cc <HAL_GPIO_Init+0x344>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x232>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <HAL_GPIO_Init+0x348>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x22e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4a      	ldr	r2, [pc, #296]	; (80011d4 <HAL_GPIO_Init+0x34c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x22a>
 80010ae:	2306      	movs	r3, #6
 80010b0:	e00c      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010b2:	2307      	movs	r3, #7
 80010b4:	e00a      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010ca:	2300      	movs	r3, #0
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010dc:	4937      	ldr	r1, [pc, #220]	; (80011bc <HAL_GPIO_Init+0x334>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_GPIO_Init+0x350>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <HAL_GPIO_Init+0x350>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_GPIO_Init+0x350>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001138:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <HAL_GPIO_Init+0x350>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_GPIO_Init+0x350>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_GPIO_Init+0x350>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_GPIO_Init+0x350>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <HAL_GPIO_Init+0x350>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa22 f303 	lsr.w	r3, r2, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f ae78 	bne.w	8000e98 <HAL_GPIO_Init+0x10>
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800
 80011c8:	48000c00 	.word	0x48000c00
 80011cc:	48001000 	.word	0x48001000
 80011d0:	48001400 	.word	0x48001400
 80011d4:	48001800 	.word	0x48001800
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_PWREx_GetVoltageRange+0x18>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000

08001228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001236:	d130      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001244:	d038      	beq.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001254:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2232      	movs	r2, #50	; 0x32
 800125c:	fb02 f303 	mul.w	r3, r2, r3
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0c9b      	lsrs	r3, r3, #18
 8001268:	3301      	adds	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126c:	e002      	b.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3b01      	subs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001280:	d102      	bne.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f2      	bne.n	800126e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d110      	bne.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e00f      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a6:	d007      	beq.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b0:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40007000 	.word	0x40007000
 80012cc:	20000000 	.word	0x20000000
 80012d0:	431bde83 	.word	0x431bde83

080012d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e3ca      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e6:	4b97      	ldr	r3, [pc, #604]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f0:	4b94      	ldr	r3, [pc, #592]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80e4 	beq.w	80014d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <HAL_RCC_OscConfig+0x4a>
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2b0c      	cmp	r3, #12
 8001312:	f040 808b 	bne.w	800142c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2b01      	cmp	r3, #1
 800131a:	f040 8087 	bne.w	800142c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800131e:	4b89      	ldr	r3, [pc, #548]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x62>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e3a2      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	4b82      	ldr	r3, [pc, #520]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d004      	beq.n	8001350 <HAL_RCC_OscConfig+0x7c>
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800134e:	e005      	b.n	800135c <HAL_RCC_OscConfig+0x88>
 8001350:	4b7c      	ldr	r3, [pc, #496]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800135c:	4293      	cmp	r3, r2
 800135e:	d223      	bcs.n	80013a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fd55 	bl	8001e14 <RCC_SetFlashLatencyFromMSIRange>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e383      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a72      	ldr	r2, [pc, #456]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	496d      	ldr	r1, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001392:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4968      	ldr	r1, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
 80013a6:	e025      	b.n	80013f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a8:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b63      	ldr	r3, [pc, #396]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4960      	ldr	r1, [pc, #384]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	495b      	ldr	r1, [pc, #364]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fd15 	bl	8001e14 <RCC_SetFlashLatencyFromMSIRange>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e343      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013f4:	f000 fc4a 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b52      	ldr	r3, [pc, #328]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	4950      	ldr	r1, [pc, #320]	; (8001548 <HAL_RCC_OscConfig+0x274>)
 8001406:	5ccb      	ldrb	r3, [r1, r3]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_RCC_OscConfig+0x278>)
 8001412:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001414:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fbcf 	bl	8000bbc <HAL_InitTick>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d052      	beq.n	80014ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	e327      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d032      	beq.n	800149a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001434:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a42      	ldr	r2, [pc, #264]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001440:	f7ff fc0c 	bl	8000c5c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001448:	f7ff fc08 	bl	8000c5c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e310      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145a:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001466:	4b37      	ldr	r3, [pc, #220]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a36      	ldr	r2, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4931      	ldr	r1, [pc, #196]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	492c      	ldr	r1, [pc, #176]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
 8001498:	e01a      	b.n	80014d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fbd9 	bl	8000c5c <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ae:	f7ff fbd5 	bl	8000c5c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e2dd      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x1da>
 80014cc:	e000      	b.n	80014d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d074      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x21a>
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d10e      	bne.n	8001506 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d10b      	bne.n	8001506 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d064      	beq.n	80015c4 <HAL_RCC_OscConfig+0x2f0>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d160      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e2ba      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x24a>
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e026      	b.n	800156c <HAL_RCC_OscConfig+0x298>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001526:	d115      	bne.n	8001554 <HAL_RCC_OscConfig+0x280>
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a05      	ldr	r2, [pc, #20]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800152e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a02      	ldr	r2, [pc, #8]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800153a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	e014      	b.n	800156c <HAL_RCC_OscConfig+0x298>
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	08004778 	.word	0x08004778
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004
 8001554:	4ba0      	ldr	r3, [pc, #640]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a9f      	ldr	r2, [pc, #636]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800155a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b9d      	ldr	r3, [pc, #628]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a9c      	ldr	r2, [pc, #624]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fb72 	bl	8000c5c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fb6e 	bl	8000c5c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e276      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	4b92      	ldr	r3, [pc, #584]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x2a8>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fb5e 	bl	8000c5c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fb5a 	bl	8000c5c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e262      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b6:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2d0>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d060      	beq.n	8001694 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_OscConfig+0x310>
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d119      	bne.n	8001612 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d116      	bne.n	8001612 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e4:	4b7c      	ldr	r3, [pc, #496]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x328>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e23f      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b76      	ldr	r3, [pc, #472]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	4973      	ldr	r1, [pc, #460]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001610:	e040      	b.n	8001694 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d023      	beq.n	8001662 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161a:	4b6f      	ldr	r3, [pc, #444]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6e      	ldr	r2, [pc, #440]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fb19 	bl	8000c5c <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fb15 	bl	8000c5c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e21d      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001640:	4b65      	ldr	r3, [pc, #404]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b62      	ldr	r3, [pc, #392]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	495f      	ldr	r1, [pc, #380]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
 8001660:	e018      	b.n	8001694 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	4b5d      	ldr	r3, [pc, #372]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a5c      	ldr	r2, [pc, #368]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff faf5 	bl	8000c5c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff faf1 	bl	8000c5c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1f9      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d03c      	beq.n	800171a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a8:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80016aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ae:	4a4a      	ldr	r2, [pc, #296]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff fad0 	bl	8000c5c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff facc 	bl	8000c5c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1d4      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ef      	beq.n	80016c0 <HAL_RCC_OscConfig+0x3ec>
 80016e0:	e01b      	b.n	800171a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80016e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e8:	4a3b      	ldr	r2, [pc, #236]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff fab3 	bl	8000c5c <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff faaf 	bl	8000c5c <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1b7      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ef      	bne.n	80016fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80a6 	beq.w	8001874 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10d      	bne.n	8001754 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800173e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001742:	6593      	str	r3, [r2, #88]	; 0x58
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001750:	2301      	movs	r3, #1
 8001752:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_RCC_OscConfig+0x508>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d118      	bne.n	8001792 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_RCC_OscConfig+0x508>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_RCC_OscConfig+0x508>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176c:	f7ff fa76 	bl	8000c5c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001774:	f7ff fa72 	bl	8000c5c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e17a      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_RCC_OscConfig+0x508>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <HAL_RCC_OscConfig+0x4d8>
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017aa:	e029      	b.n	8001800 <HAL_RCC_OscConfig+0x52c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d115      	bne.n	80017e0 <HAL_RCC_OscConfig+0x50c>
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <HAL_RCC_OscConfig+0x504>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x52c>
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40007000 	.word	0x40007000
 80017e0:	4b9c      	ldr	r3, [pc, #624]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	4a9b      	ldr	r2, [pc, #620]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f0:	4b98      	ldr	r3, [pc, #608]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	4a97      	ldr	r2, [pc, #604]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d016      	beq.n	8001836 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fa28 	bl	8000c5c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff fa24 	bl	8000c5c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e12a      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001826:	4b8b      	ldr	r3, [pc, #556]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ed      	beq.n	8001810 <HAL_RCC_OscConfig+0x53c>
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff fa11 	bl	8000c5c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff fa0d 	bl	8000c5c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e113      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001854:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1ed      	bne.n	800183e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001862:	7ffb      	ldrb	r3, [r7, #31]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001868:	4b7a      	ldr	r3, [pc, #488]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	4a79      	ldr	r2, [pc, #484]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 800186e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001872:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80fe 	beq.w	8001a7a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	2b02      	cmp	r3, #2
 8001884:	f040 80d0 	bne.w	8001a28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001888:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	429a      	cmp	r2, r3
 800189a:	d130      	bne.n	80018fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	3b01      	subs	r3, #1
 80018a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d127      	bne.n	80018fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11f      	bne.n	80018fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018c8:	2a07      	cmp	r2, #7
 80018ca:	bf14      	ite	ne
 80018cc:	2201      	movne	r2, #1
 80018ce:	2200      	moveq	r2, #0
 80018d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d113      	bne.n	80018fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	3b01      	subs	r3, #1
 80018e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d06e      	beq.n	80019dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d069      	beq.n	80019d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001910:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0ad      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a4b      	ldr	r2, [pc, #300]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800192c:	f7ff f996 	bl	8000c5c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f992 	bl	8000c5c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e09a      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001952:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_RCC_OscConfig+0x784>)
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001962:	3a01      	subs	r2, #1
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	4311      	orrs	r1, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800196c:	0212      	lsls	r2, r2, #8
 800196e:	4311      	orrs	r1, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001974:	0852      	lsrs	r2, r2, #1
 8001976:	3a01      	subs	r2, #1
 8001978:	0552      	lsls	r2, r2, #21
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001980:	0852      	lsrs	r2, r2, #1
 8001982:	3a01      	subs	r2, #1
 8001984:	0652      	lsls	r2, r2, #25
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800198c:	0912      	lsrs	r2, r2, #4
 800198e:	0452      	lsls	r2, r2, #17
 8001990:	430a      	orrs	r2, r1
 8001992:	4930      	ldr	r1, [pc, #192]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001994:	4313      	orrs	r3, r2
 8001996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 800199e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b0:	f7ff f954 	bl	8000c5c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff f950 	bl	8000c5c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e058      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d6:	e050      	b.n	8001a7a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e04f      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d148      	bne.n	8001a7a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a00:	f7ff f92c 	bl	8000c5c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f928 	bl	8000c5c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e030      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x734>
 8001a26:	e028      	b.n	8001a7a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d023      	beq.n	8001a76 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_RCC_OscConfig+0x780>)
 8001a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f90f 	bl	8000c5c <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	e00c      	b.n	8001a5c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff f90b 	bl	8000c5c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d905      	bls.n	8001a5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e013      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
 8001a54:	40021000 	.word	0x40021000
 8001a58:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_OscConfig+0x7b0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ec      	bne.n	8001a42 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_RCC_OscConfig+0x7b0>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4905      	ldr	r1, [pc, #20]	; (8001a84 <HAL_RCC_OscConfig+0x7b0>)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_OscConfig+0x7b4>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
 8001a74:	e001      	b.n	8001a7a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	feeefffc 	.word	0xfeeefffc

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0e7      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d910      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0207 	bic.w	r2, r3, #7
 8001ab6:	4970      	ldr	r1, [pc, #448]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b6e      	ldr	r3, [pc, #440]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0cf      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d010      	beq.n	8001afe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d908      	bls.n	8001afe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4960      	ldr	r1, [pc, #384]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d04c      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b12:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d121      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0a6      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2a:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d115      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e09a      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b42:	4b4e      	ldr	r3, [pc, #312]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e08e      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e086      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b62:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 0203 	bic.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4943      	ldr	r1, [pc, #268]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b74:	f7ff f872 	bl	8000c5c <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7ff f86e 	bl	8000c5c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e06e      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 020c 	and.w	r2, r3, #12
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1eb      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d208      	bcs.n	8001bd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	492b      	ldr	r1, [pc, #172]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d210      	bcs.n	8001c02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 0207 	bic.w	r2, r3, #7
 8001be8:	4923      	ldr	r1, [pc, #140]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e036      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	4918      	ldr	r1, [pc, #96]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4910      	ldr	r1, [pc, #64]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c40:	f000 f824 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	490b      	ldr	r1, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1f4>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1fc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe ffa9 	bl	8000bbc <HAL_InitTick>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08004778 	.word	0x08004778
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d121      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d11e      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ccc:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e005      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10d      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	e004      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d134      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d003      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xac>
 8001d30:	e005      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d34:	617b      	str	r3, [r7, #20]
      break;
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d3a:	617b      	str	r3, [r7, #20]
      break;
 8001d3c:	e002      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	617b      	str	r3, [r7, #20]
      break;
 8001d42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	3301      	adds	r3, #1
 8001d50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	fb03 f202 	mul.w	r2, r3, r2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	0e5b      	lsrs	r3, r3, #25
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	3301      	adds	r3, #1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d84:	69bb      	ldr	r3, [r7, #24]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08004790 	.word	0x08004790
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	007a1200 	.word	0x007a1200

08001da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08004788 	.word	0x08004788

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dec:	f7ff ffda 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0adb      	lsrs	r3, r3, #11
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08004788 	.word	0x08004788

08001e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e2c:	f7ff f9ee 	bl	800120c <HAL_PWREx_GetVoltageRange>
 8001e30:	6178      	str	r0, [r7, #20]
 8001e32:	e014      	b.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e4c:	f7ff f9de 	bl	800120c <HAL_PWREx_GetVoltageRange>
 8001e50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e64:	d10b      	bne.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d919      	bls.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e70:	d902      	bls.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e72:	2302      	movs	r3, #2
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e013      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e78:	2301      	movs	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e010      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d902      	bls.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e84:	2303      	movs	r3, #3
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e00a      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b80      	cmp	r3, #128	; 0x80
 8001e8e:	d102      	bne.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e90:	2302      	movs	r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e004      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b70      	cmp	r3, #112	; 0x70
 8001e9a:	d101      	bne.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 0207 	bic.w	r2, r3, #7
 8001ea8:	4909      	ldr	r1, [pc, #36]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d001      	beq.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001edc:	2300      	movs	r3, #0
 8001ede:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d041      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef8:	d02a      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001efa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001efe:	d824      	bhi.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f04:	d008      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f0a:	d81e      	bhi.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f14:	d010      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f16:	e018      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f18:	4b86      	ldr	r3, [pc, #536]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a85      	ldr	r2, [pc, #532]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f24:	e015      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fabb 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8001f32:	4603      	mov	r3, r0
 8001f34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f36:	e00c      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3320      	adds	r3, #32
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fba6 	bl	8002690 <RCCEx_PLLSAI2_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f48:	e003      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f4e:	e000      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10b      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f58:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f66:	4973      	ldr	r1, [pc, #460]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f6e:	e001      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d041      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f88:	d02a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f8e:	d824      	bhi.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f94:	d008      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f9a:	d81e      	bhi.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fa6:	e018      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa8:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a61      	ldr	r2, [pc, #388]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fa73 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc6:	e00c      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3320      	adds	r3, #32
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fb5e 	bl	8002690 <RCCEx_PLLSAI2_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd8:	e003      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	74fb      	strb	r3, [r7, #19]
      break;
 8001fde:	e000      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe8:	4b52      	ldr	r3, [pc, #328]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff6:	494f      	ldr	r1, [pc, #316]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ffe:	e001      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80a0 	beq.w	8002152 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a40      	ldr	r2, [pc, #256]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
 8002038:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002044:	2301      	movs	r3, #1
 8002046:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002054:	f7fe fe02 	bl	8000c5c <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800205a:	e009      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe fdfe 	bl	8000c5c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d902      	bls.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	74fb      	strb	r3, [r7, #19]
        break;
 800206e:	e005      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d15c      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002082:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01f      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	d019      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7fe fdbd 	bl	8000c5c <HAL_GetTick>
 80020e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e4:	e00b      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fdb9 	bl	8000c5c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d902      	bls.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	74fb      	strb	r3, [r7, #19]
            break;
 80020fc:	e006      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0ec      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002122:	4904      	ldr	r1, [pc, #16]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800212a:	e009      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
 8002130:	e006      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002140:	7c7b      	ldrb	r3, [r7, #17]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d105      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002146:	4b9e      	ldr	r3, [pc, #632]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	4a9d      	ldr	r2, [pc, #628]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002150:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215e:	4b98      	ldr	r3, [pc, #608]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f023 0203 	bic.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	4994      	ldr	r1, [pc, #592]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002180:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 020c 	bic.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	498c      	ldr	r1, [pc, #560]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a2:	4b87      	ldr	r3, [pc, #540]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	4983      	ldr	r1, [pc, #524]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c4:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	497b      	ldr	r1, [pc, #492]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f4:	4972      	ldr	r1, [pc, #456]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002208:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	496a      	ldr	r1, [pc, #424]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222a:	4b65      	ldr	r3, [pc, #404]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	4961      	ldr	r1, [pc, #388]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800224c:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	4959      	ldr	r1, [pc, #356]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226e:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	4950      	ldr	r1, [pc, #320]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002290:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	4948      	ldr	r1, [pc, #288]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	493f      	ldr	r1, [pc, #252]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d028      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e2:	4937      	ldr	r1, [pc, #220]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f2:	d106      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]
 8002300:	e011      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800230a:	d10c      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f8c8 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d028      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	491f      	ldr	r1, [pc, #124]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002350:	d106      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800235c:	60d3      	str	r3, [r2, #12]
 800235e:	e011      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002368:	d10c      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	2101      	movs	r1, #1
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f899 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d02b      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ae:	d109      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ba:	60d3      	str	r3, [r2, #12]
 80023bc:	e014      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f867 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d02f      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002402:	4928      	ldr	r1, [pc, #160]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800240e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002412:	d10d      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	2102      	movs	r1, #2
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f844 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d014      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	74bb      	strb	r3, [r7, #18]
 800242e:	e011      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3320      	adds	r3, #32
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f925 	bl	8002690 <RCCEx_PLLSAI2_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800246e:	490d      	ldr	r1, [pc, #52]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002492:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800249a:	7cbb      	ldrb	r3, [r7, #18]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000

080024a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024b6:	4b75      	ldr	r3, [pc, #468]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d018      	beq.n	80024f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024c2:	4b72      	ldr	r3, [pc, #456]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0203 	and.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10d      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
       ||
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024da:	4b6c      	ldr	r3, [pc, #432]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
       ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d047      	beq.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e044      	b.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d018      	beq.n	800252e <RCCEx_PLLSAI1_Config+0x86>
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d825      	bhi.n	800254c <RCCEx_PLLSAI1_Config+0xa4>
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <RCCEx_PLLSAI1_Config+0x62>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d009      	beq.n	800251c <RCCEx_PLLSAI1_Config+0x74>
 8002508:	e020      	b.n	800254c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800250a:	4b60      	ldr	r3, [pc, #384]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11d      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251a:	e01a      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800251c:	4b5b      	ldr	r3, [pc, #364]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d116      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e013      	b.n	8002556 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800252e:	4b57      	ldr	r3, [pc, #348]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800253a:	4b54      	ldr	r3, [pc, #336]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800254a:	e006      	b.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      break;
 8002550:	e004      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255a:	bf00      	nop
    }

    if(status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	430b      	orrs	r3, r1
 8002578:	4944      	ldr	r1, [pc, #272]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d17d      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002584:	4b41      	ldr	r3, [pc, #260]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a40      	ldr	r2, [pc, #256]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe fb64 	bl	8000c5c <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002596:	e009      	b.n	80025ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002598:	f7fe fb60 	bl	8000c5c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d902      	bls.n	80025ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	73fb      	strb	r3, [r7, #15]
        break;
 80025aa:	e005      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ac:	4b37      	ldr	r3, [pc, #220]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ef      	bne.n	8002598 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d160      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d111      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
 80025d4:	0211      	lsls	r1, r2, #8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0912      	lsrs	r2, r2, #4
 80025dc:	0452      	lsls	r2, r2, #17
 80025de:	430a      	orrs	r2, r1
 80025e0:	492a      	ldr	r1, [pc, #168]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	610b      	str	r3, [r1, #16]
 80025e6:	e027      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d112      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	0211      	lsls	r1, r2, #8
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6912      	ldr	r2, [r2, #16]
 8002604:	0852      	lsrs	r2, r2, #1
 8002606:	3a01      	subs	r2, #1
 8002608:	0552      	lsls	r2, r2, #21
 800260a:	430a      	orrs	r2, r1
 800260c:	491f      	ldr	r1, [pc, #124]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	610b      	str	r3, [r1, #16]
 8002612:	e011      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800261c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6892      	ldr	r2, [r2, #8]
 8002624:	0211      	lsls	r1, r2, #8
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6952      	ldr	r2, [r2, #20]
 800262a:	0852      	lsrs	r2, r2, #1
 800262c:	3a01      	subs	r2, #1
 800262e:	0652      	lsls	r2, r2, #25
 8002630:	430a      	orrs	r2, r1
 8002632:	4916      	ldr	r1, [pc, #88]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	4313      	orrs	r3, r2
 8002636:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a13      	ldr	r2, [pc, #76]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800263e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002642:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7fe fb0a 	bl	8000c5c <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800264a:	e009      	b.n	8002660 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800264c:	f7fe fb06 	bl	8000c5c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	73fb      	strb	r3, [r7, #15]
          break;
 800265e:	e005      	b.n	800266c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800269e:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d018      	beq.n	80026dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d10d      	bne.n	80026d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
       ||
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026c2:	4b61      	ldr	r3, [pc, #388]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
       ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d047      	beq.n	8002766 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e044      	b.n	8002766 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d018      	beq.n	8002716 <RCCEx_PLLSAI2_Config+0x86>
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d825      	bhi.n	8002734 <RCCEx_PLLSAI2_Config+0xa4>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d002      	beq.n	80026f2 <RCCEx_PLLSAI2_Config+0x62>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d009      	beq.n	8002704 <RCCEx_PLLSAI2_Config+0x74>
 80026f0:	e020      	b.n	8002734 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026f2:	4b55      	ldr	r3, [pc, #340]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11d      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002702:	e01a      	b.n	800273a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d116      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002714:	e013      	b.n	800273e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002716:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002732:	e006      	b.n	8002742 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      break;
 8002738:	e004      	b.n	8002744 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273a:	bf00      	nop
 800273c:	e002      	b.n	8002744 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002742:	bf00      	nop
    }

    if(status == HAL_OK)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800274a:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	430b      	orrs	r3, r1
 8002760:	4939      	ldr	r1, [pc, #228]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d167      	bne.n	800283c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a35      	ldr	r2, [pc, #212]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7fe fa70 	bl	8000c5c <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800277e:	e009      	b.n	8002794 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002780:	f7fe fa6c 	bl	8000c5c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d902      	bls.n	8002794 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	73fb      	strb	r3, [r7, #15]
        break;
 8002792:	e005      	b.n	80027a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002794:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ef      	bne.n	8002780 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d14a      	bne.n	800283c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d111      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6892      	ldr	r2, [r2, #8]
 80027bc:	0211      	lsls	r1, r2, #8
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	0912      	lsrs	r2, r2, #4
 80027c4:	0452      	lsls	r2, r2, #17
 80027c6:	430a      	orrs	r2, r1
 80027c8:	491f      	ldr	r1, [pc, #124]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	614b      	str	r3, [r1, #20]
 80027ce:	e011      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6892      	ldr	r2, [r2, #8]
 80027e0:	0211      	lsls	r1, r2, #8
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6912      	ldr	r2, [r2, #16]
 80027e6:	0852      	lsrs	r2, r2, #1
 80027e8:	3a01      	subs	r2, #1
 80027ea:	0652      	lsls	r2, r2, #25
 80027ec:	430a      	orrs	r2, r1
 80027ee:	4916      	ldr	r1, [pc, #88]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a13      	ldr	r2, [pc, #76]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fa2c 	bl	8000c5c <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002806:	e009      	b.n	800281c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002808:	f7fe fa28 	bl	8000c5c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
          break;
 800281a:	e005      	b.n	8002828 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ef      	beq.n	8002808 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4904      	ldr	r1, [pc, #16]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002838:	4313      	orrs	r3, r2
 800283a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d079      	beq.n	8002952 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fd fff2 	bl	800085c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b10      	cmp	r3, #16
 800288c:	d058      	beq.n	8002940 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	22ca      	movs	r2, #202	; 0xca
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2253      	movs	r2, #83	; 0x53
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9c6 	bl	8002c30 <RTC_EnterInitMode>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d127      	bne.n	80028fe <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80028bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68d2      	ldr	r2, [r2, #12]
 80028e8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6919      	ldr	r1, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f9ca 	bl	8002c98 <RTC_ExitInitMode>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d113      	bne.n	8002936 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0203 	bic.w	r2, r2, #3
 800291c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	22ff      	movs	r2, #255	; 0xff
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
 800293e:	e001      	b.n	8002944 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d103      	bne.n	8002952 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_RTC_SetTime+0x1a>
 8002972:	2302      	movs	r3, #2
 8002974:	e08b      	b.n	8002a8e <HAL_RTC_SetTime+0x132>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	22ca      	movs	r2, #202	; 0xca
 800298c:	625a      	str	r2, [r3, #36]	; 0x24
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2253      	movs	r2, #83	; 0x53
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f94a 	bl	8002c30 <RTC_EnterInitMode>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d163      	bne.n	8002a6e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d126      	bne.n	80029fa <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f9a5 	bl	8002d14 <RTC_ByteToBcd2>
 80029ca:	4603      	mov	r3, r0
 80029cc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	785b      	ldrb	r3, [r3, #1]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f99e 	bl	8002d14 <RTC_ByteToBcd2>
 80029d8:	4603      	mov	r3, r0
 80029da:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029dc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	789b      	ldrb	r3, [r3, #2]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f996 	bl	8002d14 <RTC_ByteToBcd2>
 80029e8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029ea:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	78db      	ldrb	r3, [r3, #3]
 80029f2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	e018      	b.n	8002a2c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a1a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a20:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	78db      	ldrb	r3, [r3, #3]
 8002a26:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002a36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f917 	bl	8002c98 <RTC_ExitInitMode>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	22ff      	movs	r2, #255	; 0xff
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}

08002a96 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ac4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0d9b      	lsrs	r3, r3, #22
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11a      	bne.n	8002b44 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f91e 	bl	8002d54 <RTC_Bcd2ToByte>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	785b      	ldrb	r3, [r3, #1]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f915 	bl	8002d54 <RTC_Bcd2ToByte>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	789b      	ldrb	r3, [r3, #2]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f90c 	bl	8002d54 <RTC_Bcd2ToByte>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b68:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	0b5b      	lsrs	r3, r3, #13
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d11a      	bne.n	8002bde <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	78db      	ldrb	r3, [r3, #3]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f8d1 	bl	8002d54 <RTC_Bcd2ToByte>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f8c8 	bl	8002d54 <RTC_Bcd2ToByte>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	789b      	ldrb	r3, [r3, #2]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f8bf 	bl	8002d54 <RTC_Bcd2ToByte>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <HAL_RTC_WaitForSynchro+0x44>)
 8002bf6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002bf8:	f7fe f830 	bl	8000c5c <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bfe:	e009      	b.n	8002c14 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c00:	f7fe f82c 	bl	8000c5c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c0e:	d901      	bls.n	8002c14 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e007      	b.n	8002c24 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0ee      	beq.n	8002c00 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	0003ff5f 	.word	0x0003ff5f

08002c30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d120      	bne.n	8002c8c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c54:	f7fe f802 	bl	8000c5c <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c5a:	e00d      	b.n	8002c78 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002c5c:	f7fd fffe 	bl	8000c5c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c6a:	d905      	bls.n	8002c78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2203      	movs	r2, #3
 8002c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <RTC_EnterInitMode+0x5c>
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d1e7      	bne.n	8002c5c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <RTC_ExitInitMode+0x78>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <RTC_ExitInitMode+0x78>)
 8002caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <RTC_ExitInitMode+0x78>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10c      	bne.n	8002cd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff ff93 	bl	8002be8 <HAL_RTC_WaitForSynchro>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01e      	beq.n	8002d06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e017      	b.n	8002d06 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <RTC_ExitInitMode+0x78>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <RTC_ExitInitMode+0x78>)
 8002cdc:	f023 0320 	bic.w	r3, r3, #32
 8002ce0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ff80 	bl	8002be8 <HAL_RTC_WaitForSynchro>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <RTC_ExitInitMode+0x78>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <RTC_ExitInitMode+0x78>)
 8002d00:	f043 0320 	orr.w	r3, r3, #32
 8002d04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40002800 	.word	0x40002800

08002d14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002d26:	e005      	b.n	8002d34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	3b0a      	subs	r3, #10
 8002d32:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	d8f6      	bhi.n	8002d28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	7afb      	ldrb	r3, [r7, #11]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b2db      	uxtb	r3, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	4413      	add	r3, r2
 8002d7a:	b2db      	uxtb	r3, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e040      	b.n	8002e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd fd88 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fb6a 	bl	80034a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f8af 	bl	8002f38 <UART_SetConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e01b      	b.n	8002e1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fbe9 	bl	80035ec <UART_CheckIdleState>
 8002e1a:	4603      	mov	r3, r0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d178      	bne.n	8002f2e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Transmit+0x24>
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e071      	b.n	8002f30 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2221      	movs	r2, #33	; 0x21
 8002e58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5a:	f7fd feff 	bl	8000c5c <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	88fa      	ldrh	r2, [r7, #6]
 8002e64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e78:	d108      	bne.n	8002e8c <HAL_UART_Transmit+0x68>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	e003      	b.n	8002e94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e94:	e030      	b.n	8002ef8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fc4b 	bl	800373c <UART_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e03c      	b.n	8002f30 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	881a      	ldrh	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	3302      	adds	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e008      	b.n	8002ee6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b292      	uxth	r2, r2
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1c8      	bne.n	8002e96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2140      	movs	r1, #64	; 0x40
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fc14 	bl	800373c <UART_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e005      	b.n	8002f30 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b08a      	sub	sp, #40	; 0x28
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4ba4      	ldr	r3, [pc, #656]	; (80031f8 <UART_SetConfig+0x2c0>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a99      	ldr	r2, [pc, #612]	; (80031fc <UART_SetConfig+0x2c4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a90      	ldr	r2, [pc, #576]	; (8003200 <UART_SetConfig+0x2c8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d126      	bne.n	8003010 <UART_SetConfig+0xd8>
 8002fc2:	4b90      	ldr	r3, [pc, #576]	; (8003204 <UART_SetConfig+0x2cc>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d81b      	bhi.n	8003008 <UART_SetConfig+0xd0>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <UART_SetConfig+0xa0>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002fe9 	.word	0x08002fe9
 8002fdc:	08002ff9 	.word	0x08002ff9
 8002fe0:	08002ff1 	.word	0x08002ff1
 8002fe4:	08003001 	.word	0x08003001
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fee:	e116      	b.n	800321e <UART_SetConfig+0x2e6>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff6:	e112      	b.n	800321e <UART_SetConfig+0x2e6>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffe:	e10e      	b.n	800321e <UART_SetConfig+0x2e6>
 8003000:	2308      	movs	r3, #8
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003006:	e10a      	b.n	800321e <UART_SetConfig+0x2e6>
 8003008:	2310      	movs	r3, #16
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300e:	e106      	b.n	800321e <UART_SetConfig+0x2e6>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a7c      	ldr	r2, [pc, #496]	; (8003208 <UART_SetConfig+0x2d0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d138      	bne.n	800308c <UART_SetConfig+0x154>
 800301a:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <UART_SetConfig+0x2cc>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b0c      	cmp	r3, #12
 8003026:	d82d      	bhi.n	8003084 <UART_SetConfig+0x14c>
 8003028:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <UART_SetConfig+0xf8>)
 800302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302e:	bf00      	nop
 8003030:	08003065 	.word	0x08003065
 8003034:	08003085 	.word	0x08003085
 8003038:	08003085 	.word	0x08003085
 800303c:	08003085 	.word	0x08003085
 8003040:	08003075 	.word	0x08003075
 8003044:	08003085 	.word	0x08003085
 8003048:	08003085 	.word	0x08003085
 800304c:	08003085 	.word	0x08003085
 8003050:	0800306d 	.word	0x0800306d
 8003054:	08003085 	.word	0x08003085
 8003058:	08003085 	.word	0x08003085
 800305c:	08003085 	.word	0x08003085
 8003060:	0800307d 	.word	0x0800307d
 8003064:	2300      	movs	r3, #0
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e0d8      	b.n	800321e <UART_SetConfig+0x2e6>
 800306c:	2302      	movs	r3, #2
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e0d4      	b.n	800321e <UART_SetConfig+0x2e6>
 8003074:	2304      	movs	r3, #4
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e0d0      	b.n	800321e <UART_SetConfig+0x2e6>
 800307c:	2308      	movs	r3, #8
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e0cc      	b.n	800321e <UART_SetConfig+0x2e6>
 8003084:	2310      	movs	r3, #16
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308a:	e0c8      	b.n	800321e <UART_SetConfig+0x2e6>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a5e      	ldr	r2, [pc, #376]	; (800320c <UART_SetConfig+0x2d4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d125      	bne.n	80030e2 <UART_SetConfig+0x1aa>
 8003096:	4b5b      	ldr	r3, [pc, #364]	; (8003204 <UART_SetConfig+0x2cc>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030a0:	2b30      	cmp	r3, #48	; 0x30
 80030a2:	d016      	beq.n	80030d2 <UART_SetConfig+0x19a>
 80030a4:	2b30      	cmp	r3, #48	; 0x30
 80030a6:	d818      	bhi.n	80030da <UART_SetConfig+0x1a2>
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d00a      	beq.n	80030c2 <UART_SetConfig+0x18a>
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d814      	bhi.n	80030da <UART_SetConfig+0x1a2>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <UART_SetConfig+0x182>
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d008      	beq.n	80030ca <UART_SetConfig+0x192>
 80030b8:	e00f      	b.n	80030da <UART_SetConfig+0x1a2>
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c0:	e0ad      	b.n	800321e <UART_SetConfig+0x2e6>
 80030c2:	2302      	movs	r3, #2
 80030c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c8:	e0a9      	b.n	800321e <UART_SetConfig+0x2e6>
 80030ca:	2304      	movs	r3, #4
 80030cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d0:	e0a5      	b.n	800321e <UART_SetConfig+0x2e6>
 80030d2:	2308      	movs	r3, #8
 80030d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d8:	e0a1      	b.n	800321e <UART_SetConfig+0x2e6>
 80030da:	2310      	movs	r3, #16
 80030dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e0:	e09d      	b.n	800321e <UART_SetConfig+0x2e6>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a4a      	ldr	r2, [pc, #296]	; (8003210 <UART_SetConfig+0x2d8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d125      	bne.n	8003138 <UART_SetConfig+0x200>
 80030ec:	4b45      	ldr	r3, [pc, #276]	; (8003204 <UART_SetConfig+0x2cc>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030f6:	2bc0      	cmp	r3, #192	; 0xc0
 80030f8:	d016      	beq.n	8003128 <UART_SetConfig+0x1f0>
 80030fa:	2bc0      	cmp	r3, #192	; 0xc0
 80030fc:	d818      	bhi.n	8003130 <UART_SetConfig+0x1f8>
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d00a      	beq.n	8003118 <UART_SetConfig+0x1e0>
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d814      	bhi.n	8003130 <UART_SetConfig+0x1f8>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <UART_SetConfig+0x1d8>
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d008      	beq.n	8003120 <UART_SetConfig+0x1e8>
 800310e:	e00f      	b.n	8003130 <UART_SetConfig+0x1f8>
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e082      	b.n	800321e <UART_SetConfig+0x2e6>
 8003118:	2302      	movs	r3, #2
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e07e      	b.n	800321e <UART_SetConfig+0x2e6>
 8003120:	2304      	movs	r3, #4
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e07a      	b.n	800321e <UART_SetConfig+0x2e6>
 8003128:	2308      	movs	r3, #8
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e076      	b.n	800321e <UART_SetConfig+0x2e6>
 8003130:	2310      	movs	r3, #16
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e072      	b.n	800321e <UART_SetConfig+0x2e6>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a35      	ldr	r2, [pc, #212]	; (8003214 <UART_SetConfig+0x2dc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d12a      	bne.n	8003198 <UART_SetConfig+0x260>
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <UART_SetConfig+0x2cc>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003150:	d01a      	beq.n	8003188 <UART_SetConfig+0x250>
 8003152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003156:	d81b      	bhi.n	8003190 <UART_SetConfig+0x258>
 8003158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315c:	d00c      	beq.n	8003178 <UART_SetConfig+0x240>
 800315e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003162:	d815      	bhi.n	8003190 <UART_SetConfig+0x258>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <UART_SetConfig+0x238>
 8003168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316c:	d008      	beq.n	8003180 <UART_SetConfig+0x248>
 800316e:	e00f      	b.n	8003190 <UART_SetConfig+0x258>
 8003170:	2300      	movs	r3, #0
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e052      	b.n	800321e <UART_SetConfig+0x2e6>
 8003178:	2302      	movs	r3, #2
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e04e      	b.n	800321e <UART_SetConfig+0x2e6>
 8003180:	2304      	movs	r3, #4
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e04a      	b.n	800321e <UART_SetConfig+0x2e6>
 8003188:	2308      	movs	r3, #8
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e046      	b.n	800321e <UART_SetConfig+0x2e6>
 8003190:	2310      	movs	r3, #16
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e042      	b.n	800321e <UART_SetConfig+0x2e6>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <UART_SetConfig+0x2c4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d13a      	bne.n	8003218 <UART_SetConfig+0x2e0>
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <UART_SetConfig+0x2cc>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031b0:	d01a      	beq.n	80031e8 <UART_SetConfig+0x2b0>
 80031b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031b6:	d81b      	bhi.n	80031f0 <UART_SetConfig+0x2b8>
 80031b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031bc:	d00c      	beq.n	80031d8 <UART_SetConfig+0x2a0>
 80031be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c2:	d815      	bhi.n	80031f0 <UART_SetConfig+0x2b8>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <UART_SetConfig+0x298>
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d008      	beq.n	80031e0 <UART_SetConfig+0x2a8>
 80031ce:	e00f      	b.n	80031f0 <UART_SetConfig+0x2b8>
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d6:	e022      	b.n	800321e <UART_SetConfig+0x2e6>
 80031d8:	2302      	movs	r3, #2
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031de:	e01e      	b.n	800321e <UART_SetConfig+0x2e6>
 80031e0:	2304      	movs	r3, #4
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e6:	e01a      	b.n	800321e <UART_SetConfig+0x2e6>
 80031e8:	2308      	movs	r3, #8
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ee:	e016      	b.n	800321e <UART_SetConfig+0x2e6>
 80031f0:	2310      	movs	r3, #16
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e012      	b.n	800321e <UART_SetConfig+0x2e6>
 80031f8:	efff69f3 	.word	0xefff69f3
 80031fc:	40008000 	.word	0x40008000
 8003200:	40013800 	.word	0x40013800
 8003204:	40021000 	.word	0x40021000
 8003208:	40004400 	.word	0x40004400
 800320c:	40004800 	.word	0x40004800
 8003210:	40004c00 	.word	0x40004c00
 8003214:	40005000 	.word	0x40005000
 8003218:	2310      	movs	r3, #16
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a9f      	ldr	r2, [pc, #636]	; (80034a0 <UART_SetConfig+0x568>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d17a      	bne.n	800331e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322c:	2b08      	cmp	r3, #8
 800322e:	d824      	bhi.n	800327a <UART_SetConfig+0x342>
 8003230:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <UART_SetConfig+0x300>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	0800325d 	.word	0x0800325d
 800323c:	0800327b 	.word	0x0800327b
 8003240:	08003265 	.word	0x08003265
 8003244:	0800327b 	.word	0x0800327b
 8003248:	0800326b 	.word	0x0800326b
 800324c:	0800327b 	.word	0x0800327b
 8003250:	0800327b 	.word	0x0800327b
 8003254:	0800327b 	.word	0x0800327b
 8003258:	08003273 	.word	0x08003273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800325c:	f7fe fdae 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8003260:	61f8      	str	r0, [r7, #28]
        break;
 8003262:	e010      	b.n	8003286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003264:	4b8f      	ldr	r3, [pc, #572]	; (80034a4 <UART_SetConfig+0x56c>)
 8003266:	61fb      	str	r3, [r7, #28]
        break;
 8003268:	e00d      	b.n	8003286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326a:	f7fe fd0f 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 800326e:	61f8      	str	r0, [r7, #28]
        break;
 8003270:	e009      	b.n	8003286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003276:	61fb      	str	r3, [r7, #28]
        break;
 8003278:	e005      	b.n	8003286 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80fb 	beq.w	8003484 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	429a      	cmp	r2, r3
 800329c:	d305      	bcc.n	80032aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d903      	bls.n	80032b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032b0:	e0e8      	b.n	8003484 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	2200      	movs	r2, #0
 80032b6:	461c      	mov	r4, r3
 80032b8:	4615      	mov	r5, r2
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	022b      	lsls	r3, r5, #8
 80032c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032c8:	0222      	lsls	r2, r4, #8
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	6849      	ldr	r1, [r1, #4]
 80032ce:	0849      	lsrs	r1, r1, #1
 80032d0:	2000      	movs	r0, #0
 80032d2:	4688      	mov	r8, r1
 80032d4:	4681      	mov	r9, r0
 80032d6:	eb12 0a08 	adds.w	sl, r2, r8
 80032da:	eb43 0b09 	adc.w	fp, r3, r9
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032ec:	4650      	mov	r0, sl
 80032ee:	4659      	mov	r1, fp
 80032f0:	f7fc ffbe 	bl	8000270 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4613      	mov	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d308      	bcc.n	8003316 <UART_SetConfig+0x3de>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330a:	d204      	bcs.n	8003316 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	e0b6      	b.n	8003484 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800331c:	e0b2      	b.n	8003484 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003326:	d15e      	bne.n	80033e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800332c:	2b08      	cmp	r3, #8
 800332e:	d828      	bhi.n	8003382 <UART_SetConfig+0x44a>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x400>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	0800335d 	.word	0x0800335d
 800333c:	08003365 	.word	0x08003365
 8003340:	0800336d 	.word	0x0800336d
 8003344:	08003383 	.word	0x08003383
 8003348:	08003373 	.word	0x08003373
 800334c:	08003383 	.word	0x08003383
 8003350:	08003383 	.word	0x08003383
 8003354:	08003383 	.word	0x08003383
 8003358:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7fe fd2e 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8003360:	61f8      	str	r0, [r7, #28]
        break;
 8003362:	e014      	b.n	800338e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7fe fd40 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 8003368:	61f8      	str	r0, [r7, #28]
        break;
 800336a:	e010      	b.n	800338e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b4d      	ldr	r3, [pc, #308]	; (80034a4 <UART_SetConfig+0x56c>)
 800336e:	61fb      	str	r3, [r7, #28]
        break;
 8003370:	e00d      	b.n	800338e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7fe fc8b 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8003376:	61f8      	str	r0, [r7, #28]
        break;
 8003378:	e009      	b.n	800338e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	61fb      	str	r3, [r7, #28]
        break;
 8003380:	e005      	b.n	800338e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800338c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d077      	beq.n	8003484 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005a      	lsls	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	441a      	add	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d916      	bls.n	80033de <UART_SetConfig+0x4a6>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b6:	d212      	bcs.n	80033de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f023 030f 	bic.w	r3, r3, #15
 80033c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	8afb      	ldrh	r3, [r7, #22]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	8afa      	ldrh	r2, [r7, #22]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	e052      	b.n	8003484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033e4:	e04e      	b.n	8003484 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d827      	bhi.n	800343e <UART_SetConfig+0x506>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <UART_SetConfig+0x4bc>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003421 	.word	0x08003421
 80033fc:	08003429 	.word	0x08003429
 8003400:	0800343f 	.word	0x0800343f
 8003404:	0800342f 	.word	0x0800342f
 8003408:	0800343f 	.word	0x0800343f
 800340c:	0800343f 	.word	0x0800343f
 8003410:	0800343f 	.word	0x0800343f
 8003414:	08003437 	.word	0x08003437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003418:	f7fe fcd0 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 800341c:	61f8      	str	r0, [r7, #28]
        break;
 800341e:	e014      	b.n	800344a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7fe fce2 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 8003424:	61f8      	str	r0, [r7, #28]
        break;
 8003426:	e010      	b.n	800344a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <UART_SetConfig+0x56c>)
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e00d      	b.n	800344a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7fe fc2d 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8003432:	61f8      	str	r0, [r7, #28]
        break;
 8003434:	e009      	b.n	800344a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	61fb      	str	r3, [r7, #28]
        break;
 800343c:	e005      	b.n	800344a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003448:	bf00      	nop
    }

    if (pclk != 0U)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d019      	beq.n	8003484 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	085a      	lsrs	r2, r3, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	441a      	add	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b0f      	cmp	r3, #15
 8003468:	d909      	bls.n	800347e <UART_SetConfig+0x546>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003470:	d205      	bcs.n	800347e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	e002      	b.n	8003484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003490:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003494:	4618      	mov	r0, r3
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349e:	bf00      	nop
 80034a0:	40008000 	.word	0x40008000
 80034a4:	00f42400 	.word	0x00f42400

080034a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01a      	beq.n	80035be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a6:	d10a      	bne.n	80035be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  }
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b098      	sub	sp, #96	; 0x60
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035fc:	f7fd fb2e 	bl	8000c5c <HAL_GetTick>
 8003600:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d12e      	bne.n	800366e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f88c 	bl	800373c <UART_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d021      	beq.n	800366e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363e:	653b      	str	r3, [r7, #80]	; 0x50
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
 800364a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800364e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e062      	b.n	8003734 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d149      	bne.n	8003710 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f856 	bl	800373c <UART_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03c      	beq.n	8003710 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	623b      	str	r3, [r7, #32]
   return(result);
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b4:	633b      	str	r3, [r7, #48]	; 0x30
 80036b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e6      	bne.n	8003696 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3308      	adds	r3, #8
 80036e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036e8:	61fa      	str	r2, [r7, #28]
 80036ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	69b9      	ldr	r1, [r7, #24]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	617b      	str	r3, [r7, #20]
   return(result);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e5      	bne.n	80036c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e011      	b.n	8003734 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3758      	adds	r7, #88	; 0x58
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374c:	e049      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d045      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7fd fa81 	bl	8000c5c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <UART_WaitOnFlagUntilTimeout+0x30>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e048      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d031      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b08      	cmp	r3, #8
 800378a:	d110      	bne.n	80037ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2208      	movs	r2, #8
 8003792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f838 	bl	800380a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2208      	movs	r2, #8
 800379e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e029      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037bc:	d111      	bne.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f81e 	bl	800380a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e00f      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d0a6      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800380a:	b480      	push	{r7}
 800380c:	b095      	sub	sp, #84	; 0x54
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003830:	643b      	str	r3, [r7, #64]	; 0x40
 8003832:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e6      	bne.n	8003812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3308      	adds	r3, #8
 800384a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	61fb      	str	r3, [r7, #28]
   return(result);
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	64bb      	str	r3, [r7, #72]	; 0x48
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800386a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e5      	bne.n	8003844 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387c:	2b01      	cmp	r3, #1
 800387e:	d118      	bne.n	80038b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	60bb      	str	r3, [r7, #8]
   return(result);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f023 0310 	bic.w	r3, r3, #16
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	613b      	str	r3, [r7, #16]
   return(result);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e6      	bne.n	8003880 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038c6:	bf00      	nop
 80038c8:	3754      	adds	r7, #84	; 0x54
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <std>:
 80038d4:	2300      	movs	r3, #0
 80038d6:	b510      	push	{r4, lr}
 80038d8:	4604      	mov	r4, r0
 80038da:	e9c0 3300 	strd	r3, r3, [r0]
 80038de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038e2:	6083      	str	r3, [r0, #8]
 80038e4:	8181      	strh	r1, [r0, #12]
 80038e6:	6643      	str	r3, [r0, #100]	; 0x64
 80038e8:	81c2      	strh	r2, [r0, #14]
 80038ea:	6183      	str	r3, [r0, #24]
 80038ec:	4619      	mov	r1, r3
 80038ee:	2208      	movs	r2, #8
 80038f0:	305c      	adds	r0, #92	; 0x5c
 80038f2:	f000 f906 	bl	8003b02 <memset>
 80038f6:	4b0d      	ldr	r3, [pc, #52]	; (800392c <std+0x58>)
 80038f8:	6263      	str	r3, [r4, #36]	; 0x24
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <std+0x5c>)
 80038fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <std+0x60>)
 8003900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <std+0x64>)
 8003904:	6323      	str	r3, [r4, #48]	; 0x30
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <std+0x68>)
 8003908:	6224      	str	r4, [r4, #32]
 800390a:	429c      	cmp	r4, r3
 800390c:	d006      	beq.n	800391c <std+0x48>
 800390e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003912:	4294      	cmp	r4, r2
 8003914:	d002      	beq.n	800391c <std+0x48>
 8003916:	33d0      	adds	r3, #208	; 0xd0
 8003918:	429c      	cmp	r4, r3
 800391a:	d105      	bne.n	8003928 <std+0x54>
 800391c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003924:	f000 b966 	b.w	8003bf4 <__retarget_lock_init_recursive>
 8003928:	bd10      	pop	{r4, pc}
 800392a:	bf00      	nop
 800392c:	08003a7d 	.word	0x08003a7d
 8003930:	08003a9f 	.word	0x08003a9f
 8003934:	08003ad7 	.word	0x08003ad7
 8003938:	08003afb 	.word	0x08003afb
 800393c:	20000138 	.word	0x20000138

08003940 <stdio_exit_handler>:
 8003940:	4a02      	ldr	r2, [pc, #8]	; (800394c <stdio_exit_handler+0xc>)
 8003942:	4903      	ldr	r1, [pc, #12]	; (8003950 <stdio_exit_handler+0x10>)
 8003944:	4803      	ldr	r0, [pc, #12]	; (8003954 <stdio_exit_handler+0x14>)
 8003946:	f000 b869 	b.w	8003a1c <_fwalk_sglue>
 800394a:	bf00      	nop
 800394c:	2000000c 	.word	0x2000000c
 8003950:	080044a1 	.word	0x080044a1
 8003954:	20000018 	.word	0x20000018

08003958 <cleanup_stdio>:
 8003958:	6841      	ldr	r1, [r0, #4]
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <cleanup_stdio+0x34>)
 800395c:	4299      	cmp	r1, r3
 800395e:	b510      	push	{r4, lr}
 8003960:	4604      	mov	r4, r0
 8003962:	d001      	beq.n	8003968 <cleanup_stdio+0x10>
 8003964:	f000 fd9c 	bl	80044a0 <_fflush_r>
 8003968:	68a1      	ldr	r1, [r4, #8]
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <cleanup_stdio+0x38>)
 800396c:	4299      	cmp	r1, r3
 800396e:	d002      	beq.n	8003976 <cleanup_stdio+0x1e>
 8003970:	4620      	mov	r0, r4
 8003972:	f000 fd95 	bl	80044a0 <_fflush_r>
 8003976:	68e1      	ldr	r1, [r4, #12]
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <cleanup_stdio+0x3c>)
 800397a:	4299      	cmp	r1, r3
 800397c:	d004      	beq.n	8003988 <cleanup_stdio+0x30>
 800397e:	4620      	mov	r0, r4
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003984:	f000 bd8c 	b.w	80044a0 <_fflush_r>
 8003988:	bd10      	pop	{r4, pc}
 800398a:	bf00      	nop
 800398c:	20000138 	.word	0x20000138
 8003990:	200001a0 	.word	0x200001a0
 8003994:	20000208 	.word	0x20000208

08003998 <global_stdio_init.part.0>:
 8003998:	b510      	push	{r4, lr}
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <global_stdio_init.part.0+0x30>)
 800399c:	4c0b      	ldr	r4, [pc, #44]	; (80039cc <global_stdio_init.part.0+0x34>)
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <global_stdio_init.part.0+0x38>)
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	4620      	mov	r0, r4
 80039a4:	2200      	movs	r2, #0
 80039a6:	2104      	movs	r1, #4
 80039a8:	f7ff ff94 	bl	80038d4 <std>
 80039ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80039b0:	2201      	movs	r2, #1
 80039b2:	2109      	movs	r1, #9
 80039b4:	f7ff ff8e 	bl	80038d4 <std>
 80039b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80039bc:	2202      	movs	r2, #2
 80039be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c2:	2112      	movs	r1, #18
 80039c4:	f7ff bf86 	b.w	80038d4 <std>
 80039c8:	20000270 	.word	0x20000270
 80039cc:	20000138 	.word	0x20000138
 80039d0:	08003941 	.word	0x08003941

080039d4 <__sfp_lock_acquire>:
 80039d4:	4801      	ldr	r0, [pc, #4]	; (80039dc <__sfp_lock_acquire+0x8>)
 80039d6:	f000 b90e 	b.w	8003bf6 <__retarget_lock_acquire_recursive>
 80039da:	bf00      	nop
 80039dc:	20000279 	.word	0x20000279

080039e0 <__sfp_lock_release>:
 80039e0:	4801      	ldr	r0, [pc, #4]	; (80039e8 <__sfp_lock_release+0x8>)
 80039e2:	f000 b909 	b.w	8003bf8 <__retarget_lock_release_recursive>
 80039e6:	bf00      	nop
 80039e8:	20000279 	.word	0x20000279

080039ec <__sinit>:
 80039ec:	b510      	push	{r4, lr}
 80039ee:	4604      	mov	r4, r0
 80039f0:	f7ff fff0 	bl	80039d4 <__sfp_lock_acquire>
 80039f4:	6a23      	ldr	r3, [r4, #32]
 80039f6:	b11b      	cbz	r3, 8003a00 <__sinit+0x14>
 80039f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039fc:	f7ff bff0 	b.w	80039e0 <__sfp_lock_release>
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <__sinit+0x28>)
 8003a02:	6223      	str	r3, [r4, #32]
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <__sinit+0x2c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f5      	bne.n	80039f8 <__sinit+0xc>
 8003a0c:	f7ff ffc4 	bl	8003998 <global_stdio_init.part.0>
 8003a10:	e7f2      	b.n	80039f8 <__sinit+0xc>
 8003a12:	bf00      	nop
 8003a14:	08003959 	.word	0x08003959
 8003a18:	20000270 	.word	0x20000270

08003a1c <_fwalk_sglue>:
 8003a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a20:	4607      	mov	r7, r0
 8003a22:	4688      	mov	r8, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	2600      	movs	r6, #0
 8003a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8003a30:	d505      	bpl.n	8003a3e <_fwalk_sglue+0x22>
 8003a32:	6824      	ldr	r4, [r4, #0]
 8003a34:	2c00      	cmp	r4, #0
 8003a36:	d1f7      	bne.n	8003a28 <_fwalk_sglue+0xc>
 8003a38:	4630      	mov	r0, r6
 8003a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a3e:	89ab      	ldrh	r3, [r5, #12]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d907      	bls.n	8003a54 <_fwalk_sglue+0x38>
 8003a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	d003      	beq.n	8003a54 <_fwalk_sglue+0x38>
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4638      	mov	r0, r7
 8003a50:	47c0      	blx	r8
 8003a52:	4306      	orrs	r6, r0
 8003a54:	3568      	adds	r5, #104	; 0x68
 8003a56:	e7e9      	b.n	8003a2c <_fwalk_sglue+0x10>

08003a58 <iprintf>:
 8003a58:	b40f      	push	{r0, r1, r2, r3}
 8003a5a:	b507      	push	{r0, r1, r2, lr}
 8003a5c:	4906      	ldr	r1, [pc, #24]	; (8003a78 <iprintf+0x20>)
 8003a5e:	ab04      	add	r3, sp, #16
 8003a60:	6808      	ldr	r0, [r1, #0]
 8003a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a66:	6881      	ldr	r1, [r0, #8]
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	f000 f9e9 	bl	8003e40 <_vfiprintf_r>
 8003a6e:	b003      	add	sp, #12
 8003a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a74:	b004      	add	sp, #16
 8003a76:	4770      	bx	lr
 8003a78:	20000064 	.word	0x20000064

08003a7c <__sread>:
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	460c      	mov	r4, r1
 8003a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a84:	f000 f868 	bl	8003b58 <_read_r>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	bfab      	itete	ge
 8003a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a90:	181b      	addge	r3, r3, r0
 8003a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a96:	bfac      	ite	ge
 8003a98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a9a:	81a3      	strhlt	r3, [r4, #12]
 8003a9c:	bd10      	pop	{r4, pc}

08003a9e <__swrite>:
 8003a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa2:	461f      	mov	r7, r3
 8003aa4:	898b      	ldrh	r3, [r1, #12]
 8003aa6:	05db      	lsls	r3, r3, #23
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	460c      	mov	r4, r1
 8003aac:	4616      	mov	r6, r2
 8003aae:	d505      	bpl.n	8003abc <__swrite+0x1e>
 8003ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f000 f83c 	bl	8003b34 <_lseek_r>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	4632      	mov	r2, r6
 8003aca:	463b      	mov	r3, r7
 8003acc:	4628      	mov	r0, r5
 8003ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad2:	f000 b853 	b.w	8003b7c <_write_r>

08003ad6 <__sseek>:
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	460c      	mov	r4, r1
 8003ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ade:	f000 f829 	bl	8003b34 <_lseek_r>
 8003ae2:	1c43      	adds	r3, r0, #1
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	bf15      	itete	ne
 8003ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003af2:	81a3      	strheq	r3, [r4, #12]
 8003af4:	bf18      	it	ne
 8003af6:	81a3      	strhne	r3, [r4, #12]
 8003af8:	bd10      	pop	{r4, pc}

08003afa <__sclose>:
 8003afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afe:	f000 b809 	b.w	8003b14 <_close_r>

08003b02 <memset>:
 8003b02:	4402      	add	r2, r0
 8003b04:	4603      	mov	r3, r0
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d100      	bne.n	8003b0c <memset+0xa>
 8003b0a:	4770      	bx	lr
 8003b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8003b10:	e7f9      	b.n	8003b06 <memset+0x4>
	...

08003b14 <_close_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	4d06      	ldr	r5, [pc, #24]	; (8003b30 <_close_r+0x1c>)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	602b      	str	r3, [r5, #0]
 8003b20:	f7fc ff8d 	bl	8000a3e <_close>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_close_r+0x1a>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_close_r+0x1a>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	20000274 	.word	0x20000274

08003b34 <_lseek_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4d07      	ldr	r5, [pc, #28]	; (8003b54 <_lseek_r+0x20>)
 8003b38:	4604      	mov	r4, r0
 8003b3a:	4608      	mov	r0, r1
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fc ffa2 	bl	8000a8c <_lseek>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_lseek_r+0x1e>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_lseek_r+0x1e>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	20000274 	.word	0x20000274

08003b58 <_read_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	4d07      	ldr	r5, [pc, #28]	; (8003b78 <_read_r+0x20>)
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	4608      	mov	r0, r1
 8003b60:	4611      	mov	r1, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	602a      	str	r2, [r5, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f7fc ff30 	bl	80009cc <_read>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_read_r+0x1e>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_read_r+0x1e>
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	20000274 	.word	0x20000274

08003b7c <_write_r>:
 8003b7c:	b538      	push	{r3, r4, r5, lr}
 8003b7e:	4d07      	ldr	r5, [pc, #28]	; (8003b9c <_write_r+0x20>)
 8003b80:	4604      	mov	r4, r0
 8003b82:	4608      	mov	r0, r1
 8003b84:	4611      	mov	r1, r2
 8003b86:	2200      	movs	r2, #0
 8003b88:	602a      	str	r2, [r5, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f7fc ff3b 	bl	8000a06 <_write>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_write_r+0x1e>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_write_r+0x1e>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	20000274 	.word	0x20000274

08003ba0 <__errno>:
 8003ba0:	4b01      	ldr	r3, [pc, #4]	; (8003ba8 <__errno+0x8>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000064 	.word	0x20000064

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	4d0d      	ldr	r5, [pc, #52]	; (8003be4 <__libc_init_array+0x38>)
 8003bb0:	4c0d      	ldr	r4, [pc, #52]	; (8003be8 <__libc_init_array+0x3c>)
 8003bb2:	1b64      	subs	r4, r4, r5
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	42a6      	cmp	r6, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	4d0b      	ldr	r5, [pc, #44]	; (8003bec <__libc_init_array+0x40>)
 8003bbe:	4c0c      	ldr	r4, [pc, #48]	; (8003bf0 <__libc_init_array+0x44>)
 8003bc0:	f000 fdc0 	bl	8004744 <_init>
 8003bc4:	1b64      	subs	r4, r4, r5
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	2600      	movs	r6, #0
 8003bca:	42a6      	cmp	r6, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd4:	4798      	blx	r3
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bde:	4798      	blx	r3
 8003be0:	3601      	adds	r6, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	080047fc 	.word	0x080047fc
 8003be8:	080047fc 	.word	0x080047fc
 8003bec:	080047fc 	.word	0x080047fc
 8003bf0:	08004800 	.word	0x08004800

08003bf4 <__retarget_lock_init_recursive>:
 8003bf4:	4770      	bx	lr

08003bf6 <__retarget_lock_acquire_recursive>:
 8003bf6:	4770      	bx	lr

08003bf8 <__retarget_lock_release_recursive>:
 8003bf8:	4770      	bx	lr
	...

08003bfc <_free_r>:
 8003bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bfe:	2900      	cmp	r1, #0
 8003c00:	d044      	beq.n	8003c8c <_free_r+0x90>
 8003c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c06:	9001      	str	r0, [sp, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8003c0e:	bfb8      	it	lt
 8003c10:	18e4      	addlt	r4, r4, r3
 8003c12:	f000 f8df 	bl	8003dd4 <__malloc_lock>
 8003c16:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <_free_r+0x94>)
 8003c18:	9801      	ldr	r0, [sp, #4]
 8003c1a:	6813      	ldr	r3, [r2, #0]
 8003c1c:	b933      	cbnz	r3, 8003c2c <_free_r+0x30>
 8003c1e:	6063      	str	r3, [r4, #4]
 8003c20:	6014      	str	r4, [r2, #0]
 8003c22:	b003      	add	sp, #12
 8003c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c28:	f000 b8da 	b.w	8003de0 <__malloc_unlock>
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	d908      	bls.n	8003c42 <_free_r+0x46>
 8003c30:	6825      	ldr	r5, [r4, #0]
 8003c32:	1961      	adds	r1, r4, r5
 8003c34:	428b      	cmp	r3, r1
 8003c36:	bf01      	itttt	eq
 8003c38:	6819      	ldreq	r1, [r3, #0]
 8003c3a:	685b      	ldreq	r3, [r3, #4]
 8003c3c:	1949      	addeq	r1, r1, r5
 8003c3e:	6021      	streq	r1, [r4, #0]
 8003c40:	e7ed      	b.n	8003c1e <_free_r+0x22>
 8003c42:	461a      	mov	r2, r3
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b10b      	cbz	r3, 8003c4c <_free_r+0x50>
 8003c48:	42a3      	cmp	r3, r4
 8003c4a:	d9fa      	bls.n	8003c42 <_free_r+0x46>
 8003c4c:	6811      	ldr	r1, [r2, #0]
 8003c4e:	1855      	adds	r5, r2, r1
 8003c50:	42a5      	cmp	r5, r4
 8003c52:	d10b      	bne.n	8003c6c <_free_r+0x70>
 8003c54:	6824      	ldr	r4, [r4, #0]
 8003c56:	4421      	add	r1, r4
 8003c58:	1854      	adds	r4, r2, r1
 8003c5a:	42a3      	cmp	r3, r4
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	d1e0      	bne.n	8003c22 <_free_r+0x26>
 8003c60:	681c      	ldr	r4, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	6053      	str	r3, [r2, #4]
 8003c66:	440c      	add	r4, r1
 8003c68:	6014      	str	r4, [r2, #0]
 8003c6a:	e7da      	b.n	8003c22 <_free_r+0x26>
 8003c6c:	d902      	bls.n	8003c74 <_free_r+0x78>
 8003c6e:	230c      	movs	r3, #12
 8003c70:	6003      	str	r3, [r0, #0]
 8003c72:	e7d6      	b.n	8003c22 <_free_r+0x26>
 8003c74:	6825      	ldr	r5, [r4, #0]
 8003c76:	1961      	adds	r1, r4, r5
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	bf04      	itt	eq
 8003c7c:	6819      	ldreq	r1, [r3, #0]
 8003c7e:	685b      	ldreq	r3, [r3, #4]
 8003c80:	6063      	str	r3, [r4, #4]
 8003c82:	bf04      	itt	eq
 8003c84:	1949      	addeq	r1, r1, r5
 8003c86:	6021      	streq	r1, [r4, #0]
 8003c88:	6054      	str	r4, [r2, #4]
 8003c8a:	e7ca      	b.n	8003c22 <_free_r+0x26>
 8003c8c:	b003      	add	sp, #12
 8003c8e:	bd30      	pop	{r4, r5, pc}
 8003c90:	2000027c 	.word	0x2000027c

08003c94 <sbrk_aligned>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	4e0e      	ldr	r6, [pc, #56]	; (8003cd0 <sbrk_aligned+0x3c>)
 8003c98:	460c      	mov	r4, r1
 8003c9a:	6831      	ldr	r1, [r6, #0]
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	b911      	cbnz	r1, 8003ca6 <sbrk_aligned+0x12>
 8003ca0:	f000 fcbc 	bl	800461c <_sbrk_r>
 8003ca4:	6030      	str	r0, [r6, #0]
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f000 fcb7 	bl	800461c <_sbrk_r>
 8003cae:	1c43      	adds	r3, r0, #1
 8003cb0:	d00a      	beq.n	8003cc8 <sbrk_aligned+0x34>
 8003cb2:	1cc4      	adds	r4, r0, #3
 8003cb4:	f024 0403 	bic.w	r4, r4, #3
 8003cb8:	42a0      	cmp	r0, r4
 8003cba:	d007      	beq.n	8003ccc <sbrk_aligned+0x38>
 8003cbc:	1a21      	subs	r1, r4, r0
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 fcac 	bl	800461c <_sbrk_r>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d101      	bne.n	8003ccc <sbrk_aligned+0x38>
 8003cc8:	f04f 34ff 	mov.w	r4, #4294967295
 8003ccc:	4620      	mov	r0, r4
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	20000280 	.word	0x20000280

08003cd4 <_malloc_r>:
 8003cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd8:	1ccd      	adds	r5, r1, #3
 8003cda:	f025 0503 	bic.w	r5, r5, #3
 8003cde:	3508      	adds	r5, #8
 8003ce0:	2d0c      	cmp	r5, #12
 8003ce2:	bf38      	it	cc
 8003ce4:	250c      	movcc	r5, #12
 8003ce6:	2d00      	cmp	r5, #0
 8003ce8:	4607      	mov	r7, r0
 8003cea:	db01      	blt.n	8003cf0 <_malloc_r+0x1c>
 8003cec:	42a9      	cmp	r1, r5
 8003cee:	d905      	bls.n	8003cfc <_malloc_r+0x28>
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	2600      	movs	r6, #0
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003dd0 <_malloc_r+0xfc>
 8003d00:	f000 f868 	bl	8003dd4 <__malloc_lock>
 8003d04:	f8d8 3000 	ldr.w	r3, [r8]
 8003d08:	461c      	mov	r4, r3
 8003d0a:	bb5c      	cbnz	r4, 8003d64 <_malloc_r+0x90>
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	4638      	mov	r0, r7
 8003d10:	f7ff ffc0 	bl	8003c94 <sbrk_aligned>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	4604      	mov	r4, r0
 8003d18:	d155      	bne.n	8003dc6 <_malloc_r+0xf2>
 8003d1a:	f8d8 4000 	ldr.w	r4, [r8]
 8003d1e:	4626      	mov	r6, r4
 8003d20:	2e00      	cmp	r6, #0
 8003d22:	d145      	bne.n	8003db0 <_malloc_r+0xdc>
 8003d24:	2c00      	cmp	r4, #0
 8003d26:	d048      	beq.n	8003dba <_malloc_r+0xe6>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	4631      	mov	r1, r6
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	eb04 0903 	add.w	r9, r4, r3
 8003d32:	f000 fc73 	bl	800461c <_sbrk_r>
 8003d36:	4581      	cmp	r9, r0
 8003d38:	d13f      	bne.n	8003dba <_malloc_r+0xe6>
 8003d3a:	6821      	ldr	r1, [r4, #0]
 8003d3c:	1a6d      	subs	r5, r5, r1
 8003d3e:	4629      	mov	r1, r5
 8003d40:	4638      	mov	r0, r7
 8003d42:	f7ff ffa7 	bl	8003c94 <sbrk_aligned>
 8003d46:	3001      	adds	r0, #1
 8003d48:	d037      	beq.n	8003dba <_malloc_r+0xe6>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	442b      	add	r3, r5
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	f8d8 3000 	ldr.w	r3, [r8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d038      	beq.n	8003dca <_malloc_r+0xf6>
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	42a2      	cmp	r2, r4
 8003d5c:	d12b      	bne.n	8003db6 <_malloc_r+0xe2>
 8003d5e:	2200      	movs	r2, #0
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	e00f      	b.n	8003d84 <_malloc_r+0xb0>
 8003d64:	6822      	ldr	r2, [r4, #0]
 8003d66:	1b52      	subs	r2, r2, r5
 8003d68:	d41f      	bmi.n	8003daa <_malloc_r+0xd6>
 8003d6a:	2a0b      	cmp	r2, #11
 8003d6c:	d917      	bls.n	8003d9e <_malloc_r+0xca>
 8003d6e:	1961      	adds	r1, r4, r5
 8003d70:	42a3      	cmp	r3, r4
 8003d72:	6025      	str	r5, [r4, #0]
 8003d74:	bf18      	it	ne
 8003d76:	6059      	strne	r1, [r3, #4]
 8003d78:	6863      	ldr	r3, [r4, #4]
 8003d7a:	bf08      	it	eq
 8003d7c:	f8c8 1000 	streq.w	r1, [r8]
 8003d80:	5162      	str	r2, [r4, r5]
 8003d82:	604b      	str	r3, [r1, #4]
 8003d84:	4638      	mov	r0, r7
 8003d86:	f104 060b 	add.w	r6, r4, #11
 8003d8a:	f000 f829 	bl	8003de0 <__malloc_unlock>
 8003d8e:	f026 0607 	bic.w	r6, r6, #7
 8003d92:	1d23      	adds	r3, r4, #4
 8003d94:	1af2      	subs	r2, r6, r3
 8003d96:	d0ae      	beq.n	8003cf6 <_malloc_r+0x22>
 8003d98:	1b9b      	subs	r3, r3, r6
 8003d9a:	50a3      	str	r3, [r4, r2]
 8003d9c:	e7ab      	b.n	8003cf6 <_malloc_r+0x22>
 8003d9e:	42a3      	cmp	r3, r4
 8003da0:	6862      	ldr	r2, [r4, #4]
 8003da2:	d1dd      	bne.n	8003d60 <_malloc_r+0x8c>
 8003da4:	f8c8 2000 	str.w	r2, [r8]
 8003da8:	e7ec      	b.n	8003d84 <_malloc_r+0xb0>
 8003daa:	4623      	mov	r3, r4
 8003dac:	6864      	ldr	r4, [r4, #4]
 8003dae:	e7ac      	b.n	8003d0a <_malloc_r+0x36>
 8003db0:	4634      	mov	r4, r6
 8003db2:	6876      	ldr	r6, [r6, #4]
 8003db4:	e7b4      	b.n	8003d20 <_malloc_r+0x4c>
 8003db6:	4613      	mov	r3, r2
 8003db8:	e7cc      	b.n	8003d54 <_malloc_r+0x80>
 8003dba:	230c      	movs	r3, #12
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	f000 f80e 	bl	8003de0 <__malloc_unlock>
 8003dc4:	e797      	b.n	8003cf6 <_malloc_r+0x22>
 8003dc6:	6025      	str	r5, [r4, #0]
 8003dc8:	e7dc      	b.n	8003d84 <_malloc_r+0xb0>
 8003dca:	605b      	str	r3, [r3, #4]
 8003dcc:	deff      	udf	#255	; 0xff
 8003dce:	bf00      	nop
 8003dd0:	2000027c 	.word	0x2000027c

08003dd4 <__malloc_lock>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__malloc_lock+0x8>)
 8003dd6:	f7ff bf0e 	b.w	8003bf6 <__retarget_lock_acquire_recursive>
 8003dda:	bf00      	nop
 8003ddc:	20000278 	.word	0x20000278

08003de0 <__malloc_unlock>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__malloc_unlock+0x8>)
 8003de2:	f7ff bf09 	b.w	8003bf8 <__retarget_lock_release_recursive>
 8003de6:	bf00      	nop
 8003de8:	20000278 	.word	0x20000278

08003dec <__sfputc_r>:
 8003dec:	6893      	ldr	r3, [r2, #8]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	b410      	push	{r4}
 8003df4:	6093      	str	r3, [r2, #8]
 8003df6:	da08      	bge.n	8003e0a <__sfputc_r+0x1e>
 8003df8:	6994      	ldr	r4, [r2, #24]
 8003dfa:	42a3      	cmp	r3, r4
 8003dfc:	db01      	blt.n	8003e02 <__sfputc_r+0x16>
 8003dfe:	290a      	cmp	r1, #10
 8003e00:	d103      	bne.n	8003e0a <__sfputc_r+0x1e>
 8003e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e06:	f000 bb73 	b.w	80044f0 <__swbuf_r>
 8003e0a:	6813      	ldr	r3, [r2, #0]
 8003e0c:	1c58      	adds	r0, r3, #1
 8003e0e:	6010      	str	r0, [r2, #0]
 8003e10:	7019      	strb	r1, [r3, #0]
 8003e12:	4608      	mov	r0, r1
 8003e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <__sfputs_r>:
 8003e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	460f      	mov	r7, r1
 8003e20:	4614      	mov	r4, r2
 8003e22:	18d5      	adds	r5, r2, r3
 8003e24:	42ac      	cmp	r4, r5
 8003e26:	d101      	bne.n	8003e2c <__sfputs_r+0x12>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e007      	b.n	8003e3c <__sfputs_r+0x22>
 8003e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e30:	463a      	mov	r2, r7
 8003e32:	4630      	mov	r0, r6
 8003e34:	f7ff ffda 	bl	8003dec <__sfputc_r>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d1f3      	bne.n	8003e24 <__sfputs_r+0xa>
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e40 <_vfiprintf_r>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	460d      	mov	r5, r1
 8003e46:	b09d      	sub	sp, #116	; 0x74
 8003e48:	4614      	mov	r4, r2
 8003e4a:	4698      	mov	r8, r3
 8003e4c:	4606      	mov	r6, r0
 8003e4e:	b118      	cbz	r0, 8003e58 <_vfiprintf_r+0x18>
 8003e50:	6a03      	ldr	r3, [r0, #32]
 8003e52:	b90b      	cbnz	r3, 8003e58 <_vfiprintf_r+0x18>
 8003e54:	f7ff fdca 	bl	80039ec <__sinit>
 8003e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e5a:	07d9      	lsls	r1, r3, #31
 8003e5c:	d405      	bmi.n	8003e6a <_vfiprintf_r+0x2a>
 8003e5e:	89ab      	ldrh	r3, [r5, #12]
 8003e60:	059a      	lsls	r2, r3, #22
 8003e62:	d402      	bmi.n	8003e6a <_vfiprintf_r+0x2a>
 8003e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e66:	f7ff fec6 	bl	8003bf6 <__retarget_lock_acquire_recursive>
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	071b      	lsls	r3, r3, #28
 8003e6e:	d501      	bpl.n	8003e74 <_vfiprintf_r+0x34>
 8003e70:	692b      	ldr	r3, [r5, #16]
 8003e72:	b99b      	cbnz	r3, 8003e9c <_vfiprintf_r+0x5c>
 8003e74:	4629      	mov	r1, r5
 8003e76:	4630      	mov	r0, r6
 8003e78:	f000 fb78 	bl	800456c <__swsetup_r>
 8003e7c:	b170      	cbz	r0, 8003e9c <_vfiprintf_r+0x5c>
 8003e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e80:	07dc      	lsls	r4, r3, #31
 8003e82:	d504      	bpl.n	8003e8e <_vfiprintf_r+0x4e>
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	b01d      	add	sp, #116	; 0x74
 8003e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8e:	89ab      	ldrh	r3, [r5, #12]
 8003e90:	0598      	lsls	r0, r3, #22
 8003e92:	d4f7      	bmi.n	8003e84 <_vfiprintf_r+0x44>
 8003e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e96:	f7ff feaf 	bl	8003bf8 <__retarget_lock_release_recursive>
 8003e9a:	e7f3      	b.n	8003e84 <_vfiprintf_r+0x44>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eaa:	2330      	movs	r3, #48	; 0x30
 8003eac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004060 <_vfiprintf_r+0x220>
 8003eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eb4:	f04f 0901 	mov.w	r9, #1
 8003eb8:	4623      	mov	r3, r4
 8003eba:	469a      	mov	sl, r3
 8003ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ec0:	b10a      	cbz	r2, 8003ec6 <_vfiprintf_r+0x86>
 8003ec2:	2a25      	cmp	r2, #37	; 0x25
 8003ec4:	d1f9      	bne.n	8003eba <_vfiprintf_r+0x7a>
 8003ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8003eca:	d00b      	beq.n	8003ee4 <_vfiprintf_r+0xa4>
 8003ecc:	465b      	mov	r3, fp
 8003ece:	4622      	mov	r2, r4
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f7ff ffa1 	bl	8003e1a <__sfputs_r>
 8003ed8:	3001      	adds	r0, #1
 8003eda:	f000 80a9 	beq.w	8004030 <_vfiprintf_r+0x1f0>
 8003ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ee0:	445a      	add	r2, fp
 8003ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80a1 	beq.w	8004030 <_vfiprintf_r+0x1f0>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ef8:	f10a 0a01 	add.w	sl, sl, #1
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	9307      	str	r3, [sp, #28]
 8003f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f04:	931a      	str	r3, [sp, #104]	; 0x68
 8003f06:	4654      	mov	r4, sl
 8003f08:	2205      	movs	r2, #5
 8003f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f0e:	4854      	ldr	r0, [pc, #336]	; (8004060 <_vfiprintf_r+0x220>)
 8003f10:	f7fc f95e 	bl	80001d0 <memchr>
 8003f14:	9a04      	ldr	r2, [sp, #16]
 8003f16:	b9d8      	cbnz	r0, 8003f50 <_vfiprintf_r+0x110>
 8003f18:	06d1      	lsls	r1, r2, #27
 8003f1a:	bf44      	itt	mi
 8003f1c:	2320      	movmi	r3, #32
 8003f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f22:	0713      	lsls	r3, r2, #28
 8003f24:	bf44      	itt	mi
 8003f26:	232b      	movmi	r3, #43	; 0x2b
 8003f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f30:	2b2a      	cmp	r3, #42	; 0x2a
 8003f32:	d015      	beq.n	8003f60 <_vfiprintf_r+0x120>
 8003f34:	9a07      	ldr	r2, [sp, #28]
 8003f36:	4654      	mov	r4, sl
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f04f 0c0a 	mov.w	ip, #10
 8003f3e:	4621      	mov	r1, r4
 8003f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f44:	3b30      	subs	r3, #48	; 0x30
 8003f46:	2b09      	cmp	r3, #9
 8003f48:	d94d      	bls.n	8003fe6 <_vfiprintf_r+0x1a6>
 8003f4a:	b1b0      	cbz	r0, 8003f7a <_vfiprintf_r+0x13a>
 8003f4c:	9207      	str	r2, [sp, #28]
 8003f4e:	e014      	b.n	8003f7a <_vfiprintf_r+0x13a>
 8003f50:	eba0 0308 	sub.w	r3, r0, r8
 8003f54:	fa09 f303 	lsl.w	r3, r9, r3
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	9304      	str	r3, [sp, #16]
 8003f5c:	46a2      	mov	sl, r4
 8003f5e:	e7d2      	b.n	8003f06 <_vfiprintf_r+0xc6>
 8003f60:	9b03      	ldr	r3, [sp, #12]
 8003f62:	1d19      	adds	r1, r3, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	9103      	str	r1, [sp, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bfbb      	ittet	lt
 8003f6c:	425b      	neglt	r3, r3
 8003f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f72:	9307      	strge	r3, [sp, #28]
 8003f74:	9307      	strlt	r3, [sp, #28]
 8003f76:	bfb8      	it	lt
 8003f78:	9204      	strlt	r2, [sp, #16]
 8003f7a:	7823      	ldrb	r3, [r4, #0]
 8003f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f7e:	d10c      	bne.n	8003f9a <_vfiprintf_r+0x15a>
 8003f80:	7863      	ldrb	r3, [r4, #1]
 8003f82:	2b2a      	cmp	r3, #42	; 0x2a
 8003f84:	d134      	bne.n	8003ff0 <_vfiprintf_r+0x1b0>
 8003f86:	9b03      	ldr	r3, [sp, #12]
 8003f88:	1d1a      	adds	r2, r3, #4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	9203      	str	r2, [sp, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfb8      	it	lt
 8003f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f96:	3402      	adds	r4, #2
 8003f98:	9305      	str	r3, [sp, #20]
 8003f9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004070 <_vfiprintf_r+0x230>
 8003f9e:	7821      	ldrb	r1, [r4, #0]
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	f7fc f914 	bl	80001d0 <memchr>
 8003fa8:	b138      	cbz	r0, 8003fba <_vfiprintf_r+0x17a>
 8003faa:	9b04      	ldr	r3, [sp, #16]
 8003fac:	eba0 000a 	sub.w	r0, r0, sl
 8003fb0:	2240      	movs	r2, #64	; 0x40
 8003fb2:	4082      	lsls	r2, r0
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	3401      	adds	r4, #1
 8003fb8:	9304      	str	r3, [sp, #16]
 8003fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fbe:	4829      	ldr	r0, [pc, #164]	; (8004064 <_vfiprintf_r+0x224>)
 8003fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fc4:	2206      	movs	r2, #6
 8003fc6:	f7fc f903 	bl	80001d0 <memchr>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d03f      	beq.n	800404e <_vfiprintf_r+0x20e>
 8003fce:	4b26      	ldr	r3, [pc, #152]	; (8004068 <_vfiprintf_r+0x228>)
 8003fd0:	bb1b      	cbnz	r3, 800401a <_vfiprintf_r+0x1da>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	3307      	adds	r3, #7
 8003fd6:	f023 0307 	bic.w	r3, r3, #7
 8003fda:	3308      	adds	r3, #8
 8003fdc:	9303      	str	r3, [sp, #12]
 8003fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe0:	443b      	add	r3, r7
 8003fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe4:	e768      	b.n	8003eb8 <_vfiprintf_r+0x78>
 8003fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fea:	460c      	mov	r4, r1
 8003fec:	2001      	movs	r0, #1
 8003fee:	e7a6      	b.n	8003f3e <_vfiprintf_r+0xfe>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	3401      	adds	r4, #1
 8003ff4:	9305      	str	r3, [sp, #20]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f04f 0c0a 	mov.w	ip, #10
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004002:	3a30      	subs	r2, #48	; 0x30
 8004004:	2a09      	cmp	r2, #9
 8004006:	d903      	bls.n	8004010 <_vfiprintf_r+0x1d0>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0c6      	beq.n	8003f9a <_vfiprintf_r+0x15a>
 800400c:	9105      	str	r1, [sp, #20]
 800400e:	e7c4      	b.n	8003f9a <_vfiprintf_r+0x15a>
 8004010:	fb0c 2101 	mla	r1, ip, r1, r2
 8004014:	4604      	mov	r4, r0
 8004016:	2301      	movs	r3, #1
 8004018:	e7f0      	b.n	8003ffc <_vfiprintf_r+0x1bc>
 800401a:	ab03      	add	r3, sp, #12
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	462a      	mov	r2, r5
 8004020:	4b12      	ldr	r3, [pc, #72]	; (800406c <_vfiprintf_r+0x22c>)
 8004022:	a904      	add	r1, sp, #16
 8004024:	4630      	mov	r0, r6
 8004026:	f3af 8000 	nop.w
 800402a:	4607      	mov	r7, r0
 800402c:	1c78      	adds	r0, r7, #1
 800402e:	d1d6      	bne.n	8003fde <_vfiprintf_r+0x19e>
 8004030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004032:	07d9      	lsls	r1, r3, #31
 8004034:	d405      	bmi.n	8004042 <_vfiprintf_r+0x202>
 8004036:	89ab      	ldrh	r3, [r5, #12]
 8004038:	059a      	lsls	r2, r3, #22
 800403a:	d402      	bmi.n	8004042 <_vfiprintf_r+0x202>
 800403c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800403e:	f7ff fddb 	bl	8003bf8 <__retarget_lock_release_recursive>
 8004042:	89ab      	ldrh	r3, [r5, #12]
 8004044:	065b      	lsls	r3, r3, #25
 8004046:	f53f af1d 	bmi.w	8003e84 <_vfiprintf_r+0x44>
 800404a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800404c:	e71c      	b.n	8003e88 <_vfiprintf_r+0x48>
 800404e:	ab03      	add	r3, sp, #12
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	462a      	mov	r2, r5
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <_vfiprintf_r+0x22c>)
 8004056:	a904      	add	r1, sp, #16
 8004058:	4630      	mov	r0, r6
 800405a:	f000 f879 	bl	8004150 <_printf_i>
 800405e:	e7e4      	b.n	800402a <_vfiprintf_r+0x1ea>
 8004060:	080047c0 	.word	0x080047c0
 8004064:	080047ca 	.word	0x080047ca
 8004068:	00000000 	.word	0x00000000
 800406c:	08003e1b 	.word	0x08003e1b
 8004070:	080047c6 	.word	0x080047c6

08004074 <_printf_common>:
 8004074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	4616      	mov	r6, r2
 800407a:	4699      	mov	r9, r3
 800407c:	688a      	ldr	r2, [r1, #8]
 800407e:	690b      	ldr	r3, [r1, #16]
 8004080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004084:	4293      	cmp	r3, r2
 8004086:	bfb8      	it	lt
 8004088:	4613      	movlt	r3, r2
 800408a:	6033      	str	r3, [r6, #0]
 800408c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004090:	4607      	mov	r7, r0
 8004092:	460c      	mov	r4, r1
 8004094:	b10a      	cbz	r2, 800409a <_printf_common+0x26>
 8004096:	3301      	adds	r3, #1
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	0699      	lsls	r1, r3, #26
 800409e:	bf42      	ittt	mi
 80040a0:	6833      	ldrmi	r3, [r6, #0]
 80040a2:	3302      	addmi	r3, #2
 80040a4:	6033      	strmi	r3, [r6, #0]
 80040a6:	6825      	ldr	r5, [r4, #0]
 80040a8:	f015 0506 	ands.w	r5, r5, #6
 80040ac:	d106      	bne.n	80040bc <_printf_common+0x48>
 80040ae:	f104 0a19 	add.w	sl, r4, #25
 80040b2:	68e3      	ldr	r3, [r4, #12]
 80040b4:	6832      	ldr	r2, [r6, #0]
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	42ab      	cmp	r3, r5
 80040ba:	dc26      	bgt.n	800410a <_printf_common+0x96>
 80040bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040c0:	1e13      	subs	r3, r2, #0
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	bf18      	it	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	0692      	lsls	r2, r2, #26
 80040ca:	d42b      	bmi.n	8004124 <_printf_common+0xb0>
 80040cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d0:	4649      	mov	r1, r9
 80040d2:	4638      	mov	r0, r7
 80040d4:	47c0      	blx	r8
 80040d6:	3001      	adds	r0, #1
 80040d8:	d01e      	beq.n	8004118 <_printf_common+0xa4>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	6922      	ldr	r2, [r4, #16]
 80040de:	f003 0306 	and.w	r3, r3, #6
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	bf02      	ittt	eq
 80040e6:	68e5      	ldreq	r5, [r4, #12]
 80040e8:	6833      	ldreq	r3, [r6, #0]
 80040ea:	1aed      	subeq	r5, r5, r3
 80040ec:	68a3      	ldr	r3, [r4, #8]
 80040ee:	bf0c      	ite	eq
 80040f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f4:	2500      	movne	r5, #0
 80040f6:	4293      	cmp	r3, r2
 80040f8:	bfc4      	itt	gt
 80040fa:	1a9b      	subgt	r3, r3, r2
 80040fc:	18ed      	addgt	r5, r5, r3
 80040fe:	2600      	movs	r6, #0
 8004100:	341a      	adds	r4, #26
 8004102:	42b5      	cmp	r5, r6
 8004104:	d11a      	bne.n	800413c <_printf_common+0xc8>
 8004106:	2000      	movs	r0, #0
 8004108:	e008      	b.n	800411c <_printf_common+0xa8>
 800410a:	2301      	movs	r3, #1
 800410c:	4652      	mov	r2, sl
 800410e:	4649      	mov	r1, r9
 8004110:	4638      	mov	r0, r7
 8004112:	47c0      	blx	r8
 8004114:	3001      	adds	r0, #1
 8004116:	d103      	bne.n	8004120 <_printf_common+0xac>
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004120:	3501      	adds	r5, #1
 8004122:	e7c6      	b.n	80040b2 <_printf_common+0x3e>
 8004124:	18e1      	adds	r1, r4, r3
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	2030      	movs	r0, #48	; 0x30
 800412a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800412e:	4422      	add	r2, r4
 8004130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004138:	3302      	adds	r3, #2
 800413a:	e7c7      	b.n	80040cc <_printf_common+0x58>
 800413c:	2301      	movs	r3, #1
 800413e:	4622      	mov	r2, r4
 8004140:	4649      	mov	r1, r9
 8004142:	4638      	mov	r0, r7
 8004144:	47c0      	blx	r8
 8004146:	3001      	adds	r0, #1
 8004148:	d0e6      	beq.n	8004118 <_printf_common+0xa4>
 800414a:	3601      	adds	r6, #1
 800414c:	e7d9      	b.n	8004102 <_printf_common+0x8e>
	...

08004150 <_printf_i>:
 8004150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	7e0f      	ldrb	r7, [r1, #24]
 8004156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004158:	2f78      	cmp	r7, #120	; 0x78
 800415a:	4691      	mov	r9, r2
 800415c:	4680      	mov	r8, r0
 800415e:	460c      	mov	r4, r1
 8004160:	469a      	mov	sl, r3
 8004162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004166:	d807      	bhi.n	8004178 <_printf_i+0x28>
 8004168:	2f62      	cmp	r7, #98	; 0x62
 800416a:	d80a      	bhi.n	8004182 <_printf_i+0x32>
 800416c:	2f00      	cmp	r7, #0
 800416e:	f000 80d4 	beq.w	800431a <_printf_i+0x1ca>
 8004172:	2f58      	cmp	r7, #88	; 0x58
 8004174:	f000 80c0 	beq.w	80042f8 <_printf_i+0x1a8>
 8004178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800417c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004180:	e03a      	b.n	80041f8 <_printf_i+0xa8>
 8004182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004186:	2b15      	cmp	r3, #21
 8004188:	d8f6      	bhi.n	8004178 <_printf_i+0x28>
 800418a:	a101      	add	r1, pc, #4	; (adr r1, 8004190 <_printf_i+0x40>)
 800418c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004190:	080041e9 	.word	0x080041e9
 8004194:	080041fd 	.word	0x080041fd
 8004198:	08004179 	.word	0x08004179
 800419c:	08004179 	.word	0x08004179
 80041a0:	08004179 	.word	0x08004179
 80041a4:	08004179 	.word	0x08004179
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	08004179 	.word	0x08004179
 80041b0:	08004179 	.word	0x08004179
 80041b4:	08004179 	.word	0x08004179
 80041b8:	08004179 	.word	0x08004179
 80041bc:	08004301 	.word	0x08004301
 80041c0:	08004229 	.word	0x08004229
 80041c4:	080042bb 	.word	0x080042bb
 80041c8:	08004179 	.word	0x08004179
 80041cc:	08004179 	.word	0x08004179
 80041d0:	08004323 	.word	0x08004323
 80041d4:	08004179 	.word	0x08004179
 80041d8:	08004229 	.word	0x08004229
 80041dc:	08004179 	.word	0x08004179
 80041e0:	08004179 	.word	0x08004179
 80041e4:	080042c3 	.word	0x080042c3
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	1d1a      	adds	r2, r3, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	602a      	str	r2, [r5, #0]
 80041f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f8:	2301      	movs	r3, #1
 80041fa:	e09f      	b.n	800433c <_printf_i+0x1ec>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	0607      	lsls	r7, r0, #24
 8004202:	f103 0104 	add.w	r1, r3, #4
 8004206:	6029      	str	r1, [r5, #0]
 8004208:	d501      	bpl.n	800420e <_printf_i+0xbe>
 800420a:	681e      	ldr	r6, [r3, #0]
 800420c:	e003      	b.n	8004216 <_printf_i+0xc6>
 800420e:	0646      	lsls	r6, r0, #25
 8004210:	d5fb      	bpl.n	800420a <_printf_i+0xba>
 8004212:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004216:	2e00      	cmp	r6, #0
 8004218:	da03      	bge.n	8004222 <_printf_i+0xd2>
 800421a:	232d      	movs	r3, #45	; 0x2d
 800421c:	4276      	negs	r6, r6
 800421e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004222:	485a      	ldr	r0, [pc, #360]	; (800438c <_printf_i+0x23c>)
 8004224:	230a      	movs	r3, #10
 8004226:	e012      	b.n	800424e <_printf_i+0xfe>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	6820      	ldr	r0, [r4, #0]
 800422c:	1d19      	adds	r1, r3, #4
 800422e:	6029      	str	r1, [r5, #0]
 8004230:	0605      	lsls	r5, r0, #24
 8004232:	d501      	bpl.n	8004238 <_printf_i+0xe8>
 8004234:	681e      	ldr	r6, [r3, #0]
 8004236:	e002      	b.n	800423e <_printf_i+0xee>
 8004238:	0641      	lsls	r1, r0, #25
 800423a:	d5fb      	bpl.n	8004234 <_printf_i+0xe4>
 800423c:	881e      	ldrh	r6, [r3, #0]
 800423e:	4853      	ldr	r0, [pc, #332]	; (800438c <_printf_i+0x23c>)
 8004240:	2f6f      	cmp	r7, #111	; 0x6f
 8004242:	bf0c      	ite	eq
 8004244:	2308      	moveq	r3, #8
 8004246:	230a      	movne	r3, #10
 8004248:	2100      	movs	r1, #0
 800424a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800424e:	6865      	ldr	r5, [r4, #4]
 8004250:	60a5      	str	r5, [r4, #8]
 8004252:	2d00      	cmp	r5, #0
 8004254:	bfa2      	ittt	ge
 8004256:	6821      	ldrge	r1, [r4, #0]
 8004258:	f021 0104 	bicge.w	r1, r1, #4
 800425c:	6021      	strge	r1, [r4, #0]
 800425e:	b90e      	cbnz	r6, 8004264 <_printf_i+0x114>
 8004260:	2d00      	cmp	r5, #0
 8004262:	d04b      	beq.n	80042fc <_printf_i+0x1ac>
 8004264:	4615      	mov	r5, r2
 8004266:	fbb6 f1f3 	udiv	r1, r6, r3
 800426a:	fb03 6711 	mls	r7, r3, r1, r6
 800426e:	5dc7      	ldrb	r7, [r0, r7]
 8004270:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004274:	4637      	mov	r7, r6
 8004276:	42bb      	cmp	r3, r7
 8004278:	460e      	mov	r6, r1
 800427a:	d9f4      	bls.n	8004266 <_printf_i+0x116>
 800427c:	2b08      	cmp	r3, #8
 800427e:	d10b      	bne.n	8004298 <_printf_i+0x148>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	07de      	lsls	r6, r3, #31
 8004284:	d508      	bpl.n	8004298 <_printf_i+0x148>
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	6861      	ldr	r1, [r4, #4]
 800428a:	4299      	cmp	r1, r3
 800428c:	bfde      	ittt	le
 800428e:	2330      	movle	r3, #48	; 0x30
 8004290:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004294:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004298:	1b52      	subs	r2, r2, r5
 800429a:	6122      	str	r2, [r4, #16]
 800429c:	f8cd a000 	str.w	sl, [sp]
 80042a0:	464b      	mov	r3, r9
 80042a2:	aa03      	add	r2, sp, #12
 80042a4:	4621      	mov	r1, r4
 80042a6:	4640      	mov	r0, r8
 80042a8:	f7ff fee4 	bl	8004074 <_printf_common>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d14a      	bne.n	8004346 <_printf_i+0x1f6>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	b004      	add	sp, #16
 80042b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	4833      	ldr	r0, [pc, #204]	; (8004390 <_printf_i+0x240>)
 80042c4:	2778      	movs	r7, #120	; 0x78
 80042c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	6829      	ldr	r1, [r5, #0]
 80042ce:	061f      	lsls	r7, r3, #24
 80042d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80042d4:	d402      	bmi.n	80042dc <_printf_i+0x18c>
 80042d6:	065f      	lsls	r7, r3, #25
 80042d8:	bf48      	it	mi
 80042da:	b2b6      	uxthmi	r6, r6
 80042dc:	07df      	lsls	r7, r3, #31
 80042de:	bf48      	it	mi
 80042e0:	f043 0320 	orrmi.w	r3, r3, #32
 80042e4:	6029      	str	r1, [r5, #0]
 80042e6:	bf48      	it	mi
 80042e8:	6023      	strmi	r3, [r4, #0]
 80042ea:	b91e      	cbnz	r6, 80042f4 <_printf_i+0x1a4>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	f023 0320 	bic.w	r3, r3, #32
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	2310      	movs	r3, #16
 80042f6:	e7a7      	b.n	8004248 <_printf_i+0xf8>
 80042f8:	4824      	ldr	r0, [pc, #144]	; (800438c <_printf_i+0x23c>)
 80042fa:	e7e4      	b.n	80042c6 <_printf_i+0x176>
 80042fc:	4615      	mov	r5, r2
 80042fe:	e7bd      	b.n	800427c <_printf_i+0x12c>
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	6826      	ldr	r6, [r4, #0]
 8004304:	6961      	ldr	r1, [r4, #20]
 8004306:	1d18      	adds	r0, r3, #4
 8004308:	6028      	str	r0, [r5, #0]
 800430a:	0635      	lsls	r5, r6, #24
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	d501      	bpl.n	8004314 <_printf_i+0x1c4>
 8004310:	6019      	str	r1, [r3, #0]
 8004312:	e002      	b.n	800431a <_printf_i+0x1ca>
 8004314:	0670      	lsls	r0, r6, #25
 8004316:	d5fb      	bpl.n	8004310 <_printf_i+0x1c0>
 8004318:	8019      	strh	r1, [r3, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	4615      	mov	r5, r2
 8004320:	e7bc      	b.n	800429c <_printf_i+0x14c>
 8004322:	682b      	ldr	r3, [r5, #0]
 8004324:	1d1a      	adds	r2, r3, #4
 8004326:	602a      	str	r2, [r5, #0]
 8004328:	681d      	ldr	r5, [r3, #0]
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	2100      	movs	r1, #0
 800432e:	4628      	mov	r0, r5
 8004330:	f7fb ff4e 	bl	80001d0 <memchr>
 8004334:	b108      	cbz	r0, 800433a <_printf_i+0x1ea>
 8004336:	1b40      	subs	r0, r0, r5
 8004338:	6060      	str	r0, [r4, #4]
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	2300      	movs	r3, #0
 8004340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004344:	e7aa      	b.n	800429c <_printf_i+0x14c>
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	462a      	mov	r2, r5
 800434a:	4649      	mov	r1, r9
 800434c:	4640      	mov	r0, r8
 800434e:	47d0      	blx	sl
 8004350:	3001      	adds	r0, #1
 8004352:	d0ad      	beq.n	80042b0 <_printf_i+0x160>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	079b      	lsls	r3, r3, #30
 8004358:	d413      	bmi.n	8004382 <_printf_i+0x232>
 800435a:	68e0      	ldr	r0, [r4, #12]
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	4298      	cmp	r0, r3
 8004360:	bfb8      	it	lt
 8004362:	4618      	movlt	r0, r3
 8004364:	e7a6      	b.n	80042b4 <_printf_i+0x164>
 8004366:	2301      	movs	r3, #1
 8004368:	4632      	mov	r2, r6
 800436a:	4649      	mov	r1, r9
 800436c:	4640      	mov	r0, r8
 800436e:	47d0      	blx	sl
 8004370:	3001      	adds	r0, #1
 8004372:	d09d      	beq.n	80042b0 <_printf_i+0x160>
 8004374:	3501      	adds	r5, #1
 8004376:	68e3      	ldr	r3, [r4, #12]
 8004378:	9903      	ldr	r1, [sp, #12]
 800437a:	1a5b      	subs	r3, r3, r1
 800437c:	42ab      	cmp	r3, r5
 800437e:	dcf2      	bgt.n	8004366 <_printf_i+0x216>
 8004380:	e7eb      	b.n	800435a <_printf_i+0x20a>
 8004382:	2500      	movs	r5, #0
 8004384:	f104 0619 	add.w	r6, r4, #25
 8004388:	e7f5      	b.n	8004376 <_printf_i+0x226>
 800438a:	bf00      	nop
 800438c:	080047d1 	.word	0x080047d1
 8004390:	080047e2 	.word	0x080047e2

08004394 <__sflush_r>:
 8004394:	898a      	ldrh	r2, [r1, #12]
 8004396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439a:	4605      	mov	r5, r0
 800439c:	0710      	lsls	r0, r2, #28
 800439e:	460c      	mov	r4, r1
 80043a0:	d458      	bmi.n	8004454 <__sflush_r+0xc0>
 80043a2:	684b      	ldr	r3, [r1, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	dc05      	bgt.n	80043b4 <__sflush_r+0x20>
 80043a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dc02      	bgt.n	80043b4 <__sflush_r+0x20>
 80043ae:	2000      	movs	r0, #0
 80043b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043b6:	2e00      	cmp	r6, #0
 80043b8:	d0f9      	beq.n	80043ae <__sflush_r+0x1a>
 80043ba:	2300      	movs	r3, #0
 80043bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043c0:	682f      	ldr	r7, [r5, #0]
 80043c2:	6a21      	ldr	r1, [r4, #32]
 80043c4:	602b      	str	r3, [r5, #0]
 80043c6:	d032      	beq.n	800442e <__sflush_r+0x9a>
 80043c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	075a      	lsls	r2, r3, #29
 80043ce:	d505      	bpl.n	80043dc <__sflush_r+0x48>
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	1ac0      	subs	r0, r0, r3
 80043d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043d6:	b10b      	cbz	r3, 80043dc <__sflush_r+0x48>
 80043d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043da:	1ac0      	subs	r0, r0, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	4602      	mov	r2, r0
 80043e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043e2:	6a21      	ldr	r1, [r4, #32]
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b0      	blx	r6
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	d106      	bne.n	80043fc <__sflush_r+0x68>
 80043ee:	6829      	ldr	r1, [r5, #0]
 80043f0:	291d      	cmp	r1, #29
 80043f2:	d82b      	bhi.n	800444c <__sflush_r+0xb8>
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <__sflush_r+0x108>)
 80043f6:	410a      	asrs	r2, r1
 80043f8:	07d6      	lsls	r6, r2, #31
 80043fa:	d427      	bmi.n	800444c <__sflush_r+0xb8>
 80043fc:	2200      	movs	r2, #0
 80043fe:	6062      	str	r2, [r4, #4]
 8004400:	04d9      	lsls	r1, r3, #19
 8004402:	6922      	ldr	r2, [r4, #16]
 8004404:	6022      	str	r2, [r4, #0]
 8004406:	d504      	bpl.n	8004412 <__sflush_r+0x7e>
 8004408:	1c42      	adds	r2, r0, #1
 800440a:	d101      	bne.n	8004410 <__sflush_r+0x7c>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b903      	cbnz	r3, 8004412 <__sflush_r+0x7e>
 8004410:	6560      	str	r0, [r4, #84]	; 0x54
 8004412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004414:	602f      	str	r7, [r5, #0]
 8004416:	2900      	cmp	r1, #0
 8004418:	d0c9      	beq.n	80043ae <__sflush_r+0x1a>
 800441a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800441e:	4299      	cmp	r1, r3
 8004420:	d002      	beq.n	8004428 <__sflush_r+0x94>
 8004422:	4628      	mov	r0, r5
 8004424:	f7ff fbea 	bl	8003bfc <_free_r>
 8004428:	2000      	movs	r0, #0
 800442a:	6360      	str	r0, [r4, #52]	; 0x34
 800442c:	e7c0      	b.n	80043b0 <__sflush_r+0x1c>
 800442e:	2301      	movs	r3, #1
 8004430:	4628      	mov	r0, r5
 8004432:	47b0      	blx	r6
 8004434:	1c41      	adds	r1, r0, #1
 8004436:	d1c8      	bne.n	80043ca <__sflush_r+0x36>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0c5      	beq.n	80043ca <__sflush_r+0x36>
 800443e:	2b1d      	cmp	r3, #29
 8004440:	d001      	beq.n	8004446 <__sflush_r+0xb2>
 8004442:	2b16      	cmp	r3, #22
 8004444:	d101      	bne.n	800444a <__sflush_r+0xb6>
 8004446:	602f      	str	r7, [r5, #0]
 8004448:	e7b1      	b.n	80043ae <__sflush_r+0x1a>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	e7ad      	b.n	80043b0 <__sflush_r+0x1c>
 8004454:	690f      	ldr	r7, [r1, #16]
 8004456:	2f00      	cmp	r7, #0
 8004458:	d0a9      	beq.n	80043ae <__sflush_r+0x1a>
 800445a:	0793      	lsls	r3, r2, #30
 800445c:	680e      	ldr	r6, [r1, #0]
 800445e:	bf08      	it	eq
 8004460:	694b      	ldreq	r3, [r1, #20]
 8004462:	600f      	str	r7, [r1, #0]
 8004464:	bf18      	it	ne
 8004466:	2300      	movne	r3, #0
 8004468:	eba6 0807 	sub.w	r8, r6, r7
 800446c:	608b      	str	r3, [r1, #8]
 800446e:	f1b8 0f00 	cmp.w	r8, #0
 8004472:	dd9c      	ble.n	80043ae <__sflush_r+0x1a>
 8004474:	6a21      	ldr	r1, [r4, #32]
 8004476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004478:	4643      	mov	r3, r8
 800447a:	463a      	mov	r2, r7
 800447c:	4628      	mov	r0, r5
 800447e:	47b0      	blx	r6
 8004480:	2800      	cmp	r0, #0
 8004482:	dc06      	bgt.n	8004492 <__sflush_r+0xfe>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	e78e      	b.n	80043b0 <__sflush_r+0x1c>
 8004492:	4407      	add	r7, r0
 8004494:	eba8 0800 	sub.w	r8, r8, r0
 8004498:	e7e9      	b.n	800446e <__sflush_r+0xda>
 800449a:	bf00      	nop
 800449c:	dfbffffe 	.word	0xdfbffffe

080044a0 <_fflush_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	690b      	ldr	r3, [r1, #16]
 80044a4:	4605      	mov	r5, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	b913      	cbnz	r3, 80044b0 <_fflush_r+0x10>
 80044aa:	2500      	movs	r5, #0
 80044ac:	4628      	mov	r0, r5
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	b118      	cbz	r0, 80044ba <_fflush_r+0x1a>
 80044b2:	6a03      	ldr	r3, [r0, #32]
 80044b4:	b90b      	cbnz	r3, 80044ba <_fflush_r+0x1a>
 80044b6:	f7ff fa99 	bl	80039ec <__sinit>
 80044ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f3      	beq.n	80044aa <_fflush_r+0xa>
 80044c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044c4:	07d0      	lsls	r0, r2, #31
 80044c6:	d404      	bmi.n	80044d2 <_fflush_r+0x32>
 80044c8:	0599      	lsls	r1, r3, #22
 80044ca:	d402      	bmi.n	80044d2 <_fflush_r+0x32>
 80044cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ce:	f7ff fb92 	bl	8003bf6 <__retarget_lock_acquire_recursive>
 80044d2:	4628      	mov	r0, r5
 80044d4:	4621      	mov	r1, r4
 80044d6:	f7ff ff5d 	bl	8004394 <__sflush_r>
 80044da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044dc:	07da      	lsls	r2, r3, #31
 80044de:	4605      	mov	r5, r0
 80044e0:	d4e4      	bmi.n	80044ac <_fflush_r+0xc>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	059b      	lsls	r3, r3, #22
 80044e6:	d4e1      	bmi.n	80044ac <_fflush_r+0xc>
 80044e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ea:	f7ff fb85 	bl	8003bf8 <__retarget_lock_release_recursive>
 80044ee:	e7dd      	b.n	80044ac <_fflush_r+0xc>

080044f0 <__swbuf_r>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	460e      	mov	r6, r1
 80044f4:	4614      	mov	r4, r2
 80044f6:	4605      	mov	r5, r0
 80044f8:	b118      	cbz	r0, 8004502 <__swbuf_r+0x12>
 80044fa:	6a03      	ldr	r3, [r0, #32]
 80044fc:	b90b      	cbnz	r3, 8004502 <__swbuf_r+0x12>
 80044fe:	f7ff fa75 	bl	80039ec <__sinit>
 8004502:	69a3      	ldr	r3, [r4, #24]
 8004504:	60a3      	str	r3, [r4, #8]
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	071a      	lsls	r2, r3, #28
 800450a:	d525      	bpl.n	8004558 <__swbuf_r+0x68>
 800450c:	6923      	ldr	r3, [r4, #16]
 800450e:	b31b      	cbz	r3, 8004558 <__swbuf_r+0x68>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	6922      	ldr	r2, [r4, #16]
 8004514:	1a98      	subs	r0, r3, r2
 8004516:	6963      	ldr	r3, [r4, #20]
 8004518:	b2f6      	uxtb	r6, r6
 800451a:	4283      	cmp	r3, r0
 800451c:	4637      	mov	r7, r6
 800451e:	dc04      	bgt.n	800452a <__swbuf_r+0x3a>
 8004520:	4621      	mov	r1, r4
 8004522:	4628      	mov	r0, r5
 8004524:	f7ff ffbc 	bl	80044a0 <_fflush_r>
 8004528:	b9e0      	cbnz	r0, 8004564 <__swbuf_r+0x74>
 800452a:	68a3      	ldr	r3, [r4, #8]
 800452c:	3b01      	subs	r3, #1
 800452e:	60a3      	str	r3, [r4, #8]
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	6022      	str	r2, [r4, #0]
 8004536:	701e      	strb	r6, [r3, #0]
 8004538:	6962      	ldr	r2, [r4, #20]
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	429a      	cmp	r2, r3
 800453e:	d004      	beq.n	800454a <__swbuf_r+0x5a>
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	07db      	lsls	r3, r3, #31
 8004544:	d506      	bpl.n	8004554 <__swbuf_r+0x64>
 8004546:	2e0a      	cmp	r6, #10
 8004548:	d104      	bne.n	8004554 <__swbuf_r+0x64>
 800454a:	4621      	mov	r1, r4
 800454c:	4628      	mov	r0, r5
 800454e:	f7ff ffa7 	bl	80044a0 <_fflush_r>
 8004552:	b938      	cbnz	r0, 8004564 <__swbuf_r+0x74>
 8004554:	4638      	mov	r0, r7
 8004556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004558:	4621      	mov	r1, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f806 	bl	800456c <__swsetup_r>
 8004560:	2800      	cmp	r0, #0
 8004562:	d0d5      	beq.n	8004510 <__swbuf_r+0x20>
 8004564:	f04f 37ff 	mov.w	r7, #4294967295
 8004568:	e7f4      	b.n	8004554 <__swbuf_r+0x64>
	...

0800456c <__swsetup_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <__swsetup_r+0xac>)
 8004570:	4605      	mov	r5, r0
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	460c      	mov	r4, r1
 8004576:	b118      	cbz	r0, 8004580 <__swsetup_r+0x14>
 8004578:	6a03      	ldr	r3, [r0, #32]
 800457a:	b90b      	cbnz	r3, 8004580 <__swsetup_r+0x14>
 800457c:	f7ff fa36 	bl	80039ec <__sinit>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004586:	0718      	lsls	r0, r3, #28
 8004588:	d422      	bmi.n	80045d0 <__swsetup_r+0x64>
 800458a:	06d9      	lsls	r1, r3, #27
 800458c:	d407      	bmi.n	800459e <__swsetup_r+0x32>
 800458e:	2309      	movs	r3, #9
 8004590:	602b      	str	r3, [r5, #0]
 8004592:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	e034      	b.n	8004608 <__swsetup_r+0x9c>
 800459e:	0758      	lsls	r0, r3, #29
 80045a0:	d512      	bpl.n	80045c8 <__swsetup_r+0x5c>
 80045a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045a4:	b141      	cbz	r1, 80045b8 <__swsetup_r+0x4c>
 80045a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045aa:	4299      	cmp	r1, r3
 80045ac:	d002      	beq.n	80045b4 <__swsetup_r+0x48>
 80045ae:	4628      	mov	r0, r5
 80045b0:	f7ff fb24 	bl	8003bfc <_free_r>
 80045b4:	2300      	movs	r3, #0
 80045b6:	6363      	str	r3, [r4, #52]	; 0x34
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	2300      	movs	r3, #0
 80045c2:	6063      	str	r3, [r4, #4]
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	f043 0308 	orr.w	r3, r3, #8
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	b94b      	cbnz	r3, 80045e8 <__swsetup_r+0x7c>
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045de:	d003      	beq.n	80045e8 <__swsetup_r+0x7c>
 80045e0:	4621      	mov	r1, r4
 80045e2:	4628      	mov	r0, r5
 80045e4:	f000 f850 	bl	8004688 <__smakebuf_r>
 80045e8:	89a0      	ldrh	r0, [r4, #12]
 80045ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045ee:	f010 0301 	ands.w	r3, r0, #1
 80045f2:	d00a      	beq.n	800460a <__swsetup_r+0x9e>
 80045f4:	2300      	movs	r3, #0
 80045f6:	60a3      	str	r3, [r4, #8]
 80045f8:	6963      	ldr	r3, [r4, #20]
 80045fa:	425b      	negs	r3, r3
 80045fc:	61a3      	str	r3, [r4, #24]
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	b943      	cbnz	r3, 8004614 <__swsetup_r+0xa8>
 8004602:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004606:	d1c4      	bne.n	8004592 <__swsetup_r+0x26>
 8004608:	bd38      	pop	{r3, r4, r5, pc}
 800460a:	0781      	lsls	r1, r0, #30
 800460c:	bf58      	it	pl
 800460e:	6963      	ldrpl	r3, [r4, #20]
 8004610:	60a3      	str	r3, [r4, #8]
 8004612:	e7f4      	b.n	80045fe <__swsetup_r+0x92>
 8004614:	2000      	movs	r0, #0
 8004616:	e7f7      	b.n	8004608 <__swsetup_r+0x9c>
 8004618:	20000064 	.word	0x20000064

0800461c <_sbrk_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4d06      	ldr	r5, [pc, #24]	; (8004638 <_sbrk_r+0x1c>)
 8004620:	2300      	movs	r3, #0
 8004622:	4604      	mov	r4, r0
 8004624:	4608      	mov	r0, r1
 8004626:	602b      	str	r3, [r5, #0]
 8004628:	f7fc fa3e 	bl	8000aa8 <_sbrk>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_sbrk_r+0x1a>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_sbrk_r+0x1a>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	20000274 	.word	0x20000274

0800463c <__swhatbuf_r>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	460c      	mov	r4, r1
 8004640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004644:	2900      	cmp	r1, #0
 8004646:	b096      	sub	sp, #88	; 0x58
 8004648:	4615      	mov	r5, r2
 800464a:	461e      	mov	r6, r3
 800464c:	da0d      	bge.n	800466a <__swhatbuf_r+0x2e>
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004654:	f04f 0100 	mov.w	r1, #0
 8004658:	bf0c      	ite	eq
 800465a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800465e:	2340      	movne	r3, #64	; 0x40
 8004660:	2000      	movs	r0, #0
 8004662:	6031      	str	r1, [r6, #0]
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	b016      	add	sp, #88	; 0x58
 8004668:	bd70      	pop	{r4, r5, r6, pc}
 800466a:	466a      	mov	r2, sp
 800466c:	f000 f848 	bl	8004700 <_fstat_r>
 8004670:	2800      	cmp	r0, #0
 8004672:	dbec      	blt.n	800464e <__swhatbuf_r+0x12>
 8004674:	9901      	ldr	r1, [sp, #4]
 8004676:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800467a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800467e:	4259      	negs	r1, r3
 8004680:	4159      	adcs	r1, r3
 8004682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004686:	e7eb      	b.n	8004660 <__swhatbuf_r+0x24>

08004688 <__smakebuf_r>:
 8004688:	898b      	ldrh	r3, [r1, #12]
 800468a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800468c:	079d      	lsls	r5, r3, #30
 800468e:	4606      	mov	r6, r0
 8004690:	460c      	mov	r4, r1
 8004692:	d507      	bpl.n	80046a4 <__smakebuf_r+0x1c>
 8004694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	6123      	str	r3, [r4, #16]
 800469c:	2301      	movs	r3, #1
 800469e:	6163      	str	r3, [r4, #20]
 80046a0:	b002      	add	sp, #8
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	ab01      	add	r3, sp, #4
 80046a6:	466a      	mov	r2, sp
 80046a8:	f7ff ffc8 	bl	800463c <__swhatbuf_r>
 80046ac:	9900      	ldr	r1, [sp, #0]
 80046ae:	4605      	mov	r5, r0
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7ff fb0f 	bl	8003cd4 <_malloc_r>
 80046b6:	b948      	cbnz	r0, 80046cc <__smakebuf_r+0x44>
 80046b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046bc:	059a      	lsls	r2, r3, #22
 80046be:	d4ef      	bmi.n	80046a0 <__smakebuf_r+0x18>
 80046c0:	f023 0303 	bic.w	r3, r3, #3
 80046c4:	f043 0302 	orr.w	r3, r3, #2
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	e7e3      	b.n	8004694 <__smakebuf_r+0xc>
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	6020      	str	r0, [r4, #0]
 80046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	9b00      	ldr	r3, [sp, #0]
 80046d8:	6163      	str	r3, [r4, #20]
 80046da:	9b01      	ldr	r3, [sp, #4]
 80046dc:	6120      	str	r0, [r4, #16]
 80046de:	b15b      	cbz	r3, 80046f8 <__smakebuf_r+0x70>
 80046e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f81d 	bl	8004724 <_isatty_r>
 80046ea:	b128      	cbz	r0, 80046f8 <__smakebuf_r+0x70>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	81a3      	strh	r3, [r4, #12]
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	431d      	orrs	r5, r3
 80046fc:	81a5      	strh	r5, [r4, #12]
 80046fe:	e7cf      	b.n	80046a0 <__smakebuf_r+0x18>

08004700 <_fstat_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d07      	ldr	r5, [pc, #28]	; (8004720 <_fstat_r+0x20>)
 8004704:	2300      	movs	r3, #0
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	f7fc f9a2 	bl	8000a56 <_fstat>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d102      	bne.n	800471c <_fstat_r+0x1c>
 8004716:	682b      	ldr	r3, [r5, #0]
 8004718:	b103      	cbz	r3, 800471c <_fstat_r+0x1c>
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	bd38      	pop	{r3, r4, r5, pc}
 800471e:	bf00      	nop
 8004720:	20000274 	.word	0x20000274

08004724 <_isatty_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d06      	ldr	r5, [pc, #24]	; (8004740 <_isatty_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	f7fc f9a1 	bl	8000a76 <_isatty>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_isatty_r+0x1a>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_isatty_r+0x1a>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20000274 	.word	0x20000274

08004744 <_init>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr

08004750 <_fini>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	bf00      	nop
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr
