
UART_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006844  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080069d8  080069d8  000169d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dec  08006dec  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df4  08006df4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  08006fd0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08006fd0  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b006  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a45  00000000  00000000  0002b24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072d  00000000  00000000  0002d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026653  00000000  00000000  0002dd35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6ab  00000000  00000000  00054388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9576  00000000  00000000  0005fa33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036a8  00000000  00000000  00148fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014c654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069bc 	.word	0x080069bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080069bc 	.word	0x080069bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if(ch=='\n')
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b0a      	cmp	r3, #10
 8000ed0:	d109      	bne.n	8000ee6 <__io_putchar+0x22>
	{
		uint8_t ch2='\r';	//to fix end of line
 8000ed2:	230d      	movs	r3, #13
 8000ed4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 8000ed6:	f107 010f 	add.w	r1, r7, #15
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <__io_putchar+0x3c>)
 8000ee2:	f002 f9cd 	bl	8003280 <HAL_UART_Transmit>
	}
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ee6:	1d39      	adds	r1, r7, #4
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	2201      	movs	r2, #1
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <__io_putchar+0x3c>)
 8000ef0:	f002 f9c6 	bl	8003280 <HAL_UART_Transmit>
    return 1;
 8000ef4:	2301      	movs	r3, #1
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001f0 	.word	0x200001f0

08000f04 <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];//one more because End of line \0
static uint32_t line_length;				 //coursor index
uint8_t value1;
void line_append(uint8_t value)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {	//simply if enter clicked
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b0d      	cmp	r3, #13
 8000f12:	d002      	beq.n	8000f1a <line_append+0x16>
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b0a      	cmp	r3, #10
 8000f18:	d150      	bne.n	8000fbc <line_append+0xb8>
		if (line_length > 0) {
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <line_append+0x104>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d06d      	beq.n	8000ffe <line_append+0xfa>
			line_buffer[line_length] = '\0';
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <line_append+0x104>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <line_append+0x108>)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	54d1      	strb	r1, [r2, r3]
			printf("\n");
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f003 fdc5 	bl	8004abc <putchar>
			if (strcmp(line_buffer, "on") == 0){
 8000f32:	4937      	ldr	r1, [pc, #220]	; (8001010 <line_append+0x10c>)
 8000f34:	4835      	ldr	r0, [pc, #212]	; (800100c <line_append+0x108>)
 8000f36:	f7ff f94b 	bl	80001d0 <strcmp>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d106      	bne.n	8000f4e <line_append+0x4a>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2120      	movs	r1, #32
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f000 fe14 	bl	8001b74 <HAL_GPIO_WritePin>
 8000f4c:	e032      	b.n	8000fb4 <line_append+0xb0>
			} else if (strcmp(line_buffer, "off") == 0) {
 8000f4e:	4931      	ldr	r1, [pc, #196]	; (8001014 <line_append+0x110>)
 8000f50:	482e      	ldr	r0, [pc, #184]	; (800100c <line_append+0x108>)
 8000f52:	f7ff f93d 	bl	80001d0 <strcmp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d106      	bne.n	8000f6a <line_append+0x66>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2120      	movs	r1, #32
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f000 fe06 	bl	8001b74 <HAL_GPIO_WritePin>
 8000f68:	e024      	b.n	8000fb4 <line_append+0xb0>
			} else if (strcmp(line_buffer, "blink") == 0) {
 8000f6a:	492b      	ldr	r1, [pc, #172]	; (8001018 <line_append+0x114>)
 8000f6c:	4827      	ldr	r0, [pc, #156]	; (800100c <line_append+0x108>)
 8000f6e:	f7ff f92f 	bl	80001d0 <strcmp>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d119      	bne.n	8000fac <line_append+0xa8>
				value1=value;
 8000f78:	4a28      	ldr	r2, [pc, #160]	; (800101c <line_append+0x118>)
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	7013      	strb	r3, [r2, #0]
				while(value1==value)
 8000f7e:	e00f      	b.n	8000fa0 <line_append+0x9c>
				{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2120      	movs	r1, #32
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f000 fdf4 	bl	8001b74 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f90:	f000 fb3c 	bl	800160c <HAL_Delay>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2120      	movs	r1, #32
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f000 fdea 	bl	8001b74 <HAL_GPIO_WritePin>
				while(value1==value)
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <line_append+0x118>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d0ea      	beq.n	8000f80 <line_append+0x7c>
 8000faa:	e003      	b.n	8000fb4 <line_append+0xb0>
				}
			} else {
				printf("unknown comand: %s\n", line_buffer);
 8000fac:	4917      	ldr	r1, [pc, #92]	; (800100c <line_append+0x108>)
 8000fae:	481c      	ldr	r0, [pc, #112]	; (8001020 <line_append+0x11c>)
 8000fb0:	f003 fd72 	bl	8004a98 <iprintf>
			}
			line_length = 0;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <line_append+0x104>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 8000fba:	e020      	b.n	8000ffe <line_append+0xfa>
		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) { //if buffor is full
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <line_append+0x104>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d909      	bls.n	8000fd8 <line_append+0xd4>
			line_length = 0;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <line_append+0x104>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
			printf("\nbuffor full\n");
 8000fca:	4816      	ldr	r0, [pc, #88]	; (8001024 <line_append+0x120>)
 8000fcc:	f003 fdd2 	bl	8004b74 <puts>
			printf("this data will be overwrite: %s\n", line_buffer);
 8000fd0:	490e      	ldr	r1, [pc, #56]	; (800100c <line_append+0x108>)
 8000fd2:	4815      	ldr	r0, [pc, #84]	; (8001028 <line_append+0x124>)
 8000fd4:	f003 fd60 	bl	8004a98 <iprintf>
		}

		line_buffer[line_length++] = value;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <line_append+0x104>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	490a      	ldr	r1, [pc, #40]	; (8001008 <line_append+0x104>)
 8000fe0:	600a      	str	r2, [r1, #0]
 8000fe2:	490a      	ldr	r1, [pc, #40]	; (800100c <line_append+0x108>)
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	54ca      	strb	r2, [r1, r3]
		printf("%c", value);					//display current character
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fd66 	bl	8004abc <putchar>
		fflush(stdout);
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <line_append+0x128>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fc78 	bl	80048ec <fflush>

	}
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000284 	.word	0x20000284
 800100c:	20000278 	.word	0x20000278
 8001010:	080069d8 	.word	0x080069d8
 8001014:	080069dc 	.word	0x080069dc
 8001018:	080069e0 	.word	0x080069e0
 800101c:	20000288 	.word	0x20000288
 8001020:	080069e8 	.word	0x080069e8
 8001024:	080069fc 	.word	0x080069fc
 8001028:	08006a0c 	.word	0x08006a0c
 800102c:	20000064 	.word	0x20000064

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fa74 	bl	8001522 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f817 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 f88f 	bl	8001160 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001042:	f000 f859 	bl	80010f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  uint8_t value;

	 text = HAL_UART_Receive(&huart2, &value, 1, 0);//2000ms
 8001046:	1db9      	adds	r1, r7, #6
 8001048:	2300      	movs	r3, #0
 800104a:	2201      	movs	r2, #1
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <main+0x38>)
 800104e:	f002 f9a1 	bl	8003394 <HAL_UART_Receive>
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	 if(text==HAL_OK)
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f4      	bne.n	8001046 <main+0x16>
	 {
		 line_append(value);
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff50 	bl	8000f04 <line_append>
  {
 8001064:	e7ef      	b.n	8001046 <main+0x16>
 8001066:	bf00      	nop
 8001068:	200001f0 	.word	0x200001f0

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b096      	sub	sp, #88	; 0x58
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	2244      	movs	r2, #68	; 0x44
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fe5a 	bl	8004d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800108e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001092:	f000 fd95 	bl	8001bc0 <HAL_PWREx_ControlVoltageScaling>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800109c:	f000 f890 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010a0:	2310      	movs	r3, #16
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010ac:	2360      	movs	r3, #96	; 0x60
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fdd7 	bl	8001c6c <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80010c4:	f000 f87c 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 f99f 	bl	8002424 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010ec:	f000 f868 	bl	80011c0 <Error_Handler>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3758      	adds	r7, #88	; 0x58
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <MX_USART2_UART_Init+0x60>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_USART2_UART_Init+0x64>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_USART2_UART_Init+0x60>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_USART2_UART_Init+0x60>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART2_UART_Init+0x60>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART2_UART_Init+0x60>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART2_UART_Init+0x60>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <MX_USART2_UART_Init+0x60>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART2_UART_Init+0x60>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_USART2_UART_Init+0x60>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART2_UART_Init+0x60>)
 8001136:	2210      	movs	r2, #16
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_USART2_UART_Init+0x60>)
 800113c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001140:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART2_UART_Init+0x60>)
 8001144:	f002 f84e 	bl	80031e4 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800114e:	f000 f837 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f0 	.word	0x200001f0
 800115c:	40004400 	.word	0x40004400

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_GPIO_Init+0x5c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <MX_GPIO_Init+0x5c>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_GPIO_Init+0x5c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2120      	movs	r1, #32
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f000 fcee 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001198:	2320      	movs	r3, #32
 800119a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f000 fb36 	bl	8001820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_MspInit+0x44>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_MspInit+0x44>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6613      	str	r3, [r2, #96]	; 0x60
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_MspInit+0x44>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_MspInit+0x44>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_MspInit+0x44>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_MspInit+0x44>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ac      	sub	sp, #176	; 0xb0
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2288      	movs	r2, #136	; 0x88
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fd7d 	bl	8004d34 <memset>
  if(huart->Instance==USART2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_UART_MspInit+0xb0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d13b      	bne.n	80012bc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001244:	2302      	movs	r3, #2
 8001246:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fb0b 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800125c:	f7ff ffb0 	bl	80011c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_UART_MspInit+0xb4>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <HAL_UART_MspInit+0xb4>)
 8001266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126a:	6593      	str	r3, [r2, #88]	; 0x58
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_UART_MspInit+0xb4>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_UART_MspInit+0xb4>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_UART_MspInit+0xb4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_UART_MspInit+0xb4>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001290:	230c      	movs	r3, #12
 8001292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a8:	2307      	movs	r3, #7
 80012aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f000 fab2 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	37b0      	adds	r7, #176	; 0xb0
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40021000 	.word	0x40021000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f958 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_kill>:

int _kill(int pid, int sig)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133a:	f003 fd4d 	bl	8004dd8 <__errno>
 800133e:	4603      	mov	r3, r0
 8001340:	2216      	movs	r2, #22
 8001342:	601a      	str	r2, [r3, #0]
  return -1;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_exit>:

void _exit (int status)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ffe7 	bl	8001330 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001362:	e7fe      	b.n	8001362 <_exit+0x12>

08001364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e00a      	b.n	800138c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001376:	f3af 8000 	nop.w
 800137a:	4601      	mov	r1, r0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	b2ca      	uxtb	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbf0      	blt.n	8001376 <_read+0x12>
  }

  return len;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e009      	b.n	80013c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	60ba      	str	r2, [r7, #8]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fd83 	bl	8000ec4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbf1      	blt.n	80013b0 <_write+0x12>
  }
  return len;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_close>:

int _close(int file)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_isatty>:

int _isatty(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f003 fcb2 	bl	8004dd8 <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20018000 	.word	0x20018000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	2000028c 	.word	0x2000028c
 80014a8:	200003e0 	.word	0x200003e0

080014ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d4:	f7ff ffea 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <LoopForever+0x6>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <LoopForever+0xe>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	; (800151c <LoopForever+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f003 fc71 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001502:	f7ff fd95 	bl	8001030 <main>

08001506 <LoopForever>:

LoopForever:
    b LoopForever
 8001506:	e7fe      	b.n	8001506 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001508:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001514:	08006dfc 	.word	0x08006dfc
  ldr r2, =_sbss
 8001518:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800151c:	200003e0 	.word	0x200003e0

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>

08001522 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 f943 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001532:	200f      	movs	r0, #15
 8001534:	f000 f80e 	bl	8001554 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	e001      	b.n	8001548 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001544:	f7ff fe42 	bl	80011cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001548:	79fb      	ldrb	r3, [r7, #7]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_InitTick+0x6c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d023      	beq.n	80015b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_InitTick+0x70>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_InitTick+0x6c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f941 	bl	8001806 <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d809      	bhi.n	80015a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 f919 	bl	80017ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_InitTick+0x74>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e007      	b.n	80015b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e004      	b.n	80015b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e001      	b.n	80015b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000290 	.word	0x20000290

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000290 	.word	0x20000290

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff47 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff5c 	bl	800169c <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff8e 	bl	800170c <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5d 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffb0 	bl	8001774 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182e:	e17f      	b.n	8001b30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8171 	beq.w	8001b2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d005      	beq.n	8001860 <HAL_GPIO_Init+0x40>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d130      	bne.n	80018c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001896:	2201      	movs	r2, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 0201 	and.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d118      	bne.n	8001900 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018d4:	2201      	movs	r2, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d017      	beq.n	800193c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	6939      	ldr	r1, [r7, #16]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80ac 	beq.w	8001b2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	4a5e      	ldr	r2, [pc, #376]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6613      	str	r3, [r2, #96]	; 0x60
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ea:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_GPIO_Init+0x334>)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a14:	d025      	beq.n	8001a62 <HAL_GPIO_Init+0x242>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4f      	ldr	r2, [pc, #316]	; (8001b58 <HAL_GPIO_Init+0x338>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01f      	beq.n	8001a5e <HAL_GPIO_Init+0x23e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4e      	ldr	r2, [pc, #312]	; (8001b5c <HAL_GPIO_Init+0x33c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0x23a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4d      	ldr	r2, [pc, #308]	; (8001b60 <HAL_GPIO_Init+0x340>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x236>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4c      	ldr	r2, [pc, #304]	; (8001b64 <HAL_GPIO_Init+0x344>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x232>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4b      	ldr	r2, [pc, #300]	; (8001b68 <HAL_GPIO_Init+0x348>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x22e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4a      	ldr	r2, [pc, #296]	; (8001b6c <HAL_GPIO_Init+0x34c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x22a>
 8001a46:	2306      	movs	r3, #6
 8001a48:	e00c      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e00a      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e008      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a52:	2304      	movs	r3, #4
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e004      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a62:	2300      	movs	r3, #0
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	f002 0203 	and.w	r2, r2, #3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a74:	4937      	ldr	r1, [pc, #220]	; (8001b54 <HAL_GPIO_Init+0x334>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa6:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f47f ae78 	bne.w	8001830 <HAL_GPIO_Init+0x10>
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	48001000 	.word	0x48001000
 8001b68:	48001400 	.word	0x48001400
 8001b6c:	48001800 	.word	0x48001800
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bce:	d130      	bne.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bdc:	d038      	beq.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2232      	movs	r2, #50	; 0x32
 8001bf4:	fb02 f303 	mul.w	r3, r2, r3
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9b      	lsrs	r3, r3, #18
 8001c00:	3301      	adds	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c04:	e002      	b.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c18:	d102      	bne.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f2      	bne.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2c:	d110      	bne.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e00f      	b.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3e:	d007      	beq.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c48:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000
 8001c64:	20000000 	.word	0x20000000
 8001c68:	431bde83 	.word	0x431bde83

08001c6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e3ca      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4b97      	ldr	r3, [pc, #604]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	4b94      	ldr	r3, [pc, #592]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80e4 	beq.w	8001e68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x4a>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	f040 808b 	bne.w	8001dc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	f040 8087 	bne.w	8001dc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb6:	4b89      	ldr	r3, [pc, #548]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x62>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e3a2      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1a      	ldr	r2, [r3, #32]
 8001cd2:	4b82      	ldr	r3, [pc, #520]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x7c>
 8001cde:	4b7f      	ldr	r3, [pc, #508]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCC_OscConfig+0x88>
 8001ce8:	4b7c      	ldr	r3, [pc, #496]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d223      	bcs.n	8001d40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fd55 	bl	80027ac <RCC_SetFlashLatencyFromMSIRange>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e383      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0c:	4b73      	ldr	r3, [pc, #460]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a72      	ldr	r2, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b70      	ldr	r3, [pc, #448]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	496d      	ldr	r1, [pc, #436]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2a:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	4968      	ldr	r1, [pc, #416]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
 8001d3e:	e025      	b.n	8001d8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d40:	4b66      	ldr	r3, [pc, #408]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a65      	ldr	r2, [pc, #404]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4960      	ldr	r1, [pc, #384]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	495b      	ldr	r1, [pc, #364]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fd15 	bl	80027ac <RCC_SetFlashLatencyFromMSIRange>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e343      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d8c:	f000 fc4a 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	4950      	ldr	r1, [pc, #320]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	4a4e      	ldr	r2, [pc, #312]	; (8001ee4 <HAL_RCC_OscConfig+0x278>)
 8001daa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dac:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fbcf 	bl	8001554 <HAL_InitTick>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d052      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	e327      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d032      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dcc:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a42      	ldr	r2, [pc, #264]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fc0c 	bl	80015f4 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de0:	f7ff fc08 	bl	80015f4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e310      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df2:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a36      	ldr	r2, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4931      	ldr	r1, [pc, #196]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	492c      	ldr	r1, [pc, #176]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
 8001e30:	e01a      	b.n	8001e68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fbd9 	bl	80015f4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e46:	f7ff fbd5 	bl	80015f4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e2dd      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x1da>
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d074      	beq.n	8001f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d005      	beq.n	8001e86 <HAL_RCC_OscConfig+0x21a>
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d10e      	bne.n	8001e9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d10b      	bne.n	8001e9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d064      	beq.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d160      	bne.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e2ba      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x24a>
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e026      	b.n	8001f04 <HAL_RCC_OscConfig+0x298>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebe:	d115      	bne.n	8001eec <HAL_RCC_OscConfig+0x280>
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a05      	ldr	r2, [pc, #20]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a02      	ldr	r2, [pc, #8]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e014      	b.n	8001f04 <HAL_RCC_OscConfig+0x298>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08006a30 	.word	0x08006a30
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	4ba0      	ldr	r3, [pc, #640]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a9f      	ldr	r2, [pc, #636]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b9d      	ldr	r3, [pc, #628]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a9c      	ldr	r2, [pc, #624]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fb72 	bl	80015f4 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fb6e 	bl	80015f4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e276      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f26:	4b92      	ldr	r3, [pc, #584]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2a8>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff fb5e 	bl	80015f4 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fb5a 	bl	80015f4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e262      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4e:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2d0>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d060      	beq.n	800202c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x310>
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d119      	bne.n	8001faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d116      	bne.n	8001faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f7c:	4b7c      	ldr	r3, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_OscConfig+0x328>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e23f      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	4973      	ldr	r1, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa8:	e040      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d023      	beq.n	8001ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6e      	ldr	r2, [pc, #440]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fb19 	bl	80015f4 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fb15 	bl	80015f4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e21d      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd8:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b62      	ldr	r3, [pc, #392]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	495f      	ldr	r1, [pc, #380]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
 8001ff8:	e018      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a5c      	ldr	r2, [pc, #368]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8002000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7ff faf5 	bl	80015f4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200e:	f7ff faf1 	bl	80015f4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1f9      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d03c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01c      	beq.n	800207a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002040:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8002042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002046:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7ff fad0 	bl	80015f4 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff facc 	bl	80015f4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1d4      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 800206c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ef      	beq.n	8002058 <HAL_RCC_OscConfig+0x3ec>
 8002078:	e01b      	b.n	80020b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 800207c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002080:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff fab3 	bl	80015f4 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002092:	f7ff faaf 	bl	80015f4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e1b7      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ef      	bne.n	8002092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80a6 	beq.w	800220c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6593      	str	r3, [r2, #88]	; 0x58
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_RCC_OscConfig+0x508>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d118      	bne.n	800212a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_OscConfig+0x508>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_RCC_OscConfig+0x508>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002104:	f7ff fa76 	bl	80015f4 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7ff fa72 	bl	80015f4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e17a      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_RCC_OscConfig+0x508>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d108      	bne.n	8002144 <HAL_RCC_OscConfig+0x4d8>
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002142:	e029      	b.n	8002198 <HAL_RCC_OscConfig+0x52c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d115      	bne.n	8002178 <HAL_RCC_OscConfig+0x50c>
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	4a03      	ldr	r2, [pc, #12]	; (8002170 <HAL_RCC_OscConfig+0x504>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x52c>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	4b9c      	ldr	r3, [pc, #624]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	4a9b      	ldr	r2, [pc, #620]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002188:	4b98      	ldr	r3, [pc, #608]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	4a97      	ldr	r2, [pc, #604]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d016      	beq.n	80021ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff fa28 	bl	80015f4 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7ff fa24 	bl	80015f4 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e12a      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ed      	beq.n	80021a8 <HAL_RCC_OscConfig+0x53c>
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff fa11 	bl	80015f4 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fa0d 	bl	80015f4 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e113      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ec:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ed      	bne.n	80021d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b7a      	ldr	r3, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	4a79      	ldr	r2, [pc, #484]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80fe 	beq.w	8002412 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	2b02      	cmp	r3, #2
 800221c:	f040 80d0 	bne.w	80023c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002220:	4b72      	ldr	r3, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	429a      	cmp	r2, r3
 8002232:	d130      	bne.n	8002296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	3b01      	subs	r3, #1
 8002240:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d127      	bne.n	8002296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d11f      	bne.n	8002296 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002260:	2a07      	cmp	r2, #7
 8002262:	bf14      	ite	ne
 8002264:	2201      	movne	r2, #1
 8002266:	2200      	moveq	r2, #0
 8002268:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800226a:	4293      	cmp	r3, r2
 800226c:	d113      	bne.n	8002296 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	3b01      	subs	r3, #1
 800227c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d109      	bne.n	8002296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	3b01      	subs	r3, #1
 8002290:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d06e      	beq.n	8002374 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d069      	beq.n	8002370 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0ad      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a4b      	ldr	r2, [pc, #300]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80022be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c4:	f7ff f996 	bl	80015f4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff f992 	bl	80015f4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e09a      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022de:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ea:	4b40      	ldr	r3, [pc, #256]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_RCC_OscConfig+0x784>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022fa:	3a01      	subs	r2, #1
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002304:	0212      	lsls	r2, r2, #8
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800230c:	0852      	lsrs	r2, r2, #1
 800230e:	3a01      	subs	r2, #1
 8002310:	0552      	lsls	r2, r2, #21
 8002312:	4311      	orrs	r1, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002318:	0852      	lsrs	r2, r2, #1
 800231a:	3a01      	subs	r2, #1
 800231c:	0652      	lsls	r2, r2, #25
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002324:	0912      	lsrs	r2, r2, #4
 8002326:	0452      	lsls	r2, r2, #17
 8002328:	430a      	orrs	r2, r1
 800232a:	4930      	ldr	r1, [pc, #192]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2d      	ldr	r2, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a2a      	ldr	r2, [pc, #168]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002348:	f7ff f954 	bl	80015f4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff f950 	bl	80015f4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e058      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800236e:	e050      	b.n	8002412 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e04f      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d148      	bne.n	8002412 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a16      	ldr	r2, [pc, #88]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002398:	f7ff f92c 	bl	80015f4 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff f928 	bl	80015f4 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e030      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x734>
 80023be:	e028      	b.n	8002412 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d023      	beq.n	800240e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_RCC_OscConfig+0x780>)
 80023cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7ff f90f 	bl	80015f4 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d8:	e00c      	b.n	80023f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7ff f90b 	bl	80015f4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d905      	bls.n	80023f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e013      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_OscConfig+0x7b0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ec      	bne.n	80023da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_OscConfig+0x7b0>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4905      	ldr	r1, [pc, #20]	; (800241c <HAL_RCC_OscConfig+0x7b0>)
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_OscConfig+0x7b4>)
 8002408:	4013      	ands	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
 800240c:	e001      	b.n	8002412 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	feeefffc 	.word	0xfeeefffc

08002424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0e7      	b.n	8002608 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b75      	ldr	r3, [pc, #468]	; (8002610 <HAL_RCC_ClockConfig+0x1ec>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b72      	ldr	r3, [pc, #456]	; (8002610 <HAL_RCC_ClockConfig+0x1ec>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4970      	ldr	r1, [pc, #448]	; (8002610 <HAL_RCC_ClockConfig+0x1ec>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b6e      	ldr	r3, [pc, #440]	; (8002610 <HAL_RCC_ClockConfig+0x1ec>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0cf      	b.n	8002608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4b66      	ldr	r3, [pc, #408]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002480:	429a      	cmp	r2, r3
 8002482:	d908      	bls.n	8002496 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4960      	ldr	r1, [pc, #384]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d04c      	beq.n	800253c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d121      	bne.n	80024fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0a6      	b.n	8002608 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c2:	4b54      	ldr	r3, [pc, #336]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d115      	bne.n	80024fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e09a      	b.n	8002608 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024da:	4b4e      	ldr	r3, [pc, #312]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e08e      	b.n	8002608 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ea:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e086      	b.n	8002608 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 0203 	bic.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4943      	ldr	r1, [pc, #268]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800250c:	f7ff f872 	bl	80015f4 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7ff f86e 	bl	80015f4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e06e      	b.n	8002608 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b3a      	ldr	r3, [pc, #232]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 020c 	and.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d1eb      	bne.n	8002514 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d010      	beq.n	800256a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002554:	429a      	cmp	r2, r3
 8002556:	d208      	bcs.n	800256a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	492b      	ldr	r1, [pc, #172]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <HAL_RCC_ClockConfig+0x1ec>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d210      	bcs.n	800259a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_RCC_ClockConfig+0x1ec>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 0207 	bic.w	r2, r3, #7
 8002580:	4923      	ldr	r1, [pc, #140]	; (8002610 <HAL_RCC_ClockConfig+0x1ec>)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_RCC_ClockConfig+0x1ec>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e036      	b.n	8002608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a6:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4918      	ldr	r1, [pc, #96]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4910      	ldr	r1, [pc, #64]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025d8:	f000 f824 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	490b      	ldr	r1, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x1f4>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1f8>)
 80025f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1fc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe ffa9 	bl	8001554 <HAL_InitTick>
 8002602:	4603      	mov	r3, r0
 8002604:	72fb      	strb	r3, [r7, #11]

  return status;
 8002606:	7afb      	ldrb	r3, [r7, #11]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40022000 	.word	0x40022000
 8002614:	40021000 	.word	0x40021000
 8002618:	08006a30 	.word	0x08006a30
 800261c:	20000000 	.word	0x20000000
 8002620:	20000004 	.word	0x20000004

08002624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800263c:	4b3b      	ldr	r3, [pc, #236]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x34>
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d121      	bne.n	8002696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d11e      	bne.n	8002696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002664:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e005      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002674:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002680:	4a2b      	ldr	r2, [pc, #172]	; (8002730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d102      	bne.n	80026a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_GetSysClockFreq+0x110>)
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	e004      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_RCC_GetSysClockFreq+0x114>)
 80026aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d134      	bne.n	800271c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0xa6>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d003      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0xac>
 80026c8:	e005      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026ca:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_RCC_GetSysClockFreq+0x110>)
 80026cc:	617b      	str	r3, [r7, #20]
      break;
 80026ce:	e005      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_GetSysClockFreq+0x114>)
 80026d2:	617b      	str	r3, [r7, #20]
      break;
 80026d4:	e002      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	617b      	str	r3, [r7, #20]
      break;
 80026da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	3301      	adds	r3, #1
 80026e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	fb03 f202 	mul.w	r2, r3, r2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	0e5b      	lsrs	r3, r3, #25
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	3301      	adds	r3, #1
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800271c:	69bb      	ldr	r3, [r7, #24]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	08006a48 	.word	0x08006a48
 8002734:	00f42400 	.word	0x00f42400
 8002738:	007a1200 	.word	0x007a1200

0800273c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_RCC_GetHCLKFreq+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000000 	.word	0x20000000

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002758:	f7ff fff0 	bl	800273c <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4904      	ldr	r1, [pc, #16]	; (800277c <HAL_RCC_GetPCLK1Freq+0x28>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	08006a40 	.word	0x08006a40

08002780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002784:	f7ff ffda 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0adb      	lsrs	r3, r3, #11
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4904      	ldr	r1, [pc, #16]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08006a40 	.word	0x08006a40

080027ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027b8:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027c4:	f7ff f9ee 	bl	8001ba4 <HAL_PWREx_GetVoltageRange>
 80027c8:	6178      	str	r0, [r7, #20]
 80027ca:	e014      	b.n	80027f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	4a24      	ldr	r2, [pc, #144]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6593      	str	r3, [r2, #88]	; 0x58
 80027d8:	4b22      	ldr	r3, [pc, #136]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027e4:	f7ff f9de 	bl	8001ba4 <HAL_PWREx_GetVoltageRange>
 80027e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fc:	d10b      	bne.n	8002816 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d919      	bls.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2ba0      	cmp	r3, #160	; 0xa0
 8002808:	d902      	bls.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800280a:	2302      	movs	r3, #2
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	e013      	b.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002810:	2301      	movs	r3, #1
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	e010      	b.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d902      	bls.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800281c:	2303      	movs	r3, #3
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	e00a      	b.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d102      	bne.n	800282e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002828:	2302      	movs	r3, #2
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e004      	b.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b70      	cmp	r3, #112	; 0x70
 8002832:	d101      	bne.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002834:	2301      	movs	r3, #1
 8002836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 0207 	bic.w	r2, r3, #7
 8002840:	4909      	ldr	r1, [pc, #36]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	429a      	cmp	r2, r3
 8002854:	d001      	beq.n	800285a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	40022000 	.word	0x40022000

0800286c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002874:	2300      	movs	r3, #0
 8002876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002878:	2300      	movs	r3, #0
 800287a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002884:	2b00      	cmp	r3, #0
 8002886:	d041      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800288c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002890:	d02a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002892:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002896:	d824      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800289c:	d008      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800289e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028a2:	d81e      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ac:	d010      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ae:	e018      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b0:	4b86      	ldr	r3, [pc, #536]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a85      	ldr	r2, [pc, #532]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028bc:	e015      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fabb 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ce:	e00c      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3320      	adds	r3, #32
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fba6 	bl	8003028 <RCCEx_PLLSAI2_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e0:	e003      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	74fb      	strb	r3, [r7, #19]
      break;
 80028e6:	e000      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f0:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028fe:	4973      	ldr	r1, [pc, #460]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002906:	e001      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d041      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800291c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002920:	d02a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002926:	d824      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800292c:	d008      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800292e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002932:	d81e      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293c:	d010      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800293e:	e018      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002940:	4b62      	ldr	r3, [pc, #392]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a61      	ldr	r2, [pc, #388]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800294c:	e015      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fa73 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800295e:	e00c      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3320      	adds	r3, #32
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fb5e 	bl	8003028 <RCCEx_PLLSAI2_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002970:	e003      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	74fb      	strb	r3, [r7, #19]
      break;
 8002976:	e000      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002980:	4b52      	ldr	r3, [pc, #328]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800298e:	494f      	ldr	r1, [pc, #316]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002996:	e001      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a0 	beq.w	8002aea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00d      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	4a40      	ldr	r2, [pc, #256]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6593      	str	r3, [r2, #88]	; 0x58
 80029d0:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029dc:	2301      	movs	r3, #1
 80029de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e0:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a3a      	ldr	r2, [pc, #232]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fe02 	bl	80015f4 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029f2:	e009      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f4:	f7fe fdfe 	bl	80015f4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	74fb      	strb	r3, [r7, #19]
        break;
 8002a06:	e005      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a08:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ef      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d15c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01f      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d019      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe fdbd 	bl	80015f4 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7c:	e00b      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fdb9 	bl	80015f4 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d902      	bls.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	74fb      	strb	r3, [r7, #19]
            break;
 8002a94:	e006      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ec      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aba:	4904      	ldr	r1, [pc, #16]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	74bb      	strb	r3, [r7, #18]
 8002ac8:	e006      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad8:	7c7b      	ldrb	r3, [r7, #17]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	4a9d      	ldr	r2, [pc, #628]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af6:	4b98      	ldr	r3, [pc, #608]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 0203 	bic.w	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	4994      	ldr	r1, [pc, #592]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b18:	4b8f      	ldr	r3, [pc, #572]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 020c 	bic.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	498c      	ldr	r1, [pc, #560]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b3a:	4b87      	ldr	r3, [pc, #540]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	4983      	ldr	r1, [pc, #524]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b5c:	4b7e      	ldr	r3, [pc, #504]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	497b      	ldr	r1, [pc, #492]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8c:	4972      	ldr	r1, [pc, #456]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ba0:	4b6d      	ldr	r3, [pc, #436]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	496a      	ldr	r1, [pc, #424]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bc2:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	4961      	ldr	r1, [pc, #388]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002be4:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf2:	4959      	ldr	r1, [pc, #356]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c06:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	4950      	ldr	r1, [pc, #320]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	4948      	ldr	r1, [pc, #288]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c4a:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	493f      	ldr	r1, [pc, #252]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d028      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7a:	4937      	ldr	r1, [pc, #220]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8c:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a31      	ldr	r2, [pc, #196]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c96:	60d3      	str	r3, [r2, #12]
 8002c98:	e011      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f8c8 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d028      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	491f      	ldr	r1, [pc, #124]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf4:	60d3      	str	r3, [r2, #12]
 8002cf6:	e011      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 f899 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d02b      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	4908      	ldr	r1, [pc, #32]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d46:	d109      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a02      	ldr	r2, [pc, #8]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d52:	60d3      	str	r3, [r2, #12]
 8002d54:	e014      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f867 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02f      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d9a:	4928      	ldr	r1, [pc, #160]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002daa:	d10d      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	2102      	movs	r1, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f844 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d014      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	74bb      	strb	r3, [r7, #18]
 8002dc6:	e011      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3320      	adds	r3, #32
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f925 	bl	8003028 <RCCEx_PLLSAI2_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e06:	490d      	ldr	r1, [pc, #52]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2a:	4904      	ldr	r1, [pc, #16]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e32:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000

08002e40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e4e:	4b75      	ldr	r3, [pc, #468]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d018      	beq.n	8002e8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0203 	and.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d10d      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e72:	4b6c      	ldr	r3, [pc, #432]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
       ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d047      	beq.n	8002f16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	e044      	b.n	8002f16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d018      	beq.n	8002ec6 <RCCEx_PLLSAI1_Config+0x86>
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d825      	bhi.n	8002ee4 <RCCEx_PLLSAI1_Config+0xa4>
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d002      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x62>
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d009      	beq.n	8002eb4 <RCCEx_PLLSAI1_Config+0x74>
 8002ea0:	e020      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ea2:	4b60      	ldr	r3, [pc, #384]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11d      	bne.n	8002eea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb2:	e01a      	b.n	8002eea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eb4:	4b5b      	ldr	r3, [pc, #364]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d116      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec4:	e013      	b.n	8002eee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ec6:	4b57      	ldr	r3, [pc, #348]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ed2:	4b54      	ldr	r3, [pc, #336]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ee2:	e006      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee8:	e004      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eea:	bf00      	nop
 8002eec:	e002      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ef2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002efa:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	4944      	ldr	r1, [pc, #272]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d17d      	bne.n	8003018 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f1c:	4b41      	ldr	r3, [pc, #260]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a40      	ldr	r2, [pc, #256]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f28:	f7fe fb64 	bl	80015f4 <HAL_GetTick>
 8002f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f2e:	e009      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f30:	f7fe fb60 	bl	80015f4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d902      	bls.n	8002f44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	73fb      	strb	r3, [r7, #15]
        break;
 8002f42:	e005      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f44:	4b37      	ldr	r3, [pc, #220]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ef      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d160      	bne.n	8003018 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f5c:	4b31      	ldr	r3, [pc, #196]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	0211      	lsls	r1, r2, #8
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68d2      	ldr	r2, [r2, #12]
 8002f72:	0912      	lsrs	r2, r2, #4
 8002f74:	0452      	lsls	r2, r2, #17
 8002f76:	430a      	orrs	r2, r1
 8002f78:	492a      	ldr	r1, [pc, #168]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	610b      	str	r3, [r1, #16]
 8002f7e:	e027      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d112      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6892      	ldr	r2, [r2, #8]
 8002f96:	0211      	lsls	r1, r2, #8
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6912      	ldr	r2, [r2, #16]
 8002f9c:	0852      	lsrs	r2, r2, #1
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	0552      	lsls	r2, r2, #21
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	491f      	ldr	r1, [pc, #124]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	610b      	str	r3, [r1, #16]
 8002faa:	e011      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6892      	ldr	r2, [r2, #8]
 8002fbc:	0211      	lsls	r1, r2, #8
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6952      	ldr	r2, [r2, #20]
 8002fc2:	0852      	lsrs	r2, r2, #1
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	0652      	lsls	r2, r2, #25
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	4916      	ldr	r1, [pc, #88]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fb0a 	bl	80015f4 <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fe2:	e009      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe4:	f7fe fb06 	bl	80015f4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ff6:	e005      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ef      	beq.n	8002fe4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	4904      	ldr	r1, [pc, #16]	; (8003024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000

08003028 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003036:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d018      	beq.n	8003074 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0203 	and.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d10d      	bne.n	800306e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
       ||
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800305a:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
       ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d047      	beq.n	80030fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
 8003072:	e044      	b.n	80030fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d018      	beq.n	80030ae <RCCEx_PLLSAI2_Config+0x86>
 800307c:	2b03      	cmp	r3, #3
 800307e:	d825      	bhi.n	80030cc <RCCEx_PLLSAI2_Config+0xa4>
 8003080:	2b01      	cmp	r3, #1
 8003082:	d002      	beq.n	800308a <RCCEx_PLLSAI2_Config+0x62>
 8003084:	2b02      	cmp	r3, #2
 8003086:	d009      	beq.n	800309c <RCCEx_PLLSAI2_Config+0x74>
 8003088:	e020      	b.n	80030cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800308a:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11d      	bne.n	80030d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309a:	e01a      	b.n	80030d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800309c:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d116      	bne.n	80030d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ac:	e013      	b.n	80030d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ae:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ba:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ca:	e006      	b.n	80030da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      break;
 80030d0:	e004      	b.n	80030dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030d2:	bf00      	nop
 80030d4:	e002      	b.n	80030dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030d6:	bf00      	nop
 80030d8:	e000      	b.n	80030dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030da:	bf00      	nop
    }

    if(status == HAL_OK)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10d      	bne.n	80030fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	430b      	orrs	r3, r1
 80030f8:	4939      	ldr	r1, [pc, #228]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d167      	bne.n	80031d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a35      	ldr	r2, [pc, #212]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fe fa70 	bl	80015f4 <HAL_GetTick>
 8003114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003116:	e009      	b.n	800312c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003118:	f7fe fa6c 	bl	80015f4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d902      	bls.n	800312c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	73fb      	strb	r3, [r7, #15]
        break;
 800312a:	e005      	b.n	8003138 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ef      	bne.n	8003118 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d14a      	bne.n	80031d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d111      	bne.n	8003168 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6892      	ldr	r2, [r2, #8]
 8003154:	0211      	lsls	r1, r2, #8
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68d2      	ldr	r2, [r2, #12]
 800315a:	0912      	lsrs	r2, r2, #4
 800315c:	0452      	lsls	r2, r2, #17
 800315e:	430a      	orrs	r2, r1
 8003160:	491f      	ldr	r1, [pc, #124]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	614b      	str	r3, [r1, #20]
 8003166:	e011      	b.n	800318c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003170:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6892      	ldr	r2, [r2, #8]
 8003178:	0211      	lsls	r1, r2, #8
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6912      	ldr	r2, [r2, #16]
 800317e:	0852      	lsrs	r2, r2, #1
 8003180:	3a01      	subs	r2, #1
 8003182:	0652      	lsls	r2, r2, #25
 8003184:	430a      	orrs	r2, r1
 8003186:	4916      	ldr	r1, [pc, #88]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003188:	4313      	orrs	r3, r2
 800318a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003196:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fe fa2c 	bl	80015f4 <HAL_GetTick>
 800319c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800319e:	e009      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031a0:	f7fe fa28 	bl	80015f4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d902      	bls.n	80031b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	73fb      	strb	r3, [r7, #15]
          break;
 80031b2:	e005      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ef      	beq.n	80031a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4904      	ldr	r1, [pc, #16]	; (80031e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000

080031e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e040      	b.n	8003278 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe f804 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2224      	movs	r2, #36	; 0x24
 8003210:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fc34 	bl	8003a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f979 	bl	8003528 <UART_SetConfig>
 8003236:	4603      	mov	r3, r0
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e01b      	b.n	8003278 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800324e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800325e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fcb3 	bl	8003bdc <UART_CheckIdleState>
 8003276:	4603      	mov	r3, r0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003294:	2b20      	cmp	r3, #32
 8003296:	d178      	bne.n	800338a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_UART_Transmit+0x24>
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e071      	b.n	800338c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2221      	movs	r2, #33	; 0x21
 80032b4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032b6:	f7fe f99d 	bl	80015f4 <HAL_GetTick>
 80032ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d108      	bne.n	80032e8 <HAL_UART_Transmit+0x68>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d104      	bne.n	80032e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	e003      	b.n	80032f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032f0:	e030      	b.n	8003354 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fd15 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e03c      	b.n	800338c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003324:	b292      	uxth	r2, r2
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	3302      	adds	r3, #2
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	e008      	b.n	8003342 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b292      	uxth	r2, r2
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3301      	adds	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1c8      	bne.n	80032f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2200      	movs	r2, #0
 8003368:	2140      	movs	r1, #64	; 0x40
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fcde 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e005      	b.n	800338c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f040 80b6 	bne.w	800351c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_UART_Receive+0x28>
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0ae      	b.n	800351e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2222      	movs	r2, #34	; 0x22
 80033cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033d6:	f7fe f90d 	bl	80015f4 <HAL_GetTick>
 80033da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d10e      	bne.n	8003414 <HAL_UART_Receive+0x80>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <HAL_UART_Receive+0x76>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003404:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003408:	e02d      	b.n	8003466 <HAL_UART_Receive+0xd2>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	22ff      	movs	r2, #255	; 0xff
 800340e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003412:	e028      	b.n	8003466 <HAL_UART_Receive+0xd2>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10d      	bne.n	8003438 <HAL_UART_Receive+0xa4>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <HAL_UART_Receive+0x9a>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	22ff      	movs	r2, #255	; 0xff
 8003428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800342c:	e01b      	b.n	8003466 <HAL_UART_Receive+0xd2>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	227f      	movs	r2, #127	; 0x7f
 8003432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003436:	e016      	b.n	8003466 <HAL_UART_Receive+0xd2>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003440:	d10d      	bne.n	800345e <HAL_UART_Receive+0xca>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Receive+0xc0>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	227f      	movs	r2, #127	; 0x7f
 800344e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003452:	e008      	b.n	8003466 <HAL_UART_Receive+0xd2>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	223f      	movs	r2, #63	; 0x3f
 8003458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800345c:	e003      	b.n	8003466 <HAL_UART_Receive+0xd2>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800346c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	d108      	bne.n	800348a <HAL_UART_Receive+0xf6>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d104      	bne.n	800348a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e003      	b.n	8003492 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003492:	e037      	b.n	8003504 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	2120      	movs	r1, #32
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fc44 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e033      	b.n	800351e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10c      	bne.n	80034d6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	8a7b      	ldrh	r3, [r7, #18]
 80034c6:	4013      	ands	r3, r2
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	3302      	adds	r3, #2
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e00d      	b.n	80034f2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	8a7b      	ldrh	r3, [r7, #18]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4013      	ands	r3, r2
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1c1      	bne.n	8003494 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b08a      	sub	sp, #40	; 0x28
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	431a      	orrs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4313      	orrs	r3, r2
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4ba4      	ldr	r3, [pc, #656]	; (80037e8 <UART_SetConfig+0x2c0>)
 8003558:	4013      	ands	r3, r2
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003560:	430b      	orrs	r3, r1
 8003562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a99      	ldr	r2, [pc, #612]	; (80037ec <UART_SetConfig+0x2c4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	4313      	orrs	r3, r2
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a90      	ldr	r2, [pc, #576]	; (80037f0 <UART_SetConfig+0x2c8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d126      	bne.n	8003600 <UART_SetConfig+0xd8>
 80035b2:	4b90      	ldr	r3, [pc, #576]	; (80037f4 <UART_SetConfig+0x2cc>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d81b      	bhi.n	80035f8 <UART_SetConfig+0xd0>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0xa0>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035e9 	.word	0x080035e9
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	080035f1 	.word	0x080035f1
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035de:	e116      	b.n	800380e <UART_SetConfig+0x2e6>
 80035e0:	2302      	movs	r3, #2
 80035e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e6:	e112      	b.n	800380e <UART_SetConfig+0x2e6>
 80035e8:	2304      	movs	r3, #4
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ee:	e10e      	b.n	800380e <UART_SetConfig+0x2e6>
 80035f0:	2308      	movs	r3, #8
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f6:	e10a      	b.n	800380e <UART_SetConfig+0x2e6>
 80035f8:	2310      	movs	r3, #16
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fe:	e106      	b.n	800380e <UART_SetConfig+0x2e6>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a7c      	ldr	r2, [pc, #496]	; (80037f8 <UART_SetConfig+0x2d0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d138      	bne.n	800367c <UART_SetConfig+0x154>
 800360a:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <UART_SetConfig+0x2cc>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d82d      	bhi.n	8003674 <UART_SetConfig+0x14c>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <UART_SetConfig+0xf8>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003655 	.word	0x08003655
 8003624:	08003675 	.word	0x08003675
 8003628:	08003675 	.word	0x08003675
 800362c:	08003675 	.word	0x08003675
 8003630:	08003665 	.word	0x08003665
 8003634:	08003675 	.word	0x08003675
 8003638:	08003675 	.word	0x08003675
 800363c:	08003675 	.word	0x08003675
 8003640:	0800365d 	.word	0x0800365d
 8003644:	08003675 	.word	0x08003675
 8003648:	08003675 	.word	0x08003675
 800364c:	08003675 	.word	0x08003675
 8003650:	0800366d 	.word	0x0800366d
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365a:	e0d8      	b.n	800380e <UART_SetConfig+0x2e6>
 800365c:	2302      	movs	r3, #2
 800365e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003662:	e0d4      	b.n	800380e <UART_SetConfig+0x2e6>
 8003664:	2304      	movs	r3, #4
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366a:	e0d0      	b.n	800380e <UART_SetConfig+0x2e6>
 800366c:	2308      	movs	r3, #8
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003672:	e0cc      	b.n	800380e <UART_SetConfig+0x2e6>
 8003674:	2310      	movs	r3, #16
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e0c8      	b.n	800380e <UART_SetConfig+0x2e6>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5e      	ldr	r2, [pc, #376]	; (80037fc <UART_SetConfig+0x2d4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d125      	bne.n	80036d2 <UART_SetConfig+0x1aa>
 8003686:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <UART_SetConfig+0x2cc>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003690:	2b30      	cmp	r3, #48	; 0x30
 8003692:	d016      	beq.n	80036c2 <UART_SetConfig+0x19a>
 8003694:	2b30      	cmp	r3, #48	; 0x30
 8003696:	d818      	bhi.n	80036ca <UART_SetConfig+0x1a2>
 8003698:	2b20      	cmp	r3, #32
 800369a:	d00a      	beq.n	80036b2 <UART_SetConfig+0x18a>
 800369c:	2b20      	cmp	r3, #32
 800369e:	d814      	bhi.n	80036ca <UART_SetConfig+0x1a2>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <UART_SetConfig+0x182>
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d008      	beq.n	80036ba <UART_SetConfig+0x192>
 80036a8:	e00f      	b.n	80036ca <UART_SetConfig+0x1a2>
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b0:	e0ad      	b.n	800380e <UART_SetConfig+0x2e6>
 80036b2:	2302      	movs	r3, #2
 80036b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b8:	e0a9      	b.n	800380e <UART_SetConfig+0x2e6>
 80036ba:	2304      	movs	r3, #4
 80036bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c0:	e0a5      	b.n	800380e <UART_SetConfig+0x2e6>
 80036c2:	2308      	movs	r3, #8
 80036c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c8:	e0a1      	b.n	800380e <UART_SetConfig+0x2e6>
 80036ca:	2310      	movs	r3, #16
 80036cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d0:	e09d      	b.n	800380e <UART_SetConfig+0x2e6>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4a      	ldr	r2, [pc, #296]	; (8003800 <UART_SetConfig+0x2d8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d125      	bne.n	8003728 <UART_SetConfig+0x200>
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <UART_SetConfig+0x2cc>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036e6:	2bc0      	cmp	r3, #192	; 0xc0
 80036e8:	d016      	beq.n	8003718 <UART_SetConfig+0x1f0>
 80036ea:	2bc0      	cmp	r3, #192	; 0xc0
 80036ec:	d818      	bhi.n	8003720 <UART_SetConfig+0x1f8>
 80036ee:	2b80      	cmp	r3, #128	; 0x80
 80036f0:	d00a      	beq.n	8003708 <UART_SetConfig+0x1e0>
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d814      	bhi.n	8003720 <UART_SetConfig+0x1f8>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <UART_SetConfig+0x1d8>
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d008      	beq.n	8003710 <UART_SetConfig+0x1e8>
 80036fe:	e00f      	b.n	8003720 <UART_SetConfig+0x1f8>
 8003700:	2300      	movs	r3, #0
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e082      	b.n	800380e <UART_SetConfig+0x2e6>
 8003708:	2302      	movs	r3, #2
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e07e      	b.n	800380e <UART_SetConfig+0x2e6>
 8003710:	2304      	movs	r3, #4
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e07a      	b.n	800380e <UART_SetConfig+0x2e6>
 8003718:	2308      	movs	r3, #8
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e076      	b.n	800380e <UART_SetConfig+0x2e6>
 8003720:	2310      	movs	r3, #16
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003726:	e072      	b.n	800380e <UART_SetConfig+0x2e6>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a35      	ldr	r2, [pc, #212]	; (8003804 <UART_SetConfig+0x2dc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d12a      	bne.n	8003788 <UART_SetConfig+0x260>
 8003732:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <UART_SetConfig+0x2cc>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003740:	d01a      	beq.n	8003778 <UART_SetConfig+0x250>
 8003742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003746:	d81b      	bhi.n	8003780 <UART_SetConfig+0x258>
 8003748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374c:	d00c      	beq.n	8003768 <UART_SetConfig+0x240>
 800374e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003752:	d815      	bhi.n	8003780 <UART_SetConfig+0x258>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <UART_SetConfig+0x238>
 8003758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375c:	d008      	beq.n	8003770 <UART_SetConfig+0x248>
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x258>
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e052      	b.n	800380e <UART_SetConfig+0x2e6>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e04e      	b.n	800380e <UART_SetConfig+0x2e6>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e04a      	b.n	800380e <UART_SetConfig+0x2e6>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e046      	b.n	800380e <UART_SetConfig+0x2e6>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e042      	b.n	800380e <UART_SetConfig+0x2e6>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a17      	ldr	r2, [pc, #92]	; (80037ec <UART_SetConfig+0x2c4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d13a      	bne.n	8003808 <UART_SetConfig+0x2e0>
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <UART_SetConfig+0x2cc>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800379c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a0:	d01a      	beq.n	80037d8 <UART_SetConfig+0x2b0>
 80037a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a6:	d81b      	bhi.n	80037e0 <UART_SetConfig+0x2b8>
 80037a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ac:	d00c      	beq.n	80037c8 <UART_SetConfig+0x2a0>
 80037ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b2:	d815      	bhi.n	80037e0 <UART_SetConfig+0x2b8>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <UART_SetConfig+0x298>
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037bc:	d008      	beq.n	80037d0 <UART_SetConfig+0x2a8>
 80037be:	e00f      	b.n	80037e0 <UART_SetConfig+0x2b8>
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e022      	b.n	800380e <UART_SetConfig+0x2e6>
 80037c8:	2302      	movs	r3, #2
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ce:	e01e      	b.n	800380e <UART_SetConfig+0x2e6>
 80037d0:	2304      	movs	r3, #4
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d6:	e01a      	b.n	800380e <UART_SetConfig+0x2e6>
 80037d8:	2308      	movs	r3, #8
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037de:	e016      	b.n	800380e <UART_SetConfig+0x2e6>
 80037e0:	2310      	movs	r3, #16
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e6:	e012      	b.n	800380e <UART_SetConfig+0x2e6>
 80037e8:	efff69f3 	.word	0xefff69f3
 80037ec:	40008000 	.word	0x40008000
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40004400 	.word	0x40004400
 80037fc:	40004800 	.word	0x40004800
 8003800:	40004c00 	.word	0x40004c00
 8003804:	40005000 	.word	0x40005000
 8003808:	2310      	movs	r3, #16
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a9f      	ldr	r2, [pc, #636]	; (8003a90 <UART_SetConfig+0x568>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d17a      	bne.n	800390e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800381c:	2b08      	cmp	r3, #8
 800381e:	d824      	bhi.n	800386a <UART_SetConfig+0x342>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0x300>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	0800384d 	.word	0x0800384d
 800382c:	0800386b 	.word	0x0800386b
 8003830:	08003855 	.word	0x08003855
 8003834:	0800386b 	.word	0x0800386b
 8003838:	0800385b 	.word	0x0800385b
 800383c:	0800386b 	.word	0x0800386b
 8003840:	0800386b 	.word	0x0800386b
 8003844:	0800386b 	.word	0x0800386b
 8003848:	08003863 	.word	0x08003863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe ff82 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 8003850:	61f8      	str	r0, [r7, #28]
        break;
 8003852:	e010      	b.n	8003876 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003854:	4b8f      	ldr	r3, [pc, #572]	; (8003a94 <UART_SetConfig+0x56c>)
 8003856:	61fb      	str	r3, [r7, #28]
        break;
 8003858:	e00d      	b.n	8003876 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7fe fee3 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 800385e:	61f8      	str	r0, [r7, #28]
        break;
 8003860:	e009      	b.n	8003876 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003866:	61fb      	str	r3, [r7, #28]
        break;
 8003868:	e005      	b.n	8003876 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003874:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80fb 	beq.w	8003a74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	429a      	cmp	r2, r3
 800388c:	d305      	bcc.n	800389a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	429a      	cmp	r2, r3
 8003898:	d903      	bls.n	80038a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038a0:	e0e8      	b.n	8003a74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2200      	movs	r2, #0
 80038a6:	461c      	mov	r4, r3
 80038a8:	4615      	mov	r5, r2
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	022b      	lsls	r3, r5, #8
 80038b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038b8:	0222      	lsls	r2, r4, #8
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	6849      	ldr	r1, [r1, #4]
 80038be:	0849      	lsrs	r1, r1, #1
 80038c0:	2000      	movs	r0, #0
 80038c2:	4688      	mov	r8, r1
 80038c4:	4681      	mov	r9, r0
 80038c6:	eb12 0a08 	adds.w	sl, r2, r8
 80038ca:	eb43 0b09 	adc.w	fp, r3, r9
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038dc:	4650      	mov	r0, sl
 80038de:	4659      	mov	r1, fp
 80038e0:	f7fd f972 	bl	8000bc8 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f2:	d308      	bcc.n	8003906 <UART_SetConfig+0x3de>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038fa:	d204      	bcs.n	8003906 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	60da      	str	r2, [r3, #12]
 8003904:	e0b6      	b.n	8003a74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800390c:	e0b2      	b.n	8003a74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003916:	d15e      	bne.n	80039d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800391c:	2b08      	cmp	r3, #8
 800391e:	d828      	bhi.n	8003972 <UART_SetConfig+0x44a>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <UART_SetConfig+0x400>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	0800394d 	.word	0x0800394d
 800392c:	08003955 	.word	0x08003955
 8003930:	0800395d 	.word	0x0800395d
 8003934:	08003973 	.word	0x08003973
 8003938:	08003963 	.word	0x08003963
 800393c:	08003973 	.word	0x08003973
 8003940:	08003973 	.word	0x08003973
 8003944:	08003973 	.word	0x08003973
 8003948:	0800396b 	.word	0x0800396b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800394c:	f7fe ff02 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 8003950:	61f8      	str	r0, [r7, #28]
        break;
 8003952:	e014      	b.n	800397e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003954:	f7fe ff14 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 8003958:	61f8      	str	r0, [r7, #28]
        break;
 800395a:	e010      	b.n	800397e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800395c:	4b4d      	ldr	r3, [pc, #308]	; (8003a94 <UART_SetConfig+0x56c>)
 800395e:	61fb      	str	r3, [r7, #28]
        break;
 8003960:	e00d      	b.n	800397e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003962:	f7fe fe5f 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 8003966:	61f8      	str	r0, [r7, #28]
        break;
 8003968:	e009      	b.n	800397e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396e:	61fb      	str	r3, [r7, #28]
        break;
 8003970:	e005      	b.n	800397e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800397c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d077      	beq.n	8003a74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005a      	lsls	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	441a      	add	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b0f      	cmp	r3, #15
 800399e:	d916      	bls.n	80039ce <UART_SetConfig+0x4a6>
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a6:	d212      	bcs.n	80039ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f023 030f 	bic.w	r3, r3, #15
 80039b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	b29a      	uxth	r2, r3
 80039be:	8afb      	ldrh	r3, [r7, #22]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	8afa      	ldrh	r2, [r7, #22]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	e052      	b.n	8003a74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039d4:	e04e      	b.n	8003a74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d827      	bhi.n	8003a2e <UART_SetConfig+0x506>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0x4bc>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a2f 	.word	0x08003a2f
 80039f4:	08003a1f 	.word	0x08003a1f
 80039f8:	08003a2f 	.word	0x08003a2f
 80039fc:	08003a2f 	.word	0x08003a2f
 8003a00:	08003a2f 	.word	0x08003a2f
 8003a04:	08003a27 	.word	0x08003a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a08:	f7fe fea4 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	61f8      	str	r0, [r7, #28]
        break;
 8003a0e:	e014      	b.n	8003a3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7fe feb6 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 8003a14:	61f8      	str	r0, [r7, #28]
        break;
 8003a16:	e010      	b.n	8003a3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a18:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <UART_SetConfig+0x56c>)
 8003a1a:	61fb      	str	r3, [r7, #28]
        break;
 8003a1c:	e00d      	b.n	8003a3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7fe fe01 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 8003a22:	61f8      	str	r0, [r7, #28]
        break;
 8003a24:	e009      	b.n	8003a3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2a:	61fb      	str	r3, [r7, #28]
        break;
 8003a2c:	e005      	b.n	8003a3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a38:	bf00      	nop
    }

    if (pclk != 0U)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d019      	beq.n	8003a74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	085a      	lsrs	r2, r3, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	441a      	add	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	d909      	bls.n	8003a6e <UART_SetConfig+0x546>
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d205      	bcs.n	8003a6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	e002      	b.n	8003a74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3728      	adds	r7, #40	; 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8e:	bf00      	nop
 8003a90:	40008000 	.word	0x40008000
 8003a94:	00f42400 	.word	0x00f42400

08003a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b96:	d10a      	bne.n	8003bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b098      	sub	sp, #96	; 0x60
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bec:	f7fd fd02 	bl	80015f4 <HAL_GetTick>
 8003bf0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d12e      	bne.n	8003c5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f88c 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d021      	beq.n	8003c5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e6      	bne.n	8003c1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e062      	b.n	8003d24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d149      	bne.n	8003d00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c74:	2200      	movs	r2, #0
 8003c76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f856 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d03c      	beq.n	8003d00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	623b      	str	r3, [r7, #32]
   return(result);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e6      	bne.n	8003c86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd8:	61fa      	str	r2, [r7, #28]
 8003cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	69b9      	ldr	r1, [r7, #24]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e5      	bne.n	8003cb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e011      	b.n	8003d24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3758      	adds	r7, #88	; 0x58
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3c:	e049      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d045      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd fc55 	bl	80015f4 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e048      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d031      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d110      	bne.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2208      	movs	r2, #8
 8003d82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f838 	bl	8003dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e029      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dac:	d111      	bne.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f81e 	bl	8003dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e00f      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0a6      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b095      	sub	sp, #84	; 0x54
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e20:	643b      	str	r3, [r7, #64]	; 0x40
 8003e22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e6      	bne.n	8003e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d118      	bne.n	8003ea2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f023 0310 	bic.w	r3, r3, #16
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6979      	ldr	r1, [r7, #20]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e6      	bne.n	8003e70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003eb6:	bf00      	nop
 8003eb8:	3754      	adds	r7, #84	; 0x54
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <__cvt>:
 8003ec2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec6:	ec55 4b10 	vmov	r4, r5, d0
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	460e      	mov	r6, r1
 8003ece:	4619      	mov	r1, r3
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	bfbb      	ittet	lt
 8003ed4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ed8:	461d      	movlt	r5, r3
 8003eda:	2300      	movge	r3, #0
 8003edc:	232d      	movlt	r3, #45	; 0x2d
 8003ede:	700b      	strb	r3, [r1, #0]
 8003ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ee2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ee6:	4691      	mov	r9, r2
 8003ee8:	f023 0820 	bic.w	r8, r3, #32
 8003eec:	bfbc      	itt	lt
 8003eee:	4622      	movlt	r2, r4
 8003ef0:	4614      	movlt	r4, r2
 8003ef2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ef6:	d005      	beq.n	8003f04 <__cvt+0x42>
 8003ef8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003efc:	d100      	bne.n	8003f00 <__cvt+0x3e>
 8003efe:	3601      	adds	r6, #1
 8003f00:	2102      	movs	r1, #2
 8003f02:	e000      	b.n	8003f06 <__cvt+0x44>
 8003f04:	2103      	movs	r1, #3
 8003f06:	ab03      	add	r3, sp, #12
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	ab02      	add	r3, sp, #8
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	ec45 4b10 	vmov	d0, r4, r5
 8003f12:	4653      	mov	r3, sl
 8003f14:	4632      	mov	r2, r6
 8003f16:	f001 f817 	bl	8004f48 <_dtoa_r>
 8003f1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f1e:	4607      	mov	r7, r0
 8003f20:	d102      	bne.n	8003f28 <__cvt+0x66>
 8003f22:	f019 0f01 	tst.w	r9, #1
 8003f26:	d022      	beq.n	8003f6e <__cvt+0xac>
 8003f28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f2c:	eb07 0906 	add.w	r9, r7, r6
 8003f30:	d110      	bne.n	8003f54 <__cvt+0x92>
 8003f32:	783b      	ldrb	r3, [r7, #0]
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d10a      	bne.n	8003f4e <__cvt+0x8c>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	4629      	mov	r1, r5
 8003f40:	f7fc fdd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8003f44:	b918      	cbnz	r0, 8003f4e <__cvt+0x8c>
 8003f46:	f1c6 0601 	rsb	r6, r6, #1
 8003f4a:	f8ca 6000 	str.w	r6, [sl]
 8003f4e:	f8da 3000 	ldr.w	r3, [sl]
 8003f52:	4499      	add	r9, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	2300      	movs	r3, #0
 8003f58:	4620      	mov	r0, r4
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7fc fdc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8003f60:	b108      	cbz	r0, 8003f66 <__cvt+0xa4>
 8003f62:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f66:	2230      	movs	r2, #48	; 0x30
 8003f68:	9b03      	ldr	r3, [sp, #12]
 8003f6a:	454b      	cmp	r3, r9
 8003f6c:	d307      	bcc.n	8003f7e <__cvt+0xbc>
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f72:	1bdb      	subs	r3, r3, r7
 8003f74:	4638      	mov	r0, r7
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	b004      	add	sp, #16
 8003f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7e:	1c59      	adds	r1, r3, #1
 8003f80:	9103      	str	r1, [sp, #12]
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e7f0      	b.n	8003f68 <__cvt+0xa6>

08003f86 <__exponent>:
 8003f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	bfb8      	it	lt
 8003f8e:	4249      	neglt	r1, r1
 8003f90:	f803 2b02 	strb.w	r2, [r3], #2
 8003f94:	bfb4      	ite	lt
 8003f96:	222d      	movlt	r2, #45	; 0x2d
 8003f98:	222b      	movge	r2, #43	; 0x2b
 8003f9a:	2909      	cmp	r1, #9
 8003f9c:	7042      	strb	r2, [r0, #1]
 8003f9e:	dd2a      	ble.n	8003ff6 <__exponent+0x70>
 8003fa0:	f10d 0207 	add.w	r2, sp, #7
 8003fa4:	4617      	mov	r7, r2
 8003fa6:	260a      	movs	r6, #10
 8003fa8:	4694      	mov	ip, r2
 8003faa:	fb91 f5f6 	sdiv	r5, r1, r6
 8003fae:	fb06 1415 	mls	r4, r6, r5, r1
 8003fb2:	3430      	adds	r4, #48	; 0x30
 8003fb4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003fb8:	460c      	mov	r4, r1
 8003fba:	2c63      	cmp	r4, #99	; 0x63
 8003fbc:	f102 32ff 	add.w	r2, r2, #4294967295
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	dcf1      	bgt.n	8003fa8 <__exponent+0x22>
 8003fc4:	3130      	adds	r1, #48	; 0x30
 8003fc6:	f1ac 0402 	sub.w	r4, ip, #2
 8003fca:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003fce:	1c41      	adds	r1, r0, #1
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	42ba      	cmp	r2, r7
 8003fd4:	d30a      	bcc.n	8003fec <__exponent+0x66>
 8003fd6:	f10d 0209 	add.w	r2, sp, #9
 8003fda:	eba2 020c 	sub.w	r2, r2, ip
 8003fde:	42bc      	cmp	r4, r7
 8003fe0:	bf88      	it	hi
 8003fe2:	2200      	movhi	r2, #0
 8003fe4:	4413      	add	r3, r2
 8003fe6:	1a18      	subs	r0, r3, r0
 8003fe8:	b003      	add	sp, #12
 8003fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fec:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003ff0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003ff4:	e7ed      	b.n	8003fd2 <__exponent+0x4c>
 8003ff6:	2330      	movs	r3, #48	; 0x30
 8003ff8:	3130      	adds	r1, #48	; 0x30
 8003ffa:	7083      	strb	r3, [r0, #2]
 8003ffc:	70c1      	strb	r1, [r0, #3]
 8003ffe:	1d03      	adds	r3, r0, #4
 8004000:	e7f1      	b.n	8003fe6 <__exponent+0x60>
	...

08004004 <_printf_float>:
 8004004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	ed2d 8b02 	vpush	{d8}
 800400c:	b08d      	sub	sp, #52	; 0x34
 800400e:	460c      	mov	r4, r1
 8004010:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004014:	4616      	mov	r6, r2
 8004016:	461f      	mov	r7, r3
 8004018:	4605      	mov	r5, r0
 800401a:	f000 fe93 	bl	8004d44 <_localeconv_r>
 800401e:	f8d0 a000 	ldr.w	sl, [r0]
 8004022:	4650      	mov	r0, sl
 8004024:	f7fc f934 	bl	8000290 <strlen>
 8004028:	2300      	movs	r3, #0
 800402a:	930a      	str	r3, [sp, #40]	; 0x28
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	9305      	str	r3, [sp, #20]
 8004030:	f8d8 3000 	ldr.w	r3, [r8]
 8004034:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004038:	3307      	adds	r3, #7
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	f103 0208 	add.w	r2, r3, #8
 8004042:	f8c8 2000 	str.w	r2, [r8]
 8004046:	e9d3 8900 	ldrd	r8, r9, [r3]
 800404a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800404e:	9307      	str	r3, [sp, #28]
 8004050:	f8cd 8018 	str.w	r8, [sp, #24]
 8004054:	ee08 0a10 	vmov	s16, r0
 8004058:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800405c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004060:	4b9e      	ldr	r3, [pc, #632]	; (80042dc <_printf_float+0x2d8>)
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	f7fc fd71 	bl	8000b4c <__aeabi_dcmpun>
 800406a:	bb88      	cbnz	r0, 80040d0 <_printf_float+0xcc>
 800406c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004070:	4b9a      	ldr	r3, [pc, #616]	; (80042dc <_printf_float+0x2d8>)
 8004072:	f04f 32ff 	mov.w	r2, #4294967295
 8004076:	f7fc fd4b 	bl	8000b10 <__aeabi_dcmple>
 800407a:	bb48      	cbnz	r0, 80040d0 <_printf_float+0xcc>
 800407c:	2200      	movs	r2, #0
 800407e:	2300      	movs	r3, #0
 8004080:	4640      	mov	r0, r8
 8004082:	4649      	mov	r1, r9
 8004084:	f7fc fd3a 	bl	8000afc <__aeabi_dcmplt>
 8004088:	b110      	cbz	r0, 8004090 <_printf_float+0x8c>
 800408a:	232d      	movs	r3, #45	; 0x2d
 800408c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004090:	4a93      	ldr	r2, [pc, #588]	; (80042e0 <_printf_float+0x2dc>)
 8004092:	4b94      	ldr	r3, [pc, #592]	; (80042e4 <_printf_float+0x2e0>)
 8004094:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004098:	bf94      	ite	ls
 800409a:	4690      	movls	r8, r2
 800409c:	4698      	movhi	r8, r3
 800409e:	2303      	movs	r3, #3
 80040a0:	6123      	str	r3, [r4, #16]
 80040a2:	9b05      	ldr	r3, [sp, #20]
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	f04f 0900 	mov.w	r9, #0
 80040ae:	9700      	str	r7, [sp, #0]
 80040b0:	4633      	mov	r3, r6
 80040b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80040b4:	4621      	mov	r1, r4
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 f9da 	bl	8004470 <_printf_common>
 80040bc:	3001      	adds	r0, #1
 80040be:	f040 8090 	bne.w	80041e2 <_printf_float+0x1de>
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295
 80040c6:	b00d      	add	sp, #52	; 0x34
 80040c8:	ecbd 8b02 	vpop	{d8}
 80040cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	4640      	mov	r0, r8
 80040d6:	4649      	mov	r1, r9
 80040d8:	f7fc fd38 	bl	8000b4c <__aeabi_dcmpun>
 80040dc:	b140      	cbz	r0, 80040f0 <_printf_float+0xec>
 80040de:	464b      	mov	r3, r9
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bfbc      	itt	lt
 80040e4:	232d      	movlt	r3, #45	; 0x2d
 80040e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040ea:	4a7f      	ldr	r2, [pc, #508]	; (80042e8 <_printf_float+0x2e4>)
 80040ec:	4b7f      	ldr	r3, [pc, #508]	; (80042ec <_printf_float+0x2e8>)
 80040ee:	e7d1      	b.n	8004094 <_printf_float+0x90>
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80040f6:	9206      	str	r2, [sp, #24]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	d13f      	bne.n	800417c <_printf_float+0x178>
 80040fc:	2306      	movs	r3, #6
 80040fe:	6063      	str	r3, [r4, #4]
 8004100:	9b05      	ldr	r3, [sp, #20]
 8004102:	6861      	ldr	r1, [r4, #4]
 8004104:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004108:	2300      	movs	r3, #0
 800410a:	9303      	str	r3, [sp, #12]
 800410c:	ab0a      	add	r3, sp, #40	; 0x28
 800410e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004112:	ab09      	add	r3, sp, #36	; 0x24
 8004114:	ec49 8b10 	vmov	d0, r8, r9
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6022      	str	r2, [r4, #0]
 800411c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004120:	4628      	mov	r0, r5
 8004122:	f7ff fece 	bl	8003ec2 <__cvt>
 8004126:	9b06      	ldr	r3, [sp, #24]
 8004128:	9909      	ldr	r1, [sp, #36]	; 0x24
 800412a:	2b47      	cmp	r3, #71	; 0x47
 800412c:	4680      	mov	r8, r0
 800412e:	d108      	bne.n	8004142 <_printf_float+0x13e>
 8004130:	1cc8      	adds	r0, r1, #3
 8004132:	db02      	blt.n	800413a <_printf_float+0x136>
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	4299      	cmp	r1, r3
 8004138:	dd41      	ble.n	80041be <_printf_float+0x1ba>
 800413a:	f1ab 0302 	sub.w	r3, fp, #2
 800413e:	fa5f fb83 	uxtb.w	fp, r3
 8004142:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004146:	d820      	bhi.n	800418a <_printf_float+0x186>
 8004148:	3901      	subs	r1, #1
 800414a:	465a      	mov	r2, fp
 800414c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004150:	9109      	str	r1, [sp, #36]	; 0x24
 8004152:	f7ff ff18 	bl	8003f86 <__exponent>
 8004156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004158:	1813      	adds	r3, r2, r0
 800415a:	2a01      	cmp	r2, #1
 800415c:	4681      	mov	r9, r0
 800415e:	6123      	str	r3, [r4, #16]
 8004160:	dc02      	bgt.n	8004168 <_printf_float+0x164>
 8004162:	6822      	ldr	r2, [r4, #0]
 8004164:	07d2      	lsls	r2, r2, #31
 8004166:	d501      	bpl.n	800416c <_printf_float+0x168>
 8004168:	3301      	adds	r3, #1
 800416a:	6123      	str	r3, [r4, #16]
 800416c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004170:	2b00      	cmp	r3, #0
 8004172:	d09c      	beq.n	80040ae <_printf_float+0xaa>
 8004174:	232d      	movs	r3, #45	; 0x2d
 8004176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800417a:	e798      	b.n	80040ae <_printf_float+0xaa>
 800417c:	9a06      	ldr	r2, [sp, #24]
 800417e:	2a47      	cmp	r2, #71	; 0x47
 8004180:	d1be      	bne.n	8004100 <_printf_float+0xfc>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1bc      	bne.n	8004100 <_printf_float+0xfc>
 8004186:	2301      	movs	r3, #1
 8004188:	e7b9      	b.n	80040fe <_printf_float+0xfa>
 800418a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800418e:	d118      	bne.n	80041c2 <_printf_float+0x1be>
 8004190:	2900      	cmp	r1, #0
 8004192:	6863      	ldr	r3, [r4, #4]
 8004194:	dd0b      	ble.n	80041ae <_printf_float+0x1aa>
 8004196:	6121      	str	r1, [r4, #16]
 8004198:	b913      	cbnz	r3, 80041a0 <_printf_float+0x19c>
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	07d0      	lsls	r0, r2, #31
 800419e:	d502      	bpl.n	80041a6 <_printf_float+0x1a2>
 80041a0:	3301      	adds	r3, #1
 80041a2:	440b      	add	r3, r1
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80041a8:	f04f 0900 	mov.w	r9, #0
 80041ac:	e7de      	b.n	800416c <_printf_float+0x168>
 80041ae:	b913      	cbnz	r3, 80041b6 <_printf_float+0x1b2>
 80041b0:	6822      	ldr	r2, [r4, #0]
 80041b2:	07d2      	lsls	r2, r2, #31
 80041b4:	d501      	bpl.n	80041ba <_printf_float+0x1b6>
 80041b6:	3302      	adds	r3, #2
 80041b8:	e7f4      	b.n	80041a4 <_printf_float+0x1a0>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e7f2      	b.n	80041a4 <_printf_float+0x1a0>
 80041be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80041c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041c4:	4299      	cmp	r1, r3
 80041c6:	db05      	blt.n	80041d4 <_printf_float+0x1d0>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	6121      	str	r1, [r4, #16]
 80041cc:	07d8      	lsls	r0, r3, #31
 80041ce:	d5ea      	bpl.n	80041a6 <_printf_float+0x1a2>
 80041d0:	1c4b      	adds	r3, r1, #1
 80041d2:	e7e7      	b.n	80041a4 <_printf_float+0x1a0>
 80041d4:	2900      	cmp	r1, #0
 80041d6:	bfd4      	ite	le
 80041d8:	f1c1 0202 	rsble	r2, r1, #2
 80041dc:	2201      	movgt	r2, #1
 80041de:	4413      	add	r3, r2
 80041e0:	e7e0      	b.n	80041a4 <_printf_float+0x1a0>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	055a      	lsls	r2, r3, #21
 80041e6:	d407      	bmi.n	80041f8 <_printf_float+0x1f4>
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	4642      	mov	r2, r8
 80041ec:	4631      	mov	r1, r6
 80041ee:	4628      	mov	r0, r5
 80041f0:	47b8      	blx	r7
 80041f2:	3001      	adds	r0, #1
 80041f4:	d12c      	bne.n	8004250 <_printf_float+0x24c>
 80041f6:	e764      	b.n	80040c2 <_printf_float+0xbe>
 80041f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041fc:	f240 80e0 	bls.w	80043c0 <_printf_float+0x3bc>
 8004200:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004204:	2200      	movs	r2, #0
 8004206:	2300      	movs	r3, #0
 8004208:	f7fc fc6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800420c:	2800      	cmp	r0, #0
 800420e:	d034      	beq.n	800427a <_printf_float+0x276>
 8004210:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <_printf_float+0x2ec>)
 8004212:	2301      	movs	r3, #1
 8004214:	4631      	mov	r1, r6
 8004216:	4628      	mov	r0, r5
 8004218:	47b8      	blx	r7
 800421a:	3001      	adds	r0, #1
 800421c:	f43f af51 	beq.w	80040c2 <_printf_float+0xbe>
 8004220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004224:	429a      	cmp	r2, r3
 8004226:	db02      	blt.n	800422e <_printf_float+0x22a>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	07d8      	lsls	r0, r3, #31
 800422c:	d510      	bpl.n	8004250 <_printf_float+0x24c>
 800422e:	ee18 3a10 	vmov	r3, s16
 8004232:	4652      	mov	r2, sl
 8004234:	4631      	mov	r1, r6
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	f43f af41 	beq.w	80040c2 <_printf_float+0xbe>
 8004240:	f04f 0800 	mov.w	r8, #0
 8004244:	f104 091a 	add.w	r9, r4, #26
 8004248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	4543      	cmp	r3, r8
 800424e:	dc09      	bgt.n	8004264 <_printf_float+0x260>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	079b      	lsls	r3, r3, #30
 8004254:	f100 8107 	bmi.w	8004466 <_printf_float+0x462>
 8004258:	68e0      	ldr	r0, [r4, #12]
 800425a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800425c:	4298      	cmp	r0, r3
 800425e:	bfb8      	it	lt
 8004260:	4618      	movlt	r0, r3
 8004262:	e730      	b.n	80040c6 <_printf_float+0xc2>
 8004264:	2301      	movs	r3, #1
 8004266:	464a      	mov	r2, r9
 8004268:	4631      	mov	r1, r6
 800426a:	4628      	mov	r0, r5
 800426c:	47b8      	blx	r7
 800426e:	3001      	adds	r0, #1
 8004270:	f43f af27 	beq.w	80040c2 <_printf_float+0xbe>
 8004274:	f108 0801 	add.w	r8, r8, #1
 8004278:	e7e6      	b.n	8004248 <_printf_float+0x244>
 800427a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	dc39      	bgt.n	80042f4 <_printf_float+0x2f0>
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <_printf_float+0x2ec>)
 8004282:	2301      	movs	r3, #1
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	f43f af19 	beq.w	80040c2 <_printf_float+0xbe>
 8004290:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004294:	4313      	orrs	r3, r2
 8004296:	d102      	bne.n	800429e <_printf_float+0x29a>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	07d9      	lsls	r1, r3, #31
 800429c:	d5d8      	bpl.n	8004250 <_printf_float+0x24c>
 800429e:	ee18 3a10 	vmov	r3, s16
 80042a2:	4652      	mov	r2, sl
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	f43f af09 	beq.w	80040c2 <_printf_float+0xbe>
 80042b0:	f04f 0900 	mov.w	r9, #0
 80042b4:	f104 0a1a 	add.w	sl, r4, #26
 80042b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ba:	425b      	negs	r3, r3
 80042bc:	454b      	cmp	r3, r9
 80042be:	dc01      	bgt.n	80042c4 <_printf_float+0x2c0>
 80042c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c2:	e792      	b.n	80041ea <_printf_float+0x1e6>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4652      	mov	r2, sl
 80042c8:	4631      	mov	r1, r6
 80042ca:	4628      	mov	r0, r5
 80042cc:	47b8      	blx	r7
 80042ce:	3001      	adds	r0, #1
 80042d0:	f43f aef7 	beq.w	80040c2 <_printf_float+0xbe>
 80042d4:	f109 0901 	add.w	r9, r9, #1
 80042d8:	e7ee      	b.n	80042b8 <_printf_float+0x2b4>
 80042da:	bf00      	nop
 80042dc:	7fefffff 	.word	0x7fefffff
 80042e0:	08006a78 	.word	0x08006a78
 80042e4:	08006a7c 	.word	0x08006a7c
 80042e8:	08006a80 	.word	0x08006a80
 80042ec:	08006a84 	.word	0x08006a84
 80042f0:	08006a88 	.word	0x08006a88
 80042f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042f8:	429a      	cmp	r2, r3
 80042fa:	bfa8      	it	ge
 80042fc:	461a      	movge	r2, r3
 80042fe:	2a00      	cmp	r2, #0
 8004300:	4691      	mov	r9, r2
 8004302:	dc37      	bgt.n	8004374 <_printf_float+0x370>
 8004304:	f04f 0b00 	mov.w	fp, #0
 8004308:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800430c:	f104 021a 	add.w	r2, r4, #26
 8004310:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004312:	9305      	str	r3, [sp, #20]
 8004314:	eba3 0309 	sub.w	r3, r3, r9
 8004318:	455b      	cmp	r3, fp
 800431a:	dc33      	bgt.n	8004384 <_printf_float+0x380>
 800431c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004320:	429a      	cmp	r2, r3
 8004322:	db3b      	blt.n	800439c <_printf_float+0x398>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	07da      	lsls	r2, r3, #31
 8004328:	d438      	bmi.n	800439c <_printf_float+0x398>
 800432a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800432e:	eba2 0903 	sub.w	r9, r2, r3
 8004332:	9b05      	ldr	r3, [sp, #20]
 8004334:	1ad2      	subs	r2, r2, r3
 8004336:	4591      	cmp	r9, r2
 8004338:	bfa8      	it	ge
 800433a:	4691      	movge	r9, r2
 800433c:	f1b9 0f00 	cmp.w	r9, #0
 8004340:	dc35      	bgt.n	80043ae <_printf_float+0x3aa>
 8004342:	f04f 0800 	mov.w	r8, #0
 8004346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800434a:	f104 0a1a 	add.w	sl, r4, #26
 800434e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	eba3 0309 	sub.w	r3, r3, r9
 8004358:	4543      	cmp	r3, r8
 800435a:	f77f af79 	ble.w	8004250 <_printf_float+0x24c>
 800435e:	2301      	movs	r3, #1
 8004360:	4652      	mov	r2, sl
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	f43f aeaa 	beq.w	80040c2 <_printf_float+0xbe>
 800436e:	f108 0801 	add.w	r8, r8, #1
 8004372:	e7ec      	b.n	800434e <_printf_float+0x34a>
 8004374:	4613      	mov	r3, r2
 8004376:	4631      	mov	r1, r6
 8004378:	4642      	mov	r2, r8
 800437a:	4628      	mov	r0, r5
 800437c:	47b8      	blx	r7
 800437e:	3001      	adds	r0, #1
 8004380:	d1c0      	bne.n	8004304 <_printf_float+0x300>
 8004382:	e69e      	b.n	80040c2 <_printf_float+0xbe>
 8004384:	2301      	movs	r3, #1
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	9205      	str	r2, [sp, #20]
 800438c:	47b8      	blx	r7
 800438e:	3001      	adds	r0, #1
 8004390:	f43f ae97 	beq.w	80040c2 <_printf_float+0xbe>
 8004394:	9a05      	ldr	r2, [sp, #20]
 8004396:	f10b 0b01 	add.w	fp, fp, #1
 800439a:	e7b9      	b.n	8004310 <_printf_float+0x30c>
 800439c:	ee18 3a10 	vmov	r3, s16
 80043a0:	4652      	mov	r2, sl
 80043a2:	4631      	mov	r1, r6
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b8      	blx	r7
 80043a8:	3001      	adds	r0, #1
 80043aa:	d1be      	bne.n	800432a <_printf_float+0x326>
 80043ac:	e689      	b.n	80040c2 <_printf_float+0xbe>
 80043ae:	9a05      	ldr	r2, [sp, #20]
 80043b0:	464b      	mov	r3, r9
 80043b2:	4442      	add	r2, r8
 80043b4:	4631      	mov	r1, r6
 80043b6:	4628      	mov	r0, r5
 80043b8:	47b8      	blx	r7
 80043ba:	3001      	adds	r0, #1
 80043bc:	d1c1      	bne.n	8004342 <_printf_float+0x33e>
 80043be:	e680      	b.n	80040c2 <_printf_float+0xbe>
 80043c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043c2:	2a01      	cmp	r2, #1
 80043c4:	dc01      	bgt.n	80043ca <_printf_float+0x3c6>
 80043c6:	07db      	lsls	r3, r3, #31
 80043c8:	d53a      	bpl.n	8004440 <_printf_float+0x43c>
 80043ca:	2301      	movs	r3, #1
 80043cc:	4642      	mov	r2, r8
 80043ce:	4631      	mov	r1, r6
 80043d0:	4628      	mov	r0, r5
 80043d2:	47b8      	blx	r7
 80043d4:	3001      	adds	r0, #1
 80043d6:	f43f ae74 	beq.w	80040c2 <_printf_float+0xbe>
 80043da:	ee18 3a10 	vmov	r3, s16
 80043de:	4652      	mov	r2, sl
 80043e0:	4631      	mov	r1, r6
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f ae6b 	beq.w	80040c2 <_printf_float+0xbe>
 80043ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043f0:	2200      	movs	r2, #0
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80043f8:	f7fc fb76 	bl	8000ae8 <__aeabi_dcmpeq>
 80043fc:	b9d8      	cbnz	r0, 8004436 <_printf_float+0x432>
 80043fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004402:	f108 0201 	add.w	r2, r8, #1
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	47b8      	blx	r7
 800440c:	3001      	adds	r0, #1
 800440e:	d10e      	bne.n	800442e <_printf_float+0x42a>
 8004410:	e657      	b.n	80040c2 <_printf_float+0xbe>
 8004412:	2301      	movs	r3, #1
 8004414:	4652      	mov	r2, sl
 8004416:	4631      	mov	r1, r6
 8004418:	4628      	mov	r0, r5
 800441a:	47b8      	blx	r7
 800441c:	3001      	adds	r0, #1
 800441e:	f43f ae50 	beq.w	80040c2 <_printf_float+0xbe>
 8004422:	f108 0801 	add.w	r8, r8, #1
 8004426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004428:	3b01      	subs	r3, #1
 800442a:	4543      	cmp	r3, r8
 800442c:	dcf1      	bgt.n	8004412 <_printf_float+0x40e>
 800442e:	464b      	mov	r3, r9
 8004430:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004434:	e6da      	b.n	80041ec <_printf_float+0x1e8>
 8004436:	f04f 0800 	mov.w	r8, #0
 800443a:	f104 0a1a 	add.w	sl, r4, #26
 800443e:	e7f2      	b.n	8004426 <_printf_float+0x422>
 8004440:	2301      	movs	r3, #1
 8004442:	4642      	mov	r2, r8
 8004444:	e7df      	b.n	8004406 <_printf_float+0x402>
 8004446:	2301      	movs	r3, #1
 8004448:	464a      	mov	r2, r9
 800444a:	4631      	mov	r1, r6
 800444c:	4628      	mov	r0, r5
 800444e:	47b8      	blx	r7
 8004450:	3001      	adds	r0, #1
 8004452:	f43f ae36 	beq.w	80040c2 <_printf_float+0xbe>
 8004456:	f108 0801 	add.w	r8, r8, #1
 800445a:	68e3      	ldr	r3, [r4, #12]
 800445c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800445e:	1a5b      	subs	r3, r3, r1
 8004460:	4543      	cmp	r3, r8
 8004462:	dcf0      	bgt.n	8004446 <_printf_float+0x442>
 8004464:	e6f8      	b.n	8004258 <_printf_float+0x254>
 8004466:	f04f 0800 	mov.w	r8, #0
 800446a:	f104 0919 	add.w	r9, r4, #25
 800446e:	e7f4      	b.n	800445a <_printf_float+0x456>

08004470 <_printf_common>:
 8004470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004474:	4616      	mov	r6, r2
 8004476:	4699      	mov	r9, r3
 8004478:	688a      	ldr	r2, [r1, #8]
 800447a:	690b      	ldr	r3, [r1, #16]
 800447c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004480:	4293      	cmp	r3, r2
 8004482:	bfb8      	it	lt
 8004484:	4613      	movlt	r3, r2
 8004486:	6033      	str	r3, [r6, #0]
 8004488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800448c:	4607      	mov	r7, r0
 800448e:	460c      	mov	r4, r1
 8004490:	b10a      	cbz	r2, 8004496 <_printf_common+0x26>
 8004492:	3301      	adds	r3, #1
 8004494:	6033      	str	r3, [r6, #0]
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	0699      	lsls	r1, r3, #26
 800449a:	bf42      	ittt	mi
 800449c:	6833      	ldrmi	r3, [r6, #0]
 800449e:	3302      	addmi	r3, #2
 80044a0:	6033      	strmi	r3, [r6, #0]
 80044a2:	6825      	ldr	r5, [r4, #0]
 80044a4:	f015 0506 	ands.w	r5, r5, #6
 80044a8:	d106      	bne.n	80044b8 <_printf_common+0x48>
 80044aa:	f104 0a19 	add.w	sl, r4, #25
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	6832      	ldr	r2, [r6, #0]
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	42ab      	cmp	r3, r5
 80044b6:	dc26      	bgt.n	8004506 <_printf_common+0x96>
 80044b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044bc:	1e13      	subs	r3, r2, #0
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	bf18      	it	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	0692      	lsls	r2, r2, #26
 80044c6:	d42b      	bmi.n	8004520 <_printf_common+0xb0>
 80044c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044cc:	4649      	mov	r1, r9
 80044ce:	4638      	mov	r0, r7
 80044d0:	47c0      	blx	r8
 80044d2:	3001      	adds	r0, #1
 80044d4:	d01e      	beq.n	8004514 <_printf_common+0xa4>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	6922      	ldr	r2, [r4, #16]
 80044da:	f003 0306 	and.w	r3, r3, #6
 80044de:	2b04      	cmp	r3, #4
 80044e0:	bf02      	ittt	eq
 80044e2:	68e5      	ldreq	r5, [r4, #12]
 80044e4:	6833      	ldreq	r3, [r6, #0]
 80044e6:	1aed      	subeq	r5, r5, r3
 80044e8:	68a3      	ldr	r3, [r4, #8]
 80044ea:	bf0c      	ite	eq
 80044ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044f0:	2500      	movne	r5, #0
 80044f2:	4293      	cmp	r3, r2
 80044f4:	bfc4      	itt	gt
 80044f6:	1a9b      	subgt	r3, r3, r2
 80044f8:	18ed      	addgt	r5, r5, r3
 80044fa:	2600      	movs	r6, #0
 80044fc:	341a      	adds	r4, #26
 80044fe:	42b5      	cmp	r5, r6
 8004500:	d11a      	bne.n	8004538 <_printf_common+0xc8>
 8004502:	2000      	movs	r0, #0
 8004504:	e008      	b.n	8004518 <_printf_common+0xa8>
 8004506:	2301      	movs	r3, #1
 8004508:	4652      	mov	r2, sl
 800450a:	4649      	mov	r1, r9
 800450c:	4638      	mov	r0, r7
 800450e:	47c0      	blx	r8
 8004510:	3001      	adds	r0, #1
 8004512:	d103      	bne.n	800451c <_printf_common+0xac>
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451c:	3501      	adds	r5, #1
 800451e:	e7c6      	b.n	80044ae <_printf_common+0x3e>
 8004520:	18e1      	adds	r1, r4, r3
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	2030      	movs	r0, #48	; 0x30
 8004526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800452a:	4422      	add	r2, r4
 800452c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004534:	3302      	adds	r3, #2
 8004536:	e7c7      	b.n	80044c8 <_printf_common+0x58>
 8004538:	2301      	movs	r3, #1
 800453a:	4622      	mov	r2, r4
 800453c:	4649      	mov	r1, r9
 800453e:	4638      	mov	r0, r7
 8004540:	47c0      	blx	r8
 8004542:	3001      	adds	r0, #1
 8004544:	d0e6      	beq.n	8004514 <_printf_common+0xa4>
 8004546:	3601      	adds	r6, #1
 8004548:	e7d9      	b.n	80044fe <_printf_common+0x8e>
	...

0800454c <_printf_i>:
 800454c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	7e0f      	ldrb	r7, [r1, #24]
 8004552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004554:	2f78      	cmp	r7, #120	; 0x78
 8004556:	4691      	mov	r9, r2
 8004558:	4680      	mov	r8, r0
 800455a:	460c      	mov	r4, r1
 800455c:	469a      	mov	sl, r3
 800455e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004562:	d807      	bhi.n	8004574 <_printf_i+0x28>
 8004564:	2f62      	cmp	r7, #98	; 0x62
 8004566:	d80a      	bhi.n	800457e <_printf_i+0x32>
 8004568:	2f00      	cmp	r7, #0
 800456a:	f000 80d4 	beq.w	8004716 <_printf_i+0x1ca>
 800456e:	2f58      	cmp	r7, #88	; 0x58
 8004570:	f000 80c0 	beq.w	80046f4 <_printf_i+0x1a8>
 8004574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800457c:	e03a      	b.n	80045f4 <_printf_i+0xa8>
 800457e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004582:	2b15      	cmp	r3, #21
 8004584:	d8f6      	bhi.n	8004574 <_printf_i+0x28>
 8004586:	a101      	add	r1, pc, #4	; (adr r1, 800458c <_printf_i+0x40>)
 8004588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800458c:	080045e5 	.word	0x080045e5
 8004590:	080045f9 	.word	0x080045f9
 8004594:	08004575 	.word	0x08004575
 8004598:	08004575 	.word	0x08004575
 800459c:	08004575 	.word	0x08004575
 80045a0:	08004575 	.word	0x08004575
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	08004575 	.word	0x08004575
 80045ac:	08004575 	.word	0x08004575
 80045b0:	08004575 	.word	0x08004575
 80045b4:	08004575 	.word	0x08004575
 80045b8:	080046fd 	.word	0x080046fd
 80045bc:	08004625 	.word	0x08004625
 80045c0:	080046b7 	.word	0x080046b7
 80045c4:	08004575 	.word	0x08004575
 80045c8:	08004575 	.word	0x08004575
 80045cc:	0800471f 	.word	0x0800471f
 80045d0:	08004575 	.word	0x08004575
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004575 	.word	0x08004575
 80045dc:	08004575 	.word	0x08004575
 80045e0:	080046bf 	.word	0x080046bf
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	1d1a      	adds	r2, r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	602a      	str	r2, [r5, #0]
 80045ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045f4:	2301      	movs	r3, #1
 80045f6:	e09f      	b.n	8004738 <_printf_i+0x1ec>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	682b      	ldr	r3, [r5, #0]
 80045fc:	0607      	lsls	r7, r0, #24
 80045fe:	f103 0104 	add.w	r1, r3, #4
 8004602:	6029      	str	r1, [r5, #0]
 8004604:	d501      	bpl.n	800460a <_printf_i+0xbe>
 8004606:	681e      	ldr	r6, [r3, #0]
 8004608:	e003      	b.n	8004612 <_printf_i+0xc6>
 800460a:	0646      	lsls	r6, r0, #25
 800460c:	d5fb      	bpl.n	8004606 <_printf_i+0xba>
 800460e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004612:	2e00      	cmp	r6, #0
 8004614:	da03      	bge.n	800461e <_printf_i+0xd2>
 8004616:	232d      	movs	r3, #45	; 0x2d
 8004618:	4276      	negs	r6, r6
 800461a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461e:	485a      	ldr	r0, [pc, #360]	; (8004788 <_printf_i+0x23c>)
 8004620:	230a      	movs	r3, #10
 8004622:	e012      	b.n	800464a <_printf_i+0xfe>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	6820      	ldr	r0, [r4, #0]
 8004628:	1d19      	adds	r1, r3, #4
 800462a:	6029      	str	r1, [r5, #0]
 800462c:	0605      	lsls	r5, r0, #24
 800462e:	d501      	bpl.n	8004634 <_printf_i+0xe8>
 8004630:	681e      	ldr	r6, [r3, #0]
 8004632:	e002      	b.n	800463a <_printf_i+0xee>
 8004634:	0641      	lsls	r1, r0, #25
 8004636:	d5fb      	bpl.n	8004630 <_printf_i+0xe4>
 8004638:	881e      	ldrh	r6, [r3, #0]
 800463a:	4853      	ldr	r0, [pc, #332]	; (8004788 <_printf_i+0x23c>)
 800463c:	2f6f      	cmp	r7, #111	; 0x6f
 800463e:	bf0c      	ite	eq
 8004640:	2308      	moveq	r3, #8
 8004642:	230a      	movne	r3, #10
 8004644:	2100      	movs	r1, #0
 8004646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800464a:	6865      	ldr	r5, [r4, #4]
 800464c:	60a5      	str	r5, [r4, #8]
 800464e:	2d00      	cmp	r5, #0
 8004650:	bfa2      	ittt	ge
 8004652:	6821      	ldrge	r1, [r4, #0]
 8004654:	f021 0104 	bicge.w	r1, r1, #4
 8004658:	6021      	strge	r1, [r4, #0]
 800465a:	b90e      	cbnz	r6, 8004660 <_printf_i+0x114>
 800465c:	2d00      	cmp	r5, #0
 800465e:	d04b      	beq.n	80046f8 <_printf_i+0x1ac>
 8004660:	4615      	mov	r5, r2
 8004662:	fbb6 f1f3 	udiv	r1, r6, r3
 8004666:	fb03 6711 	mls	r7, r3, r1, r6
 800466a:	5dc7      	ldrb	r7, [r0, r7]
 800466c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004670:	4637      	mov	r7, r6
 8004672:	42bb      	cmp	r3, r7
 8004674:	460e      	mov	r6, r1
 8004676:	d9f4      	bls.n	8004662 <_printf_i+0x116>
 8004678:	2b08      	cmp	r3, #8
 800467a:	d10b      	bne.n	8004694 <_printf_i+0x148>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	07de      	lsls	r6, r3, #31
 8004680:	d508      	bpl.n	8004694 <_printf_i+0x148>
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	6861      	ldr	r1, [r4, #4]
 8004686:	4299      	cmp	r1, r3
 8004688:	bfde      	ittt	le
 800468a:	2330      	movle	r3, #48	; 0x30
 800468c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004690:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004694:	1b52      	subs	r2, r2, r5
 8004696:	6122      	str	r2, [r4, #16]
 8004698:	f8cd a000 	str.w	sl, [sp]
 800469c:	464b      	mov	r3, r9
 800469e:	aa03      	add	r2, sp, #12
 80046a0:	4621      	mov	r1, r4
 80046a2:	4640      	mov	r0, r8
 80046a4:	f7ff fee4 	bl	8004470 <_printf_common>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d14a      	bne.n	8004742 <_printf_i+0x1f6>
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	b004      	add	sp, #16
 80046b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	f043 0320 	orr.w	r3, r3, #32
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	4833      	ldr	r0, [pc, #204]	; (800478c <_printf_i+0x240>)
 80046c0:	2778      	movs	r7, #120	; 0x78
 80046c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	6829      	ldr	r1, [r5, #0]
 80046ca:	061f      	lsls	r7, r3, #24
 80046cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80046d0:	d402      	bmi.n	80046d8 <_printf_i+0x18c>
 80046d2:	065f      	lsls	r7, r3, #25
 80046d4:	bf48      	it	mi
 80046d6:	b2b6      	uxthmi	r6, r6
 80046d8:	07df      	lsls	r7, r3, #31
 80046da:	bf48      	it	mi
 80046dc:	f043 0320 	orrmi.w	r3, r3, #32
 80046e0:	6029      	str	r1, [r5, #0]
 80046e2:	bf48      	it	mi
 80046e4:	6023      	strmi	r3, [r4, #0]
 80046e6:	b91e      	cbnz	r6, 80046f0 <_printf_i+0x1a4>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	f023 0320 	bic.w	r3, r3, #32
 80046ee:	6023      	str	r3, [r4, #0]
 80046f0:	2310      	movs	r3, #16
 80046f2:	e7a7      	b.n	8004644 <_printf_i+0xf8>
 80046f4:	4824      	ldr	r0, [pc, #144]	; (8004788 <_printf_i+0x23c>)
 80046f6:	e7e4      	b.n	80046c2 <_printf_i+0x176>
 80046f8:	4615      	mov	r5, r2
 80046fa:	e7bd      	b.n	8004678 <_printf_i+0x12c>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	6826      	ldr	r6, [r4, #0]
 8004700:	6961      	ldr	r1, [r4, #20]
 8004702:	1d18      	adds	r0, r3, #4
 8004704:	6028      	str	r0, [r5, #0]
 8004706:	0635      	lsls	r5, r6, #24
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	d501      	bpl.n	8004710 <_printf_i+0x1c4>
 800470c:	6019      	str	r1, [r3, #0]
 800470e:	e002      	b.n	8004716 <_printf_i+0x1ca>
 8004710:	0670      	lsls	r0, r6, #25
 8004712:	d5fb      	bpl.n	800470c <_printf_i+0x1c0>
 8004714:	8019      	strh	r1, [r3, #0]
 8004716:	2300      	movs	r3, #0
 8004718:	6123      	str	r3, [r4, #16]
 800471a:	4615      	mov	r5, r2
 800471c:	e7bc      	b.n	8004698 <_printf_i+0x14c>
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	1d1a      	adds	r2, r3, #4
 8004722:	602a      	str	r2, [r5, #0]
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	6862      	ldr	r2, [r4, #4]
 8004728:	2100      	movs	r1, #0
 800472a:	4628      	mov	r0, r5
 800472c:	f7fb fd60 	bl	80001f0 <memchr>
 8004730:	b108      	cbz	r0, 8004736 <_printf_i+0x1ea>
 8004732:	1b40      	subs	r0, r0, r5
 8004734:	6060      	str	r0, [r4, #4]
 8004736:	6863      	ldr	r3, [r4, #4]
 8004738:	6123      	str	r3, [r4, #16]
 800473a:	2300      	movs	r3, #0
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004740:	e7aa      	b.n	8004698 <_printf_i+0x14c>
 8004742:	6923      	ldr	r3, [r4, #16]
 8004744:	462a      	mov	r2, r5
 8004746:	4649      	mov	r1, r9
 8004748:	4640      	mov	r0, r8
 800474a:	47d0      	blx	sl
 800474c:	3001      	adds	r0, #1
 800474e:	d0ad      	beq.n	80046ac <_printf_i+0x160>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	079b      	lsls	r3, r3, #30
 8004754:	d413      	bmi.n	800477e <_printf_i+0x232>
 8004756:	68e0      	ldr	r0, [r4, #12]
 8004758:	9b03      	ldr	r3, [sp, #12]
 800475a:	4298      	cmp	r0, r3
 800475c:	bfb8      	it	lt
 800475e:	4618      	movlt	r0, r3
 8004760:	e7a6      	b.n	80046b0 <_printf_i+0x164>
 8004762:	2301      	movs	r3, #1
 8004764:	4632      	mov	r2, r6
 8004766:	4649      	mov	r1, r9
 8004768:	4640      	mov	r0, r8
 800476a:	47d0      	blx	sl
 800476c:	3001      	adds	r0, #1
 800476e:	d09d      	beq.n	80046ac <_printf_i+0x160>
 8004770:	3501      	adds	r5, #1
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	9903      	ldr	r1, [sp, #12]
 8004776:	1a5b      	subs	r3, r3, r1
 8004778:	42ab      	cmp	r3, r5
 800477a:	dcf2      	bgt.n	8004762 <_printf_i+0x216>
 800477c:	e7eb      	b.n	8004756 <_printf_i+0x20a>
 800477e:	2500      	movs	r5, #0
 8004780:	f104 0619 	add.w	r6, r4, #25
 8004784:	e7f5      	b.n	8004772 <_printf_i+0x226>
 8004786:	bf00      	nop
 8004788:	08006a8a 	.word	0x08006a8a
 800478c:	08006a9b 	.word	0x08006a9b

08004790 <__sflush_r>:
 8004790:	898a      	ldrh	r2, [r1, #12]
 8004792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004796:	4605      	mov	r5, r0
 8004798:	0710      	lsls	r0, r2, #28
 800479a:	460c      	mov	r4, r1
 800479c:	d458      	bmi.n	8004850 <__sflush_r+0xc0>
 800479e:	684b      	ldr	r3, [r1, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	dc05      	bgt.n	80047b0 <__sflush_r+0x20>
 80047a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	dc02      	bgt.n	80047b0 <__sflush_r+0x20>
 80047aa:	2000      	movs	r0, #0
 80047ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047b2:	2e00      	cmp	r6, #0
 80047b4:	d0f9      	beq.n	80047aa <__sflush_r+0x1a>
 80047b6:	2300      	movs	r3, #0
 80047b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047bc:	682f      	ldr	r7, [r5, #0]
 80047be:	6a21      	ldr	r1, [r4, #32]
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	d032      	beq.n	800482a <__sflush_r+0x9a>
 80047c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	075a      	lsls	r2, r3, #29
 80047ca:	d505      	bpl.n	80047d8 <__sflush_r+0x48>
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	1ac0      	subs	r0, r0, r3
 80047d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047d2:	b10b      	cbz	r3, 80047d8 <__sflush_r+0x48>
 80047d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047d6:	1ac0      	subs	r0, r0, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	4602      	mov	r2, r0
 80047dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047de:	6a21      	ldr	r1, [r4, #32]
 80047e0:	4628      	mov	r0, r5
 80047e2:	47b0      	blx	r6
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	d106      	bne.n	80047f8 <__sflush_r+0x68>
 80047ea:	6829      	ldr	r1, [r5, #0]
 80047ec:	291d      	cmp	r1, #29
 80047ee:	d82b      	bhi.n	8004848 <__sflush_r+0xb8>
 80047f0:	4a29      	ldr	r2, [pc, #164]	; (8004898 <__sflush_r+0x108>)
 80047f2:	410a      	asrs	r2, r1
 80047f4:	07d6      	lsls	r6, r2, #31
 80047f6:	d427      	bmi.n	8004848 <__sflush_r+0xb8>
 80047f8:	2200      	movs	r2, #0
 80047fa:	6062      	str	r2, [r4, #4]
 80047fc:	04d9      	lsls	r1, r3, #19
 80047fe:	6922      	ldr	r2, [r4, #16]
 8004800:	6022      	str	r2, [r4, #0]
 8004802:	d504      	bpl.n	800480e <__sflush_r+0x7e>
 8004804:	1c42      	adds	r2, r0, #1
 8004806:	d101      	bne.n	800480c <__sflush_r+0x7c>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	b903      	cbnz	r3, 800480e <__sflush_r+0x7e>
 800480c:	6560      	str	r0, [r4, #84]	; 0x54
 800480e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004810:	602f      	str	r7, [r5, #0]
 8004812:	2900      	cmp	r1, #0
 8004814:	d0c9      	beq.n	80047aa <__sflush_r+0x1a>
 8004816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800481a:	4299      	cmp	r1, r3
 800481c:	d002      	beq.n	8004824 <__sflush_r+0x94>
 800481e:	4628      	mov	r0, r5
 8004820:	f001 f984 	bl	8005b2c <_free_r>
 8004824:	2000      	movs	r0, #0
 8004826:	6360      	str	r0, [r4, #52]	; 0x34
 8004828:	e7c0      	b.n	80047ac <__sflush_r+0x1c>
 800482a:	2301      	movs	r3, #1
 800482c:	4628      	mov	r0, r5
 800482e:	47b0      	blx	r6
 8004830:	1c41      	adds	r1, r0, #1
 8004832:	d1c8      	bne.n	80047c6 <__sflush_r+0x36>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0c5      	beq.n	80047c6 <__sflush_r+0x36>
 800483a:	2b1d      	cmp	r3, #29
 800483c:	d001      	beq.n	8004842 <__sflush_r+0xb2>
 800483e:	2b16      	cmp	r3, #22
 8004840:	d101      	bne.n	8004846 <__sflush_r+0xb6>
 8004842:	602f      	str	r7, [r5, #0]
 8004844:	e7b1      	b.n	80047aa <__sflush_r+0x1a>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	e7ad      	b.n	80047ac <__sflush_r+0x1c>
 8004850:	690f      	ldr	r7, [r1, #16]
 8004852:	2f00      	cmp	r7, #0
 8004854:	d0a9      	beq.n	80047aa <__sflush_r+0x1a>
 8004856:	0793      	lsls	r3, r2, #30
 8004858:	680e      	ldr	r6, [r1, #0]
 800485a:	bf08      	it	eq
 800485c:	694b      	ldreq	r3, [r1, #20]
 800485e:	600f      	str	r7, [r1, #0]
 8004860:	bf18      	it	ne
 8004862:	2300      	movne	r3, #0
 8004864:	eba6 0807 	sub.w	r8, r6, r7
 8004868:	608b      	str	r3, [r1, #8]
 800486a:	f1b8 0f00 	cmp.w	r8, #0
 800486e:	dd9c      	ble.n	80047aa <__sflush_r+0x1a>
 8004870:	6a21      	ldr	r1, [r4, #32]
 8004872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004874:	4643      	mov	r3, r8
 8004876:	463a      	mov	r2, r7
 8004878:	4628      	mov	r0, r5
 800487a:	47b0      	blx	r6
 800487c:	2800      	cmp	r0, #0
 800487e:	dc06      	bgt.n	800488e <__sflush_r+0xfe>
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004886:	81a3      	strh	r3, [r4, #12]
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	e78e      	b.n	80047ac <__sflush_r+0x1c>
 800488e:	4407      	add	r7, r0
 8004890:	eba8 0800 	sub.w	r8, r8, r0
 8004894:	e7e9      	b.n	800486a <__sflush_r+0xda>
 8004896:	bf00      	nop
 8004898:	dfbffffe 	.word	0xdfbffffe

0800489c <_fflush_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	690b      	ldr	r3, [r1, #16]
 80048a0:	4605      	mov	r5, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	b913      	cbnz	r3, 80048ac <_fflush_r+0x10>
 80048a6:	2500      	movs	r5, #0
 80048a8:	4628      	mov	r0, r5
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	b118      	cbz	r0, 80048b6 <_fflush_r+0x1a>
 80048ae:	6a03      	ldr	r3, [r0, #32]
 80048b0:	b90b      	cbnz	r3, 80048b6 <_fflush_r+0x1a>
 80048b2:	f000 f8bb 	bl	8004a2c <__sinit>
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f3      	beq.n	80048a6 <_fflush_r+0xa>
 80048be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048c0:	07d0      	lsls	r0, r2, #31
 80048c2:	d404      	bmi.n	80048ce <_fflush_r+0x32>
 80048c4:	0599      	lsls	r1, r3, #22
 80048c6:	d402      	bmi.n	80048ce <_fflush_r+0x32>
 80048c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ca:	f000 fab0 	bl	8004e2e <__retarget_lock_acquire_recursive>
 80048ce:	4628      	mov	r0, r5
 80048d0:	4621      	mov	r1, r4
 80048d2:	f7ff ff5d 	bl	8004790 <__sflush_r>
 80048d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d8:	07da      	lsls	r2, r3, #31
 80048da:	4605      	mov	r5, r0
 80048dc:	d4e4      	bmi.n	80048a8 <_fflush_r+0xc>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	059b      	lsls	r3, r3, #22
 80048e2:	d4e1      	bmi.n	80048a8 <_fflush_r+0xc>
 80048e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e6:	f000 faa3 	bl	8004e30 <__retarget_lock_release_recursive>
 80048ea:	e7dd      	b.n	80048a8 <_fflush_r+0xc>

080048ec <fflush>:
 80048ec:	4601      	mov	r1, r0
 80048ee:	b920      	cbnz	r0, 80048fa <fflush+0xe>
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <fflush+0x18>)
 80048f2:	4905      	ldr	r1, [pc, #20]	; (8004908 <fflush+0x1c>)
 80048f4:	4805      	ldr	r0, [pc, #20]	; (800490c <fflush+0x20>)
 80048f6:	f000 b8b1 	b.w	8004a5c <_fwalk_sglue>
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <fflush+0x24>)
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	f7ff bfcd 	b.w	800489c <_fflush_r>
 8004902:	bf00      	nop
 8004904:	2000000c 	.word	0x2000000c
 8004908:	0800489d 	.word	0x0800489d
 800490c:	20000018 	.word	0x20000018
 8004910:	20000064 	.word	0x20000064

08004914 <std>:
 8004914:	2300      	movs	r3, #0
 8004916:	b510      	push	{r4, lr}
 8004918:	4604      	mov	r4, r0
 800491a:	e9c0 3300 	strd	r3, r3, [r0]
 800491e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004922:	6083      	str	r3, [r0, #8]
 8004924:	8181      	strh	r1, [r0, #12]
 8004926:	6643      	str	r3, [r0, #100]	; 0x64
 8004928:	81c2      	strh	r2, [r0, #14]
 800492a:	6183      	str	r3, [r0, #24]
 800492c:	4619      	mov	r1, r3
 800492e:	2208      	movs	r2, #8
 8004930:	305c      	adds	r0, #92	; 0x5c
 8004932:	f000 f9ff 	bl	8004d34 <memset>
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <std+0x58>)
 8004938:	6263      	str	r3, [r4, #36]	; 0x24
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <std+0x5c>)
 800493c:	62a3      	str	r3, [r4, #40]	; 0x28
 800493e:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <std+0x60>)
 8004940:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <std+0x64>)
 8004944:	6323      	str	r3, [r4, #48]	; 0x30
 8004946:	4b0d      	ldr	r3, [pc, #52]	; (800497c <std+0x68>)
 8004948:	6224      	str	r4, [r4, #32]
 800494a:	429c      	cmp	r4, r3
 800494c:	d006      	beq.n	800495c <std+0x48>
 800494e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004952:	4294      	cmp	r4, r2
 8004954:	d002      	beq.n	800495c <std+0x48>
 8004956:	33d0      	adds	r3, #208	; 0xd0
 8004958:	429c      	cmp	r4, r3
 800495a:	d105      	bne.n	8004968 <std+0x54>
 800495c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f000 ba62 	b.w	8004e2c <__retarget_lock_init_recursive>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	bf00      	nop
 800496c:	08004b85 	.word	0x08004b85
 8004970:	08004ba7 	.word	0x08004ba7
 8004974:	08004bdf 	.word	0x08004bdf
 8004978:	08004c03 	.word	0x08004c03
 800497c:	20000294 	.word	0x20000294

08004980 <stdio_exit_handler>:
 8004980:	4a02      	ldr	r2, [pc, #8]	; (800498c <stdio_exit_handler+0xc>)
 8004982:	4903      	ldr	r1, [pc, #12]	; (8004990 <stdio_exit_handler+0x10>)
 8004984:	4803      	ldr	r0, [pc, #12]	; (8004994 <stdio_exit_handler+0x14>)
 8004986:	f000 b869 	b.w	8004a5c <_fwalk_sglue>
 800498a:	bf00      	nop
 800498c:	2000000c 	.word	0x2000000c
 8004990:	0800489d 	.word	0x0800489d
 8004994:	20000018 	.word	0x20000018

08004998 <cleanup_stdio>:
 8004998:	6841      	ldr	r1, [r0, #4]
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <cleanup_stdio+0x34>)
 800499c:	4299      	cmp	r1, r3
 800499e:	b510      	push	{r4, lr}
 80049a0:	4604      	mov	r4, r0
 80049a2:	d001      	beq.n	80049a8 <cleanup_stdio+0x10>
 80049a4:	f7ff ff7a 	bl	800489c <_fflush_r>
 80049a8:	68a1      	ldr	r1, [r4, #8]
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <cleanup_stdio+0x38>)
 80049ac:	4299      	cmp	r1, r3
 80049ae:	d002      	beq.n	80049b6 <cleanup_stdio+0x1e>
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7ff ff73 	bl	800489c <_fflush_r>
 80049b6:	68e1      	ldr	r1, [r4, #12]
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <cleanup_stdio+0x3c>)
 80049ba:	4299      	cmp	r1, r3
 80049bc:	d004      	beq.n	80049c8 <cleanup_stdio+0x30>
 80049be:	4620      	mov	r0, r4
 80049c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c4:	f7ff bf6a 	b.w	800489c <_fflush_r>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	bf00      	nop
 80049cc:	20000294 	.word	0x20000294
 80049d0:	200002fc 	.word	0x200002fc
 80049d4:	20000364 	.word	0x20000364

080049d8 <global_stdio_init.part.0>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <global_stdio_init.part.0+0x30>)
 80049dc:	4c0b      	ldr	r4, [pc, #44]	; (8004a0c <global_stdio_init.part.0+0x34>)
 80049de:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <global_stdio_init.part.0+0x38>)
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	4620      	mov	r0, r4
 80049e4:	2200      	movs	r2, #0
 80049e6:	2104      	movs	r1, #4
 80049e8:	f7ff ff94 	bl	8004914 <std>
 80049ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80049f0:	2201      	movs	r2, #1
 80049f2:	2109      	movs	r1, #9
 80049f4:	f7ff ff8e 	bl	8004914 <std>
 80049f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80049fc:	2202      	movs	r2, #2
 80049fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a02:	2112      	movs	r1, #18
 8004a04:	f7ff bf86 	b.w	8004914 <std>
 8004a08:	200003cc 	.word	0x200003cc
 8004a0c:	20000294 	.word	0x20000294
 8004a10:	08004981 	.word	0x08004981

08004a14 <__sfp_lock_acquire>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__sfp_lock_acquire+0x8>)
 8004a16:	f000 ba0a 	b.w	8004e2e <__retarget_lock_acquire_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	200003d5 	.word	0x200003d5

08004a20 <__sfp_lock_release>:
 8004a20:	4801      	ldr	r0, [pc, #4]	; (8004a28 <__sfp_lock_release+0x8>)
 8004a22:	f000 ba05 	b.w	8004e30 <__retarget_lock_release_recursive>
 8004a26:	bf00      	nop
 8004a28:	200003d5 	.word	0x200003d5

08004a2c <__sinit>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	4604      	mov	r4, r0
 8004a30:	f7ff fff0 	bl	8004a14 <__sfp_lock_acquire>
 8004a34:	6a23      	ldr	r3, [r4, #32]
 8004a36:	b11b      	cbz	r3, 8004a40 <__sinit+0x14>
 8004a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3c:	f7ff bff0 	b.w	8004a20 <__sfp_lock_release>
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <__sinit+0x28>)
 8004a42:	6223      	str	r3, [r4, #32]
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <__sinit+0x2c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f5      	bne.n	8004a38 <__sinit+0xc>
 8004a4c:	f7ff ffc4 	bl	80049d8 <global_stdio_init.part.0>
 8004a50:	e7f2      	b.n	8004a38 <__sinit+0xc>
 8004a52:	bf00      	nop
 8004a54:	08004999 	.word	0x08004999
 8004a58:	200003cc 	.word	0x200003cc

08004a5c <_fwalk_sglue>:
 8004a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a60:	4607      	mov	r7, r0
 8004a62:	4688      	mov	r8, r1
 8004a64:	4614      	mov	r4, r2
 8004a66:	2600      	movs	r6, #0
 8004a68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a6c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a70:	d505      	bpl.n	8004a7e <_fwalk_sglue+0x22>
 8004a72:	6824      	ldr	r4, [r4, #0]
 8004a74:	2c00      	cmp	r4, #0
 8004a76:	d1f7      	bne.n	8004a68 <_fwalk_sglue+0xc>
 8004a78:	4630      	mov	r0, r6
 8004a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d907      	bls.n	8004a94 <_fwalk_sglue+0x38>
 8004a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	d003      	beq.n	8004a94 <_fwalk_sglue+0x38>
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	4306      	orrs	r6, r0
 8004a94:	3568      	adds	r5, #104	; 0x68
 8004a96:	e7e9      	b.n	8004a6c <_fwalk_sglue+0x10>

08004a98 <iprintf>:
 8004a98:	b40f      	push	{r0, r1, r2, r3}
 8004a9a:	b507      	push	{r0, r1, r2, lr}
 8004a9c:	4906      	ldr	r1, [pc, #24]	; (8004ab8 <iprintf+0x20>)
 8004a9e:	ab04      	add	r3, sp, #16
 8004aa0:	6808      	ldr	r0, [r1, #0]
 8004aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa6:	6881      	ldr	r1, [r0, #8]
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	f001 fce5 	bl	8006478 <_vfiprintf_r>
 8004aae:	b003      	add	sp, #12
 8004ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab4:	b004      	add	sp, #16
 8004ab6:	4770      	bx	lr
 8004ab8:	20000064 	.word	0x20000064

08004abc <putchar>:
 8004abc:	4b02      	ldr	r3, [pc, #8]	; (8004ac8 <putchar+0xc>)
 8004abe:	4601      	mov	r1, r0
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	6882      	ldr	r2, [r0, #8]
 8004ac4:	f001 be54 	b.w	8006770 <_putc_r>
 8004ac8:	20000064 	.word	0x20000064

08004acc <_puts_r>:
 8004acc:	6a03      	ldr	r3, [r0, #32]
 8004ace:	b570      	push	{r4, r5, r6, lr}
 8004ad0:	6884      	ldr	r4, [r0, #8]
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	460e      	mov	r6, r1
 8004ad6:	b90b      	cbnz	r3, 8004adc <_puts_r+0x10>
 8004ad8:	f7ff ffa8 	bl	8004a2c <__sinit>
 8004adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ade:	07db      	lsls	r3, r3, #31
 8004ae0:	d405      	bmi.n	8004aee <_puts_r+0x22>
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	0598      	lsls	r0, r3, #22
 8004ae6:	d402      	bmi.n	8004aee <_puts_r+0x22>
 8004ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aea:	f000 f9a0 	bl	8004e2e <__retarget_lock_acquire_recursive>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	0719      	lsls	r1, r3, #28
 8004af2:	d513      	bpl.n	8004b1c <_puts_r+0x50>
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	b18b      	cbz	r3, 8004b1c <_puts_r+0x50>
 8004af8:	3e01      	subs	r6, #1
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b00:	3b01      	subs	r3, #1
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	b9e9      	cbnz	r1, 8004b42 <_puts_r+0x76>
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	da2e      	bge.n	8004b68 <_puts_r+0x9c>
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	210a      	movs	r1, #10
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 f87b 	bl	8004c0a <__swbuf_r>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d007      	beq.n	8004b28 <_puts_r+0x5c>
 8004b18:	250a      	movs	r5, #10
 8004b1a:	e007      	b.n	8004b2c <_puts_r+0x60>
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 f8b0 	bl	8004c84 <__swsetup_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d0e7      	beq.n	8004af8 <_puts_r+0x2c>
 8004b28:	f04f 35ff 	mov.w	r5, #4294967295
 8004b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b2e:	07da      	lsls	r2, r3, #31
 8004b30:	d405      	bmi.n	8004b3e <_puts_r+0x72>
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	059b      	lsls	r3, r3, #22
 8004b36:	d402      	bmi.n	8004b3e <_puts_r+0x72>
 8004b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b3a:	f000 f979 	bl	8004e30 <__retarget_lock_release_recursive>
 8004b3e:	4628      	mov	r0, r5
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da04      	bge.n	8004b50 <_puts_r+0x84>
 8004b46:	69a2      	ldr	r2, [r4, #24]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	dc06      	bgt.n	8004b5a <_puts_r+0x8e>
 8004b4c:	290a      	cmp	r1, #10
 8004b4e:	d004      	beq.n	8004b5a <_puts_r+0x8e>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	7019      	strb	r1, [r3, #0]
 8004b58:	e7cf      	b.n	8004afa <_puts_r+0x2e>
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 f854 	bl	8004c0a <__swbuf_r>
 8004b62:	3001      	adds	r0, #1
 8004b64:	d1c9      	bne.n	8004afa <_puts_r+0x2e>
 8004b66:	e7df      	b.n	8004b28 <_puts_r+0x5c>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	250a      	movs	r5, #10
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	6022      	str	r2, [r4, #0]
 8004b70:	701d      	strb	r5, [r3, #0]
 8004b72:	e7db      	b.n	8004b2c <_puts_r+0x60>

08004b74 <puts>:
 8004b74:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <puts+0xc>)
 8004b76:	4601      	mov	r1, r0
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	f7ff bfa7 	b.w	8004acc <_puts_r>
 8004b7e:	bf00      	nop
 8004b80:	20000064 	.word	0x20000064

08004b84 <__sread>:
 8004b84:	b510      	push	{r4, lr}
 8004b86:	460c      	mov	r4, r1
 8004b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8c:	f000 f900 	bl	8004d90 <_read_r>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	bfab      	itete	ge
 8004b94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b96:	89a3      	ldrhlt	r3, [r4, #12]
 8004b98:	181b      	addge	r3, r3, r0
 8004b9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b9e:	bfac      	ite	ge
 8004ba0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ba2:	81a3      	strhlt	r3, [r4, #12]
 8004ba4:	bd10      	pop	{r4, pc}

08004ba6 <__swrite>:
 8004ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004baa:	461f      	mov	r7, r3
 8004bac:	898b      	ldrh	r3, [r1, #12]
 8004bae:	05db      	lsls	r3, r3, #23
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	4616      	mov	r6, r2
 8004bb6:	d505      	bpl.n	8004bc4 <__swrite+0x1e>
 8004bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f000 f8d4 	bl	8004d6c <_lseek_r>
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bce:	81a3      	strh	r3, [r4, #12]
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bda:	f000 b8eb 	b.w	8004db4 <_write_r>

08004bde <__sseek>:
 8004bde:	b510      	push	{r4, lr}
 8004be0:	460c      	mov	r4, r1
 8004be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be6:	f000 f8c1 	bl	8004d6c <_lseek_r>
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	bf15      	itete	ne
 8004bf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bfa:	81a3      	strheq	r3, [r4, #12]
 8004bfc:	bf18      	it	ne
 8004bfe:	81a3      	strhne	r3, [r4, #12]
 8004c00:	bd10      	pop	{r4, pc}

08004c02 <__sclose>:
 8004c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c06:	f000 b8a1 	b.w	8004d4c <_close_r>

08004c0a <__swbuf_r>:
 8004c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0c:	460e      	mov	r6, r1
 8004c0e:	4614      	mov	r4, r2
 8004c10:	4605      	mov	r5, r0
 8004c12:	b118      	cbz	r0, 8004c1c <__swbuf_r+0x12>
 8004c14:	6a03      	ldr	r3, [r0, #32]
 8004c16:	b90b      	cbnz	r3, 8004c1c <__swbuf_r+0x12>
 8004c18:	f7ff ff08 	bl	8004a2c <__sinit>
 8004c1c:	69a3      	ldr	r3, [r4, #24]
 8004c1e:	60a3      	str	r3, [r4, #8]
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	071a      	lsls	r2, r3, #28
 8004c24:	d525      	bpl.n	8004c72 <__swbuf_r+0x68>
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	b31b      	cbz	r3, 8004c72 <__swbuf_r+0x68>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	6922      	ldr	r2, [r4, #16]
 8004c2e:	1a98      	subs	r0, r3, r2
 8004c30:	6963      	ldr	r3, [r4, #20]
 8004c32:	b2f6      	uxtb	r6, r6
 8004c34:	4283      	cmp	r3, r0
 8004c36:	4637      	mov	r7, r6
 8004c38:	dc04      	bgt.n	8004c44 <__swbuf_r+0x3a>
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f7ff fe2d 	bl	800489c <_fflush_r>
 8004c42:	b9e0      	cbnz	r0, 8004c7e <__swbuf_r+0x74>
 8004c44:	68a3      	ldr	r3, [r4, #8]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	60a3      	str	r3, [r4, #8]
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	701e      	strb	r6, [r3, #0]
 8004c52:	6962      	ldr	r2, [r4, #20]
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d004      	beq.n	8004c64 <__swbuf_r+0x5a>
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	07db      	lsls	r3, r3, #31
 8004c5e:	d506      	bpl.n	8004c6e <__swbuf_r+0x64>
 8004c60:	2e0a      	cmp	r6, #10
 8004c62:	d104      	bne.n	8004c6e <__swbuf_r+0x64>
 8004c64:	4621      	mov	r1, r4
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7ff fe18 	bl	800489c <_fflush_r>
 8004c6c:	b938      	cbnz	r0, 8004c7e <__swbuf_r+0x74>
 8004c6e:	4638      	mov	r0, r7
 8004c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c72:	4621      	mov	r1, r4
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f805 	bl	8004c84 <__swsetup_r>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d0d5      	beq.n	8004c2a <__swbuf_r+0x20>
 8004c7e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c82:	e7f4      	b.n	8004c6e <__swbuf_r+0x64>

08004c84 <__swsetup_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <__swsetup_r+0xac>)
 8004c88:	4605      	mov	r5, r0
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	b118      	cbz	r0, 8004c98 <__swsetup_r+0x14>
 8004c90:	6a03      	ldr	r3, [r0, #32]
 8004c92:	b90b      	cbnz	r3, 8004c98 <__swsetup_r+0x14>
 8004c94:	f7ff feca 	bl	8004a2c <__sinit>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c9e:	0718      	lsls	r0, r3, #28
 8004ca0:	d422      	bmi.n	8004ce8 <__swsetup_r+0x64>
 8004ca2:	06d9      	lsls	r1, r3, #27
 8004ca4:	d407      	bmi.n	8004cb6 <__swsetup_r+0x32>
 8004ca6:	2309      	movs	r3, #9
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e034      	b.n	8004d20 <__swsetup_r+0x9c>
 8004cb6:	0758      	lsls	r0, r3, #29
 8004cb8:	d512      	bpl.n	8004ce0 <__swsetup_r+0x5c>
 8004cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cbc:	b141      	cbz	r1, 8004cd0 <__swsetup_r+0x4c>
 8004cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	d002      	beq.n	8004ccc <__swsetup_r+0x48>
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 ff30 	bl	8005b2c <_free_r>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6363      	str	r3, [r4, #52]	; 0x34
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cd6:	81a3      	strh	r3, [r4, #12]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	f043 0308 	orr.w	r3, r3, #8
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	6923      	ldr	r3, [r4, #16]
 8004cea:	b94b      	cbnz	r3, 8004d00 <__swsetup_r+0x7c>
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf6:	d003      	beq.n	8004d00 <__swsetup_r+0x7c>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f001 fcfc 	bl	80066f8 <__smakebuf_r>
 8004d00:	89a0      	ldrh	r0, [r4, #12]
 8004d02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d06:	f010 0301 	ands.w	r3, r0, #1
 8004d0a:	d00a      	beq.n	8004d22 <__swsetup_r+0x9e>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60a3      	str	r3, [r4, #8]
 8004d10:	6963      	ldr	r3, [r4, #20]
 8004d12:	425b      	negs	r3, r3
 8004d14:	61a3      	str	r3, [r4, #24]
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	b943      	cbnz	r3, 8004d2c <__swsetup_r+0xa8>
 8004d1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d1e:	d1c4      	bne.n	8004caa <__swsetup_r+0x26>
 8004d20:	bd38      	pop	{r3, r4, r5, pc}
 8004d22:	0781      	lsls	r1, r0, #30
 8004d24:	bf58      	it	pl
 8004d26:	6963      	ldrpl	r3, [r4, #20]
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	e7f4      	b.n	8004d16 <__swsetup_r+0x92>
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	e7f7      	b.n	8004d20 <__swsetup_r+0x9c>
 8004d30:	20000064 	.word	0x20000064

08004d34 <memset>:
 8004d34:	4402      	add	r2, r0
 8004d36:	4603      	mov	r3, r0
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d100      	bne.n	8004d3e <memset+0xa>
 8004d3c:	4770      	bx	lr
 8004d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d42:	e7f9      	b.n	8004d38 <memset+0x4>

08004d44 <_localeconv_r>:
 8004d44:	4800      	ldr	r0, [pc, #0]	; (8004d48 <_localeconv_r+0x4>)
 8004d46:	4770      	bx	lr
 8004d48:	20000158 	.word	0x20000158

08004d4c <_close_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	; (8004d68 <_close_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fc fb3d 	bl	80013d6 <_close>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_close_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_close_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	200003d0 	.word	0x200003d0

08004d6c <_lseek_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d07      	ldr	r5, [pc, #28]	; (8004d8c <_lseek_r+0x20>)
 8004d70:	4604      	mov	r4, r0
 8004d72:	4608      	mov	r0, r1
 8004d74:	4611      	mov	r1, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	602a      	str	r2, [r5, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fc fb52 	bl	8001424 <_lseek>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_lseek_r+0x1e>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_lseek_r+0x1e>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	200003d0 	.word	0x200003d0

08004d90 <_read_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4d07      	ldr	r5, [pc, #28]	; (8004db0 <_read_r+0x20>)
 8004d94:	4604      	mov	r4, r0
 8004d96:	4608      	mov	r0, r1
 8004d98:	4611      	mov	r1, r2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	602a      	str	r2, [r5, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f7fc fae0 	bl	8001364 <_read>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d102      	bne.n	8004dae <_read_r+0x1e>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	b103      	cbz	r3, 8004dae <_read_r+0x1e>
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	200003d0 	.word	0x200003d0

08004db4 <_write_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d07      	ldr	r5, [pc, #28]	; (8004dd4 <_write_r+0x20>)
 8004db8:	4604      	mov	r4, r0
 8004dba:	4608      	mov	r0, r1
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	602a      	str	r2, [r5, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f7fc faeb 	bl	800139e <_write>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d102      	bne.n	8004dd2 <_write_r+0x1e>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	b103      	cbz	r3, 8004dd2 <_write_r+0x1e>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	200003d0 	.word	0x200003d0

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000064 	.word	0x20000064

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4d0d      	ldr	r5, [pc, #52]	; (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1b64      	subs	r4, r4, r5
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2600      	movs	r6, #0
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4d0b      	ldr	r5, [pc, #44]	; (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	; (8004e28 <__libc_init_array+0x44>)
 8004df8:	f001 fde0 	bl	80069bc <_init>
 8004dfc:	1b64      	subs	r4, r4, r5
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2600      	movs	r6, #0
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	08006df4 	.word	0x08006df4
 8004e20:	08006df4 	.word	0x08006df4
 8004e24:	08006df4 	.word	0x08006df4
 8004e28:	08006df8 	.word	0x08006df8

08004e2c <__retarget_lock_init_recursive>:
 8004e2c:	4770      	bx	lr

08004e2e <__retarget_lock_acquire_recursive>:
 8004e2e:	4770      	bx	lr

08004e30 <__retarget_lock_release_recursive>:
 8004e30:	4770      	bx	lr

08004e32 <quorem>:
 8004e32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	6903      	ldr	r3, [r0, #16]
 8004e38:	690c      	ldr	r4, [r1, #16]
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	db7e      	blt.n	8004f3e <quorem+0x10c>
 8004e40:	3c01      	subs	r4, #1
 8004e42:	f101 0814 	add.w	r8, r1, #20
 8004e46:	f100 0514 	add.w	r5, r0, #20
 8004e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e64:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e68:	d331      	bcc.n	8004ece <quorem+0x9c>
 8004e6a:	f04f 0e00 	mov.w	lr, #0
 8004e6e:	4640      	mov	r0, r8
 8004e70:	46ac      	mov	ip, r5
 8004e72:	46f2      	mov	sl, lr
 8004e74:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e78:	b293      	uxth	r3, r2
 8004e7a:	fb06 e303 	mla	r3, r6, r3, lr
 8004e7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e82:	0c1a      	lsrs	r2, r3, #16
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	ebaa 0303 	sub.w	r3, sl, r3
 8004e8a:	f8dc a000 	ldr.w	sl, [ip]
 8004e8e:	fa13 f38a 	uxtah	r3, r3, sl
 8004e92:	fb06 220e 	mla	r2, r6, lr, r2
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	9b00      	ldr	r3, [sp, #0]
 8004e9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e9e:	b292      	uxth	r2, r2
 8004ea0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ea8:	f8bd 3000 	ldrh.w	r3, [sp]
 8004eac:	4581      	cmp	r9, r0
 8004eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eb2:	f84c 3b04 	str.w	r3, [ip], #4
 8004eb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004eba:	d2db      	bcs.n	8004e74 <quorem+0x42>
 8004ebc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ec0:	b92b      	cbnz	r3, 8004ece <quorem+0x9c>
 8004ec2:	9b01      	ldr	r3, [sp, #4]
 8004ec4:	3b04      	subs	r3, #4
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	d32c      	bcc.n	8004f26 <quorem+0xf4>
 8004ecc:	613c      	str	r4, [r7, #16]
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f001 f9a8 	bl	8006224 <__mcmp>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	db22      	blt.n	8004f1e <quorem+0xec>
 8004ed8:	3601      	adds	r6, #1
 8004eda:	4629      	mov	r1, r5
 8004edc:	2000      	movs	r0, #0
 8004ede:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ee2:	f8d1 c000 	ldr.w	ip, [r1]
 8004ee6:	b293      	uxth	r3, r2
 8004ee8:	1ac3      	subs	r3, r0, r3
 8004eea:	0c12      	lsrs	r2, r2, #16
 8004eec:	fa13 f38c 	uxtah	r3, r3, ip
 8004ef0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004ef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004efe:	45c1      	cmp	r9, r8
 8004f00:	f841 3b04 	str.w	r3, [r1], #4
 8004f04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f08:	d2e9      	bcs.n	8004ede <quorem+0xac>
 8004f0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f12:	b922      	cbnz	r2, 8004f1e <quorem+0xec>
 8004f14:	3b04      	subs	r3, #4
 8004f16:	429d      	cmp	r5, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	d30a      	bcc.n	8004f32 <quorem+0x100>
 8004f1c:	613c      	str	r4, [r7, #16]
 8004f1e:	4630      	mov	r0, r6
 8004f20:	b003      	add	sp, #12
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	d1ce      	bne.n	8004ecc <quorem+0x9a>
 8004f2e:	3c01      	subs	r4, #1
 8004f30:	e7c9      	b.n	8004ec6 <quorem+0x94>
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	3b04      	subs	r3, #4
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	d1f0      	bne.n	8004f1c <quorem+0xea>
 8004f3a:	3c01      	subs	r4, #1
 8004f3c:	e7eb      	b.n	8004f16 <quorem+0xe4>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e7ee      	b.n	8004f20 <quorem+0xee>
 8004f42:	0000      	movs	r0, r0
 8004f44:	0000      	movs	r0, r0
	...

08004f48 <_dtoa_r>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	ed2d 8b04 	vpush	{d8-d9}
 8004f50:	69c5      	ldr	r5, [r0, #28]
 8004f52:	b093      	sub	sp, #76	; 0x4c
 8004f54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f58:	ec57 6b10 	vmov	r6, r7, d0
 8004f5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f60:	9107      	str	r1, [sp, #28]
 8004f62:	4604      	mov	r4, r0
 8004f64:	920a      	str	r2, [sp, #40]	; 0x28
 8004f66:	930d      	str	r3, [sp, #52]	; 0x34
 8004f68:	b975      	cbnz	r5, 8004f88 <_dtoa_r+0x40>
 8004f6a:	2010      	movs	r0, #16
 8004f6c:	f000 fe2a 	bl	8005bc4 <malloc>
 8004f70:	4602      	mov	r2, r0
 8004f72:	61e0      	str	r0, [r4, #28]
 8004f74:	b920      	cbnz	r0, 8004f80 <_dtoa_r+0x38>
 8004f76:	4bae      	ldr	r3, [pc, #696]	; (8005230 <_dtoa_r+0x2e8>)
 8004f78:	21ef      	movs	r1, #239	; 0xef
 8004f7a:	48ae      	ldr	r0, [pc, #696]	; (8005234 <_dtoa_r+0x2ec>)
 8004f7c:	f001 fc6c 	bl	8006858 <__assert_func>
 8004f80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f84:	6005      	str	r5, [r0, #0]
 8004f86:	60c5      	str	r5, [r0, #12]
 8004f88:	69e3      	ldr	r3, [r4, #28]
 8004f8a:	6819      	ldr	r1, [r3, #0]
 8004f8c:	b151      	cbz	r1, 8004fa4 <_dtoa_r+0x5c>
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	604a      	str	r2, [r1, #4]
 8004f92:	2301      	movs	r3, #1
 8004f94:	4093      	lsls	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 ff07 	bl	8005dac <_Bfree>
 8004f9e:	69e3      	ldr	r3, [r4, #28]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	1e3b      	subs	r3, r7, #0
 8004fa6:	bfbb      	ittet	lt
 8004fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fac:	9303      	strlt	r3, [sp, #12]
 8004fae:	2300      	movge	r3, #0
 8004fb0:	2201      	movlt	r2, #1
 8004fb2:	bfac      	ite	ge
 8004fb4:	f8c8 3000 	strge.w	r3, [r8]
 8004fb8:	f8c8 2000 	strlt.w	r2, [r8]
 8004fbc:	4b9e      	ldr	r3, [pc, #632]	; (8005238 <_dtoa_r+0x2f0>)
 8004fbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004fc2:	ea33 0308 	bics.w	r3, r3, r8
 8004fc6:	d11b      	bne.n	8005000 <_dtoa_r+0xb8>
 8004fc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fca:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004fd4:	4333      	orrs	r3, r6
 8004fd6:	f000 8593 	beq.w	8005b00 <_dtoa_r+0xbb8>
 8004fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fdc:	b963      	cbnz	r3, 8004ff8 <_dtoa_r+0xb0>
 8004fde:	4b97      	ldr	r3, [pc, #604]	; (800523c <_dtoa_r+0x2f4>)
 8004fe0:	e027      	b.n	8005032 <_dtoa_r+0xea>
 8004fe2:	4b97      	ldr	r3, [pc, #604]	; (8005240 <_dtoa_r+0x2f8>)
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	9800      	ldr	r0, [sp, #0]
 8004fee:	b013      	add	sp, #76	; 0x4c
 8004ff0:	ecbd 8b04 	vpop	{d8-d9}
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	4b90      	ldr	r3, [pc, #576]	; (800523c <_dtoa_r+0x2f4>)
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	3303      	adds	r3, #3
 8004ffe:	e7f3      	b.n	8004fe8 <_dtoa_r+0xa0>
 8005000:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005004:	2200      	movs	r2, #0
 8005006:	ec51 0b17 	vmov	r0, r1, d7
 800500a:	eeb0 8a47 	vmov.f32	s16, s14
 800500e:	eef0 8a67 	vmov.f32	s17, s15
 8005012:	2300      	movs	r3, #0
 8005014:	f7fb fd68 	bl	8000ae8 <__aeabi_dcmpeq>
 8005018:	4681      	mov	r9, r0
 800501a:	b160      	cbz	r0, 8005036 <_dtoa_r+0xee>
 800501c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800501e:	2301      	movs	r3, #1
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8568 	beq.w	8005afa <_dtoa_r+0xbb2>
 800502a:	4b86      	ldr	r3, [pc, #536]	; (8005244 <_dtoa_r+0x2fc>)
 800502c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	3b01      	subs	r3, #1
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	e7da      	b.n	8004fec <_dtoa_r+0xa4>
 8005036:	aa10      	add	r2, sp, #64	; 0x40
 8005038:	a911      	add	r1, sp, #68	; 0x44
 800503a:	4620      	mov	r0, r4
 800503c:	eeb0 0a48 	vmov.f32	s0, s16
 8005040:	eef0 0a68 	vmov.f32	s1, s17
 8005044:	f001 f994 	bl	8006370 <__d2b>
 8005048:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800504c:	4682      	mov	sl, r0
 800504e:	2d00      	cmp	r5, #0
 8005050:	d07f      	beq.n	8005152 <_dtoa_r+0x20a>
 8005052:	ee18 3a90 	vmov	r3, s17
 8005056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800505a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800505e:	ec51 0b18 	vmov	r0, r1, d8
 8005062:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800506a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800506e:	4619      	mov	r1, r3
 8005070:	2200      	movs	r2, #0
 8005072:	4b75      	ldr	r3, [pc, #468]	; (8005248 <_dtoa_r+0x300>)
 8005074:	f7fb f918 	bl	80002a8 <__aeabi_dsub>
 8005078:	a367      	add	r3, pc, #412	; (adr r3, 8005218 <_dtoa_r+0x2d0>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb facb 	bl	8000618 <__aeabi_dmul>
 8005082:	a367      	add	r3, pc, #412	; (adr r3, 8005220 <_dtoa_r+0x2d8>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb f910 	bl	80002ac <__adddf3>
 800508c:	4606      	mov	r6, r0
 800508e:	4628      	mov	r0, r5
 8005090:	460f      	mov	r7, r1
 8005092:	f7fb fa57 	bl	8000544 <__aeabi_i2d>
 8005096:	a364      	add	r3, pc, #400	; (adr r3, 8005228 <_dtoa_r+0x2e0>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f7fb fabc 	bl	8000618 <__aeabi_dmul>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4630      	mov	r0, r6
 80050a6:	4639      	mov	r1, r7
 80050a8:	f7fb f900 	bl	80002ac <__adddf3>
 80050ac:	4606      	mov	r6, r0
 80050ae:	460f      	mov	r7, r1
 80050b0:	f7fb fd62 	bl	8000b78 <__aeabi_d2iz>
 80050b4:	2200      	movs	r2, #0
 80050b6:	4683      	mov	fp, r0
 80050b8:	2300      	movs	r3, #0
 80050ba:	4630      	mov	r0, r6
 80050bc:	4639      	mov	r1, r7
 80050be:	f7fb fd1d 	bl	8000afc <__aeabi_dcmplt>
 80050c2:	b148      	cbz	r0, 80050d8 <_dtoa_r+0x190>
 80050c4:	4658      	mov	r0, fp
 80050c6:	f7fb fa3d 	bl	8000544 <__aeabi_i2d>
 80050ca:	4632      	mov	r2, r6
 80050cc:	463b      	mov	r3, r7
 80050ce:	f7fb fd0b 	bl	8000ae8 <__aeabi_dcmpeq>
 80050d2:	b908      	cbnz	r0, 80050d8 <_dtoa_r+0x190>
 80050d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050d8:	f1bb 0f16 	cmp.w	fp, #22
 80050dc:	d857      	bhi.n	800518e <_dtoa_r+0x246>
 80050de:	4b5b      	ldr	r3, [pc, #364]	; (800524c <_dtoa_r+0x304>)
 80050e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	ec51 0b18 	vmov	r0, r1, d8
 80050ec:	f7fb fd06 	bl	8000afc <__aeabi_dcmplt>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d04e      	beq.n	8005192 <_dtoa_r+0x24a>
 80050f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050f8:	2300      	movs	r3, #0
 80050fa:	930c      	str	r3, [sp, #48]	; 0x30
 80050fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050fe:	1b5b      	subs	r3, r3, r5
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	bf45      	ittet	mi
 8005104:	f1c3 0301 	rsbmi	r3, r3, #1
 8005108:	9305      	strmi	r3, [sp, #20]
 800510a:	2300      	movpl	r3, #0
 800510c:	2300      	movmi	r3, #0
 800510e:	9206      	str	r2, [sp, #24]
 8005110:	bf54      	ite	pl
 8005112:	9305      	strpl	r3, [sp, #20]
 8005114:	9306      	strmi	r3, [sp, #24]
 8005116:	f1bb 0f00 	cmp.w	fp, #0
 800511a:	db3c      	blt.n	8005196 <_dtoa_r+0x24e>
 800511c:	9b06      	ldr	r3, [sp, #24]
 800511e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005122:	445b      	add	r3, fp
 8005124:	9306      	str	r3, [sp, #24]
 8005126:	2300      	movs	r3, #0
 8005128:	9308      	str	r3, [sp, #32]
 800512a:	9b07      	ldr	r3, [sp, #28]
 800512c:	2b09      	cmp	r3, #9
 800512e:	d868      	bhi.n	8005202 <_dtoa_r+0x2ba>
 8005130:	2b05      	cmp	r3, #5
 8005132:	bfc4      	itt	gt
 8005134:	3b04      	subgt	r3, #4
 8005136:	9307      	strgt	r3, [sp, #28]
 8005138:	9b07      	ldr	r3, [sp, #28]
 800513a:	f1a3 0302 	sub.w	r3, r3, #2
 800513e:	bfcc      	ite	gt
 8005140:	2500      	movgt	r5, #0
 8005142:	2501      	movle	r5, #1
 8005144:	2b03      	cmp	r3, #3
 8005146:	f200 8085 	bhi.w	8005254 <_dtoa_r+0x30c>
 800514a:	e8df f003 	tbb	[pc, r3]
 800514e:	3b2e      	.short	0x3b2e
 8005150:	5839      	.short	0x5839
 8005152:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005156:	441d      	add	r5, r3
 8005158:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800515c:	2b20      	cmp	r3, #32
 800515e:	bfc1      	itttt	gt
 8005160:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005164:	fa08 f803 	lslgt.w	r8, r8, r3
 8005168:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800516c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005170:	bfd6      	itet	le
 8005172:	f1c3 0320 	rsble	r3, r3, #32
 8005176:	ea48 0003 	orrgt.w	r0, r8, r3
 800517a:	fa06 f003 	lslle.w	r0, r6, r3
 800517e:	f7fb f9d1 	bl	8000524 <__aeabi_ui2d>
 8005182:	2201      	movs	r2, #1
 8005184:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005188:	3d01      	subs	r5, #1
 800518a:	920e      	str	r2, [sp, #56]	; 0x38
 800518c:	e76f      	b.n	800506e <_dtoa_r+0x126>
 800518e:	2301      	movs	r3, #1
 8005190:	e7b3      	b.n	80050fa <_dtoa_r+0x1b2>
 8005192:	900c      	str	r0, [sp, #48]	; 0x30
 8005194:	e7b2      	b.n	80050fc <_dtoa_r+0x1b4>
 8005196:	9b05      	ldr	r3, [sp, #20]
 8005198:	eba3 030b 	sub.w	r3, r3, fp
 800519c:	9305      	str	r3, [sp, #20]
 800519e:	f1cb 0300 	rsb	r3, fp, #0
 80051a2:	9308      	str	r3, [sp, #32]
 80051a4:	2300      	movs	r3, #0
 80051a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a8:	e7bf      	b.n	800512a <_dtoa_r+0x1e2>
 80051aa:	2300      	movs	r3, #0
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	dc52      	bgt.n	800525a <_dtoa_r+0x312>
 80051b4:	2301      	movs	r3, #1
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	461a      	mov	r2, r3
 80051bc:	920a      	str	r2, [sp, #40]	; 0x28
 80051be:	e00b      	b.n	80051d8 <_dtoa_r+0x290>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e7f3      	b.n	80051ac <_dtoa_r+0x264>
 80051c4:	2300      	movs	r3, #0
 80051c6:	9309      	str	r3, [sp, #36]	; 0x24
 80051c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ca:	445b      	add	r3, fp
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	3301      	adds	r3, #1
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	9304      	str	r3, [sp, #16]
 80051d4:	bfb8      	it	lt
 80051d6:	2301      	movlt	r3, #1
 80051d8:	69e0      	ldr	r0, [r4, #28]
 80051da:	2100      	movs	r1, #0
 80051dc:	2204      	movs	r2, #4
 80051de:	f102 0614 	add.w	r6, r2, #20
 80051e2:	429e      	cmp	r6, r3
 80051e4:	d93d      	bls.n	8005262 <_dtoa_r+0x31a>
 80051e6:	6041      	str	r1, [r0, #4]
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 fd9f 	bl	8005d2c <_Balloc>
 80051ee:	9000      	str	r0, [sp, #0]
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d139      	bne.n	8005268 <_dtoa_r+0x320>
 80051f4:	4b16      	ldr	r3, [pc, #88]	; (8005250 <_dtoa_r+0x308>)
 80051f6:	4602      	mov	r2, r0
 80051f8:	f240 11af 	movw	r1, #431	; 0x1af
 80051fc:	e6bd      	b.n	8004f7a <_dtoa_r+0x32>
 80051fe:	2301      	movs	r3, #1
 8005200:	e7e1      	b.n	80051c6 <_dtoa_r+0x27e>
 8005202:	2501      	movs	r5, #1
 8005204:	2300      	movs	r3, #0
 8005206:	9307      	str	r3, [sp, #28]
 8005208:	9509      	str	r5, [sp, #36]	; 0x24
 800520a:	f04f 33ff 	mov.w	r3, #4294967295
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	2200      	movs	r2, #0
 8005214:	2312      	movs	r3, #18
 8005216:	e7d1      	b.n	80051bc <_dtoa_r+0x274>
 8005218:	636f4361 	.word	0x636f4361
 800521c:	3fd287a7 	.word	0x3fd287a7
 8005220:	8b60c8b3 	.word	0x8b60c8b3
 8005224:	3fc68a28 	.word	0x3fc68a28
 8005228:	509f79fb 	.word	0x509f79fb
 800522c:	3fd34413 	.word	0x3fd34413
 8005230:	08006ab9 	.word	0x08006ab9
 8005234:	08006ad0 	.word	0x08006ad0
 8005238:	7ff00000 	.word	0x7ff00000
 800523c:	08006ab5 	.word	0x08006ab5
 8005240:	08006aac 	.word	0x08006aac
 8005244:	08006a89 	.word	0x08006a89
 8005248:	3ff80000 	.word	0x3ff80000
 800524c:	08006bc0 	.word	0x08006bc0
 8005250:	08006b28 	.word	0x08006b28
 8005254:	2301      	movs	r3, #1
 8005256:	9309      	str	r3, [sp, #36]	; 0x24
 8005258:	e7d7      	b.n	800520a <_dtoa_r+0x2c2>
 800525a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	9304      	str	r3, [sp, #16]
 8005260:	e7ba      	b.n	80051d8 <_dtoa_r+0x290>
 8005262:	3101      	adds	r1, #1
 8005264:	0052      	lsls	r2, r2, #1
 8005266:	e7ba      	b.n	80051de <_dtoa_r+0x296>
 8005268:	69e3      	ldr	r3, [r4, #28]
 800526a:	9a00      	ldr	r2, [sp, #0]
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	9b04      	ldr	r3, [sp, #16]
 8005270:	2b0e      	cmp	r3, #14
 8005272:	f200 80a8 	bhi.w	80053c6 <_dtoa_r+0x47e>
 8005276:	2d00      	cmp	r5, #0
 8005278:	f000 80a5 	beq.w	80053c6 <_dtoa_r+0x47e>
 800527c:	f1bb 0f00 	cmp.w	fp, #0
 8005280:	dd38      	ble.n	80052f4 <_dtoa_r+0x3ac>
 8005282:	4bc0      	ldr	r3, [pc, #768]	; (8005584 <_dtoa_r+0x63c>)
 8005284:	f00b 020f 	and.w	r2, fp, #15
 8005288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800528c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005290:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005294:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005298:	d019      	beq.n	80052ce <_dtoa_r+0x386>
 800529a:	4bbb      	ldr	r3, [pc, #748]	; (8005588 <_dtoa_r+0x640>)
 800529c:	ec51 0b18 	vmov	r0, r1, d8
 80052a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052a4:	f7fb fae2 	bl	800086c <__aeabi_ddiv>
 80052a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ac:	f008 080f 	and.w	r8, r8, #15
 80052b0:	2503      	movs	r5, #3
 80052b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005588 <_dtoa_r+0x640>
 80052b6:	f1b8 0f00 	cmp.w	r8, #0
 80052ba:	d10a      	bne.n	80052d2 <_dtoa_r+0x38a>
 80052bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c0:	4632      	mov	r2, r6
 80052c2:	463b      	mov	r3, r7
 80052c4:	f7fb fad2 	bl	800086c <__aeabi_ddiv>
 80052c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052cc:	e02b      	b.n	8005326 <_dtoa_r+0x3de>
 80052ce:	2502      	movs	r5, #2
 80052d0:	e7ef      	b.n	80052b2 <_dtoa_r+0x36a>
 80052d2:	f018 0f01 	tst.w	r8, #1
 80052d6:	d008      	beq.n	80052ea <_dtoa_r+0x3a2>
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80052e0:	f7fb f99a 	bl	8000618 <__aeabi_dmul>
 80052e4:	3501      	adds	r5, #1
 80052e6:	4606      	mov	r6, r0
 80052e8:	460f      	mov	r7, r1
 80052ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80052ee:	f109 0908 	add.w	r9, r9, #8
 80052f2:	e7e0      	b.n	80052b6 <_dtoa_r+0x36e>
 80052f4:	f000 809f 	beq.w	8005436 <_dtoa_r+0x4ee>
 80052f8:	f1cb 0600 	rsb	r6, fp, #0
 80052fc:	4ba1      	ldr	r3, [pc, #644]	; (8005584 <_dtoa_r+0x63c>)
 80052fe:	4fa2      	ldr	r7, [pc, #648]	; (8005588 <_dtoa_r+0x640>)
 8005300:	f006 020f 	and.w	r2, r6, #15
 8005304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	ec51 0b18 	vmov	r0, r1, d8
 8005310:	f7fb f982 	bl	8000618 <__aeabi_dmul>
 8005314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005318:	1136      	asrs	r6, r6, #4
 800531a:	2300      	movs	r3, #0
 800531c:	2502      	movs	r5, #2
 800531e:	2e00      	cmp	r6, #0
 8005320:	d17e      	bne.n	8005420 <_dtoa_r+0x4d8>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1d0      	bne.n	80052c8 <_dtoa_r+0x380>
 8005326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005328:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8084 	beq.w	800543a <_dtoa_r+0x4f2>
 8005332:	4b96      	ldr	r3, [pc, #600]	; (800558c <_dtoa_r+0x644>)
 8005334:	2200      	movs	r2, #0
 8005336:	4640      	mov	r0, r8
 8005338:	4649      	mov	r1, r9
 800533a:	f7fb fbdf 	bl	8000afc <__aeabi_dcmplt>
 800533e:	2800      	cmp	r0, #0
 8005340:	d07b      	beq.n	800543a <_dtoa_r+0x4f2>
 8005342:	9b04      	ldr	r3, [sp, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d078      	beq.n	800543a <_dtoa_r+0x4f2>
 8005348:	9b01      	ldr	r3, [sp, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	dd39      	ble.n	80053c2 <_dtoa_r+0x47a>
 800534e:	4b90      	ldr	r3, [pc, #576]	; (8005590 <_dtoa_r+0x648>)
 8005350:	2200      	movs	r2, #0
 8005352:	4640      	mov	r0, r8
 8005354:	4649      	mov	r1, r9
 8005356:	f7fb f95f 	bl	8000618 <__aeabi_dmul>
 800535a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800535e:	9e01      	ldr	r6, [sp, #4]
 8005360:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005364:	3501      	adds	r5, #1
 8005366:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800536a:	4628      	mov	r0, r5
 800536c:	f7fb f8ea 	bl	8000544 <__aeabi_i2d>
 8005370:	4642      	mov	r2, r8
 8005372:	464b      	mov	r3, r9
 8005374:	f7fb f950 	bl	8000618 <__aeabi_dmul>
 8005378:	4b86      	ldr	r3, [pc, #536]	; (8005594 <_dtoa_r+0x64c>)
 800537a:	2200      	movs	r2, #0
 800537c:	f7fa ff96 	bl	80002ac <__adddf3>
 8005380:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	2e00      	cmp	r6, #0
 800538c:	d158      	bne.n	8005440 <_dtoa_r+0x4f8>
 800538e:	4b82      	ldr	r3, [pc, #520]	; (8005598 <_dtoa_r+0x650>)
 8005390:	2200      	movs	r2, #0
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	f7fa ff87 	bl	80002a8 <__aeabi_dsub>
 800539a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800539e:	4680      	mov	r8, r0
 80053a0:	4689      	mov	r9, r1
 80053a2:	f7fb fbc9 	bl	8000b38 <__aeabi_dcmpgt>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	f040 8296 	bne.w	80058d8 <_dtoa_r+0x990>
 80053ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80053b0:	4640      	mov	r0, r8
 80053b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053b6:	4649      	mov	r1, r9
 80053b8:	f7fb fba0 	bl	8000afc <__aeabi_dcmplt>
 80053bc:	2800      	cmp	r0, #0
 80053be:	f040 8289 	bne.w	80058d4 <_dtoa_r+0x98c>
 80053c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80053c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f2c0 814e 	blt.w	800566a <_dtoa_r+0x722>
 80053ce:	f1bb 0f0e 	cmp.w	fp, #14
 80053d2:	f300 814a 	bgt.w	800566a <_dtoa_r+0x722>
 80053d6:	4b6b      	ldr	r3, [pc, #428]	; (8005584 <_dtoa_r+0x63c>)
 80053d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f280 80dc 	bge.w	80055a0 <_dtoa_r+0x658>
 80053e8:	9b04      	ldr	r3, [sp, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f300 80d8 	bgt.w	80055a0 <_dtoa_r+0x658>
 80053f0:	f040 826f 	bne.w	80058d2 <_dtoa_r+0x98a>
 80053f4:	4b68      	ldr	r3, [pc, #416]	; (8005598 <_dtoa_r+0x650>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	4640      	mov	r0, r8
 80053fa:	4649      	mov	r1, r9
 80053fc:	f7fb f90c 	bl	8000618 <__aeabi_dmul>
 8005400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005404:	f7fb fb8e 	bl	8000b24 <__aeabi_dcmpge>
 8005408:	9e04      	ldr	r6, [sp, #16]
 800540a:	4637      	mov	r7, r6
 800540c:	2800      	cmp	r0, #0
 800540e:	f040 8245 	bne.w	800589c <_dtoa_r+0x954>
 8005412:	9d00      	ldr	r5, [sp, #0]
 8005414:	2331      	movs	r3, #49	; 0x31
 8005416:	f805 3b01 	strb.w	r3, [r5], #1
 800541a:	f10b 0b01 	add.w	fp, fp, #1
 800541e:	e241      	b.n	80058a4 <_dtoa_r+0x95c>
 8005420:	07f2      	lsls	r2, r6, #31
 8005422:	d505      	bpl.n	8005430 <_dtoa_r+0x4e8>
 8005424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005428:	f7fb f8f6 	bl	8000618 <__aeabi_dmul>
 800542c:	3501      	adds	r5, #1
 800542e:	2301      	movs	r3, #1
 8005430:	1076      	asrs	r6, r6, #1
 8005432:	3708      	adds	r7, #8
 8005434:	e773      	b.n	800531e <_dtoa_r+0x3d6>
 8005436:	2502      	movs	r5, #2
 8005438:	e775      	b.n	8005326 <_dtoa_r+0x3de>
 800543a:	9e04      	ldr	r6, [sp, #16]
 800543c:	465f      	mov	r7, fp
 800543e:	e792      	b.n	8005366 <_dtoa_r+0x41e>
 8005440:	9900      	ldr	r1, [sp, #0]
 8005442:	4b50      	ldr	r3, [pc, #320]	; (8005584 <_dtoa_r+0x63c>)
 8005444:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005448:	4431      	add	r1, r6
 800544a:	9102      	str	r1, [sp, #8]
 800544c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800544e:	eeb0 9a47 	vmov.f32	s18, s14
 8005452:	eef0 9a67 	vmov.f32	s19, s15
 8005456:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800545a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800545e:	2900      	cmp	r1, #0
 8005460:	d044      	beq.n	80054ec <_dtoa_r+0x5a4>
 8005462:	494e      	ldr	r1, [pc, #312]	; (800559c <_dtoa_r+0x654>)
 8005464:	2000      	movs	r0, #0
 8005466:	f7fb fa01 	bl	800086c <__aeabi_ddiv>
 800546a:	ec53 2b19 	vmov	r2, r3, d9
 800546e:	f7fa ff1b 	bl	80002a8 <__aeabi_dsub>
 8005472:	9d00      	ldr	r5, [sp, #0]
 8005474:	ec41 0b19 	vmov	d9, r0, r1
 8005478:	4649      	mov	r1, r9
 800547a:	4640      	mov	r0, r8
 800547c:	f7fb fb7c 	bl	8000b78 <__aeabi_d2iz>
 8005480:	4606      	mov	r6, r0
 8005482:	f7fb f85f 	bl	8000544 <__aeabi_i2d>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4640      	mov	r0, r8
 800548c:	4649      	mov	r1, r9
 800548e:	f7fa ff0b 	bl	80002a8 <__aeabi_dsub>
 8005492:	3630      	adds	r6, #48	; 0x30
 8005494:	f805 6b01 	strb.w	r6, [r5], #1
 8005498:	ec53 2b19 	vmov	r2, r3, d9
 800549c:	4680      	mov	r8, r0
 800549e:	4689      	mov	r9, r1
 80054a0:	f7fb fb2c 	bl	8000afc <__aeabi_dcmplt>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d164      	bne.n	8005572 <_dtoa_r+0x62a>
 80054a8:	4642      	mov	r2, r8
 80054aa:	464b      	mov	r3, r9
 80054ac:	4937      	ldr	r1, [pc, #220]	; (800558c <_dtoa_r+0x644>)
 80054ae:	2000      	movs	r0, #0
 80054b0:	f7fa fefa 	bl	80002a8 <__aeabi_dsub>
 80054b4:	ec53 2b19 	vmov	r2, r3, d9
 80054b8:	f7fb fb20 	bl	8000afc <__aeabi_dcmplt>
 80054bc:	2800      	cmp	r0, #0
 80054be:	f040 80b6 	bne.w	800562e <_dtoa_r+0x6e6>
 80054c2:	9b02      	ldr	r3, [sp, #8]
 80054c4:	429d      	cmp	r5, r3
 80054c6:	f43f af7c 	beq.w	80053c2 <_dtoa_r+0x47a>
 80054ca:	4b31      	ldr	r3, [pc, #196]	; (8005590 <_dtoa_r+0x648>)
 80054cc:	ec51 0b19 	vmov	r0, r1, d9
 80054d0:	2200      	movs	r2, #0
 80054d2:	f7fb f8a1 	bl	8000618 <__aeabi_dmul>
 80054d6:	4b2e      	ldr	r3, [pc, #184]	; (8005590 <_dtoa_r+0x648>)
 80054d8:	ec41 0b19 	vmov	d9, r0, r1
 80054dc:	2200      	movs	r2, #0
 80054de:	4640      	mov	r0, r8
 80054e0:	4649      	mov	r1, r9
 80054e2:	f7fb f899 	bl	8000618 <__aeabi_dmul>
 80054e6:	4680      	mov	r8, r0
 80054e8:	4689      	mov	r9, r1
 80054ea:	e7c5      	b.n	8005478 <_dtoa_r+0x530>
 80054ec:	ec51 0b17 	vmov	r0, r1, d7
 80054f0:	f7fb f892 	bl	8000618 <__aeabi_dmul>
 80054f4:	9b02      	ldr	r3, [sp, #8]
 80054f6:	9d00      	ldr	r5, [sp, #0]
 80054f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80054fa:	ec41 0b19 	vmov	d9, r0, r1
 80054fe:	4649      	mov	r1, r9
 8005500:	4640      	mov	r0, r8
 8005502:	f7fb fb39 	bl	8000b78 <__aeabi_d2iz>
 8005506:	4606      	mov	r6, r0
 8005508:	f7fb f81c 	bl	8000544 <__aeabi_i2d>
 800550c:	3630      	adds	r6, #48	; 0x30
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4640      	mov	r0, r8
 8005514:	4649      	mov	r1, r9
 8005516:	f7fa fec7 	bl	80002a8 <__aeabi_dsub>
 800551a:	f805 6b01 	strb.w	r6, [r5], #1
 800551e:	9b02      	ldr	r3, [sp, #8]
 8005520:	429d      	cmp	r5, r3
 8005522:	4680      	mov	r8, r0
 8005524:	4689      	mov	r9, r1
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	d124      	bne.n	8005576 <_dtoa_r+0x62e>
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <_dtoa_r+0x654>)
 800552e:	ec51 0b19 	vmov	r0, r1, d9
 8005532:	f7fa febb 	bl	80002ac <__adddf3>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4640      	mov	r0, r8
 800553c:	4649      	mov	r1, r9
 800553e:	f7fb fafb 	bl	8000b38 <__aeabi_dcmpgt>
 8005542:	2800      	cmp	r0, #0
 8005544:	d173      	bne.n	800562e <_dtoa_r+0x6e6>
 8005546:	ec53 2b19 	vmov	r2, r3, d9
 800554a:	4914      	ldr	r1, [pc, #80]	; (800559c <_dtoa_r+0x654>)
 800554c:	2000      	movs	r0, #0
 800554e:	f7fa feab 	bl	80002a8 <__aeabi_dsub>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4640      	mov	r0, r8
 8005558:	4649      	mov	r1, r9
 800555a:	f7fb facf 	bl	8000afc <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	f43f af2f 	beq.w	80053c2 <_dtoa_r+0x47a>
 8005564:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005566:	1e6b      	subs	r3, r5, #1
 8005568:	930f      	str	r3, [sp, #60]	; 0x3c
 800556a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800556e:	2b30      	cmp	r3, #48	; 0x30
 8005570:	d0f8      	beq.n	8005564 <_dtoa_r+0x61c>
 8005572:	46bb      	mov	fp, r7
 8005574:	e04a      	b.n	800560c <_dtoa_r+0x6c4>
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <_dtoa_r+0x648>)
 8005578:	f7fb f84e 	bl	8000618 <__aeabi_dmul>
 800557c:	4680      	mov	r8, r0
 800557e:	4689      	mov	r9, r1
 8005580:	e7bd      	b.n	80054fe <_dtoa_r+0x5b6>
 8005582:	bf00      	nop
 8005584:	08006bc0 	.word	0x08006bc0
 8005588:	08006b98 	.word	0x08006b98
 800558c:	3ff00000 	.word	0x3ff00000
 8005590:	40240000 	.word	0x40240000
 8005594:	401c0000 	.word	0x401c0000
 8005598:	40140000 	.word	0x40140000
 800559c:	3fe00000 	.word	0x3fe00000
 80055a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80055a4:	9d00      	ldr	r5, [sp, #0]
 80055a6:	4642      	mov	r2, r8
 80055a8:	464b      	mov	r3, r9
 80055aa:	4630      	mov	r0, r6
 80055ac:	4639      	mov	r1, r7
 80055ae:	f7fb f95d 	bl	800086c <__aeabi_ddiv>
 80055b2:	f7fb fae1 	bl	8000b78 <__aeabi_d2iz>
 80055b6:	9001      	str	r0, [sp, #4]
 80055b8:	f7fa ffc4 	bl	8000544 <__aeabi_i2d>
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	f7fb f82a 	bl	8000618 <__aeabi_dmul>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4630      	mov	r0, r6
 80055ca:	4639      	mov	r1, r7
 80055cc:	f7fa fe6c 	bl	80002a8 <__aeabi_dsub>
 80055d0:	9e01      	ldr	r6, [sp, #4]
 80055d2:	9f04      	ldr	r7, [sp, #16]
 80055d4:	3630      	adds	r6, #48	; 0x30
 80055d6:	f805 6b01 	strb.w	r6, [r5], #1
 80055da:	9e00      	ldr	r6, [sp, #0]
 80055dc:	1bae      	subs	r6, r5, r6
 80055de:	42b7      	cmp	r7, r6
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	d134      	bne.n	8005650 <_dtoa_r+0x708>
 80055e6:	f7fa fe61 	bl	80002ac <__adddf3>
 80055ea:	4642      	mov	r2, r8
 80055ec:	464b      	mov	r3, r9
 80055ee:	4606      	mov	r6, r0
 80055f0:	460f      	mov	r7, r1
 80055f2:	f7fb faa1 	bl	8000b38 <__aeabi_dcmpgt>
 80055f6:	b9c8      	cbnz	r0, 800562c <_dtoa_r+0x6e4>
 80055f8:	4642      	mov	r2, r8
 80055fa:	464b      	mov	r3, r9
 80055fc:	4630      	mov	r0, r6
 80055fe:	4639      	mov	r1, r7
 8005600:	f7fb fa72 	bl	8000ae8 <__aeabi_dcmpeq>
 8005604:	b110      	cbz	r0, 800560c <_dtoa_r+0x6c4>
 8005606:	9b01      	ldr	r3, [sp, #4]
 8005608:	07db      	lsls	r3, r3, #31
 800560a:	d40f      	bmi.n	800562c <_dtoa_r+0x6e4>
 800560c:	4651      	mov	r1, sl
 800560e:	4620      	mov	r0, r4
 8005610:	f000 fbcc 	bl	8005dac <_Bfree>
 8005614:	2300      	movs	r3, #0
 8005616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005618:	702b      	strb	r3, [r5, #0]
 800561a:	f10b 0301 	add.w	r3, fp, #1
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005622:	2b00      	cmp	r3, #0
 8005624:	f43f ace2 	beq.w	8004fec <_dtoa_r+0xa4>
 8005628:	601d      	str	r5, [r3, #0]
 800562a:	e4df      	b.n	8004fec <_dtoa_r+0xa4>
 800562c:	465f      	mov	r7, fp
 800562e:	462b      	mov	r3, r5
 8005630:	461d      	mov	r5, r3
 8005632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005636:	2a39      	cmp	r2, #57	; 0x39
 8005638:	d106      	bne.n	8005648 <_dtoa_r+0x700>
 800563a:	9a00      	ldr	r2, [sp, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d1f7      	bne.n	8005630 <_dtoa_r+0x6e8>
 8005640:	9900      	ldr	r1, [sp, #0]
 8005642:	2230      	movs	r2, #48	; 0x30
 8005644:	3701      	adds	r7, #1
 8005646:	700a      	strb	r2, [r1, #0]
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	3201      	adds	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e790      	b.n	8005572 <_dtoa_r+0x62a>
 8005650:	4ba3      	ldr	r3, [pc, #652]	; (80058e0 <_dtoa_r+0x998>)
 8005652:	2200      	movs	r2, #0
 8005654:	f7fa ffe0 	bl	8000618 <__aeabi_dmul>
 8005658:	2200      	movs	r2, #0
 800565a:	2300      	movs	r3, #0
 800565c:	4606      	mov	r6, r0
 800565e:	460f      	mov	r7, r1
 8005660:	f7fb fa42 	bl	8000ae8 <__aeabi_dcmpeq>
 8005664:	2800      	cmp	r0, #0
 8005666:	d09e      	beq.n	80055a6 <_dtoa_r+0x65e>
 8005668:	e7d0      	b.n	800560c <_dtoa_r+0x6c4>
 800566a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800566c:	2a00      	cmp	r2, #0
 800566e:	f000 80ca 	beq.w	8005806 <_dtoa_r+0x8be>
 8005672:	9a07      	ldr	r2, [sp, #28]
 8005674:	2a01      	cmp	r2, #1
 8005676:	f300 80ad 	bgt.w	80057d4 <_dtoa_r+0x88c>
 800567a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800567c:	2a00      	cmp	r2, #0
 800567e:	f000 80a5 	beq.w	80057cc <_dtoa_r+0x884>
 8005682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005686:	9e08      	ldr	r6, [sp, #32]
 8005688:	9d05      	ldr	r5, [sp, #20]
 800568a:	9a05      	ldr	r2, [sp, #20]
 800568c:	441a      	add	r2, r3
 800568e:	9205      	str	r2, [sp, #20]
 8005690:	9a06      	ldr	r2, [sp, #24]
 8005692:	2101      	movs	r1, #1
 8005694:	441a      	add	r2, r3
 8005696:	4620      	mov	r0, r4
 8005698:	9206      	str	r2, [sp, #24]
 800569a:	f000 fc3d 	bl	8005f18 <__i2b>
 800569e:	4607      	mov	r7, r0
 80056a0:	b165      	cbz	r5, 80056bc <_dtoa_r+0x774>
 80056a2:	9b06      	ldr	r3, [sp, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dd09      	ble.n	80056bc <_dtoa_r+0x774>
 80056a8:	42ab      	cmp	r3, r5
 80056aa:	9a05      	ldr	r2, [sp, #20]
 80056ac:	bfa8      	it	ge
 80056ae:	462b      	movge	r3, r5
 80056b0:	1ad2      	subs	r2, r2, r3
 80056b2:	9205      	str	r2, [sp, #20]
 80056b4:	9a06      	ldr	r2, [sp, #24]
 80056b6:	1aed      	subs	r5, r5, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	9306      	str	r3, [sp, #24]
 80056bc:	9b08      	ldr	r3, [sp, #32]
 80056be:	b1f3      	cbz	r3, 80056fe <_dtoa_r+0x7b6>
 80056c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80a3 	beq.w	800580e <_dtoa_r+0x8c6>
 80056c8:	2e00      	cmp	r6, #0
 80056ca:	dd10      	ble.n	80056ee <_dtoa_r+0x7a6>
 80056cc:	4639      	mov	r1, r7
 80056ce:	4632      	mov	r2, r6
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 fce1 	bl	8006098 <__pow5mult>
 80056d6:	4652      	mov	r2, sl
 80056d8:	4601      	mov	r1, r0
 80056da:	4607      	mov	r7, r0
 80056dc:	4620      	mov	r0, r4
 80056de:	f000 fc31 	bl	8005f44 <__multiply>
 80056e2:	4651      	mov	r1, sl
 80056e4:	4680      	mov	r8, r0
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 fb60 	bl	8005dac <_Bfree>
 80056ec:	46c2      	mov	sl, r8
 80056ee:	9b08      	ldr	r3, [sp, #32]
 80056f0:	1b9a      	subs	r2, r3, r6
 80056f2:	d004      	beq.n	80056fe <_dtoa_r+0x7b6>
 80056f4:	4651      	mov	r1, sl
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 fcce 	bl	8006098 <__pow5mult>
 80056fc:	4682      	mov	sl, r0
 80056fe:	2101      	movs	r1, #1
 8005700:	4620      	mov	r0, r4
 8005702:	f000 fc09 	bl	8005f18 <__i2b>
 8005706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	4606      	mov	r6, r0
 800570c:	f340 8081 	ble.w	8005812 <_dtoa_r+0x8ca>
 8005710:	461a      	mov	r2, r3
 8005712:	4601      	mov	r1, r0
 8005714:	4620      	mov	r0, r4
 8005716:	f000 fcbf 	bl	8006098 <__pow5mult>
 800571a:	9b07      	ldr	r3, [sp, #28]
 800571c:	2b01      	cmp	r3, #1
 800571e:	4606      	mov	r6, r0
 8005720:	dd7a      	ble.n	8005818 <_dtoa_r+0x8d0>
 8005722:	f04f 0800 	mov.w	r8, #0
 8005726:	6933      	ldr	r3, [r6, #16]
 8005728:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800572c:	6918      	ldr	r0, [r3, #16]
 800572e:	f000 fba5 	bl	8005e7c <__hi0bits>
 8005732:	f1c0 0020 	rsb	r0, r0, #32
 8005736:	9b06      	ldr	r3, [sp, #24]
 8005738:	4418      	add	r0, r3
 800573a:	f010 001f 	ands.w	r0, r0, #31
 800573e:	f000 8094 	beq.w	800586a <_dtoa_r+0x922>
 8005742:	f1c0 0320 	rsb	r3, r0, #32
 8005746:	2b04      	cmp	r3, #4
 8005748:	f340 8085 	ble.w	8005856 <_dtoa_r+0x90e>
 800574c:	9b05      	ldr	r3, [sp, #20]
 800574e:	f1c0 001c 	rsb	r0, r0, #28
 8005752:	4403      	add	r3, r0
 8005754:	9305      	str	r3, [sp, #20]
 8005756:	9b06      	ldr	r3, [sp, #24]
 8005758:	4403      	add	r3, r0
 800575a:	4405      	add	r5, r0
 800575c:	9306      	str	r3, [sp, #24]
 800575e:	9b05      	ldr	r3, [sp, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	dd05      	ble.n	8005770 <_dtoa_r+0x828>
 8005764:	4651      	mov	r1, sl
 8005766:	461a      	mov	r2, r3
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fcef 	bl	800614c <__lshift>
 800576e:	4682      	mov	sl, r0
 8005770:	9b06      	ldr	r3, [sp, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	dd05      	ble.n	8005782 <_dtoa_r+0x83a>
 8005776:	4631      	mov	r1, r6
 8005778:	461a      	mov	r2, r3
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fce6 	bl	800614c <__lshift>
 8005780:	4606      	mov	r6, r0
 8005782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005784:	2b00      	cmp	r3, #0
 8005786:	d072      	beq.n	800586e <_dtoa_r+0x926>
 8005788:	4631      	mov	r1, r6
 800578a:	4650      	mov	r0, sl
 800578c:	f000 fd4a 	bl	8006224 <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	da6c      	bge.n	800586e <_dtoa_r+0x926>
 8005794:	2300      	movs	r3, #0
 8005796:	4651      	mov	r1, sl
 8005798:	220a      	movs	r2, #10
 800579a:	4620      	mov	r0, r4
 800579c:	f000 fb28 	bl	8005df0 <__multadd>
 80057a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057a6:	4682      	mov	sl, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 81b0 	beq.w	8005b0e <_dtoa_r+0xbc6>
 80057ae:	2300      	movs	r3, #0
 80057b0:	4639      	mov	r1, r7
 80057b2:	220a      	movs	r2, #10
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 fb1b 	bl	8005df0 <__multadd>
 80057ba:	9b01      	ldr	r3, [sp, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	4607      	mov	r7, r0
 80057c0:	f300 8096 	bgt.w	80058f0 <_dtoa_r+0x9a8>
 80057c4:	9b07      	ldr	r3, [sp, #28]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	dc59      	bgt.n	800587e <_dtoa_r+0x936>
 80057ca:	e091      	b.n	80058f0 <_dtoa_r+0x9a8>
 80057cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057d2:	e758      	b.n	8005686 <_dtoa_r+0x73e>
 80057d4:	9b04      	ldr	r3, [sp, #16]
 80057d6:	1e5e      	subs	r6, r3, #1
 80057d8:	9b08      	ldr	r3, [sp, #32]
 80057da:	42b3      	cmp	r3, r6
 80057dc:	bfbf      	itttt	lt
 80057de:	9b08      	ldrlt	r3, [sp, #32]
 80057e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80057e2:	9608      	strlt	r6, [sp, #32]
 80057e4:	1af3      	sublt	r3, r6, r3
 80057e6:	bfb4      	ite	lt
 80057e8:	18d2      	addlt	r2, r2, r3
 80057ea:	1b9e      	subge	r6, r3, r6
 80057ec:	9b04      	ldr	r3, [sp, #16]
 80057ee:	bfbc      	itt	lt
 80057f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80057f2:	2600      	movlt	r6, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bfb7      	itett	lt
 80057f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80057fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005800:	1a9d      	sublt	r5, r3, r2
 8005802:	2300      	movlt	r3, #0
 8005804:	e741      	b.n	800568a <_dtoa_r+0x742>
 8005806:	9e08      	ldr	r6, [sp, #32]
 8005808:	9d05      	ldr	r5, [sp, #20]
 800580a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800580c:	e748      	b.n	80056a0 <_dtoa_r+0x758>
 800580e:	9a08      	ldr	r2, [sp, #32]
 8005810:	e770      	b.n	80056f4 <_dtoa_r+0x7ac>
 8005812:	9b07      	ldr	r3, [sp, #28]
 8005814:	2b01      	cmp	r3, #1
 8005816:	dc19      	bgt.n	800584c <_dtoa_r+0x904>
 8005818:	9b02      	ldr	r3, [sp, #8]
 800581a:	b9bb      	cbnz	r3, 800584c <_dtoa_r+0x904>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005822:	b99b      	cbnz	r3, 800584c <_dtoa_r+0x904>
 8005824:	9b03      	ldr	r3, [sp, #12]
 8005826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800582a:	0d1b      	lsrs	r3, r3, #20
 800582c:	051b      	lsls	r3, r3, #20
 800582e:	b183      	cbz	r3, 8005852 <_dtoa_r+0x90a>
 8005830:	9b05      	ldr	r3, [sp, #20]
 8005832:	3301      	adds	r3, #1
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	9b06      	ldr	r3, [sp, #24]
 8005838:	3301      	adds	r3, #1
 800583a:	9306      	str	r3, [sp, #24]
 800583c:	f04f 0801 	mov.w	r8, #1
 8005840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005842:	2b00      	cmp	r3, #0
 8005844:	f47f af6f 	bne.w	8005726 <_dtoa_r+0x7de>
 8005848:	2001      	movs	r0, #1
 800584a:	e774      	b.n	8005736 <_dtoa_r+0x7ee>
 800584c:	f04f 0800 	mov.w	r8, #0
 8005850:	e7f6      	b.n	8005840 <_dtoa_r+0x8f8>
 8005852:	4698      	mov	r8, r3
 8005854:	e7f4      	b.n	8005840 <_dtoa_r+0x8f8>
 8005856:	d082      	beq.n	800575e <_dtoa_r+0x816>
 8005858:	9a05      	ldr	r2, [sp, #20]
 800585a:	331c      	adds	r3, #28
 800585c:	441a      	add	r2, r3
 800585e:	9205      	str	r2, [sp, #20]
 8005860:	9a06      	ldr	r2, [sp, #24]
 8005862:	441a      	add	r2, r3
 8005864:	441d      	add	r5, r3
 8005866:	9206      	str	r2, [sp, #24]
 8005868:	e779      	b.n	800575e <_dtoa_r+0x816>
 800586a:	4603      	mov	r3, r0
 800586c:	e7f4      	b.n	8005858 <_dtoa_r+0x910>
 800586e:	9b04      	ldr	r3, [sp, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	dc37      	bgt.n	80058e4 <_dtoa_r+0x99c>
 8005874:	9b07      	ldr	r3, [sp, #28]
 8005876:	2b02      	cmp	r3, #2
 8005878:	dd34      	ble.n	80058e4 <_dtoa_r+0x99c>
 800587a:	9b04      	ldr	r3, [sp, #16]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	9b01      	ldr	r3, [sp, #4]
 8005880:	b963      	cbnz	r3, 800589c <_dtoa_r+0x954>
 8005882:	4631      	mov	r1, r6
 8005884:	2205      	movs	r2, #5
 8005886:	4620      	mov	r0, r4
 8005888:	f000 fab2 	bl	8005df0 <__multadd>
 800588c:	4601      	mov	r1, r0
 800588e:	4606      	mov	r6, r0
 8005890:	4650      	mov	r0, sl
 8005892:	f000 fcc7 	bl	8006224 <__mcmp>
 8005896:	2800      	cmp	r0, #0
 8005898:	f73f adbb 	bgt.w	8005412 <_dtoa_r+0x4ca>
 800589c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589e:	9d00      	ldr	r5, [sp, #0]
 80058a0:	ea6f 0b03 	mvn.w	fp, r3
 80058a4:	f04f 0800 	mov.w	r8, #0
 80058a8:	4631      	mov	r1, r6
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 fa7e 	bl	8005dac <_Bfree>
 80058b0:	2f00      	cmp	r7, #0
 80058b2:	f43f aeab 	beq.w	800560c <_dtoa_r+0x6c4>
 80058b6:	f1b8 0f00 	cmp.w	r8, #0
 80058ba:	d005      	beq.n	80058c8 <_dtoa_r+0x980>
 80058bc:	45b8      	cmp	r8, r7
 80058be:	d003      	beq.n	80058c8 <_dtoa_r+0x980>
 80058c0:	4641      	mov	r1, r8
 80058c2:	4620      	mov	r0, r4
 80058c4:	f000 fa72 	bl	8005dac <_Bfree>
 80058c8:	4639      	mov	r1, r7
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 fa6e 	bl	8005dac <_Bfree>
 80058d0:	e69c      	b.n	800560c <_dtoa_r+0x6c4>
 80058d2:	2600      	movs	r6, #0
 80058d4:	4637      	mov	r7, r6
 80058d6:	e7e1      	b.n	800589c <_dtoa_r+0x954>
 80058d8:	46bb      	mov	fp, r7
 80058da:	4637      	mov	r7, r6
 80058dc:	e599      	b.n	8005412 <_dtoa_r+0x4ca>
 80058de:	bf00      	nop
 80058e0:	40240000 	.word	0x40240000
 80058e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80c8 	beq.w	8005a7c <_dtoa_r+0xb34>
 80058ec:	9b04      	ldr	r3, [sp, #16]
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	dd05      	ble.n	8005900 <_dtoa_r+0x9b8>
 80058f4:	4639      	mov	r1, r7
 80058f6:	462a      	mov	r2, r5
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fc27 	bl	800614c <__lshift>
 80058fe:	4607      	mov	r7, r0
 8005900:	f1b8 0f00 	cmp.w	r8, #0
 8005904:	d05b      	beq.n	80059be <_dtoa_r+0xa76>
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fa0f 	bl	8005d2c <_Balloc>
 800590e:	4605      	mov	r5, r0
 8005910:	b928      	cbnz	r0, 800591e <_dtoa_r+0x9d6>
 8005912:	4b83      	ldr	r3, [pc, #524]	; (8005b20 <_dtoa_r+0xbd8>)
 8005914:	4602      	mov	r2, r0
 8005916:	f240 21ef 	movw	r1, #751	; 0x2ef
 800591a:	f7ff bb2e 	b.w	8004f7a <_dtoa_r+0x32>
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	3202      	adds	r2, #2
 8005922:	0092      	lsls	r2, r2, #2
 8005924:	f107 010c 	add.w	r1, r7, #12
 8005928:	300c      	adds	r0, #12
 800592a:	f000 ff87 	bl	800683c <memcpy>
 800592e:	2201      	movs	r2, #1
 8005930:	4629      	mov	r1, r5
 8005932:	4620      	mov	r0, r4
 8005934:	f000 fc0a 	bl	800614c <__lshift>
 8005938:	9b00      	ldr	r3, [sp, #0]
 800593a:	3301      	adds	r3, #1
 800593c:	9304      	str	r3, [sp, #16]
 800593e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005942:	4413      	add	r3, r2
 8005944:	9308      	str	r3, [sp, #32]
 8005946:	9b02      	ldr	r3, [sp, #8]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	46b8      	mov	r8, r7
 800594e:	9306      	str	r3, [sp, #24]
 8005950:	4607      	mov	r7, r0
 8005952:	9b04      	ldr	r3, [sp, #16]
 8005954:	4631      	mov	r1, r6
 8005956:	3b01      	subs	r3, #1
 8005958:	4650      	mov	r0, sl
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	f7ff fa69 	bl	8004e32 <quorem>
 8005960:	4641      	mov	r1, r8
 8005962:	9002      	str	r0, [sp, #8]
 8005964:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005968:	4650      	mov	r0, sl
 800596a:	f000 fc5b 	bl	8006224 <__mcmp>
 800596e:	463a      	mov	r2, r7
 8005970:	9005      	str	r0, [sp, #20]
 8005972:	4631      	mov	r1, r6
 8005974:	4620      	mov	r0, r4
 8005976:	f000 fc71 	bl	800625c <__mdiff>
 800597a:	68c2      	ldr	r2, [r0, #12]
 800597c:	4605      	mov	r5, r0
 800597e:	bb02      	cbnz	r2, 80059c2 <_dtoa_r+0xa7a>
 8005980:	4601      	mov	r1, r0
 8005982:	4650      	mov	r0, sl
 8005984:	f000 fc4e 	bl	8006224 <__mcmp>
 8005988:	4602      	mov	r2, r0
 800598a:	4629      	mov	r1, r5
 800598c:	4620      	mov	r0, r4
 800598e:	9209      	str	r2, [sp, #36]	; 0x24
 8005990:	f000 fa0c 	bl	8005dac <_Bfree>
 8005994:	9b07      	ldr	r3, [sp, #28]
 8005996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005998:	9d04      	ldr	r5, [sp, #16]
 800599a:	ea43 0102 	orr.w	r1, r3, r2
 800599e:	9b06      	ldr	r3, [sp, #24]
 80059a0:	4319      	orrs	r1, r3
 80059a2:	d110      	bne.n	80059c6 <_dtoa_r+0xa7e>
 80059a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059a8:	d029      	beq.n	80059fe <_dtoa_r+0xab6>
 80059aa:	9b05      	ldr	r3, [sp, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	dd02      	ble.n	80059b6 <_dtoa_r+0xa6e>
 80059b0:	9b02      	ldr	r3, [sp, #8]
 80059b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80059b6:	9b01      	ldr	r3, [sp, #4]
 80059b8:	f883 9000 	strb.w	r9, [r3]
 80059bc:	e774      	b.n	80058a8 <_dtoa_r+0x960>
 80059be:	4638      	mov	r0, r7
 80059c0:	e7ba      	b.n	8005938 <_dtoa_r+0x9f0>
 80059c2:	2201      	movs	r2, #1
 80059c4:	e7e1      	b.n	800598a <_dtoa_r+0xa42>
 80059c6:	9b05      	ldr	r3, [sp, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	db04      	blt.n	80059d6 <_dtoa_r+0xa8e>
 80059cc:	9907      	ldr	r1, [sp, #28]
 80059ce:	430b      	orrs	r3, r1
 80059d0:	9906      	ldr	r1, [sp, #24]
 80059d2:	430b      	orrs	r3, r1
 80059d4:	d120      	bne.n	8005a18 <_dtoa_r+0xad0>
 80059d6:	2a00      	cmp	r2, #0
 80059d8:	dded      	ble.n	80059b6 <_dtoa_r+0xa6e>
 80059da:	4651      	mov	r1, sl
 80059dc:	2201      	movs	r2, #1
 80059de:	4620      	mov	r0, r4
 80059e0:	f000 fbb4 	bl	800614c <__lshift>
 80059e4:	4631      	mov	r1, r6
 80059e6:	4682      	mov	sl, r0
 80059e8:	f000 fc1c 	bl	8006224 <__mcmp>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	dc03      	bgt.n	80059f8 <_dtoa_r+0xab0>
 80059f0:	d1e1      	bne.n	80059b6 <_dtoa_r+0xa6e>
 80059f2:	f019 0f01 	tst.w	r9, #1
 80059f6:	d0de      	beq.n	80059b6 <_dtoa_r+0xa6e>
 80059f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059fc:	d1d8      	bne.n	80059b0 <_dtoa_r+0xa68>
 80059fe:	9a01      	ldr	r2, [sp, #4]
 8005a00:	2339      	movs	r3, #57	; 0x39
 8005a02:	7013      	strb	r3, [r2, #0]
 8005a04:	462b      	mov	r3, r5
 8005a06:	461d      	mov	r5, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a0e:	2a39      	cmp	r2, #57	; 0x39
 8005a10:	d06c      	beq.n	8005aec <_dtoa_r+0xba4>
 8005a12:	3201      	adds	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e747      	b.n	80058a8 <_dtoa_r+0x960>
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	dd07      	ble.n	8005a2c <_dtoa_r+0xae4>
 8005a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a20:	d0ed      	beq.n	80059fe <_dtoa_r+0xab6>
 8005a22:	9a01      	ldr	r2, [sp, #4]
 8005a24:	f109 0301 	add.w	r3, r9, #1
 8005a28:	7013      	strb	r3, [r2, #0]
 8005a2a:	e73d      	b.n	80058a8 <_dtoa_r+0x960>
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	9a08      	ldr	r2, [sp, #32]
 8005a30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d043      	beq.n	8005ac0 <_dtoa_r+0xb78>
 8005a38:	4651      	mov	r1, sl
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	220a      	movs	r2, #10
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 f9d6 	bl	8005df0 <__multadd>
 8005a44:	45b8      	cmp	r8, r7
 8005a46:	4682      	mov	sl, r0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	f04f 020a 	mov.w	r2, #10
 8005a50:	4641      	mov	r1, r8
 8005a52:	4620      	mov	r0, r4
 8005a54:	d107      	bne.n	8005a66 <_dtoa_r+0xb1e>
 8005a56:	f000 f9cb 	bl	8005df0 <__multadd>
 8005a5a:	4680      	mov	r8, r0
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	9b04      	ldr	r3, [sp, #16]
 8005a60:	3301      	adds	r3, #1
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	e775      	b.n	8005952 <_dtoa_r+0xa0a>
 8005a66:	f000 f9c3 	bl	8005df0 <__multadd>
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	220a      	movs	r2, #10
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 f9bc 	bl	8005df0 <__multadd>
 8005a78:	4607      	mov	r7, r0
 8005a7a:	e7f0      	b.n	8005a5e <_dtoa_r+0xb16>
 8005a7c:	9b04      	ldr	r3, [sp, #16]
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	9d00      	ldr	r5, [sp, #0]
 8005a82:	4631      	mov	r1, r6
 8005a84:	4650      	mov	r0, sl
 8005a86:	f7ff f9d4 	bl	8004e32 <quorem>
 8005a8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a8e:	9b00      	ldr	r3, [sp, #0]
 8005a90:	f805 9b01 	strb.w	r9, [r5], #1
 8005a94:	1aea      	subs	r2, r5, r3
 8005a96:	9b01      	ldr	r3, [sp, #4]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	dd07      	ble.n	8005aac <_dtoa_r+0xb64>
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	220a      	movs	r2, #10
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 f9a4 	bl	8005df0 <__multadd>
 8005aa8:	4682      	mov	sl, r0
 8005aaa:	e7ea      	b.n	8005a82 <_dtoa_r+0xb3a>
 8005aac:	9b01      	ldr	r3, [sp, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bfc8      	it	gt
 8005ab2:	461d      	movgt	r5, r3
 8005ab4:	9b00      	ldr	r3, [sp, #0]
 8005ab6:	bfd8      	it	le
 8005ab8:	2501      	movle	r5, #1
 8005aba:	441d      	add	r5, r3
 8005abc:	f04f 0800 	mov.w	r8, #0
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 fb41 	bl	800614c <__lshift>
 8005aca:	4631      	mov	r1, r6
 8005acc:	4682      	mov	sl, r0
 8005ace:	f000 fba9 	bl	8006224 <__mcmp>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	dc96      	bgt.n	8005a04 <_dtoa_r+0xabc>
 8005ad6:	d102      	bne.n	8005ade <_dtoa_r+0xb96>
 8005ad8:	f019 0f01 	tst.w	r9, #1
 8005adc:	d192      	bne.n	8005a04 <_dtoa_r+0xabc>
 8005ade:	462b      	mov	r3, r5
 8005ae0:	461d      	mov	r5, r3
 8005ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ae6:	2a30      	cmp	r2, #48	; 0x30
 8005ae8:	d0fa      	beq.n	8005ae0 <_dtoa_r+0xb98>
 8005aea:	e6dd      	b.n	80058a8 <_dtoa_r+0x960>
 8005aec:	9a00      	ldr	r2, [sp, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d189      	bne.n	8005a06 <_dtoa_r+0xabe>
 8005af2:	f10b 0b01 	add.w	fp, fp, #1
 8005af6:	2331      	movs	r3, #49	; 0x31
 8005af8:	e796      	b.n	8005a28 <_dtoa_r+0xae0>
 8005afa:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <_dtoa_r+0xbdc>)
 8005afc:	f7ff ba99 	b.w	8005032 <_dtoa_r+0xea>
 8005b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f47f aa6d 	bne.w	8004fe2 <_dtoa_r+0x9a>
 8005b08:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <_dtoa_r+0xbe0>)
 8005b0a:	f7ff ba92 	b.w	8005032 <_dtoa_r+0xea>
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	dcb5      	bgt.n	8005a80 <_dtoa_r+0xb38>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	f73f aeb1 	bgt.w	800587e <_dtoa_r+0x936>
 8005b1c:	e7b0      	b.n	8005a80 <_dtoa_r+0xb38>
 8005b1e:	bf00      	nop
 8005b20:	08006b28 	.word	0x08006b28
 8005b24:	08006a88 	.word	0x08006a88
 8005b28:	08006aac 	.word	0x08006aac

08005b2c <_free_r>:
 8005b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b2e:	2900      	cmp	r1, #0
 8005b30:	d044      	beq.n	8005bbc <_free_r+0x90>
 8005b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b36:	9001      	str	r0, [sp, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b3e:	bfb8      	it	lt
 8005b40:	18e4      	addlt	r4, r4, r3
 8005b42:	f000 f8e7 	bl	8005d14 <__malloc_lock>
 8005b46:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <_free_r+0x94>)
 8005b48:	9801      	ldr	r0, [sp, #4]
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	b933      	cbnz	r3, 8005b5c <_free_r+0x30>
 8005b4e:	6063      	str	r3, [r4, #4]
 8005b50:	6014      	str	r4, [r2, #0]
 8005b52:	b003      	add	sp, #12
 8005b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b58:	f000 b8e2 	b.w	8005d20 <__malloc_unlock>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d908      	bls.n	8005b72 <_free_r+0x46>
 8005b60:	6825      	ldr	r5, [r4, #0]
 8005b62:	1961      	adds	r1, r4, r5
 8005b64:	428b      	cmp	r3, r1
 8005b66:	bf01      	itttt	eq
 8005b68:	6819      	ldreq	r1, [r3, #0]
 8005b6a:	685b      	ldreq	r3, [r3, #4]
 8005b6c:	1949      	addeq	r1, r1, r5
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	e7ed      	b.n	8005b4e <_free_r+0x22>
 8005b72:	461a      	mov	r2, r3
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	b10b      	cbz	r3, 8005b7c <_free_r+0x50>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d9fa      	bls.n	8005b72 <_free_r+0x46>
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	1855      	adds	r5, r2, r1
 8005b80:	42a5      	cmp	r5, r4
 8005b82:	d10b      	bne.n	8005b9c <_free_r+0x70>
 8005b84:	6824      	ldr	r4, [r4, #0]
 8005b86:	4421      	add	r1, r4
 8005b88:	1854      	adds	r4, r2, r1
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	d1e0      	bne.n	8005b52 <_free_r+0x26>
 8005b90:	681c      	ldr	r4, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	6053      	str	r3, [r2, #4]
 8005b96:	440c      	add	r4, r1
 8005b98:	6014      	str	r4, [r2, #0]
 8005b9a:	e7da      	b.n	8005b52 <_free_r+0x26>
 8005b9c:	d902      	bls.n	8005ba4 <_free_r+0x78>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	6003      	str	r3, [r0, #0]
 8005ba2:	e7d6      	b.n	8005b52 <_free_r+0x26>
 8005ba4:	6825      	ldr	r5, [r4, #0]
 8005ba6:	1961      	adds	r1, r4, r5
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf04      	itt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	bf04      	itt	eq
 8005bb4:	1949      	addeq	r1, r1, r5
 8005bb6:	6021      	streq	r1, [r4, #0]
 8005bb8:	6054      	str	r4, [r2, #4]
 8005bba:	e7ca      	b.n	8005b52 <_free_r+0x26>
 8005bbc:	b003      	add	sp, #12
 8005bbe:	bd30      	pop	{r4, r5, pc}
 8005bc0:	200003d8 	.word	0x200003d8

08005bc4 <malloc>:
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <malloc+0xc>)
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	f000 b823 	b.w	8005c14 <_malloc_r>
 8005bce:	bf00      	nop
 8005bd0:	20000064 	.word	0x20000064

08005bd4 <sbrk_aligned>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4e0e      	ldr	r6, [pc, #56]	; (8005c10 <sbrk_aligned+0x3c>)
 8005bd8:	460c      	mov	r4, r1
 8005bda:	6831      	ldr	r1, [r6, #0]
 8005bdc:	4605      	mov	r5, r0
 8005bde:	b911      	cbnz	r1, 8005be6 <sbrk_aligned+0x12>
 8005be0:	f000 fe1c 	bl	800681c <_sbrk_r>
 8005be4:	6030      	str	r0, [r6, #0]
 8005be6:	4621      	mov	r1, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 fe17 	bl	800681c <_sbrk_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d00a      	beq.n	8005c08 <sbrk_aligned+0x34>
 8005bf2:	1cc4      	adds	r4, r0, #3
 8005bf4:	f024 0403 	bic.w	r4, r4, #3
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d007      	beq.n	8005c0c <sbrk_aligned+0x38>
 8005bfc:	1a21      	subs	r1, r4, r0
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fe0c 	bl	800681c <_sbrk_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d101      	bne.n	8005c0c <sbrk_aligned+0x38>
 8005c08:	f04f 34ff 	mov.w	r4, #4294967295
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	200003dc 	.word	0x200003dc

08005c14 <_malloc_r>:
 8005c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c18:	1ccd      	adds	r5, r1, #3
 8005c1a:	f025 0503 	bic.w	r5, r5, #3
 8005c1e:	3508      	adds	r5, #8
 8005c20:	2d0c      	cmp	r5, #12
 8005c22:	bf38      	it	cc
 8005c24:	250c      	movcc	r5, #12
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	4607      	mov	r7, r0
 8005c2a:	db01      	blt.n	8005c30 <_malloc_r+0x1c>
 8005c2c:	42a9      	cmp	r1, r5
 8005c2e:	d905      	bls.n	8005c3c <_malloc_r+0x28>
 8005c30:	230c      	movs	r3, #12
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	2600      	movs	r6, #0
 8005c36:	4630      	mov	r0, r6
 8005c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d10 <_malloc_r+0xfc>
 8005c40:	f000 f868 	bl	8005d14 <__malloc_lock>
 8005c44:	f8d8 3000 	ldr.w	r3, [r8]
 8005c48:	461c      	mov	r4, r3
 8005c4a:	bb5c      	cbnz	r4, 8005ca4 <_malloc_r+0x90>
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	4638      	mov	r0, r7
 8005c50:	f7ff ffc0 	bl	8005bd4 <sbrk_aligned>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	4604      	mov	r4, r0
 8005c58:	d155      	bne.n	8005d06 <_malloc_r+0xf2>
 8005c5a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c5e:	4626      	mov	r6, r4
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	d145      	bne.n	8005cf0 <_malloc_r+0xdc>
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	d048      	beq.n	8005cfa <_malloc_r+0xe6>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	eb04 0903 	add.w	r9, r4, r3
 8005c72:	f000 fdd3 	bl	800681c <_sbrk_r>
 8005c76:	4581      	cmp	r9, r0
 8005c78:	d13f      	bne.n	8005cfa <_malloc_r+0xe6>
 8005c7a:	6821      	ldr	r1, [r4, #0]
 8005c7c:	1a6d      	subs	r5, r5, r1
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7ff ffa7 	bl	8005bd4 <sbrk_aligned>
 8005c86:	3001      	adds	r0, #1
 8005c88:	d037      	beq.n	8005cfa <_malloc_r+0xe6>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	442b      	add	r3, r5
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	f8d8 3000 	ldr.w	r3, [r8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d038      	beq.n	8005d0a <_malloc_r+0xf6>
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	42a2      	cmp	r2, r4
 8005c9c:	d12b      	bne.n	8005cf6 <_malloc_r+0xe2>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	e00f      	b.n	8005cc4 <_malloc_r+0xb0>
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	1b52      	subs	r2, r2, r5
 8005ca8:	d41f      	bmi.n	8005cea <_malloc_r+0xd6>
 8005caa:	2a0b      	cmp	r2, #11
 8005cac:	d917      	bls.n	8005cde <_malloc_r+0xca>
 8005cae:	1961      	adds	r1, r4, r5
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	6025      	str	r5, [r4, #0]
 8005cb4:	bf18      	it	ne
 8005cb6:	6059      	strne	r1, [r3, #4]
 8005cb8:	6863      	ldr	r3, [r4, #4]
 8005cba:	bf08      	it	eq
 8005cbc:	f8c8 1000 	streq.w	r1, [r8]
 8005cc0:	5162      	str	r2, [r4, r5]
 8005cc2:	604b      	str	r3, [r1, #4]
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f104 060b 	add.w	r6, r4, #11
 8005cca:	f000 f829 	bl	8005d20 <__malloc_unlock>
 8005cce:	f026 0607 	bic.w	r6, r6, #7
 8005cd2:	1d23      	adds	r3, r4, #4
 8005cd4:	1af2      	subs	r2, r6, r3
 8005cd6:	d0ae      	beq.n	8005c36 <_malloc_r+0x22>
 8005cd8:	1b9b      	subs	r3, r3, r6
 8005cda:	50a3      	str	r3, [r4, r2]
 8005cdc:	e7ab      	b.n	8005c36 <_malloc_r+0x22>
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	6862      	ldr	r2, [r4, #4]
 8005ce2:	d1dd      	bne.n	8005ca0 <_malloc_r+0x8c>
 8005ce4:	f8c8 2000 	str.w	r2, [r8]
 8005ce8:	e7ec      	b.n	8005cc4 <_malloc_r+0xb0>
 8005cea:	4623      	mov	r3, r4
 8005cec:	6864      	ldr	r4, [r4, #4]
 8005cee:	e7ac      	b.n	8005c4a <_malloc_r+0x36>
 8005cf0:	4634      	mov	r4, r6
 8005cf2:	6876      	ldr	r6, [r6, #4]
 8005cf4:	e7b4      	b.n	8005c60 <_malloc_r+0x4c>
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	e7cc      	b.n	8005c94 <_malloc_r+0x80>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	603b      	str	r3, [r7, #0]
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f000 f80e 	bl	8005d20 <__malloc_unlock>
 8005d04:	e797      	b.n	8005c36 <_malloc_r+0x22>
 8005d06:	6025      	str	r5, [r4, #0]
 8005d08:	e7dc      	b.n	8005cc4 <_malloc_r+0xb0>
 8005d0a:	605b      	str	r3, [r3, #4]
 8005d0c:	deff      	udf	#255	; 0xff
 8005d0e:	bf00      	nop
 8005d10:	200003d8 	.word	0x200003d8

08005d14 <__malloc_lock>:
 8005d14:	4801      	ldr	r0, [pc, #4]	; (8005d1c <__malloc_lock+0x8>)
 8005d16:	f7ff b88a 	b.w	8004e2e <__retarget_lock_acquire_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	200003d4 	.word	0x200003d4

08005d20 <__malloc_unlock>:
 8005d20:	4801      	ldr	r0, [pc, #4]	; (8005d28 <__malloc_unlock+0x8>)
 8005d22:	f7ff b885 	b.w	8004e30 <__retarget_lock_release_recursive>
 8005d26:	bf00      	nop
 8005d28:	200003d4 	.word	0x200003d4

08005d2c <_Balloc>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	69c6      	ldr	r6, [r0, #28]
 8005d30:	4604      	mov	r4, r0
 8005d32:	460d      	mov	r5, r1
 8005d34:	b976      	cbnz	r6, 8005d54 <_Balloc+0x28>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f7ff ff44 	bl	8005bc4 <malloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	61e0      	str	r0, [r4, #28]
 8005d40:	b920      	cbnz	r0, 8005d4c <_Balloc+0x20>
 8005d42:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <_Balloc+0x78>)
 8005d44:	4818      	ldr	r0, [pc, #96]	; (8005da8 <_Balloc+0x7c>)
 8005d46:	216b      	movs	r1, #107	; 0x6b
 8005d48:	f000 fd86 	bl	8006858 <__assert_func>
 8005d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d50:	6006      	str	r6, [r0, #0]
 8005d52:	60c6      	str	r6, [r0, #12]
 8005d54:	69e6      	ldr	r6, [r4, #28]
 8005d56:	68f3      	ldr	r3, [r6, #12]
 8005d58:	b183      	cbz	r3, 8005d7c <_Balloc+0x50>
 8005d5a:	69e3      	ldr	r3, [r4, #28]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d62:	b9b8      	cbnz	r0, 8005d94 <_Balloc+0x68>
 8005d64:	2101      	movs	r1, #1
 8005d66:	fa01 f605 	lsl.w	r6, r1, r5
 8005d6a:	1d72      	adds	r2, r6, #5
 8005d6c:	0092      	lsls	r2, r2, #2
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fd90 	bl	8006894 <_calloc_r>
 8005d74:	b160      	cbz	r0, 8005d90 <_Balloc+0x64>
 8005d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d7a:	e00e      	b.n	8005d9a <_Balloc+0x6e>
 8005d7c:	2221      	movs	r2, #33	; 0x21
 8005d7e:	2104      	movs	r1, #4
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fd87 	bl	8006894 <_calloc_r>
 8005d86:	69e3      	ldr	r3, [r4, #28]
 8005d88:	60f0      	str	r0, [r6, #12]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e4      	bne.n	8005d5a <_Balloc+0x2e>
 8005d90:	2000      	movs	r0, #0
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	6802      	ldr	r2, [r0, #0]
 8005d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005da0:	e7f7      	b.n	8005d92 <_Balloc+0x66>
 8005da2:	bf00      	nop
 8005da4:	08006ab9 	.word	0x08006ab9
 8005da8:	08006b39 	.word	0x08006b39

08005dac <_Bfree>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	69c6      	ldr	r6, [r0, #28]
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b976      	cbnz	r6, 8005dd4 <_Bfree+0x28>
 8005db6:	2010      	movs	r0, #16
 8005db8:	f7ff ff04 	bl	8005bc4 <malloc>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	61e8      	str	r0, [r5, #28]
 8005dc0:	b920      	cbnz	r0, 8005dcc <_Bfree+0x20>
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <_Bfree+0x3c>)
 8005dc4:	4809      	ldr	r0, [pc, #36]	; (8005dec <_Bfree+0x40>)
 8005dc6:	218f      	movs	r1, #143	; 0x8f
 8005dc8:	f000 fd46 	bl	8006858 <__assert_func>
 8005dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dd0:	6006      	str	r6, [r0, #0]
 8005dd2:	60c6      	str	r6, [r0, #12]
 8005dd4:	b13c      	cbz	r4, 8005de6 <_Bfree+0x3a>
 8005dd6:	69eb      	ldr	r3, [r5, #28]
 8005dd8:	6862      	ldr	r2, [r4, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005de0:	6021      	str	r1, [r4, #0]
 8005de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	08006ab9 	.word	0x08006ab9
 8005dec:	08006b39 	.word	0x08006b39

08005df0 <__multadd>:
 8005df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df4:	690d      	ldr	r5, [r1, #16]
 8005df6:	4607      	mov	r7, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	461e      	mov	r6, r3
 8005dfc:	f101 0c14 	add.w	ip, r1, #20
 8005e00:	2000      	movs	r0, #0
 8005e02:	f8dc 3000 	ldr.w	r3, [ip]
 8005e06:	b299      	uxth	r1, r3
 8005e08:	fb02 6101 	mla	r1, r2, r1, r6
 8005e0c:	0c1e      	lsrs	r6, r3, #16
 8005e0e:	0c0b      	lsrs	r3, r1, #16
 8005e10:	fb02 3306 	mla	r3, r2, r6, r3
 8005e14:	b289      	uxth	r1, r1
 8005e16:	3001      	adds	r0, #1
 8005e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e1c:	4285      	cmp	r5, r0
 8005e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8005e22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e26:	dcec      	bgt.n	8005e02 <__multadd+0x12>
 8005e28:	b30e      	cbz	r6, 8005e6e <__multadd+0x7e>
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	42ab      	cmp	r3, r5
 8005e2e:	dc19      	bgt.n	8005e64 <__multadd+0x74>
 8005e30:	6861      	ldr	r1, [r4, #4]
 8005e32:	4638      	mov	r0, r7
 8005e34:	3101      	adds	r1, #1
 8005e36:	f7ff ff79 	bl	8005d2c <_Balloc>
 8005e3a:	4680      	mov	r8, r0
 8005e3c:	b928      	cbnz	r0, 8005e4a <__multadd+0x5a>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <__multadd+0x84>)
 8005e42:	480d      	ldr	r0, [pc, #52]	; (8005e78 <__multadd+0x88>)
 8005e44:	21ba      	movs	r1, #186	; 0xba
 8005e46:	f000 fd07 	bl	8006858 <__assert_func>
 8005e4a:	6922      	ldr	r2, [r4, #16]
 8005e4c:	3202      	adds	r2, #2
 8005e4e:	f104 010c 	add.w	r1, r4, #12
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	300c      	adds	r0, #12
 8005e56:	f000 fcf1 	bl	800683c <memcpy>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f7ff ffa5 	bl	8005dac <_Bfree>
 8005e62:	4644      	mov	r4, r8
 8005e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e68:	3501      	adds	r5, #1
 8005e6a:	615e      	str	r6, [r3, #20]
 8005e6c:	6125      	str	r5, [r4, #16]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e74:	08006b28 	.word	0x08006b28
 8005e78:	08006b39 	.word	0x08006b39

08005e7c <__hi0bits>:
 8005e7c:	0c03      	lsrs	r3, r0, #16
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	b9d3      	cbnz	r3, 8005eb8 <__hi0bits+0x3c>
 8005e82:	0400      	lsls	r0, r0, #16
 8005e84:	2310      	movs	r3, #16
 8005e86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e8a:	bf04      	itt	eq
 8005e8c:	0200      	lsleq	r0, r0, #8
 8005e8e:	3308      	addeq	r3, #8
 8005e90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e94:	bf04      	itt	eq
 8005e96:	0100      	lsleq	r0, r0, #4
 8005e98:	3304      	addeq	r3, #4
 8005e9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e9e:	bf04      	itt	eq
 8005ea0:	0080      	lsleq	r0, r0, #2
 8005ea2:	3302      	addeq	r3, #2
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	db05      	blt.n	8005eb4 <__hi0bits+0x38>
 8005ea8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005eac:	f103 0301 	add.w	r3, r3, #1
 8005eb0:	bf08      	it	eq
 8005eb2:	2320      	moveq	r3, #32
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	4770      	bx	lr
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e7e4      	b.n	8005e86 <__hi0bits+0xa>

08005ebc <__lo0bits>:
 8005ebc:	6803      	ldr	r3, [r0, #0]
 8005ebe:	f013 0207 	ands.w	r2, r3, #7
 8005ec2:	d00c      	beq.n	8005ede <__lo0bits+0x22>
 8005ec4:	07d9      	lsls	r1, r3, #31
 8005ec6:	d422      	bmi.n	8005f0e <__lo0bits+0x52>
 8005ec8:	079a      	lsls	r2, r3, #30
 8005eca:	bf49      	itett	mi
 8005ecc:	085b      	lsrmi	r3, r3, #1
 8005ece:	089b      	lsrpl	r3, r3, #2
 8005ed0:	6003      	strmi	r3, [r0, #0]
 8005ed2:	2201      	movmi	r2, #1
 8005ed4:	bf5c      	itt	pl
 8005ed6:	6003      	strpl	r3, [r0, #0]
 8005ed8:	2202      	movpl	r2, #2
 8005eda:	4610      	mov	r0, r2
 8005edc:	4770      	bx	lr
 8005ede:	b299      	uxth	r1, r3
 8005ee0:	b909      	cbnz	r1, 8005ee6 <__lo0bits+0x2a>
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	b2d9      	uxtb	r1, r3
 8005ee8:	b909      	cbnz	r1, 8005eee <__lo0bits+0x32>
 8005eea:	3208      	adds	r2, #8
 8005eec:	0a1b      	lsrs	r3, r3, #8
 8005eee:	0719      	lsls	r1, r3, #28
 8005ef0:	bf04      	itt	eq
 8005ef2:	091b      	lsreq	r3, r3, #4
 8005ef4:	3204      	addeq	r2, #4
 8005ef6:	0799      	lsls	r1, r3, #30
 8005ef8:	bf04      	itt	eq
 8005efa:	089b      	lsreq	r3, r3, #2
 8005efc:	3202      	addeq	r2, #2
 8005efe:	07d9      	lsls	r1, r3, #31
 8005f00:	d403      	bmi.n	8005f0a <__lo0bits+0x4e>
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	f102 0201 	add.w	r2, r2, #1
 8005f08:	d003      	beq.n	8005f12 <__lo0bits+0x56>
 8005f0a:	6003      	str	r3, [r0, #0]
 8005f0c:	e7e5      	b.n	8005eda <__lo0bits+0x1e>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	e7e3      	b.n	8005eda <__lo0bits+0x1e>
 8005f12:	2220      	movs	r2, #32
 8005f14:	e7e1      	b.n	8005eda <__lo0bits+0x1e>
	...

08005f18 <__i2b>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	f7ff ff05 	bl	8005d2c <_Balloc>
 8005f22:	4602      	mov	r2, r0
 8005f24:	b928      	cbnz	r0, 8005f32 <__i2b+0x1a>
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <__i2b+0x24>)
 8005f28:	4805      	ldr	r0, [pc, #20]	; (8005f40 <__i2b+0x28>)
 8005f2a:	f240 1145 	movw	r1, #325	; 0x145
 8005f2e:	f000 fc93 	bl	8006858 <__assert_func>
 8005f32:	2301      	movs	r3, #1
 8005f34:	6144      	str	r4, [r0, #20]
 8005f36:	6103      	str	r3, [r0, #16]
 8005f38:	bd10      	pop	{r4, pc}
 8005f3a:	bf00      	nop
 8005f3c:	08006b28 	.word	0x08006b28
 8005f40:	08006b39 	.word	0x08006b39

08005f44 <__multiply>:
 8005f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	4691      	mov	r9, r2
 8005f4a:	690a      	ldr	r2, [r1, #16]
 8005f4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	bfb8      	it	lt
 8005f54:	460b      	movlt	r3, r1
 8005f56:	460c      	mov	r4, r1
 8005f58:	bfbc      	itt	lt
 8005f5a:	464c      	movlt	r4, r9
 8005f5c:	4699      	movlt	r9, r3
 8005f5e:	6927      	ldr	r7, [r4, #16]
 8005f60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f64:	68a3      	ldr	r3, [r4, #8]
 8005f66:	6861      	ldr	r1, [r4, #4]
 8005f68:	eb07 060a 	add.w	r6, r7, sl
 8005f6c:	42b3      	cmp	r3, r6
 8005f6e:	b085      	sub	sp, #20
 8005f70:	bfb8      	it	lt
 8005f72:	3101      	addlt	r1, #1
 8005f74:	f7ff feda 	bl	8005d2c <_Balloc>
 8005f78:	b930      	cbnz	r0, 8005f88 <__multiply+0x44>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	4b44      	ldr	r3, [pc, #272]	; (8006090 <__multiply+0x14c>)
 8005f7e:	4845      	ldr	r0, [pc, #276]	; (8006094 <__multiply+0x150>)
 8005f80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f84:	f000 fc68 	bl	8006858 <__assert_func>
 8005f88:	f100 0514 	add.w	r5, r0, #20
 8005f8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f90:	462b      	mov	r3, r5
 8005f92:	2200      	movs	r2, #0
 8005f94:	4543      	cmp	r3, r8
 8005f96:	d321      	bcc.n	8005fdc <__multiply+0x98>
 8005f98:	f104 0314 	add.w	r3, r4, #20
 8005f9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005fa0:	f109 0314 	add.w	r3, r9, #20
 8005fa4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005fa8:	9202      	str	r2, [sp, #8]
 8005faa:	1b3a      	subs	r2, r7, r4
 8005fac:	3a15      	subs	r2, #21
 8005fae:	f022 0203 	bic.w	r2, r2, #3
 8005fb2:	3204      	adds	r2, #4
 8005fb4:	f104 0115 	add.w	r1, r4, #21
 8005fb8:	428f      	cmp	r7, r1
 8005fba:	bf38      	it	cc
 8005fbc:	2204      	movcc	r2, #4
 8005fbe:	9201      	str	r2, [sp, #4]
 8005fc0:	9a02      	ldr	r2, [sp, #8]
 8005fc2:	9303      	str	r3, [sp, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d80c      	bhi.n	8005fe2 <__multiply+0x9e>
 8005fc8:	2e00      	cmp	r6, #0
 8005fca:	dd03      	ble.n	8005fd4 <__multiply+0x90>
 8005fcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d05b      	beq.n	800608c <__multiply+0x148>
 8005fd4:	6106      	str	r6, [r0, #16]
 8005fd6:	b005      	add	sp, #20
 8005fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fdc:	f843 2b04 	str.w	r2, [r3], #4
 8005fe0:	e7d8      	b.n	8005f94 <__multiply+0x50>
 8005fe2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fe6:	f1ba 0f00 	cmp.w	sl, #0
 8005fea:	d024      	beq.n	8006036 <__multiply+0xf2>
 8005fec:	f104 0e14 	add.w	lr, r4, #20
 8005ff0:	46a9      	mov	r9, r5
 8005ff2:	f04f 0c00 	mov.w	ip, #0
 8005ff6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ffa:	f8d9 1000 	ldr.w	r1, [r9]
 8005ffe:	fa1f fb82 	uxth.w	fp, r2
 8006002:	b289      	uxth	r1, r1
 8006004:	fb0a 110b 	mla	r1, sl, fp, r1
 8006008:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800600c:	f8d9 2000 	ldr.w	r2, [r9]
 8006010:	4461      	add	r1, ip
 8006012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006016:	fb0a c20b 	mla	r2, sl, fp, ip
 800601a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800601e:	b289      	uxth	r1, r1
 8006020:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006024:	4577      	cmp	r7, lr
 8006026:	f849 1b04 	str.w	r1, [r9], #4
 800602a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800602e:	d8e2      	bhi.n	8005ff6 <__multiply+0xb2>
 8006030:	9a01      	ldr	r2, [sp, #4]
 8006032:	f845 c002 	str.w	ip, [r5, r2]
 8006036:	9a03      	ldr	r2, [sp, #12]
 8006038:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800603c:	3304      	adds	r3, #4
 800603e:	f1b9 0f00 	cmp.w	r9, #0
 8006042:	d021      	beq.n	8006088 <__multiply+0x144>
 8006044:	6829      	ldr	r1, [r5, #0]
 8006046:	f104 0c14 	add.w	ip, r4, #20
 800604a:	46ae      	mov	lr, r5
 800604c:	f04f 0a00 	mov.w	sl, #0
 8006050:	f8bc b000 	ldrh.w	fp, [ip]
 8006054:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006058:	fb09 220b 	mla	r2, r9, fp, r2
 800605c:	4452      	add	r2, sl
 800605e:	b289      	uxth	r1, r1
 8006060:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006064:	f84e 1b04 	str.w	r1, [lr], #4
 8006068:	f85c 1b04 	ldr.w	r1, [ip], #4
 800606c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006070:	f8be 1000 	ldrh.w	r1, [lr]
 8006074:	fb09 110a 	mla	r1, r9, sl, r1
 8006078:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800607c:	4567      	cmp	r7, ip
 800607e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006082:	d8e5      	bhi.n	8006050 <__multiply+0x10c>
 8006084:	9a01      	ldr	r2, [sp, #4]
 8006086:	50a9      	str	r1, [r5, r2]
 8006088:	3504      	adds	r5, #4
 800608a:	e799      	b.n	8005fc0 <__multiply+0x7c>
 800608c:	3e01      	subs	r6, #1
 800608e:	e79b      	b.n	8005fc8 <__multiply+0x84>
 8006090:	08006b28 	.word	0x08006b28
 8006094:	08006b39 	.word	0x08006b39

08006098 <__pow5mult>:
 8006098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800609c:	4615      	mov	r5, r2
 800609e:	f012 0203 	ands.w	r2, r2, #3
 80060a2:	4606      	mov	r6, r0
 80060a4:	460f      	mov	r7, r1
 80060a6:	d007      	beq.n	80060b8 <__pow5mult+0x20>
 80060a8:	4c25      	ldr	r4, [pc, #148]	; (8006140 <__pow5mult+0xa8>)
 80060aa:	3a01      	subs	r2, #1
 80060ac:	2300      	movs	r3, #0
 80060ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060b2:	f7ff fe9d 	bl	8005df0 <__multadd>
 80060b6:	4607      	mov	r7, r0
 80060b8:	10ad      	asrs	r5, r5, #2
 80060ba:	d03d      	beq.n	8006138 <__pow5mult+0xa0>
 80060bc:	69f4      	ldr	r4, [r6, #28]
 80060be:	b97c      	cbnz	r4, 80060e0 <__pow5mult+0x48>
 80060c0:	2010      	movs	r0, #16
 80060c2:	f7ff fd7f 	bl	8005bc4 <malloc>
 80060c6:	4602      	mov	r2, r0
 80060c8:	61f0      	str	r0, [r6, #28]
 80060ca:	b928      	cbnz	r0, 80060d8 <__pow5mult+0x40>
 80060cc:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <__pow5mult+0xac>)
 80060ce:	481e      	ldr	r0, [pc, #120]	; (8006148 <__pow5mult+0xb0>)
 80060d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80060d4:	f000 fbc0 	bl	8006858 <__assert_func>
 80060d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060dc:	6004      	str	r4, [r0, #0]
 80060de:	60c4      	str	r4, [r0, #12]
 80060e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060e8:	b94c      	cbnz	r4, 80060fe <__pow5mult+0x66>
 80060ea:	f240 2171 	movw	r1, #625	; 0x271
 80060ee:	4630      	mov	r0, r6
 80060f0:	f7ff ff12 	bl	8005f18 <__i2b>
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80060fa:	4604      	mov	r4, r0
 80060fc:	6003      	str	r3, [r0, #0]
 80060fe:	f04f 0900 	mov.w	r9, #0
 8006102:	07eb      	lsls	r3, r5, #31
 8006104:	d50a      	bpl.n	800611c <__pow5mult+0x84>
 8006106:	4639      	mov	r1, r7
 8006108:	4622      	mov	r2, r4
 800610a:	4630      	mov	r0, r6
 800610c:	f7ff ff1a 	bl	8005f44 <__multiply>
 8006110:	4639      	mov	r1, r7
 8006112:	4680      	mov	r8, r0
 8006114:	4630      	mov	r0, r6
 8006116:	f7ff fe49 	bl	8005dac <_Bfree>
 800611a:	4647      	mov	r7, r8
 800611c:	106d      	asrs	r5, r5, #1
 800611e:	d00b      	beq.n	8006138 <__pow5mult+0xa0>
 8006120:	6820      	ldr	r0, [r4, #0]
 8006122:	b938      	cbnz	r0, 8006134 <__pow5mult+0x9c>
 8006124:	4622      	mov	r2, r4
 8006126:	4621      	mov	r1, r4
 8006128:	4630      	mov	r0, r6
 800612a:	f7ff ff0b 	bl	8005f44 <__multiply>
 800612e:	6020      	str	r0, [r4, #0]
 8006130:	f8c0 9000 	str.w	r9, [r0]
 8006134:	4604      	mov	r4, r0
 8006136:	e7e4      	b.n	8006102 <__pow5mult+0x6a>
 8006138:	4638      	mov	r0, r7
 800613a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800613e:	bf00      	nop
 8006140:	08006c88 	.word	0x08006c88
 8006144:	08006ab9 	.word	0x08006ab9
 8006148:	08006b39 	.word	0x08006b39

0800614c <__lshift>:
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	460c      	mov	r4, r1
 8006152:	6849      	ldr	r1, [r1, #4]
 8006154:	6923      	ldr	r3, [r4, #16]
 8006156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800615a:	68a3      	ldr	r3, [r4, #8]
 800615c:	4607      	mov	r7, r0
 800615e:	4691      	mov	r9, r2
 8006160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006164:	f108 0601 	add.w	r6, r8, #1
 8006168:	42b3      	cmp	r3, r6
 800616a:	db0b      	blt.n	8006184 <__lshift+0x38>
 800616c:	4638      	mov	r0, r7
 800616e:	f7ff fddd 	bl	8005d2c <_Balloc>
 8006172:	4605      	mov	r5, r0
 8006174:	b948      	cbnz	r0, 800618a <__lshift+0x3e>
 8006176:	4602      	mov	r2, r0
 8006178:	4b28      	ldr	r3, [pc, #160]	; (800621c <__lshift+0xd0>)
 800617a:	4829      	ldr	r0, [pc, #164]	; (8006220 <__lshift+0xd4>)
 800617c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006180:	f000 fb6a 	bl	8006858 <__assert_func>
 8006184:	3101      	adds	r1, #1
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	e7ee      	b.n	8006168 <__lshift+0x1c>
 800618a:	2300      	movs	r3, #0
 800618c:	f100 0114 	add.w	r1, r0, #20
 8006190:	f100 0210 	add.w	r2, r0, #16
 8006194:	4618      	mov	r0, r3
 8006196:	4553      	cmp	r3, sl
 8006198:	db33      	blt.n	8006202 <__lshift+0xb6>
 800619a:	6920      	ldr	r0, [r4, #16]
 800619c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061a0:	f104 0314 	add.w	r3, r4, #20
 80061a4:	f019 091f 	ands.w	r9, r9, #31
 80061a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061b0:	d02b      	beq.n	800620a <__lshift+0xbe>
 80061b2:	f1c9 0e20 	rsb	lr, r9, #32
 80061b6:	468a      	mov	sl, r1
 80061b8:	2200      	movs	r2, #0
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	fa00 f009 	lsl.w	r0, r0, r9
 80061c0:	4310      	orrs	r0, r2
 80061c2:	f84a 0b04 	str.w	r0, [sl], #4
 80061c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ca:	459c      	cmp	ip, r3
 80061cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80061d0:	d8f3      	bhi.n	80061ba <__lshift+0x6e>
 80061d2:	ebac 0304 	sub.w	r3, ip, r4
 80061d6:	3b15      	subs	r3, #21
 80061d8:	f023 0303 	bic.w	r3, r3, #3
 80061dc:	3304      	adds	r3, #4
 80061de:	f104 0015 	add.w	r0, r4, #21
 80061e2:	4584      	cmp	ip, r0
 80061e4:	bf38      	it	cc
 80061e6:	2304      	movcc	r3, #4
 80061e8:	50ca      	str	r2, [r1, r3]
 80061ea:	b10a      	cbz	r2, 80061f0 <__lshift+0xa4>
 80061ec:	f108 0602 	add.w	r6, r8, #2
 80061f0:	3e01      	subs	r6, #1
 80061f2:	4638      	mov	r0, r7
 80061f4:	612e      	str	r6, [r5, #16]
 80061f6:	4621      	mov	r1, r4
 80061f8:	f7ff fdd8 	bl	8005dac <_Bfree>
 80061fc:	4628      	mov	r0, r5
 80061fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006202:	f842 0f04 	str.w	r0, [r2, #4]!
 8006206:	3301      	adds	r3, #1
 8006208:	e7c5      	b.n	8006196 <__lshift+0x4a>
 800620a:	3904      	subs	r1, #4
 800620c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006210:	f841 2f04 	str.w	r2, [r1, #4]!
 8006214:	459c      	cmp	ip, r3
 8006216:	d8f9      	bhi.n	800620c <__lshift+0xc0>
 8006218:	e7ea      	b.n	80061f0 <__lshift+0xa4>
 800621a:	bf00      	nop
 800621c:	08006b28 	.word	0x08006b28
 8006220:	08006b39 	.word	0x08006b39

08006224 <__mcmp>:
 8006224:	b530      	push	{r4, r5, lr}
 8006226:	6902      	ldr	r2, [r0, #16]
 8006228:	690c      	ldr	r4, [r1, #16]
 800622a:	1b12      	subs	r2, r2, r4
 800622c:	d10e      	bne.n	800624c <__mcmp+0x28>
 800622e:	f100 0314 	add.w	r3, r0, #20
 8006232:	3114      	adds	r1, #20
 8006234:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006238:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800623c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006240:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006244:	42a5      	cmp	r5, r4
 8006246:	d003      	beq.n	8006250 <__mcmp+0x2c>
 8006248:	d305      	bcc.n	8006256 <__mcmp+0x32>
 800624a:	2201      	movs	r2, #1
 800624c:	4610      	mov	r0, r2
 800624e:	bd30      	pop	{r4, r5, pc}
 8006250:	4283      	cmp	r3, r0
 8006252:	d3f3      	bcc.n	800623c <__mcmp+0x18>
 8006254:	e7fa      	b.n	800624c <__mcmp+0x28>
 8006256:	f04f 32ff 	mov.w	r2, #4294967295
 800625a:	e7f7      	b.n	800624c <__mcmp+0x28>

0800625c <__mdiff>:
 800625c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006260:	460c      	mov	r4, r1
 8006262:	4606      	mov	r6, r0
 8006264:	4611      	mov	r1, r2
 8006266:	4620      	mov	r0, r4
 8006268:	4690      	mov	r8, r2
 800626a:	f7ff ffdb 	bl	8006224 <__mcmp>
 800626e:	1e05      	subs	r5, r0, #0
 8006270:	d110      	bne.n	8006294 <__mdiff+0x38>
 8006272:	4629      	mov	r1, r5
 8006274:	4630      	mov	r0, r6
 8006276:	f7ff fd59 	bl	8005d2c <_Balloc>
 800627a:	b930      	cbnz	r0, 800628a <__mdiff+0x2e>
 800627c:	4b3a      	ldr	r3, [pc, #232]	; (8006368 <__mdiff+0x10c>)
 800627e:	4602      	mov	r2, r0
 8006280:	f240 2137 	movw	r1, #567	; 0x237
 8006284:	4839      	ldr	r0, [pc, #228]	; (800636c <__mdiff+0x110>)
 8006286:	f000 fae7 	bl	8006858 <__assert_func>
 800628a:	2301      	movs	r3, #1
 800628c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006294:	bfa4      	itt	ge
 8006296:	4643      	movge	r3, r8
 8006298:	46a0      	movge	r8, r4
 800629a:	4630      	mov	r0, r6
 800629c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062a0:	bfa6      	itte	ge
 80062a2:	461c      	movge	r4, r3
 80062a4:	2500      	movge	r5, #0
 80062a6:	2501      	movlt	r5, #1
 80062a8:	f7ff fd40 	bl	8005d2c <_Balloc>
 80062ac:	b920      	cbnz	r0, 80062b8 <__mdiff+0x5c>
 80062ae:	4b2e      	ldr	r3, [pc, #184]	; (8006368 <__mdiff+0x10c>)
 80062b0:	4602      	mov	r2, r0
 80062b2:	f240 2145 	movw	r1, #581	; 0x245
 80062b6:	e7e5      	b.n	8006284 <__mdiff+0x28>
 80062b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062bc:	6926      	ldr	r6, [r4, #16]
 80062be:	60c5      	str	r5, [r0, #12]
 80062c0:	f104 0914 	add.w	r9, r4, #20
 80062c4:	f108 0514 	add.w	r5, r8, #20
 80062c8:	f100 0e14 	add.w	lr, r0, #20
 80062cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80062d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062d4:	f108 0210 	add.w	r2, r8, #16
 80062d8:	46f2      	mov	sl, lr
 80062da:	2100      	movs	r1, #0
 80062dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80062e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062e4:	fa11 f88b 	uxtah	r8, r1, fp
 80062e8:	b299      	uxth	r1, r3
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	eba8 0801 	sub.w	r8, r8, r1
 80062f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80062f8:	fa1f f888 	uxth.w	r8, r8
 80062fc:	1419      	asrs	r1, r3, #16
 80062fe:	454e      	cmp	r6, r9
 8006300:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006304:	f84a 3b04 	str.w	r3, [sl], #4
 8006308:	d8e8      	bhi.n	80062dc <__mdiff+0x80>
 800630a:	1b33      	subs	r3, r6, r4
 800630c:	3b15      	subs	r3, #21
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	3304      	adds	r3, #4
 8006314:	3415      	adds	r4, #21
 8006316:	42a6      	cmp	r6, r4
 8006318:	bf38      	it	cc
 800631a:	2304      	movcc	r3, #4
 800631c:	441d      	add	r5, r3
 800631e:	4473      	add	r3, lr
 8006320:	469e      	mov	lr, r3
 8006322:	462e      	mov	r6, r5
 8006324:	4566      	cmp	r6, ip
 8006326:	d30e      	bcc.n	8006346 <__mdiff+0xea>
 8006328:	f10c 0203 	add.w	r2, ip, #3
 800632c:	1b52      	subs	r2, r2, r5
 800632e:	f022 0203 	bic.w	r2, r2, #3
 8006332:	3d03      	subs	r5, #3
 8006334:	45ac      	cmp	ip, r5
 8006336:	bf38      	it	cc
 8006338:	2200      	movcc	r2, #0
 800633a:	4413      	add	r3, r2
 800633c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006340:	b17a      	cbz	r2, 8006362 <__mdiff+0x106>
 8006342:	6107      	str	r7, [r0, #16]
 8006344:	e7a4      	b.n	8006290 <__mdiff+0x34>
 8006346:	f856 8b04 	ldr.w	r8, [r6], #4
 800634a:	fa11 f288 	uxtah	r2, r1, r8
 800634e:	1414      	asrs	r4, r2, #16
 8006350:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006354:	b292      	uxth	r2, r2
 8006356:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800635a:	f84e 2b04 	str.w	r2, [lr], #4
 800635e:	1421      	asrs	r1, r4, #16
 8006360:	e7e0      	b.n	8006324 <__mdiff+0xc8>
 8006362:	3f01      	subs	r7, #1
 8006364:	e7ea      	b.n	800633c <__mdiff+0xe0>
 8006366:	bf00      	nop
 8006368:	08006b28 	.word	0x08006b28
 800636c:	08006b39 	.word	0x08006b39

08006370 <__d2b>:
 8006370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006374:	460f      	mov	r7, r1
 8006376:	2101      	movs	r1, #1
 8006378:	ec59 8b10 	vmov	r8, r9, d0
 800637c:	4616      	mov	r6, r2
 800637e:	f7ff fcd5 	bl	8005d2c <_Balloc>
 8006382:	4604      	mov	r4, r0
 8006384:	b930      	cbnz	r0, 8006394 <__d2b+0x24>
 8006386:	4602      	mov	r2, r0
 8006388:	4b24      	ldr	r3, [pc, #144]	; (800641c <__d2b+0xac>)
 800638a:	4825      	ldr	r0, [pc, #148]	; (8006420 <__d2b+0xb0>)
 800638c:	f240 310f 	movw	r1, #783	; 0x30f
 8006390:	f000 fa62 	bl	8006858 <__assert_func>
 8006394:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800639c:	bb2d      	cbnz	r5, 80063ea <__d2b+0x7a>
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	f1b8 0300 	subs.w	r3, r8, #0
 80063a4:	d026      	beq.n	80063f4 <__d2b+0x84>
 80063a6:	4668      	mov	r0, sp
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	f7ff fd87 	bl	8005ebc <__lo0bits>
 80063ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063b2:	b1e8      	cbz	r0, 80063f0 <__d2b+0x80>
 80063b4:	f1c0 0320 	rsb	r3, r0, #32
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	430b      	orrs	r3, r1
 80063be:	40c2      	lsrs	r2, r0
 80063c0:	6163      	str	r3, [r4, #20]
 80063c2:	9201      	str	r2, [sp, #4]
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	61a3      	str	r3, [r4, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bf14      	ite	ne
 80063cc:	2202      	movne	r2, #2
 80063ce:	2201      	moveq	r2, #1
 80063d0:	6122      	str	r2, [r4, #16]
 80063d2:	b1bd      	cbz	r5, 8006404 <__d2b+0x94>
 80063d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063d8:	4405      	add	r5, r0
 80063da:	603d      	str	r5, [r7, #0]
 80063dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063e0:	6030      	str	r0, [r6, #0]
 80063e2:	4620      	mov	r0, r4
 80063e4:	b003      	add	sp, #12
 80063e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ee:	e7d6      	b.n	800639e <__d2b+0x2e>
 80063f0:	6161      	str	r1, [r4, #20]
 80063f2:	e7e7      	b.n	80063c4 <__d2b+0x54>
 80063f4:	a801      	add	r0, sp, #4
 80063f6:	f7ff fd61 	bl	8005ebc <__lo0bits>
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	6163      	str	r3, [r4, #20]
 80063fe:	3020      	adds	r0, #32
 8006400:	2201      	movs	r2, #1
 8006402:	e7e5      	b.n	80063d0 <__d2b+0x60>
 8006404:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006408:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800640c:	6038      	str	r0, [r7, #0]
 800640e:	6918      	ldr	r0, [r3, #16]
 8006410:	f7ff fd34 	bl	8005e7c <__hi0bits>
 8006414:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006418:	e7e2      	b.n	80063e0 <__d2b+0x70>
 800641a:	bf00      	nop
 800641c:	08006b28 	.word	0x08006b28
 8006420:	08006b39 	.word	0x08006b39

08006424 <__sfputc_r>:
 8006424:	6893      	ldr	r3, [r2, #8]
 8006426:	3b01      	subs	r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	b410      	push	{r4}
 800642c:	6093      	str	r3, [r2, #8]
 800642e:	da08      	bge.n	8006442 <__sfputc_r+0x1e>
 8006430:	6994      	ldr	r4, [r2, #24]
 8006432:	42a3      	cmp	r3, r4
 8006434:	db01      	blt.n	800643a <__sfputc_r+0x16>
 8006436:	290a      	cmp	r1, #10
 8006438:	d103      	bne.n	8006442 <__sfputc_r+0x1e>
 800643a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800643e:	f7fe bbe4 	b.w	8004c0a <__swbuf_r>
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	1c58      	adds	r0, r3, #1
 8006446:	6010      	str	r0, [r2, #0]
 8006448:	7019      	strb	r1, [r3, #0]
 800644a:	4608      	mov	r0, r1
 800644c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006450:	4770      	bx	lr

08006452 <__sfputs_r>:
 8006452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006454:	4606      	mov	r6, r0
 8006456:	460f      	mov	r7, r1
 8006458:	4614      	mov	r4, r2
 800645a:	18d5      	adds	r5, r2, r3
 800645c:	42ac      	cmp	r4, r5
 800645e:	d101      	bne.n	8006464 <__sfputs_r+0x12>
 8006460:	2000      	movs	r0, #0
 8006462:	e007      	b.n	8006474 <__sfputs_r+0x22>
 8006464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006468:	463a      	mov	r2, r7
 800646a:	4630      	mov	r0, r6
 800646c:	f7ff ffda 	bl	8006424 <__sfputc_r>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d1f3      	bne.n	800645c <__sfputs_r+0xa>
 8006474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006478 <_vfiprintf_r>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	460d      	mov	r5, r1
 800647e:	b09d      	sub	sp, #116	; 0x74
 8006480:	4614      	mov	r4, r2
 8006482:	4698      	mov	r8, r3
 8006484:	4606      	mov	r6, r0
 8006486:	b118      	cbz	r0, 8006490 <_vfiprintf_r+0x18>
 8006488:	6a03      	ldr	r3, [r0, #32]
 800648a:	b90b      	cbnz	r3, 8006490 <_vfiprintf_r+0x18>
 800648c:	f7fe face 	bl	8004a2c <__sinit>
 8006490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006492:	07d9      	lsls	r1, r3, #31
 8006494:	d405      	bmi.n	80064a2 <_vfiprintf_r+0x2a>
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	059a      	lsls	r2, r3, #22
 800649a:	d402      	bmi.n	80064a2 <_vfiprintf_r+0x2a>
 800649c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800649e:	f7fe fcc6 	bl	8004e2e <__retarget_lock_acquire_recursive>
 80064a2:	89ab      	ldrh	r3, [r5, #12]
 80064a4:	071b      	lsls	r3, r3, #28
 80064a6:	d501      	bpl.n	80064ac <_vfiprintf_r+0x34>
 80064a8:	692b      	ldr	r3, [r5, #16]
 80064aa:	b99b      	cbnz	r3, 80064d4 <_vfiprintf_r+0x5c>
 80064ac:	4629      	mov	r1, r5
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7fe fbe8 	bl	8004c84 <__swsetup_r>
 80064b4:	b170      	cbz	r0, 80064d4 <_vfiprintf_r+0x5c>
 80064b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064b8:	07dc      	lsls	r4, r3, #31
 80064ba:	d504      	bpl.n	80064c6 <_vfiprintf_r+0x4e>
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	b01d      	add	sp, #116	; 0x74
 80064c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	0598      	lsls	r0, r3, #22
 80064ca:	d4f7      	bmi.n	80064bc <_vfiprintf_r+0x44>
 80064cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ce:	f7fe fcaf 	bl	8004e30 <__retarget_lock_release_recursive>
 80064d2:	e7f3      	b.n	80064bc <_vfiprintf_r+0x44>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9309      	str	r3, [sp, #36]	; 0x24
 80064d8:	2320      	movs	r3, #32
 80064da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064de:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e2:	2330      	movs	r3, #48	; 0x30
 80064e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006698 <_vfiprintf_r+0x220>
 80064e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ec:	f04f 0901 	mov.w	r9, #1
 80064f0:	4623      	mov	r3, r4
 80064f2:	469a      	mov	sl, r3
 80064f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064f8:	b10a      	cbz	r2, 80064fe <_vfiprintf_r+0x86>
 80064fa:	2a25      	cmp	r2, #37	; 0x25
 80064fc:	d1f9      	bne.n	80064f2 <_vfiprintf_r+0x7a>
 80064fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006502:	d00b      	beq.n	800651c <_vfiprintf_r+0xa4>
 8006504:	465b      	mov	r3, fp
 8006506:	4622      	mov	r2, r4
 8006508:	4629      	mov	r1, r5
 800650a:	4630      	mov	r0, r6
 800650c:	f7ff ffa1 	bl	8006452 <__sfputs_r>
 8006510:	3001      	adds	r0, #1
 8006512:	f000 80a9 	beq.w	8006668 <_vfiprintf_r+0x1f0>
 8006516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006518:	445a      	add	r2, fp
 800651a:	9209      	str	r2, [sp, #36]	; 0x24
 800651c:	f89a 3000 	ldrb.w	r3, [sl]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80a1 	beq.w	8006668 <_vfiprintf_r+0x1f0>
 8006526:	2300      	movs	r3, #0
 8006528:	f04f 32ff 	mov.w	r2, #4294967295
 800652c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006530:	f10a 0a01 	add.w	sl, sl, #1
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	9307      	str	r3, [sp, #28]
 8006538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800653c:	931a      	str	r3, [sp, #104]	; 0x68
 800653e:	4654      	mov	r4, sl
 8006540:	2205      	movs	r2, #5
 8006542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006546:	4854      	ldr	r0, [pc, #336]	; (8006698 <_vfiprintf_r+0x220>)
 8006548:	f7f9 fe52 	bl	80001f0 <memchr>
 800654c:	9a04      	ldr	r2, [sp, #16]
 800654e:	b9d8      	cbnz	r0, 8006588 <_vfiprintf_r+0x110>
 8006550:	06d1      	lsls	r1, r2, #27
 8006552:	bf44      	itt	mi
 8006554:	2320      	movmi	r3, #32
 8006556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800655a:	0713      	lsls	r3, r2, #28
 800655c:	bf44      	itt	mi
 800655e:	232b      	movmi	r3, #43	; 0x2b
 8006560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006564:	f89a 3000 	ldrb.w	r3, [sl]
 8006568:	2b2a      	cmp	r3, #42	; 0x2a
 800656a:	d015      	beq.n	8006598 <_vfiprintf_r+0x120>
 800656c:	9a07      	ldr	r2, [sp, #28]
 800656e:	4654      	mov	r4, sl
 8006570:	2000      	movs	r0, #0
 8006572:	f04f 0c0a 	mov.w	ip, #10
 8006576:	4621      	mov	r1, r4
 8006578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800657c:	3b30      	subs	r3, #48	; 0x30
 800657e:	2b09      	cmp	r3, #9
 8006580:	d94d      	bls.n	800661e <_vfiprintf_r+0x1a6>
 8006582:	b1b0      	cbz	r0, 80065b2 <_vfiprintf_r+0x13a>
 8006584:	9207      	str	r2, [sp, #28]
 8006586:	e014      	b.n	80065b2 <_vfiprintf_r+0x13a>
 8006588:	eba0 0308 	sub.w	r3, r0, r8
 800658c:	fa09 f303 	lsl.w	r3, r9, r3
 8006590:	4313      	orrs	r3, r2
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	46a2      	mov	sl, r4
 8006596:	e7d2      	b.n	800653e <_vfiprintf_r+0xc6>
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	1d19      	adds	r1, r3, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	9103      	str	r1, [sp, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bfbb      	ittet	lt
 80065a4:	425b      	neglt	r3, r3
 80065a6:	f042 0202 	orrlt.w	r2, r2, #2
 80065aa:	9307      	strge	r3, [sp, #28]
 80065ac:	9307      	strlt	r3, [sp, #28]
 80065ae:	bfb8      	it	lt
 80065b0:	9204      	strlt	r2, [sp, #16]
 80065b2:	7823      	ldrb	r3, [r4, #0]
 80065b4:	2b2e      	cmp	r3, #46	; 0x2e
 80065b6:	d10c      	bne.n	80065d2 <_vfiprintf_r+0x15a>
 80065b8:	7863      	ldrb	r3, [r4, #1]
 80065ba:	2b2a      	cmp	r3, #42	; 0x2a
 80065bc:	d134      	bne.n	8006628 <_vfiprintf_r+0x1b0>
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	1d1a      	adds	r2, r3, #4
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	9203      	str	r2, [sp, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfb8      	it	lt
 80065ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80065ce:	3402      	adds	r4, #2
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80066a8 <_vfiprintf_r+0x230>
 80065d6:	7821      	ldrb	r1, [r4, #0]
 80065d8:	2203      	movs	r2, #3
 80065da:	4650      	mov	r0, sl
 80065dc:	f7f9 fe08 	bl	80001f0 <memchr>
 80065e0:	b138      	cbz	r0, 80065f2 <_vfiprintf_r+0x17a>
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	eba0 000a 	sub.w	r0, r0, sl
 80065e8:	2240      	movs	r2, #64	; 0x40
 80065ea:	4082      	lsls	r2, r0
 80065ec:	4313      	orrs	r3, r2
 80065ee:	3401      	adds	r4, #1
 80065f0:	9304      	str	r3, [sp, #16]
 80065f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f6:	4829      	ldr	r0, [pc, #164]	; (800669c <_vfiprintf_r+0x224>)
 80065f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065fc:	2206      	movs	r2, #6
 80065fe:	f7f9 fdf7 	bl	80001f0 <memchr>
 8006602:	2800      	cmp	r0, #0
 8006604:	d03f      	beq.n	8006686 <_vfiprintf_r+0x20e>
 8006606:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <_vfiprintf_r+0x228>)
 8006608:	bb1b      	cbnz	r3, 8006652 <_vfiprintf_r+0x1da>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	3307      	adds	r3, #7
 800660e:	f023 0307 	bic.w	r3, r3, #7
 8006612:	3308      	adds	r3, #8
 8006614:	9303      	str	r3, [sp, #12]
 8006616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006618:	443b      	add	r3, r7
 800661a:	9309      	str	r3, [sp, #36]	; 0x24
 800661c:	e768      	b.n	80064f0 <_vfiprintf_r+0x78>
 800661e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006622:	460c      	mov	r4, r1
 8006624:	2001      	movs	r0, #1
 8006626:	e7a6      	b.n	8006576 <_vfiprintf_r+0xfe>
 8006628:	2300      	movs	r3, #0
 800662a:	3401      	adds	r4, #1
 800662c:	9305      	str	r3, [sp, #20]
 800662e:	4619      	mov	r1, r3
 8006630:	f04f 0c0a 	mov.w	ip, #10
 8006634:	4620      	mov	r0, r4
 8006636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800663a:	3a30      	subs	r2, #48	; 0x30
 800663c:	2a09      	cmp	r2, #9
 800663e:	d903      	bls.n	8006648 <_vfiprintf_r+0x1d0>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0c6      	beq.n	80065d2 <_vfiprintf_r+0x15a>
 8006644:	9105      	str	r1, [sp, #20]
 8006646:	e7c4      	b.n	80065d2 <_vfiprintf_r+0x15a>
 8006648:	fb0c 2101 	mla	r1, ip, r1, r2
 800664c:	4604      	mov	r4, r0
 800664e:	2301      	movs	r3, #1
 8006650:	e7f0      	b.n	8006634 <_vfiprintf_r+0x1bc>
 8006652:	ab03      	add	r3, sp, #12
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	462a      	mov	r2, r5
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <_vfiprintf_r+0x22c>)
 800665a:	a904      	add	r1, sp, #16
 800665c:	4630      	mov	r0, r6
 800665e:	f7fd fcd1 	bl	8004004 <_printf_float>
 8006662:	4607      	mov	r7, r0
 8006664:	1c78      	adds	r0, r7, #1
 8006666:	d1d6      	bne.n	8006616 <_vfiprintf_r+0x19e>
 8006668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800666a:	07d9      	lsls	r1, r3, #31
 800666c:	d405      	bmi.n	800667a <_vfiprintf_r+0x202>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	059a      	lsls	r2, r3, #22
 8006672:	d402      	bmi.n	800667a <_vfiprintf_r+0x202>
 8006674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006676:	f7fe fbdb 	bl	8004e30 <__retarget_lock_release_recursive>
 800667a:	89ab      	ldrh	r3, [r5, #12]
 800667c:	065b      	lsls	r3, r3, #25
 800667e:	f53f af1d 	bmi.w	80064bc <_vfiprintf_r+0x44>
 8006682:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006684:	e71c      	b.n	80064c0 <_vfiprintf_r+0x48>
 8006686:	ab03      	add	r3, sp, #12
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	462a      	mov	r2, r5
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <_vfiprintf_r+0x22c>)
 800668e:	a904      	add	r1, sp, #16
 8006690:	4630      	mov	r0, r6
 8006692:	f7fd ff5b 	bl	800454c <_printf_i>
 8006696:	e7e4      	b.n	8006662 <_vfiprintf_r+0x1ea>
 8006698:	08006c94 	.word	0x08006c94
 800669c:	08006c9e 	.word	0x08006c9e
 80066a0:	08004005 	.word	0x08004005
 80066a4:	08006453 	.word	0x08006453
 80066a8:	08006c9a 	.word	0x08006c9a

080066ac <__swhatbuf_r>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	460c      	mov	r4, r1
 80066b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b4:	2900      	cmp	r1, #0
 80066b6:	b096      	sub	sp, #88	; 0x58
 80066b8:	4615      	mov	r5, r2
 80066ba:	461e      	mov	r6, r3
 80066bc:	da0d      	bge.n	80066da <__swhatbuf_r+0x2e>
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066c4:	f04f 0100 	mov.w	r1, #0
 80066c8:	bf0c      	ite	eq
 80066ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80066ce:	2340      	movne	r3, #64	; 0x40
 80066d0:	2000      	movs	r0, #0
 80066d2:	6031      	str	r1, [r6, #0]
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	b016      	add	sp, #88	; 0x58
 80066d8:	bd70      	pop	{r4, r5, r6, pc}
 80066da:	466a      	mov	r2, sp
 80066dc:	f000 f87c 	bl	80067d8 <_fstat_r>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	dbec      	blt.n	80066be <__swhatbuf_r+0x12>
 80066e4:	9901      	ldr	r1, [sp, #4]
 80066e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80066ee:	4259      	negs	r1, r3
 80066f0:	4159      	adcs	r1, r3
 80066f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066f6:	e7eb      	b.n	80066d0 <__swhatbuf_r+0x24>

080066f8 <__smakebuf_r>:
 80066f8:	898b      	ldrh	r3, [r1, #12]
 80066fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066fc:	079d      	lsls	r5, r3, #30
 80066fe:	4606      	mov	r6, r0
 8006700:	460c      	mov	r4, r1
 8006702:	d507      	bpl.n	8006714 <__smakebuf_r+0x1c>
 8006704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	6123      	str	r3, [r4, #16]
 800670c:	2301      	movs	r3, #1
 800670e:	6163      	str	r3, [r4, #20]
 8006710:	b002      	add	sp, #8
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	ab01      	add	r3, sp, #4
 8006716:	466a      	mov	r2, sp
 8006718:	f7ff ffc8 	bl	80066ac <__swhatbuf_r>
 800671c:	9900      	ldr	r1, [sp, #0]
 800671e:	4605      	mov	r5, r0
 8006720:	4630      	mov	r0, r6
 8006722:	f7ff fa77 	bl	8005c14 <_malloc_r>
 8006726:	b948      	cbnz	r0, 800673c <__smakebuf_r+0x44>
 8006728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672c:	059a      	lsls	r2, r3, #22
 800672e:	d4ef      	bmi.n	8006710 <__smakebuf_r+0x18>
 8006730:	f023 0303 	bic.w	r3, r3, #3
 8006734:	f043 0302 	orr.w	r3, r3, #2
 8006738:	81a3      	strh	r3, [r4, #12]
 800673a:	e7e3      	b.n	8006704 <__smakebuf_r+0xc>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	6020      	str	r0, [r4, #0]
 8006740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	6163      	str	r3, [r4, #20]
 800674a:	9b01      	ldr	r3, [sp, #4]
 800674c:	6120      	str	r0, [r4, #16]
 800674e:	b15b      	cbz	r3, 8006768 <__smakebuf_r+0x70>
 8006750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006754:	4630      	mov	r0, r6
 8006756:	f000 f851 	bl	80067fc <_isatty_r>
 800675a:	b128      	cbz	r0, 8006768 <__smakebuf_r+0x70>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	431d      	orrs	r5, r3
 800676c:	81a5      	strh	r5, [r4, #12]
 800676e:	e7cf      	b.n	8006710 <__smakebuf_r+0x18>

08006770 <_putc_r>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	460d      	mov	r5, r1
 8006774:	4614      	mov	r4, r2
 8006776:	4606      	mov	r6, r0
 8006778:	b118      	cbz	r0, 8006782 <_putc_r+0x12>
 800677a:	6a03      	ldr	r3, [r0, #32]
 800677c:	b90b      	cbnz	r3, 8006782 <_putc_r+0x12>
 800677e:	f7fe f955 	bl	8004a2c <__sinit>
 8006782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006784:	07d8      	lsls	r0, r3, #31
 8006786:	d405      	bmi.n	8006794 <_putc_r+0x24>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	0599      	lsls	r1, r3, #22
 800678c:	d402      	bmi.n	8006794 <_putc_r+0x24>
 800678e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006790:	f7fe fb4d 	bl	8004e2e <__retarget_lock_acquire_recursive>
 8006794:	68a3      	ldr	r3, [r4, #8]
 8006796:	3b01      	subs	r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	da05      	bge.n	80067aa <_putc_r+0x3a>
 800679e:	69a2      	ldr	r2, [r4, #24]
 80067a0:	4293      	cmp	r3, r2
 80067a2:	db12      	blt.n	80067ca <_putc_r+0x5a>
 80067a4:	b2eb      	uxtb	r3, r5
 80067a6:	2b0a      	cmp	r3, #10
 80067a8:	d00f      	beq.n	80067ca <_putc_r+0x5a>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	6022      	str	r2, [r4, #0]
 80067b0:	701d      	strb	r5, [r3, #0]
 80067b2:	b2ed      	uxtb	r5, r5
 80067b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b6:	07da      	lsls	r2, r3, #31
 80067b8:	d405      	bmi.n	80067c6 <_putc_r+0x56>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	059b      	lsls	r3, r3, #22
 80067be:	d402      	bmi.n	80067c6 <_putc_r+0x56>
 80067c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c2:	f7fe fb35 	bl	8004e30 <__retarget_lock_release_recursive>
 80067c6:	4628      	mov	r0, r5
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	4629      	mov	r1, r5
 80067cc:	4622      	mov	r2, r4
 80067ce:	4630      	mov	r0, r6
 80067d0:	f7fe fa1b 	bl	8004c0a <__swbuf_r>
 80067d4:	4605      	mov	r5, r0
 80067d6:	e7ed      	b.n	80067b4 <_putc_r+0x44>

080067d8 <_fstat_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_fstat_r+0x20>)
 80067dc:	2300      	movs	r3, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	4611      	mov	r1, r2
 80067e4:	602b      	str	r3, [r5, #0]
 80067e6:	f7fa fe02 	bl	80013ee <_fstat>
 80067ea:	1c43      	adds	r3, r0, #1
 80067ec:	d102      	bne.n	80067f4 <_fstat_r+0x1c>
 80067ee:	682b      	ldr	r3, [r5, #0]
 80067f0:	b103      	cbz	r3, 80067f4 <_fstat_r+0x1c>
 80067f2:	6023      	str	r3, [r4, #0]
 80067f4:	bd38      	pop	{r3, r4, r5, pc}
 80067f6:	bf00      	nop
 80067f8:	200003d0 	.word	0x200003d0

080067fc <_isatty_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4d06      	ldr	r5, [pc, #24]	; (8006818 <_isatty_r+0x1c>)
 8006800:	2300      	movs	r3, #0
 8006802:	4604      	mov	r4, r0
 8006804:	4608      	mov	r0, r1
 8006806:	602b      	str	r3, [r5, #0]
 8006808:	f7fa fe01 	bl	800140e <_isatty>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_isatty_r+0x1a>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_isatty_r+0x1a>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	200003d0 	.word	0x200003d0

0800681c <_sbrk_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d06      	ldr	r5, [pc, #24]	; (8006838 <_sbrk_r+0x1c>)
 8006820:	2300      	movs	r3, #0
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fa fe0a 	bl	8001440 <_sbrk>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_sbrk_r+0x1a>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_sbrk_r+0x1a>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	200003d0 	.word	0x200003d0

0800683c <memcpy>:
 800683c:	440a      	add	r2, r1
 800683e:	4291      	cmp	r1, r2
 8006840:	f100 33ff 	add.w	r3, r0, #4294967295
 8006844:	d100      	bne.n	8006848 <memcpy+0xc>
 8006846:	4770      	bx	lr
 8006848:	b510      	push	{r4, lr}
 800684a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800684e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006852:	4291      	cmp	r1, r2
 8006854:	d1f9      	bne.n	800684a <memcpy+0xe>
 8006856:	bd10      	pop	{r4, pc}

08006858 <__assert_func>:
 8006858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800685a:	4614      	mov	r4, r2
 800685c:	461a      	mov	r2, r3
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <__assert_func+0x2c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4605      	mov	r5, r0
 8006864:	68d8      	ldr	r0, [r3, #12]
 8006866:	b14c      	cbz	r4, 800687c <__assert_func+0x24>
 8006868:	4b07      	ldr	r3, [pc, #28]	; (8006888 <__assert_func+0x30>)
 800686a:	9100      	str	r1, [sp, #0]
 800686c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006870:	4906      	ldr	r1, [pc, #24]	; (800688c <__assert_func+0x34>)
 8006872:	462b      	mov	r3, r5
 8006874:	f000 f844 	bl	8006900 <fiprintf>
 8006878:	f000 f854 	bl	8006924 <abort>
 800687c:	4b04      	ldr	r3, [pc, #16]	; (8006890 <__assert_func+0x38>)
 800687e:	461c      	mov	r4, r3
 8006880:	e7f3      	b.n	800686a <__assert_func+0x12>
 8006882:	bf00      	nop
 8006884:	20000064 	.word	0x20000064
 8006888:	08006caf 	.word	0x08006caf
 800688c:	08006cbc 	.word	0x08006cbc
 8006890:	08006cea 	.word	0x08006cea

08006894 <_calloc_r>:
 8006894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006896:	fba1 2402 	umull	r2, r4, r1, r2
 800689a:	b94c      	cbnz	r4, 80068b0 <_calloc_r+0x1c>
 800689c:	4611      	mov	r1, r2
 800689e:	9201      	str	r2, [sp, #4]
 80068a0:	f7ff f9b8 	bl	8005c14 <_malloc_r>
 80068a4:	9a01      	ldr	r2, [sp, #4]
 80068a6:	4605      	mov	r5, r0
 80068a8:	b930      	cbnz	r0, 80068b8 <_calloc_r+0x24>
 80068aa:	4628      	mov	r0, r5
 80068ac:	b003      	add	sp, #12
 80068ae:	bd30      	pop	{r4, r5, pc}
 80068b0:	220c      	movs	r2, #12
 80068b2:	6002      	str	r2, [r0, #0]
 80068b4:	2500      	movs	r5, #0
 80068b6:	e7f8      	b.n	80068aa <_calloc_r+0x16>
 80068b8:	4621      	mov	r1, r4
 80068ba:	f7fe fa3b 	bl	8004d34 <memset>
 80068be:	e7f4      	b.n	80068aa <_calloc_r+0x16>

080068c0 <__ascii_mbtowc>:
 80068c0:	b082      	sub	sp, #8
 80068c2:	b901      	cbnz	r1, 80068c6 <__ascii_mbtowc+0x6>
 80068c4:	a901      	add	r1, sp, #4
 80068c6:	b142      	cbz	r2, 80068da <__ascii_mbtowc+0x1a>
 80068c8:	b14b      	cbz	r3, 80068de <__ascii_mbtowc+0x1e>
 80068ca:	7813      	ldrb	r3, [r2, #0]
 80068cc:	600b      	str	r3, [r1, #0]
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	1e10      	subs	r0, r2, #0
 80068d2:	bf18      	it	ne
 80068d4:	2001      	movne	r0, #1
 80068d6:	b002      	add	sp, #8
 80068d8:	4770      	bx	lr
 80068da:	4610      	mov	r0, r2
 80068dc:	e7fb      	b.n	80068d6 <__ascii_mbtowc+0x16>
 80068de:	f06f 0001 	mvn.w	r0, #1
 80068e2:	e7f8      	b.n	80068d6 <__ascii_mbtowc+0x16>

080068e4 <__ascii_wctomb>:
 80068e4:	b149      	cbz	r1, 80068fa <__ascii_wctomb+0x16>
 80068e6:	2aff      	cmp	r2, #255	; 0xff
 80068e8:	bf85      	ittet	hi
 80068ea:	238a      	movhi	r3, #138	; 0x8a
 80068ec:	6003      	strhi	r3, [r0, #0]
 80068ee:	700a      	strbls	r2, [r1, #0]
 80068f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80068f4:	bf98      	it	ls
 80068f6:	2001      	movls	r0, #1
 80068f8:	4770      	bx	lr
 80068fa:	4608      	mov	r0, r1
 80068fc:	4770      	bx	lr
	...

08006900 <fiprintf>:
 8006900:	b40e      	push	{r1, r2, r3}
 8006902:	b503      	push	{r0, r1, lr}
 8006904:	4601      	mov	r1, r0
 8006906:	ab03      	add	r3, sp, #12
 8006908:	4805      	ldr	r0, [pc, #20]	; (8006920 <fiprintf+0x20>)
 800690a:	f853 2b04 	ldr.w	r2, [r3], #4
 800690e:	6800      	ldr	r0, [r0, #0]
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	f7ff fdb1 	bl	8006478 <_vfiprintf_r>
 8006916:	b002      	add	sp, #8
 8006918:	f85d eb04 	ldr.w	lr, [sp], #4
 800691c:	b003      	add	sp, #12
 800691e:	4770      	bx	lr
 8006920:	20000064 	.word	0x20000064

08006924 <abort>:
 8006924:	b508      	push	{r3, lr}
 8006926:	2006      	movs	r0, #6
 8006928:	f000 f82c 	bl	8006984 <raise>
 800692c:	2001      	movs	r0, #1
 800692e:	f7fa fd0f 	bl	8001350 <_exit>

08006932 <_raise_r>:
 8006932:	291f      	cmp	r1, #31
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4604      	mov	r4, r0
 8006938:	460d      	mov	r5, r1
 800693a:	d904      	bls.n	8006946 <_raise_r+0x14>
 800693c:	2316      	movs	r3, #22
 800693e:	6003      	str	r3, [r0, #0]
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	bd38      	pop	{r3, r4, r5, pc}
 8006946:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006948:	b112      	cbz	r2, 8006950 <_raise_r+0x1e>
 800694a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800694e:	b94b      	cbnz	r3, 8006964 <_raise_r+0x32>
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f831 	bl	80069b8 <_getpid_r>
 8006956:	462a      	mov	r2, r5
 8006958:	4601      	mov	r1, r0
 800695a:	4620      	mov	r0, r4
 800695c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006960:	f000 b818 	b.w	8006994 <_kill_r>
 8006964:	2b01      	cmp	r3, #1
 8006966:	d00a      	beq.n	800697e <_raise_r+0x4c>
 8006968:	1c59      	adds	r1, r3, #1
 800696a:	d103      	bne.n	8006974 <_raise_r+0x42>
 800696c:	2316      	movs	r3, #22
 800696e:	6003      	str	r3, [r0, #0]
 8006970:	2001      	movs	r0, #1
 8006972:	e7e7      	b.n	8006944 <_raise_r+0x12>
 8006974:	2400      	movs	r4, #0
 8006976:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800697a:	4628      	mov	r0, r5
 800697c:	4798      	blx	r3
 800697e:	2000      	movs	r0, #0
 8006980:	e7e0      	b.n	8006944 <_raise_r+0x12>
	...

08006984 <raise>:
 8006984:	4b02      	ldr	r3, [pc, #8]	; (8006990 <raise+0xc>)
 8006986:	4601      	mov	r1, r0
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	f7ff bfd2 	b.w	8006932 <_raise_r>
 800698e:	bf00      	nop
 8006990:	20000064 	.word	0x20000064

08006994 <_kill_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4d07      	ldr	r5, [pc, #28]	; (80069b4 <_kill_r+0x20>)
 8006998:	2300      	movs	r3, #0
 800699a:	4604      	mov	r4, r0
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	f7fa fcc5 	bl	8001330 <_kill>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d102      	bne.n	80069b0 <_kill_r+0x1c>
 80069aa:	682b      	ldr	r3, [r5, #0]
 80069ac:	b103      	cbz	r3, 80069b0 <_kill_r+0x1c>
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	bd38      	pop	{r3, r4, r5, pc}
 80069b2:	bf00      	nop
 80069b4:	200003d0 	.word	0x200003d0

080069b8 <_getpid_r>:
 80069b8:	f7fa bcb2 	b.w	8001320 <_getpid>

080069bc <_init>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr

080069c8 <_fini>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr
