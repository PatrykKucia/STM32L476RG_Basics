
UART_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08006740  08006740  00016740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b0c  08006b0c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b14  08006b14  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001d4  08006cf0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08006cf0  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000addf  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a0c  00000000  00000000  0002b026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002ca38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000726  00000000  00000000  0002d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026612  00000000  00000000  0002dac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b61f  00000000  00000000  000540d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e950a  00000000  00000000  0005f6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000362c  00000000  00000000  00148c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006728 	.word	0x08006728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006728 	.word	0x08006728

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if(ch=='\n')
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0a      	cmp	r3, #10
 8000eb0:	d109      	bne.n	8000ec6 <__io_putchar+0x22>
	{
		uint8_t ch2='\r';	//to fix end of line
 8000eb2:	230d      	movs	r3, #13
 8000eb4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 8000eb6:	f107 010f 	add.w	r1, r7, #15
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <__io_putchar+0x3c>)
 8000ec2:	f002 f8ef 	bl	80030a4 <HAL_UART_Transmit>
	}
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ec6:	1d39      	adds	r1, r7, #4
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <__io_putchar+0x3c>)
 8000ed0:	f002 f8e8 	bl	80030a4 <HAL_UART_Transmit>
    return 1;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001f0 	.word	0x200001f0

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fa68 	bl	80013be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f827 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f89b 	bl	800102c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ef6:	f000 f869 	bl	8000fcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  uint8_t value;

	 text = HAL_UART_Receive(&huart2, &value, 1, 2000);
 8000efa:	1db9      	adds	r1, r7, #6
 8000efc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f00:	2201      	movs	r2, #1
 8000f02:	480c      	ldr	r0, [pc, #48]	; (8000f34 <main+0x50>)
 8000f04:	f002 f958 	bl	80031b8 <HAL_UART_Receive>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
	 if(text==HAL_OK)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <main+0x3a>
	 {
	 printf("received : %c\n", value);
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <main+0x54>)
 8000f18:	f003 fcd0 	bl	80048bc <iprintf>
 8000f1c:	e7ed      	b.n	8000efa <main+0x16>
	 }
	 else
	 {
	 printf(".");
 8000f1e:	202e      	movs	r0, #46	; 0x2e
 8000f20:	f003 fcde 	bl	80048e0 <putchar>
	 fflush(stdout);
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <main+0x58>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fbf0 	bl	8004710 <fflush>
  {
 8000f30:	e7e3      	b.n	8000efa <main+0x16>
 8000f32:	bf00      	nop
 8000f34:	200001f0 	.word	0x200001f0
 8000f38:	08006740 	.word	0x08006740
 8000f3c:	20000064 	.word	0x20000064

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b096      	sub	sp, #88	; 0x58
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2244      	movs	r2, #68	; 0x44
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fd11 	bl	8004976 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f66:	f000 fd3d 	bl	80019e4 <HAL_PWREx_ControlVoltageScaling>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f70:	f000 f874 	bl	800105c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f74:	2310      	movs	r3, #16
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f80:	2360      	movs	r3, #96	; 0x60
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fd7f 	bl	8001a90 <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f98:	f000 f860 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 f947 	bl	8002248 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fc0:	f000 f84c 	bl	800105c <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3758      	adds	r7, #88	; 0x58
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fd2:	4a15      	ldr	r2, [pc, #84]	; (8001028 <MX_USART2_UART_Init+0x5c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART2_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8001010:	f001 fffa 	bl	8003008 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800101a:	f000 f81f 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001f0 	.word	0x200001f0
 8001028:	40004400 	.word	0x40004400

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_GPIO_Init+0x2c>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <MX_GPIO_Init+0x2c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_GPIO_Init+0x2c>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x44>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x44>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x44>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0ac      	sub	sp, #176	; 0xb0
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2288      	movs	r2, #136	; 0x88
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fc50 	bl	8004976 <memset>
  if(huart->Instance==USART2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a21      	ldr	r2, [pc, #132]	; (8001160 <HAL_UART_MspInit+0xb0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d13b      	bne.n	8001158 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 facf 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f8:	f7ff ffb0 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_UART_MspInit+0xb4>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_UART_MspInit+0xb4>)
 8001102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001106:	6593      	str	r3, [r2, #88]	; 0x58
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_UART_MspInit+0xb4>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_UART_MspInit+0xb4>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_UART_MspInit+0xb4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_UART_MspInit+0xb4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800112c:	230c      	movs	r3, #12
 800112e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001144:	2307      	movs	r3, #7
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f000 fa8e 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	37b0      	adds	r7, #176	; 0xb0
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40004400 	.word	0x40004400
 8001164:	40021000 	.word	0x40021000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f958 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return 1;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_kill>:

int _kill(int pid, int sig)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011d6:	f003 fc21 	bl	8004a1c <__errno>
 80011da:	4603      	mov	r3, r0
 80011dc:	2216      	movs	r2, #22
 80011de:	601a      	str	r2, [r3, #0]
  return -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_exit>:

void _exit (int status)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ffe7 	bl	80011cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80011fe:	e7fe      	b.n	80011fe <_exit+0x12>

08001200 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e00a      	b.n	8001228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001212:	f3af 8000 	nop.w
 8001216:	4601      	mov	r1, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	b2ca      	uxtb	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf0      	blt.n	8001212 <_read+0x12>
  }

  return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e009      	b.n	8001260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe25 	bl	8000ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf1      	blt.n	800124c <_write+0x12>
  }
  return len;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_close>:

int _close(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129a:	605a      	str	r2, [r3, #4]
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_isatty>:

int _isatty(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f003 fb86 	bl	8004a1c <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20018000 	.word	0x20018000
 800133c:	00000400 	.word	0x00000400
 8001340:	20000278 	.word	0x20000278
 8001344:	200003d0 	.word	0x200003d0

08001348 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001370:	f7ff ffea 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <LoopForever+0xe>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <LoopForever+0x16>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f003 fb45 	bl	8004a28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139e:	f7ff fda1 	bl	8000ee4 <main>

080013a2 <LoopForever>:

LoopForever:
    b LoopForever
 80013a2:	e7fe      	b.n	80013a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80013b0:	08006b1c 	.word	0x08006b1c
  ldr r2, =_sbss
 80013b4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80013b8:	200003cc 	.word	0x200003cc

080013bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC1_2_IRQHandler>

080013be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f91f 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	200f      	movs	r0, #15
 80013d0:	f000 f80e 	bl	80013f0 <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	e001      	b.n	80013e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e0:	f7ff fe42 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_InitTick+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d023      	beq.n	800144c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_InitTick+0x70>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_InitTick+0x6c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f91d 	bl	800165a <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10f      	bne.n	8001446 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d809      	bhi.n	8001440 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f8f5 	bl	8001622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_InitTick+0x74>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e007      	b.n	8001450 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e004      	b.n	8001450 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e001      	b.n	8001450 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	2000027c 	.word	0x2000027c

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000027c 	.word	0x2000027c

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f7ff ff8e 	bl	800150c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff47 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff5c 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff8e 	bl	8001560 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5d 	bl	800150c <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffb0 	bl	80015c8 <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e17f      	b.n	8001984 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8171 	beq.w	800197e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d118      	bne.n	8001754 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001728:	2201      	movs	r2, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	f003 0201 	and.w	r2, r3, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b03      	cmp	r3, #3
 800175e:	d017      	beq.n	8001790 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d123      	bne.n	80017e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	6939      	ldr	r1, [r7, #16]
 80017e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80ac 	beq.w	800197e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <HAL_GPIO_Init+0x330>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	4a5e      	ldr	r2, [pc, #376]	; (80019a4 <HAL_GPIO_Init+0x330>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6613      	str	r3, [r2, #96]	; 0x60
 8001832:	4b5c      	ldr	r3, [pc, #368]	; (80019a4 <HAL_GPIO_Init+0x330>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800183e:	4a5a      	ldr	r2, [pc, #360]	; (80019a8 <HAL_GPIO_Init+0x334>)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001868:	d025      	beq.n	80018b6 <HAL_GPIO_Init+0x242>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4f      	ldr	r2, [pc, #316]	; (80019ac <HAL_GPIO_Init+0x338>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01f      	beq.n	80018b2 <HAL_GPIO_Init+0x23e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <HAL_GPIO_Init+0x33c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x23a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4d      	ldr	r2, [pc, #308]	; (80019b4 <HAL_GPIO_Init+0x340>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x236>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <HAL_GPIO_Init+0x344>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x232>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4b      	ldr	r2, [pc, #300]	; (80019bc <HAL_GPIO_Init+0x348>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x22e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4a      	ldr	r2, [pc, #296]	; (80019c0 <HAL_GPIO_Init+0x34c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x22a>
 800189a:	2306      	movs	r3, #6
 800189c:	e00c      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 800189e:	2307      	movs	r3, #7
 80018a0:	e00a      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018b6:	2300      	movs	r3, #0
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018c8:	4937      	ldr	r1, [pc, #220]	; (80019a8 <HAL_GPIO_Init+0x334>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_GPIO_Init+0x350>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018fa:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <HAL_GPIO_Init+0x350>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_GPIO_Init+0x350>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <HAL_GPIO_Init+0x350>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_GPIO_Init+0x350>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_GPIO_Init+0x350>)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_GPIO_Init+0x350>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_GPIO_Init+0x350>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	f47f ae78 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	48000400 	.word	0x48000400
 80019b0:	48000800 	.word	0x48000800
 80019b4:	48000c00 	.word	0x48000c00
 80019b8:	48001000 	.word	0x48001000
 80019bc:	48001400 	.word	0x48001400
 80019c0:	48001800 	.word	0x48001800
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40007000 	.word	0x40007000

080019e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f2:	d130      	bne.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a00:	d038      	beq.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2232      	movs	r2, #50	; 0x32
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9b      	lsrs	r3, r3, #18
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a28:	e002      	b.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3c:	d102      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f2      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d110      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e00f      	b.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a62:	d007      	beq.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40007000 	.word	0x40007000
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	431bde83 	.word	0x431bde83

08001a90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e3ca      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa2:	4b97      	ldr	r3, [pc, #604]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aac:	4b94      	ldr	r3, [pc, #592]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80e4 	beq.w	8001c8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_RCC_OscConfig+0x4a>
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	f040 808b 	bne.w	8001be8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	f040 8087 	bne.w	8001be8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ada:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x62>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e3a2      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_RCC_OscConfig+0x7c>
 8001b02:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b0a:	e005      	b.n	8001b18 <HAL_RCC_OscConfig+0x88>
 8001b0c:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d223      	bcs.n	8001b64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fd55 	bl	80025d0 <RCC_SetFlashLatencyFromMSIRange>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e383      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b30:	4b73      	ldr	r3, [pc, #460]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a72      	ldr	r2, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	496d      	ldr	r1, [pc, #436]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	4968      	ldr	r1, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	e025      	b.n	8001bb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b64:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a65      	ldr	r2, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4960      	ldr	r1, [pc, #384]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b82:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	495b      	ldr	r1, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fd15 	bl	80025d0 <RCC_SetFlashLatencyFromMSIRange>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e343      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb0:	f000 fc4a 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b52      	ldr	r3, [pc, #328]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	4950      	ldr	r1, [pc, #320]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	4a4e      	ldr	r2, [pc, #312]	; (8001d08 <HAL_RCC_OscConfig+0x278>)
 8001bce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <HAL_RCC_OscConfig+0x27c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fc0b 	bl	80013f0 <HAL_InitTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d052      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	e327      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d032      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bf0:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a42      	ldr	r2, [pc, #264]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fc48 	bl	8001490 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc44 	bl	8001490 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e310      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a36      	ldr	r2, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4931      	ldr	r1, [pc, #196]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	492c      	ldr	r1, [pc, #176]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	e01a      	b.n	8001c8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fc15 	bl	8001490 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fc11 	bl	8001490 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e2dd      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x1da>
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d074      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x21a>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d064      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d160      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e2ba      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x24a>
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e026      	b.n	8001d28 <HAL_RCC_OscConfig+0x298>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce2:	d115      	bne.n	8001d10 <HAL_RCC_OscConfig+0x280>
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a02      	ldr	r2, [pc, #8]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x298>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08006750 	.word	0x08006750
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000004 	.word	0x20000004
 8001d10:	4ba0      	ldr	r3, [pc, #640]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a9f      	ldr	r2, [pc, #636]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b9d      	ldr	r3, [pc, #628]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a9c      	ldr	r2, [pc, #624]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fbae 	bl	8001490 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fbaa 	bl	8001490 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e276      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	4b92      	ldr	r3, [pc, #584]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2a8>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb9a 	bl	8001490 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fb96 	bl	8001490 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e262      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d72:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2d0>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d060      	beq.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x310>
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d119      	bne.n	8001dce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d116      	bne.n	8001dce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da0:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_OscConfig+0x328>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e23f      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b76      	ldr	r3, [pc, #472]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	4973      	ldr	r1, [pc, #460]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dcc:	e040      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d023      	beq.n	8001e1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fb55 	bl	8001490 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fb51 	bl	8001490 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e21d      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfc:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	495f      	ldr	r1, [pc, #380]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e018      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fb31 	bl	8001490 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fb2d 	bl	8001490 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e1f9      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e44:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d03c      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6a:	4a4a      	ldr	r2, [pc, #296]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff fb0c 	bl	8001490 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fb08 	bl	8001490 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1d4      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ef      	beq.n	8001e7c <HAL_RCC_OscConfig+0x3ec>
 8001e9c:	e01b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea4:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7ff faef 	bl	8001490 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff faeb 	bl	8001490 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1b7      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec8:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ef      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80a6 	beq.w	8002030 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6593      	str	r3, [r2, #88]	; 0x58
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCC_OscConfig+0x508>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d118      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_RCC_OscConfig+0x508>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_RCC_OscConfig+0x508>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f28:	f7ff fab2 	bl	8001490 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7ff faae 	bl	8001490 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e17a      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_RCC_OscConfig+0x508>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d8>
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f66:	e029      	b.n	8001fbc <HAL_RCC_OscConfig+0x52c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d115      	bne.n	8001f9c <HAL_RCC_OscConfig+0x50c>
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f90:	e014      	b.n	8001fbc <HAL_RCC_OscConfig+0x52c>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	4a9b      	ldr	r2, [pc, #620]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fac:	4b98      	ldr	r3, [pc, #608]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	4a97      	ldr	r2, [pc, #604]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d016      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fa64 	bl	8001490 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fa60 	bl	8001490 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e12a      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe2:	4b8b      	ldr	r3, [pc, #556]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ed      	beq.n	8001fcc <HAL_RCC_OscConfig+0x53c>
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fa4d 	bl	8001490 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fa49 	bl	8001490 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e113      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002010:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ed      	bne.n	8001ffa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4a79      	ldr	r2, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80fe 	beq.w	8002236 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	2b02      	cmp	r3, #2
 8002040:	f040 80d0 	bne.w	80021e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002044:	4b72      	ldr	r3, [pc, #456]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	429a      	cmp	r2, r3
 8002056:	d130      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	3b01      	subs	r3, #1
 8002064:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d127      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d11f      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002084:	2a07      	cmp	r2, #7
 8002086:	bf14      	ite	ne
 8002088:	2201      	movne	r2, #1
 800208a:	2200      	moveq	r2, #0
 800208c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	4293      	cmp	r3, r2
 8002090:	d113      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	3b01      	subs	r3, #1
 80020a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	3b01      	subs	r3, #1
 80020b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d06e      	beq.n	8002198 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d069      	beq.n	8002194 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020c0:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020cc:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0ad      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020dc:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80020e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e8:	f7ff f9d2 	bl	8001490 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7ff f9ce 	bl	8001490 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e09a      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002102:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210e:	4b40      	ldr	r3, [pc, #256]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b40      	ldr	r3, [pc, #256]	; (8002214 <HAL_RCC_OscConfig+0x784>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800211e:	3a01      	subs	r2, #1
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002128:	0212      	lsls	r2, r2, #8
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002130:	0852      	lsrs	r2, r2, #1
 8002132:	3a01      	subs	r2, #1
 8002134:	0552      	lsls	r2, r2, #21
 8002136:	4311      	orrs	r1, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800213c:	0852      	lsrs	r2, r2, #1
 800213e:	3a01      	subs	r2, #1
 8002140:	0652      	lsls	r2, r2, #25
 8002142:	4311      	orrs	r1, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002148:	0912      	lsrs	r2, r2, #4
 800214a:	0452      	lsls	r2, r2, #17
 800214c:	430a      	orrs	r2, r1
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002160:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800216c:	f7ff f990 	bl	8001490 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f98c 	bl	8001490 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e058      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002192:	e050      	b.n	8002236 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e04f      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d148      	bne.n	8002236 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a19      	ldr	r2, [pc, #100]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021bc:	f7ff f968 	bl	8001490 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f964 	bl	8001490 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e030      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x734>
 80021e2:	e028      	b.n	8002236 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d023      	beq.n	8002232 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_RCC_OscConfig+0x780>)
 80021f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f94b 	bl	8001490 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	e00c      	b.n	8002218 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff f947 	bl	8001490 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d905      	bls.n	8002218 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e013      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
 8002210:	40021000 	.word	0x40021000
 8002214:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_OscConfig+0x7b0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ec      	bne.n	80021fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x7b0>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4905      	ldr	r1, [pc, #20]	; (8002240 <HAL_RCC_OscConfig+0x7b0>)
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_OscConfig+0x7b4>)
 800222c:	4013      	ands	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
 8002230:	e001      	b.n	8002236 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	feeefffc 	.word	0xfeeefffc

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0e7      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b75      	ldr	r3, [pc, #468]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b72      	ldr	r3, [pc, #456]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4970      	ldr	r1, [pc, #448]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b6e      	ldr	r3, [pc, #440]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0cf      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b66      	ldr	r3, [pc, #408]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d908      	bls.n	80022ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4960      	ldr	r1, [pc, #384]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d04c      	beq.n	8002360 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d121      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0a6      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4b54      	ldr	r3, [pc, #336]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e09a      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fe:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e08e      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230e:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e086      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4943      	ldr	r1, [pc, #268]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7ff f8ae 	bl	8001490 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7ff f8aa 	bl	8001490 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e06e      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	429a      	cmp	r2, r3
 800237a:	d208      	bcs.n	800238e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	492b      	ldr	r1, [pc, #172]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d210      	bcs.n	80023be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 0207 	bic.w	r2, r3, #7
 80023a4:	4923      	ldr	r1, [pc, #140]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e036      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4918      	ldr	r1, [pc, #96]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4910      	ldr	r1, [pc, #64]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023fc:	f000 f824 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	490b      	ldr	r1, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1f4>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1f8>)
 800241a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1fc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe ffe5 	bl	80013f0 <HAL_InitTick>
 8002426:	4603      	mov	r3, r0
 8002428:	72fb      	strb	r3, [r7, #11]

  return status;
 800242a:	7afb      	ldrb	r3, [r7, #11]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	08006750 	.word	0x08006750
 8002440:	20000000 	.word	0x20000000
 8002444:	20000004 	.word	0x20000004

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d121      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d11e      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a4:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e004      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_RCC_GetSysClockFreq+0x114>)
 80024ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d134      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0xa6>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d003      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0xac>
 80024ec:	e005      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f0:	617b      	str	r3, [r7, #20]
      break;
 80024f2:	e005      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_GetSysClockFreq+0x114>)
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	e002      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	3301      	adds	r3, #1
 800250c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	fb03 f202 	mul.w	r2, r3, r2
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	0e5b      	lsrs	r3, r3, #25
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	3301      	adds	r3, #1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	08006768 	.word	0x08006768
 8002558:	00f42400 	.word	0x00f42400
 800255c:	007a1200 	.word	0x007a1200

08002560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_RCC_GetHCLKFreq+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800257c:	f7ff fff0 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08006760 	.word	0x08006760

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a8:	f7ff ffda 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0adb      	lsrs	r3, r3, #11
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4904      	ldr	r1, [pc, #16]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08006760 	.word	0x08006760

080025d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e8:	f7ff f9ee 	bl	80019c8 <HAL_PWREx_GetVoltageRange>
 80025ec:	6178      	str	r0, [r7, #20]
 80025ee:	e014      	b.n	800261a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4a24      	ldr	r2, [pc, #144]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	; 0x58
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002608:	f7ff f9de 	bl	80019c8 <HAL_PWREx_GetVoltageRange>
 800260c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002620:	d10b      	bne.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d919      	bls.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2ba0      	cmp	r3, #160	; 0xa0
 800262c:	d902      	bls.n	8002634 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800262e:	2302      	movs	r3, #2
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e013      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002634:	2301      	movs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e010      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d902      	bls.n	8002646 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002640:	2303      	movs	r3, #3
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e00a      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d102      	bne.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800264c:	2302      	movs	r3, #2
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	e004      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d101      	bne.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002658:	2301      	movs	r3, #1
 800265a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 0207 	bic.w	r2, r3, #7
 8002664:	4909      	ldr	r1, [pc, #36]	; (800268c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d001      	beq.n	800267e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002698:	2300      	movs	r3, #0
 800269a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800269c:	2300      	movs	r3, #0
 800269e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d041      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b4:	d02a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ba:	d824      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026c0:	d008      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026c6:	d81e      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d0:	d010      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026d2:	e018      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d4:	4b86      	ldr	r3, [pc, #536]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a85      	ldr	r2, [pc, #532]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e0:	e015      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fabb 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f2:	e00c      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3320      	adds	r3, #32
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fba6 	bl	8002e4c <RCCEx_PLLSAI2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	74fb      	strb	r3, [r7, #19]
      break;
 800270a:	e000      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800270c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002714:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002722:	4973      	ldr	r1, [pc, #460]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800272a:	e001      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d041      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002740:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002744:	d02a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002746:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800274a:	d824      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800274c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002750:	d008      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002756:	d81e      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d010      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002762:	e018      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002764:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002770:	e015      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fa73 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002782:	e00c      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3320      	adds	r3, #32
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fb5e 	bl	8002e4c <RCCEx_PLLSAI2_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002794:	e003      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	74fb      	strb	r3, [r7, #19]
      break;
 800279a:	e000      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800279c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a4:	4b52      	ldr	r3, [pc, #328]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b2:	494f      	ldr	r1, [pc, #316]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ba:	e001      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a0 	beq.w	800290e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3a      	ldr	r2, [pc, #232]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002810:	f7fe fe3e 	bl	8001490 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002816:	e009      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002818:	f7fe fe3a 	bl	8001490 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d902      	bls.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	74fb      	strb	r3, [r7, #19]
        break;
 800282a:	e005      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ef      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d15c      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002848:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01f      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d019      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fdf9 	bl	8001490 <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	e00b      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fdf5 	bl	8001490 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d902      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	74fb      	strb	r3, [r7, #19]
            break;
 80028b8:	e006      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ec      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028de:	4904      	ldr	r1, [pc, #16]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028e6:	e009      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
 80028ec:	e006      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fc:	7c7b      	ldrb	r3, [r7, #17]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b9e      	ldr	r3, [pc, #632]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a9d      	ldr	r2, [pc, #628]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291a:	4b98      	ldr	r3, [pc, #608]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f023 0203 	bic.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	4994      	ldr	r1, [pc, #592]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800293c:	4b8f      	ldr	r3, [pc, #572]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f023 020c 	bic.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	498c      	ldr	r1, [pc, #560]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295e:	4b87      	ldr	r3, [pc, #540]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4983      	ldr	r1, [pc, #524]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002980:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	497b      	ldr	r1, [pc, #492]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029a2:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	4972      	ldr	r1, [pc, #456]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c4:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	496a      	ldr	r1, [pc, #424]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	4961      	ldr	r1, [pc, #388]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a08:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a16:	4959      	ldr	r1, [pc, #356]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	4950      	ldr	r1, [pc, #320]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	4948      	ldr	r1, [pc, #288]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	493f      	ldr	r1, [pc, #252]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d028      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a90:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	4937      	ldr	r1, [pc, #220]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aae:	d106      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]
 8002abc:	e011      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f8c8 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d028      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	491f      	ldr	r1, [pc, #124]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0c:	d106      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b18:	60d3      	str	r3, [r2, #12]
 8002b1a:	e011      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f899 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a02      	ldr	r2, [pc, #8]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
 8002b78:	e014      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f867 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02f      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbe:	4928      	ldr	r1, [pc, #160]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bce:	d10d      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f844 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	74bb      	strb	r3, [r7, #18]
 8002bea:	e011      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f925 	bl	8002e4c <RCCEx_PLLSAI2_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2a:	490d      	ldr	r1, [pc, #52]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4e:	4904      	ldr	r1, [pc, #16]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c56:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000

08002c64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c72:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d018      	beq.n	8002cb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c7e:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0203 	and.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d10d      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
       ||
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c96:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d047      	beq.n	8002d3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	e044      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d018      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x86>
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d825      	bhi.n	8002d08 <RCCEx_PLLSAI1_Config+0xa4>
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d002      	beq.n	8002cc6 <RCCEx_PLLSAI1_Config+0x62>
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d009      	beq.n	8002cd8 <RCCEx_PLLSAI1_Config+0x74>
 8002cc4:	e020      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cc6:	4b60      	ldr	r3, [pc, #384]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11d      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e01a      	b.n	8002d0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d116      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce8:	e013      	b.n	8002d12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cea:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d06:	e006      	b.n	8002d16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e004      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e002      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	430b      	orrs	r3, r1
 8002d34:	4944      	ldr	r1, [pc, #272]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d17d      	bne.n	8002e3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d40:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a40      	ldr	r2, [pc, #256]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fba0 	bl	8001490 <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d52:	e009      	b.n	8002d68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d54:	f7fe fb9c 	bl	8001490 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d902      	bls.n	8002d68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	73fb      	strb	r3, [r7, #15]
        break;
 8002d66:	e005      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d68:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ef      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d160      	bne.n	8002e3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d111      	bne.n	8002da4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6892      	ldr	r2, [r2, #8]
 8002d90:	0211      	lsls	r1, r2, #8
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68d2      	ldr	r2, [r2, #12]
 8002d96:	0912      	lsrs	r2, r2, #4
 8002d98:	0452      	lsls	r2, r2, #17
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	492a      	ldr	r1, [pc, #168]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	610b      	str	r3, [r1, #16]
 8002da2:	e027      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d112      	bne.n	8002dd0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002daa:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002db2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6892      	ldr	r2, [r2, #8]
 8002dba:	0211      	lsls	r1, r2, #8
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6912      	ldr	r2, [r2, #16]
 8002dc0:	0852      	lsrs	r2, r2, #1
 8002dc2:	3a01      	subs	r2, #1
 8002dc4:	0552      	lsls	r2, r2, #21
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	491f      	ldr	r1, [pc, #124]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	610b      	str	r3, [r1, #16]
 8002dce:	e011      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6892      	ldr	r2, [r2, #8]
 8002de0:	0211      	lsls	r1, r2, #8
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6952      	ldr	r2, [r2, #20]
 8002de6:	0852      	lsrs	r2, r2, #1
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0652      	lsls	r2, r2, #25
 8002dec:	430a      	orrs	r2, r1
 8002dee:	4916      	ldr	r1, [pc, #88]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fb46 	bl	8001490 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e06:	e009      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e08:	f7fe fb42 	bl	8001490 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	73fb      	strb	r3, [r7, #15]
          break;
 8002e1a:	e005      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ef      	beq.n	8002e08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4904      	ldr	r1, [pc, #16]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000

08002e4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d018      	beq.n	8002e98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e66:	4b67      	ldr	r3, [pc, #412]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0203 	and.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d10d      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
       ||
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e7e:	4b61      	ldr	r3, [pc, #388]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d047      	beq.n	8002f22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e044      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d018      	beq.n	8002ed2 <RCCEx_PLLSAI2_Config+0x86>
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d825      	bhi.n	8002ef0 <RCCEx_PLLSAI2_Config+0xa4>
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d002      	beq.n	8002eae <RCCEx_PLLSAI2_Config+0x62>
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d009      	beq.n	8002ec0 <RCCEx_PLLSAI2_Config+0x74>
 8002eac:	e020      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eae:	4b55      	ldr	r3, [pc, #340]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11d      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ebe:	e01a      	b.n	8002ef6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ec0:	4b50      	ldr	r3, [pc, #320]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d116      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed0:	e013      	b.n	8002efa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ed2:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10f      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ede:	4b49      	ldr	r3, [pc, #292]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eee:	e006      	b.n	8002efe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef4:	e004      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e002      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002efa:	bf00      	nop
 8002efc:	e000      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002efe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	4939      	ldr	r1, [pc, #228]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d167      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f28:	4b36      	ldr	r3, [pc, #216]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a35      	ldr	r2, [pc, #212]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fe faac 	bl	8001490 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f3a:	e009      	b.n	8002f50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f3c:	f7fe faa8 	bl	8001490 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f4e:	e005      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ef      	bne.n	8002f3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d14a      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f68:	4b26      	ldr	r3, [pc, #152]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	0211      	lsls	r1, r2, #8
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	0912      	lsrs	r2, r2, #4
 8002f80:	0452      	lsls	r2, r2, #17
 8002f82:	430a      	orrs	r2, r1
 8002f84:	491f      	ldr	r1, [pc, #124]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	614b      	str	r3, [r1, #20]
 8002f8a:	e011      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6892      	ldr	r2, [r2, #8]
 8002f9c:	0211      	lsls	r1, r2, #8
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6912      	ldr	r2, [r2, #16]
 8002fa2:	0852      	lsrs	r2, r2, #1
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0652      	lsls	r2, r2, #25
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	4916      	ldr	r1, [pc, #88]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fa68 	bl	8001490 <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fc2:	e009      	b.n	8002fd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fc4:	f7fe fa64 	bl	8001490 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d902      	bls.n	8002fd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fd6:	e005      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ef      	beq.n	8002fc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4904      	ldr	r1, [pc, #16]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e040      	b.n	800309c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe f840 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fc34 	bl	80038bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f979 	bl	800334c <UART_SetConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e01b      	b.n	800309c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fcb3 	bl	8003a00 <UART_CheckIdleState>
 800309a:	4603      	mov	r3, r0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d178      	bne.n	80031ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_UART_Transmit+0x24>
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e071      	b.n	80031b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2221      	movs	r2, #33	; 0x21
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030da:	f7fe f9d9 	bl	8001490 <HAL_GetTick>
 80030de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d108      	bne.n	800310c <HAL_UART_Transmit+0x68>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	e003      	b.n	8003114 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003114:	e030      	b.n	8003178 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fd15 	bl	8003b50 <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e03c      	b.n	80031b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003148:	b292      	uxth	r2, r2
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	3302      	adds	r3, #2
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e008      	b.n	8003166 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	b292      	uxth	r2, r2
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1c8      	bne.n	8003116 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	2140      	movs	r1, #64	; 0x40
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fcde 	bl	8003b50 <UART_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e005      	b.n	80031b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	f040 80b6 	bne.w	8003340 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Receive+0x28>
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0ae      	b.n	8003342 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2222      	movs	r2, #34	; 0x22
 80031f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031fa:	f7fe f949 	bl	8001490 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003218:	d10e      	bne.n	8003238 <HAL_UART_Receive+0x80>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_UART_Receive+0x76>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800322c:	e02d      	b.n	800328a <HAL_UART_Receive+0xd2>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	; 0xff
 8003232:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003236:	e028      	b.n	800328a <HAL_UART_Receive+0xd2>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10d      	bne.n	800325c <HAL_UART_Receive+0xa4>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <HAL_UART_Receive+0x9a>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	; 0xff
 800324c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003250:	e01b      	b.n	800328a <HAL_UART_Receive+0xd2>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	227f      	movs	r2, #127	; 0x7f
 8003256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800325a:	e016      	b.n	800328a <HAL_UART_Receive+0xd2>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003264:	d10d      	bne.n	8003282 <HAL_UART_Receive+0xca>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <HAL_UART_Receive+0xc0>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	227f      	movs	r2, #127	; 0x7f
 8003272:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003276:	e008      	b.n	800328a <HAL_UART_Receive+0xd2>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	223f      	movs	r2, #63	; 0x3f
 800327c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003280:	e003      	b.n	800328a <HAL_UART_Receive+0xd2>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003290:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329a:	d108      	bne.n	80032ae <HAL_UART_Receive+0xf6>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	e003      	b.n	80032b6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032b6:	e037      	b.n	8003328 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2200      	movs	r2, #0
 80032c0:	2120      	movs	r1, #32
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fc44 	bl	8003b50 <UART_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e033      	b.n	8003342 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10c      	bne.n	80032fa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	8a7b      	ldrh	r3, [r7, #18]
 80032ea:	4013      	ands	r3, r2
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3302      	adds	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e00d      	b.n	8003316 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003300:	b29b      	uxth	r3, r3
 8003302:	b2da      	uxtb	r2, r3
 8003304:	8a7b      	ldrh	r3, [r7, #18]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4013      	ands	r3, r2
 800330a:	b2da      	uxtb	r2, r3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	3301      	adds	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1c1      	bne.n	80032b8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800334c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003350:	b08a      	sub	sp, #40	; 0x28
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4313      	orrs	r3, r2
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4ba4      	ldr	r3, [pc, #656]	; (800360c <UART_SetConfig+0x2c0>)
 800337c:	4013      	ands	r3, r2
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003384:	430b      	orrs	r3, r1
 8003386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a99      	ldr	r2, [pc, #612]	; (8003610 <UART_SetConfig+0x2c4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	4313      	orrs	r3, r2
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	430a      	orrs	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a90      	ldr	r2, [pc, #576]	; (8003614 <UART_SetConfig+0x2c8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d126      	bne.n	8003424 <UART_SetConfig+0xd8>
 80033d6:	4b90      	ldr	r3, [pc, #576]	; (8003618 <UART_SetConfig+0x2cc>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d81b      	bhi.n	800341c <UART_SetConfig+0xd0>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <UART_SetConfig+0xa0>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	0800340d 	.word	0x0800340d
 80033f4:	08003405 	.word	0x08003405
 80033f8:	08003415 	.word	0x08003415
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003402:	e116      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003404:	2302      	movs	r3, #2
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e112      	b.n	8003632 <UART_SetConfig+0x2e6>
 800340c:	2304      	movs	r3, #4
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e10e      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003414:	2308      	movs	r3, #8
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e10a      	b.n	8003632 <UART_SetConfig+0x2e6>
 800341c:	2310      	movs	r3, #16
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003422:	e106      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a7c      	ldr	r2, [pc, #496]	; (800361c <UART_SetConfig+0x2d0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d138      	bne.n	80034a0 <UART_SetConfig+0x154>
 800342e:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <UART_SetConfig+0x2cc>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d82d      	bhi.n	8003498 <UART_SetConfig+0x14c>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <UART_SetConfig+0xf8>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003479 	.word	0x08003479
 8003448:	08003499 	.word	0x08003499
 800344c:	08003499 	.word	0x08003499
 8003450:	08003499 	.word	0x08003499
 8003454:	08003489 	.word	0x08003489
 8003458:	08003499 	.word	0x08003499
 800345c:	08003499 	.word	0x08003499
 8003460:	08003499 	.word	0x08003499
 8003464:	08003481 	.word	0x08003481
 8003468:	08003499 	.word	0x08003499
 800346c:	08003499 	.word	0x08003499
 8003470:	08003499 	.word	0x08003499
 8003474:	08003491 	.word	0x08003491
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347e:	e0d8      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003480:	2302      	movs	r3, #2
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003486:	e0d4      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003488:	2304      	movs	r3, #4
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348e:	e0d0      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003490:	2308      	movs	r3, #8
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003496:	e0cc      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003498:	2310      	movs	r3, #16
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349e:	e0c8      	b.n	8003632 <UART_SetConfig+0x2e6>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a5e      	ldr	r2, [pc, #376]	; (8003620 <UART_SetConfig+0x2d4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d125      	bne.n	80034f6 <UART_SetConfig+0x1aa>
 80034aa:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <UART_SetConfig+0x2cc>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034b4:	2b30      	cmp	r3, #48	; 0x30
 80034b6:	d016      	beq.n	80034e6 <UART_SetConfig+0x19a>
 80034b8:	2b30      	cmp	r3, #48	; 0x30
 80034ba:	d818      	bhi.n	80034ee <UART_SetConfig+0x1a2>
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d00a      	beq.n	80034d6 <UART_SetConfig+0x18a>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d814      	bhi.n	80034ee <UART_SetConfig+0x1a2>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <UART_SetConfig+0x182>
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d008      	beq.n	80034de <UART_SetConfig+0x192>
 80034cc:	e00f      	b.n	80034ee <UART_SetConfig+0x1a2>
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d4:	e0ad      	b.n	8003632 <UART_SetConfig+0x2e6>
 80034d6:	2302      	movs	r3, #2
 80034d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034dc:	e0a9      	b.n	8003632 <UART_SetConfig+0x2e6>
 80034de:	2304      	movs	r3, #4
 80034e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e4:	e0a5      	b.n	8003632 <UART_SetConfig+0x2e6>
 80034e6:	2308      	movs	r3, #8
 80034e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ec:	e0a1      	b.n	8003632 <UART_SetConfig+0x2e6>
 80034ee:	2310      	movs	r3, #16
 80034f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f4:	e09d      	b.n	8003632 <UART_SetConfig+0x2e6>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a4a      	ldr	r2, [pc, #296]	; (8003624 <UART_SetConfig+0x2d8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d125      	bne.n	800354c <UART_SetConfig+0x200>
 8003500:	4b45      	ldr	r3, [pc, #276]	; (8003618 <UART_SetConfig+0x2cc>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800350a:	2bc0      	cmp	r3, #192	; 0xc0
 800350c:	d016      	beq.n	800353c <UART_SetConfig+0x1f0>
 800350e:	2bc0      	cmp	r3, #192	; 0xc0
 8003510:	d818      	bhi.n	8003544 <UART_SetConfig+0x1f8>
 8003512:	2b80      	cmp	r3, #128	; 0x80
 8003514:	d00a      	beq.n	800352c <UART_SetConfig+0x1e0>
 8003516:	2b80      	cmp	r3, #128	; 0x80
 8003518:	d814      	bhi.n	8003544 <UART_SetConfig+0x1f8>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <UART_SetConfig+0x1d8>
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d008      	beq.n	8003534 <UART_SetConfig+0x1e8>
 8003522:	e00f      	b.n	8003544 <UART_SetConfig+0x1f8>
 8003524:	2300      	movs	r3, #0
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352a:	e082      	b.n	8003632 <UART_SetConfig+0x2e6>
 800352c:	2302      	movs	r3, #2
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003532:	e07e      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003534:	2304      	movs	r3, #4
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353a:	e07a      	b.n	8003632 <UART_SetConfig+0x2e6>
 800353c:	2308      	movs	r3, #8
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e076      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003544:	2310      	movs	r3, #16
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354a:	e072      	b.n	8003632 <UART_SetConfig+0x2e6>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a35      	ldr	r2, [pc, #212]	; (8003628 <UART_SetConfig+0x2dc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12a      	bne.n	80035ac <UART_SetConfig+0x260>
 8003556:	4b30      	ldr	r3, [pc, #192]	; (8003618 <UART_SetConfig+0x2cc>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003564:	d01a      	beq.n	800359c <UART_SetConfig+0x250>
 8003566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356a:	d81b      	bhi.n	80035a4 <UART_SetConfig+0x258>
 800356c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003570:	d00c      	beq.n	800358c <UART_SetConfig+0x240>
 8003572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003576:	d815      	bhi.n	80035a4 <UART_SetConfig+0x258>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <UART_SetConfig+0x238>
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	d008      	beq.n	8003594 <UART_SetConfig+0x248>
 8003582:	e00f      	b.n	80035a4 <UART_SetConfig+0x258>
 8003584:	2300      	movs	r3, #0
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e052      	b.n	8003632 <UART_SetConfig+0x2e6>
 800358c:	2302      	movs	r3, #2
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e04e      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003594:	2304      	movs	r3, #4
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e04a      	b.n	8003632 <UART_SetConfig+0x2e6>
 800359c:	2308      	movs	r3, #8
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e046      	b.n	8003632 <UART_SetConfig+0x2e6>
 80035a4:	2310      	movs	r3, #16
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e042      	b.n	8003632 <UART_SetConfig+0x2e6>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a17      	ldr	r2, [pc, #92]	; (8003610 <UART_SetConfig+0x2c4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d13a      	bne.n	800362c <UART_SetConfig+0x2e0>
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <UART_SetConfig+0x2cc>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c4:	d01a      	beq.n	80035fc <UART_SetConfig+0x2b0>
 80035c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ca:	d81b      	bhi.n	8003604 <UART_SetConfig+0x2b8>
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d0:	d00c      	beq.n	80035ec <UART_SetConfig+0x2a0>
 80035d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d6:	d815      	bhi.n	8003604 <UART_SetConfig+0x2b8>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <UART_SetConfig+0x298>
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d008      	beq.n	80035f4 <UART_SetConfig+0x2a8>
 80035e2:	e00f      	b.n	8003604 <UART_SetConfig+0x2b8>
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ea:	e022      	b.n	8003632 <UART_SetConfig+0x2e6>
 80035ec:	2302      	movs	r3, #2
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f2:	e01e      	b.n	8003632 <UART_SetConfig+0x2e6>
 80035f4:	2304      	movs	r3, #4
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e01a      	b.n	8003632 <UART_SetConfig+0x2e6>
 80035fc:	2308      	movs	r3, #8
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e016      	b.n	8003632 <UART_SetConfig+0x2e6>
 8003604:	2310      	movs	r3, #16
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e012      	b.n	8003632 <UART_SetConfig+0x2e6>
 800360c:	efff69f3 	.word	0xefff69f3
 8003610:	40008000 	.word	0x40008000
 8003614:	40013800 	.word	0x40013800
 8003618:	40021000 	.word	0x40021000
 800361c:	40004400 	.word	0x40004400
 8003620:	40004800 	.word	0x40004800
 8003624:	40004c00 	.word	0x40004c00
 8003628:	40005000 	.word	0x40005000
 800362c:	2310      	movs	r3, #16
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a9f      	ldr	r2, [pc, #636]	; (80038b4 <UART_SetConfig+0x568>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d17a      	bne.n	8003732 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800363c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003640:	2b08      	cmp	r3, #8
 8003642:	d824      	bhi.n	800368e <UART_SetConfig+0x342>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <UART_SetConfig+0x300>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003671 	.word	0x08003671
 8003650:	0800368f 	.word	0x0800368f
 8003654:	08003679 	.word	0x08003679
 8003658:	0800368f 	.word	0x0800368f
 800365c:	0800367f 	.word	0x0800367f
 8003660:	0800368f 	.word	0x0800368f
 8003664:	0800368f 	.word	0x0800368f
 8003668:	0800368f 	.word	0x0800368f
 800366c:	08003687 	.word	0x08003687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003670:	f7fe ff82 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003674:	61f8      	str	r0, [r7, #28]
        break;
 8003676:	e010      	b.n	800369a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003678:	4b8f      	ldr	r3, [pc, #572]	; (80038b8 <UART_SetConfig+0x56c>)
 800367a:	61fb      	str	r3, [r7, #28]
        break;
 800367c:	e00d      	b.n	800369a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367e:	f7fe fee3 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003682:	61f8      	str	r0, [r7, #28]
        break;
 8003684:	e009      	b.n	800369a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368a:	61fb      	str	r3, [r7, #28]
        break;
 800368c:	e005      	b.n	800369a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003698:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80fb 	beq.w	8003898 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d305      	bcc.n	80036be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d903      	bls.n	80036c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036c4:	e0e8      	b.n	8003898 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	2200      	movs	r2, #0
 80036ca:	461c      	mov	r4, r3
 80036cc:	4615      	mov	r5, r2
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	022b      	lsls	r3, r5, #8
 80036d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036dc:	0222      	lsls	r2, r4, #8
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	6849      	ldr	r1, [r1, #4]
 80036e2:	0849      	lsrs	r1, r1, #1
 80036e4:	2000      	movs	r0, #0
 80036e6:	4688      	mov	r8, r1
 80036e8:	4681      	mov	r9, r0
 80036ea:	eb12 0a08 	adds.w	sl, r2, r8
 80036ee:	eb43 0b09 	adc.w	fp, r3, r9
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003700:	4650      	mov	r0, sl
 8003702:	4659      	mov	r1, fp
 8003704:	f7fd fa50 	bl	8000ba8 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003716:	d308      	bcc.n	800372a <UART_SetConfig+0x3de>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371e:	d204      	bcs.n	800372a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	e0b6      	b.n	8003898 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003730:	e0b2      	b.n	8003898 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373a:	d15e      	bne.n	80037fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800373c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003740:	2b08      	cmp	r3, #8
 8003742:	d828      	bhi.n	8003796 <UART_SetConfig+0x44a>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <UART_SetConfig+0x400>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003771 	.word	0x08003771
 8003750:	08003779 	.word	0x08003779
 8003754:	08003781 	.word	0x08003781
 8003758:	08003797 	.word	0x08003797
 800375c:	08003787 	.word	0x08003787
 8003760:	08003797 	.word	0x08003797
 8003764:	08003797 	.word	0x08003797
 8003768:	08003797 	.word	0x08003797
 800376c:	0800378f 	.word	0x0800378f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003770:	f7fe ff02 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003774:	61f8      	str	r0, [r7, #28]
        break;
 8003776:	e014      	b.n	80037a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003778:	f7fe ff14 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 800377c:	61f8      	str	r0, [r7, #28]
        break;
 800377e:	e010      	b.n	80037a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003780:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <UART_SetConfig+0x56c>)
 8003782:	61fb      	str	r3, [r7, #28]
        break;
 8003784:	e00d      	b.n	80037a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003786:	f7fe fe5f 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 800378a:	61f8      	str	r0, [r7, #28]
        break;
 800378c:	e009      	b.n	80037a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003792:	61fb      	str	r3, [r7, #28]
        break;
 8003794:	e005      	b.n	80037a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d077      	beq.n	8003898 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	005a      	lsls	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	441a      	add	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d916      	bls.n	80037f2 <UART_SetConfig+0x4a6>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d212      	bcs.n	80037f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f023 030f 	bic.w	r3, r3, #15
 80037d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	8afb      	ldrh	r3, [r7, #22]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	8afa      	ldrh	r2, [r7, #22]
 80037ee:	60da      	str	r2, [r3, #12]
 80037f0:	e052      	b.n	8003898 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037f8:	e04e      	b.n	8003898 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d827      	bhi.n	8003852 <UART_SetConfig+0x506>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0x4bc>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800382d 	.word	0x0800382d
 800380c:	08003835 	.word	0x08003835
 8003810:	0800383d 	.word	0x0800383d
 8003814:	08003853 	.word	0x08003853
 8003818:	08003843 	.word	0x08003843
 800381c:	08003853 	.word	0x08003853
 8003820:	08003853 	.word	0x08003853
 8003824:	08003853 	.word	0x08003853
 8003828:	0800384b 	.word	0x0800384b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382c:	f7fe fea4 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003830:	61f8      	str	r0, [r7, #28]
        break;
 8003832:	e014      	b.n	800385e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003834:	f7fe feb6 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8003838:	61f8      	str	r0, [r7, #28]
        break;
 800383a:	e010      	b.n	800385e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800383c:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <UART_SetConfig+0x56c>)
 800383e:	61fb      	str	r3, [r7, #28]
        break;
 8003840:	e00d      	b.n	800385e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003842:	f7fe fe01 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003846:	61f8      	str	r0, [r7, #28]
        break;
 8003848:	e009      	b.n	800385e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384e:	61fb      	str	r3, [r7, #28]
        break;
 8003850:	e005      	b.n	800385e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800385c:	bf00      	nop
    }

    if (pclk != 0U)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d019      	beq.n	8003898 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	085a      	lsrs	r2, r3, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	441a      	add	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b0f      	cmp	r3, #15
 800387c:	d909      	bls.n	8003892 <UART_SetConfig+0x546>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d205      	bcs.n	8003892 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60da      	str	r2, [r3, #12]
 8003890:	e002      	b.n	8003898 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3728      	adds	r7, #40	; 0x28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b2:	bf00      	nop
 80038b4:	40008000 	.word	0x40008000
 80038b8:	00f42400 	.word	0x00f42400

080038bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01a      	beq.n	80039d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ba:	d10a      	bne.n	80039d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b098      	sub	sp, #96	; 0x60
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a10:	f7fd fd3e 	bl	8001490 <HAL_GetTick>
 8003a14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d12e      	bne.n	8003a82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f88c 	bl	8003b50 <UART_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d021      	beq.n	8003a82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a52:	653b      	str	r3, [r7, #80]	; 0x50
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e6      	bne.n	8003a3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e062      	b.n	8003b48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d149      	bne.n	8003b24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f856 	bl	8003b50 <UART_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d03c      	beq.n	8003b24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e6      	bne.n	8003aaa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3308      	adds	r3, #8
 8003afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afc:	61fa      	str	r2, [r7, #28]
 8003afe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e5      	bne.n	8003adc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e011      	b.n	8003b48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3758      	adds	r7, #88	; 0x58
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b60:	e049      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d045      	beq.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7fd fc91 	bl	8001490 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e048      	b.n	8003c16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d031      	beq.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d110      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f838 	bl	8003c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e029      	b.n	8003c16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd0:	d111      	bne.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f81e 	bl	8003c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e00f      	b.n	8003c16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	bf0c      	ite	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	2300      	movne	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d0a6      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b095      	sub	sp, #84	; 0x54
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c44:	643b      	str	r3, [r7, #64]	; 0x40
 8003c46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e6      	bne.n	8003c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3308      	adds	r3, #8
 8003c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e5      	bne.n	8003c58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d118      	bne.n	8003cc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f023 0310 	bic.w	r3, r3, #16
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6979      	ldr	r1, [r7, #20]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e6      	bne.n	8003c94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cda:	bf00      	nop
 8003cdc:	3754      	adds	r7, #84	; 0x54
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <__cvt>:
 8003ce6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cea:	ec55 4b10 	vmov	r4, r5, d0
 8003cee:	2d00      	cmp	r5, #0
 8003cf0:	460e      	mov	r6, r1
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	bfbb      	ittet	lt
 8003cf8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003cfc:	461d      	movlt	r5, r3
 8003cfe:	2300      	movge	r3, #0
 8003d00:	232d      	movlt	r3, #45	; 0x2d
 8003d02:	700b      	strb	r3, [r1, #0]
 8003d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d0a:	4691      	mov	r9, r2
 8003d0c:	f023 0820 	bic.w	r8, r3, #32
 8003d10:	bfbc      	itt	lt
 8003d12:	4622      	movlt	r2, r4
 8003d14:	4614      	movlt	r4, r2
 8003d16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d1a:	d005      	beq.n	8003d28 <__cvt+0x42>
 8003d1c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d20:	d100      	bne.n	8003d24 <__cvt+0x3e>
 8003d22:	3601      	adds	r6, #1
 8003d24:	2102      	movs	r1, #2
 8003d26:	e000      	b.n	8003d2a <__cvt+0x44>
 8003d28:	2103      	movs	r1, #3
 8003d2a:	ab03      	add	r3, sp, #12
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	ab02      	add	r3, sp, #8
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	ec45 4b10 	vmov	d0, r4, r5
 8003d36:	4653      	mov	r3, sl
 8003d38:	4632      	mov	r2, r6
 8003d3a:	f000 ff25 	bl	8004b88 <_dtoa_r>
 8003d3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d42:	4607      	mov	r7, r0
 8003d44:	d102      	bne.n	8003d4c <__cvt+0x66>
 8003d46:	f019 0f01 	tst.w	r9, #1
 8003d4a:	d022      	beq.n	8003d92 <__cvt+0xac>
 8003d4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d50:	eb07 0906 	add.w	r9, r7, r6
 8003d54:	d110      	bne.n	8003d78 <__cvt+0x92>
 8003d56:	783b      	ldrb	r3, [r7, #0]
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d10a      	bne.n	8003d72 <__cvt+0x8c>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2300      	movs	r3, #0
 8003d60:	4620      	mov	r0, r4
 8003d62:	4629      	mov	r1, r5
 8003d64:	f7fc feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d68:	b918      	cbnz	r0, 8003d72 <__cvt+0x8c>
 8003d6a:	f1c6 0601 	rsb	r6, r6, #1
 8003d6e:	f8ca 6000 	str.w	r6, [sl]
 8003d72:	f8da 3000 	ldr.w	r3, [sl]
 8003d76:	4499      	add	r9, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4629      	mov	r1, r5
 8003d80:	f7fc fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d84:	b108      	cbz	r0, 8003d8a <__cvt+0xa4>
 8003d86:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d8a:	2230      	movs	r2, #48	; 0x30
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	454b      	cmp	r3, r9
 8003d90:	d307      	bcc.n	8003da2 <__cvt+0xbc>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d96:	1bdb      	subs	r3, r3, r7
 8003d98:	4638      	mov	r0, r7
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	b004      	add	sp, #16
 8003d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da2:	1c59      	adds	r1, r3, #1
 8003da4:	9103      	str	r1, [sp, #12]
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e7f0      	b.n	8003d8c <__cvt+0xa6>

08003daa <__exponent>:
 8003daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dac:	4603      	mov	r3, r0
 8003dae:	2900      	cmp	r1, #0
 8003db0:	bfb8      	it	lt
 8003db2:	4249      	neglt	r1, r1
 8003db4:	f803 2b02 	strb.w	r2, [r3], #2
 8003db8:	bfb4      	ite	lt
 8003dba:	222d      	movlt	r2, #45	; 0x2d
 8003dbc:	222b      	movge	r2, #43	; 0x2b
 8003dbe:	2909      	cmp	r1, #9
 8003dc0:	7042      	strb	r2, [r0, #1]
 8003dc2:	dd2a      	ble.n	8003e1a <__exponent+0x70>
 8003dc4:	f10d 0207 	add.w	r2, sp, #7
 8003dc8:	4617      	mov	r7, r2
 8003dca:	260a      	movs	r6, #10
 8003dcc:	4694      	mov	ip, r2
 8003dce:	fb91 f5f6 	sdiv	r5, r1, r6
 8003dd2:	fb06 1415 	mls	r4, r6, r5, r1
 8003dd6:	3430      	adds	r4, #48	; 0x30
 8003dd8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003ddc:	460c      	mov	r4, r1
 8003dde:	2c63      	cmp	r4, #99	; 0x63
 8003de0:	f102 32ff 	add.w	r2, r2, #4294967295
 8003de4:	4629      	mov	r1, r5
 8003de6:	dcf1      	bgt.n	8003dcc <__exponent+0x22>
 8003de8:	3130      	adds	r1, #48	; 0x30
 8003dea:	f1ac 0402 	sub.w	r4, ip, #2
 8003dee:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003df2:	1c41      	adds	r1, r0, #1
 8003df4:	4622      	mov	r2, r4
 8003df6:	42ba      	cmp	r2, r7
 8003df8:	d30a      	bcc.n	8003e10 <__exponent+0x66>
 8003dfa:	f10d 0209 	add.w	r2, sp, #9
 8003dfe:	eba2 020c 	sub.w	r2, r2, ip
 8003e02:	42bc      	cmp	r4, r7
 8003e04:	bf88      	it	hi
 8003e06:	2200      	movhi	r2, #0
 8003e08:	4413      	add	r3, r2
 8003e0a:	1a18      	subs	r0, r3, r0
 8003e0c:	b003      	add	sp, #12
 8003e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e10:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003e14:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003e18:	e7ed      	b.n	8003df6 <__exponent+0x4c>
 8003e1a:	2330      	movs	r3, #48	; 0x30
 8003e1c:	3130      	adds	r1, #48	; 0x30
 8003e1e:	7083      	strb	r3, [r0, #2]
 8003e20:	70c1      	strb	r1, [r0, #3]
 8003e22:	1d03      	adds	r3, r0, #4
 8003e24:	e7f1      	b.n	8003e0a <__exponent+0x60>
	...

08003e28 <_printf_float>:
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	ed2d 8b02 	vpush	{d8}
 8003e30:	b08d      	sub	sp, #52	; 0x34
 8003e32:	460c      	mov	r4, r1
 8003e34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003e38:	4616      	mov	r6, r2
 8003e3a:	461f      	mov	r7, r3
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	f000 fda3 	bl	8004988 <_localeconv_r>
 8003e42:	f8d0 a000 	ldr.w	sl, [r0]
 8003e46:	4650      	mov	r0, sl
 8003e48:	f7fc fa12 	bl	8000270 <strlen>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	9305      	str	r3, [sp, #20]
 8003e54:	f8d8 3000 	ldr.w	r3, [r8]
 8003e58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003e5c:	3307      	adds	r3, #7
 8003e5e:	f023 0307 	bic.w	r3, r3, #7
 8003e62:	f103 0208 	add.w	r2, r3, #8
 8003e66:	f8c8 2000 	str.w	r2, [r8]
 8003e6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e72:	9307      	str	r3, [sp, #28]
 8003e74:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e78:	ee08 0a10 	vmov	s16, r0
 8003e7c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e84:	4b9e      	ldr	r3, [pc, #632]	; (8004100 <_printf_float+0x2d8>)
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8a:	f7fc fe4f 	bl	8000b2c <__aeabi_dcmpun>
 8003e8e:	bb88      	cbnz	r0, 8003ef4 <_printf_float+0xcc>
 8003e90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e94:	4b9a      	ldr	r3, [pc, #616]	; (8004100 <_printf_float+0x2d8>)
 8003e96:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9a:	f7fc fe29 	bl	8000af0 <__aeabi_dcmple>
 8003e9e:	bb48      	cbnz	r0, 8003ef4 <_printf_float+0xcc>
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4640      	mov	r0, r8
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	f7fc fe18 	bl	8000adc <__aeabi_dcmplt>
 8003eac:	b110      	cbz	r0, 8003eb4 <_printf_float+0x8c>
 8003eae:	232d      	movs	r3, #45	; 0x2d
 8003eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eb4:	4a93      	ldr	r2, [pc, #588]	; (8004104 <_printf_float+0x2dc>)
 8003eb6:	4b94      	ldr	r3, [pc, #592]	; (8004108 <_printf_float+0x2e0>)
 8003eb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ebc:	bf94      	ite	ls
 8003ebe:	4690      	movls	r8, r2
 8003ec0:	4698      	movhi	r8, r3
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	6123      	str	r3, [r4, #16]
 8003ec6:	9b05      	ldr	r3, [sp, #20]
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	f04f 0900 	mov.w	r9, #0
 8003ed2:	9700      	str	r7, [sp, #0]
 8003ed4:	4633      	mov	r3, r6
 8003ed6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003ed8:	4621      	mov	r1, r4
 8003eda:	4628      	mov	r0, r5
 8003edc:	f000 f9da 	bl	8004294 <_printf_common>
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	f040 8090 	bne.w	8004006 <_printf_float+0x1de>
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eea:	b00d      	add	sp, #52	; 0x34
 8003eec:	ecbd 8b02 	vpop	{d8}
 8003ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	4640      	mov	r0, r8
 8003efa:	4649      	mov	r1, r9
 8003efc:	f7fc fe16 	bl	8000b2c <__aeabi_dcmpun>
 8003f00:	b140      	cbz	r0, 8003f14 <_printf_float+0xec>
 8003f02:	464b      	mov	r3, r9
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bfbc      	itt	lt
 8003f08:	232d      	movlt	r3, #45	; 0x2d
 8003f0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f0e:	4a7f      	ldr	r2, [pc, #508]	; (800410c <_printf_float+0x2e4>)
 8003f10:	4b7f      	ldr	r3, [pc, #508]	; (8004110 <_printf_float+0x2e8>)
 8003f12:	e7d1      	b.n	8003eb8 <_printf_float+0x90>
 8003f14:	6863      	ldr	r3, [r4, #4]
 8003f16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003f1a:	9206      	str	r2, [sp, #24]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	d13f      	bne.n	8003fa0 <_printf_float+0x178>
 8003f20:	2306      	movs	r3, #6
 8003f22:	6063      	str	r3, [r4, #4]
 8003f24:	9b05      	ldr	r3, [sp, #20]
 8003f26:	6861      	ldr	r1, [r4, #4]
 8003f28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	ab0a      	add	r3, sp, #40	; 0x28
 8003f32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003f36:	ab09      	add	r3, sp, #36	; 0x24
 8003f38:	ec49 8b10 	vmov	d0, r8, r9
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6022      	str	r2, [r4, #0]
 8003f40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f44:	4628      	mov	r0, r5
 8003f46:	f7ff fece 	bl	8003ce6 <__cvt>
 8003f4a:	9b06      	ldr	r3, [sp, #24]
 8003f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f4e:	2b47      	cmp	r3, #71	; 0x47
 8003f50:	4680      	mov	r8, r0
 8003f52:	d108      	bne.n	8003f66 <_printf_float+0x13e>
 8003f54:	1cc8      	adds	r0, r1, #3
 8003f56:	db02      	blt.n	8003f5e <_printf_float+0x136>
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	4299      	cmp	r1, r3
 8003f5c:	dd41      	ble.n	8003fe2 <_printf_float+0x1ba>
 8003f5e:	f1ab 0302 	sub.w	r3, fp, #2
 8003f62:	fa5f fb83 	uxtb.w	fp, r3
 8003f66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f6a:	d820      	bhi.n	8003fae <_printf_float+0x186>
 8003f6c:	3901      	subs	r1, #1
 8003f6e:	465a      	mov	r2, fp
 8003f70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f74:	9109      	str	r1, [sp, #36]	; 0x24
 8003f76:	f7ff ff18 	bl	8003daa <__exponent>
 8003f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f7c:	1813      	adds	r3, r2, r0
 8003f7e:	2a01      	cmp	r2, #1
 8003f80:	4681      	mov	r9, r0
 8003f82:	6123      	str	r3, [r4, #16]
 8003f84:	dc02      	bgt.n	8003f8c <_printf_float+0x164>
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	07d2      	lsls	r2, r2, #31
 8003f8a:	d501      	bpl.n	8003f90 <_printf_float+0x168>
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	6123      	str	r3, [r4, #16]
 8003f90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d09c      	beq.n	8003ed2 <_printf_float+0xaa>
 8003f98:	232d      	movs	r3, #45	; 0x2d
 8003f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f9e:	e798      	b.n	8003ed2 <_printf_float+0xaa>
 8003fa0:	9a06      	ldr	r2, [sp, #24]
 8003fa2:	2a47      	cmp	r2, #71	; 0x47
 8003fa4:	d1be      	bne.n	8003f24 <_printf_float+0xfc>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1bc      	bne.n	8003f24 <_printf_float+0xfc>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e7b9      	b.n	8003f22 <_printf_float+0xfa>
 8003fae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003fb2:	d118      	bne.n	8003fe6 <_printf_float+0x1be>
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	dd0b      	ble.n	8003fd2 <_printf_float+0x1aa>
 8003fba:	6121      	str	r1, [r4, #16]
 8003fbc:	b913      	cbnz	r3, 8003fc4 <_printf_float+0x19c>
 8003fbe:	6822      	ldr	r2, [r4, #0]
 8003fc0:	07d0      	lsls	r0, r2, #31
 8003fc2:	d502      	bpl.n	8003fca <_printf_float+0x1a2>
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	440b      	add	r3, r1
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	65a1      	str	r1, [r4, #88]	; 0x58
 8003fcc:	f04f 0900 	mov.w	r9, #0
 8003fd0:	e7de      	b.n	8003f90 <_printf_float+0x168>
 8003fd2:	b913      	cbnz	r3, 8003fda <_printf_float+0x1b2>
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	07d2      	lsls	r2, r2, #31
 8003fd8:	d501      	bpl.n	8003fde <_printf_float+0x1b6>
 8003fda:	3302      	adds	r3, #2
 8003fdc:	e7f4      	b.n	8003fc8 <_printf_float+0x1a0>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e7f2      	b.n	8003fc8 <_printf_float+0x1a0>
 8003fe2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe8:	4299      	cmp	r1, r3
 8003fea:	db05      	blt.n	8003ff8 <_printf_float+0x1d0>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	6121      	str	r1, [r4, #16]
 8003ff0:	07d8      	lsls	r0, r3, #31
 8003ff2:	d5ea      	bpl.n	8003fca <_printf_float+0x1a2>
 8003ff4:	1c4b      	adds	r3, r1, #1
 8003ff6:	e7e7      	b.n	8003fc8 <_printf_float+0x1a0>
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	bfd4      	ite	le
 8003ffc:	f1c1 0202 	rsble	r2, r1, #2
 8004000:	2201      	movgt	r2, #1
 8004002:	4413      	add	r3, r2
 8004004:	e7e0      	b.n	8003fc8 <_printf_float+0x1a0>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	055a      	lsls	r2, r3, #21
 800400a:	d407      	bmi.n	800401c <_printf_float+0x1f4>
 800400c:	6923      	ldr	r3, [r4, #16]
 800400e:	4642      	mov	r2, r8
 8004010:	4631      	mov	r1, r6
 8004012:	4628      	mov	r0, r5
 8004014:	47b8      	blx	r7
 8004016:	3001      	adds	r0, #1
 8004018:	d12c      	bne.n	8004074 <_printf_float+0x24c>
 800401a:	e764      	b.n	8003ee6 <_printf_float+0xbe>
 800401c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004020:	f240 80e0 	bls.w	80041e4 <_printf_float+0x3bc>
 8004024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004028:	2200      	movs	r2, #0
 800402a:	2300      	movs	r3, #0
 800402c:	f7fc fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004030:	2800      	cmp	r0, #0
 8004032:	d034      	beq.n	800409e <_printf_float+0x276>
 8004034:	4a37      	ldr	r2, [pc, #220]	; (8004114 <_printf_float+0x2ec>)
 8004036:	2301      	movs	r3, #1
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	f43f af51 	beq.w	8003ee6 <_printf_float+0xbe>
 8004044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004048:	429a      	cmp	r2, r3
 800404a:	db02      	blt.n	8004052 <_printf_float+0x22a>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	07d8      	lsls	r0, r3, #31
 8004050:	d510      	bpl.n	8004074 <_printf_float+0x24c>
 8004052:	ee18 3a10 	vmov	r3, s16
 8004056:	4652      	mov	r2, sl
 8004058:	4631      	mov	r1, r6
 800405a:	4628      	mov	r0, r5
 800405c:	47b8      	blx	r7
 800405e:	3001      	adds	r0, #1
 8004060:	f43f af41 	beq.w	8003ee6 <_printf_float+0xbe>
 8004064:	f04f 0800 	mov.w	r8, #0
 8004068:	f104 091a 	add.w	r9, r4, #26
 800406c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800406e:	3b01      	subs	r3, #1
 8004070:	4543      	cmp	r3, r8
 8004072:	dc09      	bgt.n	8004088 <_printf_float+0x260>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	079b      	lsls	r3, r3, #30
 8004078:	f100 8107 	bmi.w	800428a <_printf_float+0x462>
 800407c:	68e0      	ldr	r0, [r4, #12]
 800407e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004080:	4298      	cmp	r0, r3
 8004082:	bfb8      	it	lt
 8004084:	4618      	movlt	r0, r3
 8004086:	e730      	b.n	8003eea <_printf_float+0xc2>
 8004088:	2301      	movs	r3, #1
 800408a:	464a      	mov	r2, r9
 800408c:	4631      	mov	r1, r6
 800408e:	4628      	mov	r0, r5
 8004090:	47b8      	blx	r7
 8004092:	3001      	adds	r0, #1
 8004094:	f43f af27 	beq.w	8003ee6 <_printf_float+0xbe>
 8004098:	f108 0801 	add.w	r8, r8, #1
 800409c:	e7e6      	b.n	800406c <_printf_float+0x244>
 800409e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	dc39      	bgt.n	8004118 <_printf_float+0x2f0>
 80040a4:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <_printf_float+0x2ec>)
 80040a6:	2301      	movs	r3, #1
 80040a8:	4631      	mov	r1, r6
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b8      	blx	r7
 80040ae:	3001      	adds	r0, #1
 80040b0:	f43f af19 	beq.w	8003ee6 <_printf_float+0xbe>
 80040b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80040b8:	4313      	orrs	r3, r2
 80040ba:	d102      	bne.n	80040c2 <_printf_float+0x29a>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	07d9      	lsls	r1, r3, #31
 80040c0:	d5d8      	bpl.n	8004074 <_printf_float+0x24c>
 80040c2:	ee18 3a10 	vmov	r3, s16
 80040c6:	4652      	mov	r2, sl
 80040c8:	4631      	mov	r1, r6
 80040ca:	4628      	mov	r0, r5
 80040cc:	47b8      	blx	r7
 80040ce:	3001      	adds	r0, #1
 80040d0:	f43f af09 	beq.w	8003ee6 <_printf_float+0xbe>
 80040d4:	f04f 0900 	mov.w	r9, #0
 80040d8:	f104 0a1a 	add.w	sl, r4, #26
 80040dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040de:	425b      	negs	r3, r3
 80040e0:	454b      	cmp	r3, r9
 80040e2:	dc01      	bgt.n	80040e8 <_printf_float+0x2c0>
 80040e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040e6:	e792      	b.n	800400e <_printf_float+0x1e6>
 80040e8:	2301      	movs	r3, #1
 80040ea:	4652      	mov	r2, sl
 80040ec:	4631      	mov	r1, r6
 80040ee:	4628      	mov	r0, r5
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	f43f aef7 	beq.w	8003ee6 <_printf_float+0xbe>
 80040f8:	f109 0901 	add.w	r9, r9, #1
 80040fc:	e7ee      	b.n	80040dc <_printf_float+0x2b4>
 80040fe:	bf00      	nop
 8004100:	7fefffff 	.word	0x7fefffff
 8004104:	08006798 	.word	0x08006798
 8004108:	0800679c 	.word	0x0800679c
 800410c:	080067a0 	.word	0x080067a0
 8004110:	080067a4 	.word	0x080067a4
 8004114:	080067a8 	.word	0x080067a8
 8004118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800411a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800411c:	429a      	cmp	r2, r3
 800411e:	bfa8      	it	ge
 8004120:	461a      	movge	r2, r3
 8004122:	2a00      	cmp	r2, #0
 8004124:	4691      	mov	r9, r2
 8004126:	dc37      	bgt.n	8004198 <_printf_float+0x370>
 8004128:	f04f 0b00 	mov.w	fp, #0
 800412c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004130:	f104 021a 	add.w	r2, r4, #26
 8004134:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004136:	9305      	str	r3, [sp, #20]
 8004138:	eba3 0309 	sub.w	r3, r3, r9
 800413c:	455b      	cmp	r3, fp
 800413e:	dc33      	bgt.n	80041a8 <_printf_float+0x380>
 8004140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004144:	429a      	cmp	r2, r3
 8004146:	db3b      	blt.n	80041c0 <_printf_float+0x398>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	07da      	lsls	r2, r3, #31
 800414c:	d438      	bmi.n	80041c0 <_printf_float+0x398>
 800414e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004152:	eba2 0903 	sub.w	r9, r2, r3
 8004156:	9b05      	ldr	r3, [sp, #20]
 8004158:	1ad2      	subs	r2, r2, r3
 800415a:	4591      	cmp	r9, r2
 800415c:	bfa8      	it	ge
 800415e:	4691      	movge	r9, r2
 8004160:	f1b9 0f00 	cmp.w	r9, #0
 8004164:	dc35      	bgt.n	80041d2 <_printf_float+0x3aa>
 8004166:	f04f 0800 	mov.w	r8, #0
 800416a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800416e:	f104 0a1a 	add.w	sl, r4, #26
 8004172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	eba3 0309 	sub.w	r3, r3, r9
 800417c:	4543      	cmp	r3, r8
 800417e:	f77f af79 	ble.w	8004074 <_printf_float+0x24c>
 8004182:	2301      	movs	r3, #1
 8004184:	4652      	mov	r2, sl
 8004186:	4631      	mov	r1, r6
 8004188:	4628      	mov	r0, r5
 800418a:	47b8      	blx	r7
 800418c:	3001      	adds	r0, #1
 800418e:	f43f aeaa 	beq.w	8003ee6 <_printf_float+0xbe>
 8004192:	f108 0801 	add.w	r8, r8, #1
 8004196:	e7ec      	b.n	8004172 <_printf_float+0x34a>
 8004198:	4613      	mov	r3, r2
 800419a:	4631      	mov	r1, r6
 800419c:	4642      	mov	r2, r8
 800419e:	4628      	mov	r0, r5
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	d1c0      	bne.n	8004128 <_printf_float+0x300>
 80041a6:	e69e      	b.n	8003ee6 <_printf_float+0xbe>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4631      	mov	r1, r6
 80041ac:	4628      	mov	r0, r5
 80041ae:	9205      	str	r2, [sp, #20]
 80041b0:	47b8      	blx	r7
 80041b2:	3001      	adds	r0, #1
 80041b4:	f43f ae97 	beq.w	8003ee6 <_printf_float+0xbe>
 80041b8:	9a05      	ldr	r2, [sp, #20]
 80041ba:	f10b 0b01 	add.w	fp, fp, #1
 80041be:	e7b9      	b.n	8004134 <_printf_float+0x30c>
 80041c0:	ee18 3a10 	vmov	r3, s16
 80041c4:	4652      	mov	r2, sl
 80041c6:	4631      	mov	r1, r6
 80041c8:	4628      	mov	r0, r5
 80041ca:	47b8      	blx	r7
 80041cc:	3001      	adds	r0, #1
 80041ce:	d1be      	bne.n	800414e <_printf_float+0x326>
 80041d0:	e689      	b.n	8003ee6 <_printf_float+0xbe>
 80041d2:	9a05      	ldr	r2, [sp, #20]
 80041d4:	464b      	mov	r3, r9
 80041d6:	4442      	add	r2, r8
 80041d8:	4631      	mov	r1, r6
 80041da:	4628      	mov	r0, r5
 80041dc:	47b8      	blx	r7
 80041de:	3001      	adds	r0, #1
 80041e0:	d1c1      	bne.n	8004166 <_printf_float+0x33e>
 80041e2:	e680      	b.n	8003ee6 <_printf_float+0xbe>
 80041e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041e6:	2a01      	cmp	r2, #1
 80041e8:	dc01      	bgt.n	80041ee <_printf_float+0x3c6>
 80041ea:	07db      	lsls	r3, r3, #31
 80041ec:	d53a      	bpl.n	8004264 <_printf_float+0x43c>
 80041ee:	2301      	movs	r3, #1
 80041f0:	4642      	mov	r2, r8
 80041f2:	4631      	mov	r1, r6
 80041f4:	4628      	mov	r0, r5
 80041f6:	47b8      	blx	r7
 80041f8:	3001      	adds	r0, #1
 80041fa:	f43f ae74 	beq.w	8003ee6 <_printf_float+0xbe>
 80041fe:	ee18 3a10 	vmov	r3, s16
 8004202:	4652      	mov	r2, sl
 8004204:	4631      	mov	r1, r6
 8004206:	4628      	mov	r0, r5
 8004208:	47b8      	blx	r7
 800420a:	3001      	adds	r0, #1
 800420c:	f43f ae6b 	beq.w	8003ee6 <_printf_float+0xbe>
 8004210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004214:	2200      	movs	r2, #0
 8004216:	2300      	movs	r3, #0
 8004218:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800421c:	f7fc fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8004220:	b9d8      	cbnz	r0, 800425a <_printf_float+0x432>
 8004222:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004226:	f108 0201 	add.w	r2, r8, #1
 800422a:	4631      	mov	r1, r6
 800422c:	4628      	mov	r0, r5
 800422e:	47b8      	blx	r7
 8004230:	3001      	adds	r0, #1
 8004232:	d10e      	bne.n	8004252 <_printf_float+0x42a>
 8004234:	e657      	b.n	8003ee6 <_printf_float+0xbe>
 8004236:	2301      	movs	r3, #1
 8004238:	4652      	mov	r2, sl
 800423a:	4631      	mov	r1, r6
 800423c:	4628      	mov	r0, r5
 800423e:	47b8      	blx	r7
 8004240:	3001      	adds	r0, #1
 8004242:	f43f ae50 	beq.w	8003ee6 <_printf_float+0xbe>
 8004246:	f108 0801 	add.w	r8, r8, #1
 800424a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	4543      	cmp	r3, r8
 8004250:	dcf1      	bgt.n	8004236 <_printf_float+0x40e>
 8004252:	464b      	mov	r3, r9
 8004254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004258:	e6da      	b.n	8004010 <_printf_float+0x1e8>
 800425a:	f04f 0800 	mov.w	r8, #0
 800425e:	f104 0a1a 	add.w	sl, r4, #26
 8004262:	e7f2      	b.n	800424a <_printf_float+0x422>
 8004264:	2301      	movs	r3, #1
 8004266:	4642      	mov	r2, r8
 8004268:	e7df      	b.n	800422a <_printf_float+0x402>
 800426a:	2301      	movs	r3, #1
 800426c:	464a      	mov	r2, r9
 800426e:	4631      	mov	r1, r6
 8004270:	4628      	mov	r0, r5
 8004272:	47b8      	blx	r7
 8004274:	3001      	adds	r0, #1
 8004276:	f43f ae36 	beq.w	8003ee6 <_printf_float+0xbe>
 800427a:	f108 0801 	add.w	r8, r8, #1
 800427e:	68e3      	ldr	r3, [r4, #12]
 8004280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004282:	1a5b      	subs	r3, r3, r1
 8004284:	4543      	cmp	r3, r8
 8004286:	dcf0      	bgt.n	800426a <_printf_float+0x442>
 8004288:	e6f8      	b.n	800407c <_printf_float+0x254>
 800428a:	f04f 0800 	mov.w	r8, #0
 800428e:	f104 0919 	add.w	r9, r4, #25
 8004292:	e7f4      	b.n	800427e <_printf_float+0x456>

08004294 <_printf_common>:
 8004294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	4616      	mov	r6, r2
 800429a:	4699      	mov	r9, r3
 800429c:	688a      	ldr	r2, [r1, #8]
 800429e:	690b      	ldr	r3, [r1, #16]
 80042a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	bfb8      	it	lt
 80042a8:	4613      	movlt	r3, r2
 80042aa:	6033      	str	r3, [r6, #0]
 80042ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042b0:	4607      	mov	r7, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	b10a      	cbz	r2, 80042ba <_printf_common+0x26>
 80042b6:	3301      	adds	r3, #1
 80042b8:	6033      	str	r3, [r6, #0]
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	0699      	lsls	r1, r3, #26
 80042be:	bf42      	ittt	mi
 80042c0:	6833      	ldrmi	r3, [r6, #0]
 80042c2:	3302      	addmi	r3, #2
 80042c4:	6033      	strmi	r3, [r6, #0]
 80042c6:	6825      	ldr	r5, [r4, #0]
 80042c8:	f015 0506 	ands.w	r5, r5, #6
 80042cc:	d106      	bne.n	80042dc <_printf_common+0x48>
 80042ce:	f104 0a19 	add.w	sl, r4, #25
 80042d2:	68e3      	ldr	r3, [r4, #12]
 80042d4:	6832      	ldr	r2, [r6, #0]
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	42ab      	cmp	r3, r5
 80042da:	dc26      	bgt.n	800432a <_printf_common+0x96>
 80042dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042e0:	1e13      	subs	r3, r2, #0
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	bf18      	it	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	0692      	lsls	r2, r2, #26
 80042ea:	d42b      	bmi.n	8004344 <_printf_common+0xb0>
 80042ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042f0:	4649      	mov	r1, r9
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	3001      	adds	r0, #1
 80042f8:	d01e      	beq.n	8004338 <_printf_common+0xa4>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	6922      	ldr	r2, [r4, #16]
 80042fe:	f003 0306 	and.w	r3, r3, #6
 8004302:	2b04      	cmp	r3, #4
 8004304:	bf02      	ittt	eq
 8004306:	68e5      	ldreq	r5, [r4, #12]
 8004308:	6833      	ldreq	r3, [r6, #0]
 800430a:	1aed      	subeq	r5, r5, r3
 800430c:	68a3      	ldr	r3, [r4, #8]
 800430e:	bf0c      	ite	eq
 8004310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004314:	2500      	movne	r5, #0
 8004316:	4293      	cmp	r3, r2
 8004318:	bfc4      	itt	gt
 800431a:	1a9b      	subgt	r3, r3, r2
 800431c:	18ed      	addgt	r5, r5, r3
 800431e:	2600      	movs	r6, #0
 8004320:	341a      	adds	r4, #26
 8004322:	42b5      	cmp	r5, r6
 8004324:	d11a      	bne.n	800435c <_printf_common+0xc8>
 8004326:	2000      	movs	r0, #0
 8004328:	e008      	b.n	800433c <_printf_common+0xa8>
 800432a:	2301      	movs	r3, #1
 800432c:	4652      	mov	r2, sl
 800432e:	4649      	mov	r1, r9
 8004330:	4638      	mov	r0, r7
 8004332:	47c0      	blx	r8
 8004334:	3001      	adds	r0, #1
 8004336:	d103      	bne.n	8004340 <_printf_common+0xac>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004340:	3501      	adds	r5, #1
 8004342:	e7c6      	b.n	80042d2 <_printf_common+0x3e>
 8004344:	18e1      	adds	r1, r4, r3
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	2030      	movs	r0, #48	; 0x30
 800434a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800434e:	4422      	add	r2, r4
 8004350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004358:	3302      	adds	r3, #2
 800435a:	e7c7      	b.n	80042ec <_printf_common+0x58>
 800435c:	2301      	movs	r3, #1
 800435e:	4622      	mov	r2, r4
 8004360:	4649      	mov	r1, r9
 8004362:	4638      	mov	r0, r7
 8004364:	47c0      	blx	r8
 8004366:	3001      	adds	r0, #1
 8004368:	d0e6      	beq.n	8004338 <_printf_common+0xa4>
 800436a:	3601      	adds	r6, #1
 800436c:	e7d9      	b.n	8004322 <_printf_common+0x8e>
	...

08004370 <_printf_i>:
 8004370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	7e0f      	ldrb	r7, [r1, #24]
 8004376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004378:	2f78      	cmp	r7, #120	; 0x78
 800437a:	4691      	mov	r9, r2
 800437c:	4680      	mov	r8, r0
 800437e:	460c      	mov	r4, r1
 8004380:	469a      	mov	sl, r3
 8004382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004386:	d807      	bhi.n	8004398 <_printf_i+0x28>
 8004388:	2f62      	cmp	r7, #98	; 0x62
 800438a:	d80a      	bhi.n	80043a2 <_printf_i+0x32>
 800438c:	2f00      	cmp	r7, #0
 800438e:	f000 80d4 	beq.w	800453a <_printf_i+0x1ca>
 8004392:	2f58      	cmp	r7, #88	; 0x58
 8004394:	f000 80c0 	beq.w	8004518 <_printf_i+0x1a8>
 8004398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800439c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043a0:	e03a      	b.n	8004418 <_printf_i+0xa8>
 80043a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043a6:	2b15      	cmp	r3, #21
 80043a8:	d8f6      	bhi.n	8004398 <_printf_i+0x28>
 80043aa:	a101      	add	r1, pc, #4	; (adr r1, 80043b0 <_printf_i+0x40>)
 80043ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043b0:	08004409 	.word	0x08004409
 80043b4:	0800441d 	.word	0x0800441d
 80043b8:	08004399 	.word	0x08004399
 80043bc:	08004399 	.word	0x08004399
 80043c0:	08004399 	.word	0x08004399
 80043c4:	08004399 	.word	0x08004399
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	08004399 	.word	0x08004399
 80043d0:	08004399 	.word	0x08004399
 80043d4:	08004399 	.word	0x08004399
 80043d8:	08004399 	.word	0x08004399
 80043dc:	08004521 	.word	0x08004521
 80043e0:	08004449 	.word	0x08004449
 80043e4:	080044db 	.word	0x080044db
 80043e8:	08004399 	.word	0x08004399
 80043ec:	08004399 	.word	0x08004399
 80043f0:	08004543 	.word	0x08004543
 80043f4:	08004399 	.word	0x08004399
 80043f8:	08004449 	.word	0x08004449
 80043fc:	08004399 	.word	0x08004399
 8004400:	08004399 	.word	0x08004399
 8004404:	080044e3 	.word	0x080044e3
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	602a      	str	r2, [r5, #0]
 8004410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004418:	2301      	movs	r3, #1
 800441a:	e09f      	b.n	800455c <_printf_i+0x1ec>
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	0607      	lsls	r7, r0, #24
 8004422:	f103 0104 	add.w	r1, r3, #4
 8004426:	6029      	str	r1, [r5, #0]
 8004428:	d501      	bpl.n	800442e <_printf_i+0xbe>
 800442a:	681e      	ldr	r6, [r3, #0]
 800442c:	e003      	b.n	8004436 <_printf_i+0xc6>
 800442e:	0646      	lsls	r6, r0, #25
 8004430:	d5fb      	bpl.n	800442a <_printf_i+0xba>
 8004432:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004436:	2e00      	cmp	r6, #0
 8004438:	da03      	bge.n	8004442 <_printf_i+0xd2>
 800443a:	232d      	movs	r3, #45	; 0x2d
 800443c:	4276      	negs	r6, r6
 800443e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004442:	485a      	ldr	r0, [pc, #360]	; (80045ac <_printf_i+0x23c>)
 8004444:	230a      	movs	r3, #10
 8004446:	e012      	b.n	800446e <_printf_i+0xfe>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	6820      	ldr	r0, [r4, #0]
 800444c:	1d19      	adds	r1, r3, #4
 800444e:	6029      	str	r1, [r5, #0]
 8004450:	0605      	lsls	r5, r0, #24
 8004452:	d501      	bpl.n	8004458 <_printf_i+0xe8>
 8004454:	681e      	ldr	r6, [r3, #0]
 8004456:	e002      	b.n	800445e <_printf_i+0xee>
 8004458:	0641      	lsls	r1, r0, #25
 800445a:	d5fb      	bpl.n	8004454 <_printf_i+0xe4>
 800445c:	881e      	ldrh	r6, [r3, #0]
 800445e:	4853      	ldr	r0, [pc, #332]	; (80045ac <_printf_i+0x23c>)
 8004460:	2f6f      	cmp	r7, #111	; 0x6f
 8004462:	bf0c      	ite	eq
 8004464:	2308      	moveq	r3, #8
 8004466:	230a      	movne	r3, #10
 8004468:	2100      	movs	r1, #0
 800446a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800446e:	6865      	ldr	r5, [r4, #4]
 8004470:	60a5      	str	r5, [r4, #8]
 8004472:	2d00      	cmp	r5, #0
 8004474:	bfa2      	ittt	ge
 8004476:	6821      	ldrge	r1, [r4, #0]
 8004478:	f021 0104 	bicge.w	r1, r1, #4
 800447c:	6021      	strge	r1, [r4, #0]
 800447e:	b90e      	cbnz	r6, 8004484 <_printf_i+0x114>
 8004480:	2d00      	cmp	r5, #0
 8004482:	d04b      	beq.n	800451c <_printf_i+0x1ac>
 8004484:	4615      	mov	r5, r2
 8004486:	fbb6 f1f3 	udiv	r1, r6, r3
 800448a:	fb03 6711 	mls	r7, r3, r1, r6
 800448e:	5dc7      	ldrb	r7, [r0, r7]
 8004490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004494:	4637      	mov	r7, r6
 8004496:	42bb      	cmp	r3, r7
 8004498:	460e      	mov	r6, r1
 800449a:	d9f4      	bls.n	8004486 <_printf_i+0x116>
 800449c:	2b08      	cmp	r3, #8
 800449e:	d10b      	bne.n	80044b8 <_printf_i+0x148>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	07de      	lsls	r6, r3, #31
 80044a4:	d508      	bpl.n	80044b8 <_printf_i+0x148>
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	6861      	ldr	r1, [r4, #4]
 80044aa:	4299      	cmp	r1, r3
 80044ac:	bfde      	ittt	le
 80044ae:	2330      	movle	r3, #48	; 0x30
 80044b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044b8:	1b52      	subs	r2, r2, r5
 80044ba:	6122      	str	r2, [r4, #16]
 80044bc:	f8cd a000 	str.w	sl, [sp]
 80044c0:	464b      	mov	r3, r9
 80044c2:	aa03      	add	r2, sp, #12
 80044c4:	4621      	mov	r1, r4
 80044c6:	4640      	mov	r0, r8
 80044c8:	f7ff fee4 	bl	8004294 <_printf_common>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d14a      	bne.n	8004566 <_printf_i+0x1f6>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	b004      	add	sp, #16
 80044d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	f043 0320 	orr.w	r3, r3, #32
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	4833      	ldr	r0, [pc, #204]	; (80045b0 <_printf_i+0x240>)
 80044e4:	2778      	movs	r7, #120	; 0x78
 80044e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	6829      	ldr	r1, [r5, #0]
 80044ee:	061f      	lsls	r7, r3, #24
 80044f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80044f4:	d402      	bmi.n	80044fc <_printf_i+0x18c>
 80044f6:	065f      	lsls	r7, r3, #25
 80044f8:	bf48      	it	mi
 80044fa:	b2b6      	uxthmi	r6, r6
 80044fc:	07df      	lsls	r7, r3, #31
 80044fe:	bf48      	it	mi
 8004500:	f043 0320 	orrmi.w	r3, r3, #32
 8004504:	6029      	str	r1, [r5, #0]
 8004506:	bf48      	it	mi
 8004508:	6023      	strmi	r3, [r4, #0]
 800450a:	b91e      	cbnz	r6, 8004514 <_printf_i+0x1a4>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	f023 0320 	bic.w	r3, r3, #32
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	2310      	movs	r3, #16
 8004516:	e7a7      	b.n	8004468 <_printf_i+0xf8>
 8004518:	4824      	ldr	r0, [pc, #144]	; (80045ac <_printf_i+0x23c>)
 800451a:	e7e4      	b.n	80044e6 <_printf_i+0x176>
 800451c:	4615      	mov	r5, r2
 800451e:	e7bd      	b.n	800449c <_printf_i+0x12c>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	6826      	ldr	r6, [r4, #0]
 8004524:	6961      	ldr	r1, [r4, #20]
 8004526:	1d18      	adds	r0, r3, #4
 8004528:	6028      	str	r0, [r5, #0]
 800452a:	0635      	lsls	r5, r6, #24
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	d501      	bpl.n	8004534 <_printf_i+0x1c4>
 8004530:	6019      	str	r1, [r3, #0]
 8004532:	e002      	b.n	800453a <_printf_i+0x1ca>
 8004534:	0670      	lsls	r0, r6, #25
 8004536:	d5fb      	bpl.n	8004530 <_printf_i+0x1c0>
 8004538:	8019      	strh	r1, [r3, #0]
 800453a:	2300      	movs	r3, #0
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	4615      	mov	r5, r2
 8004540:	e7bc      	b.n	80044bc <_printf_i+0x14c>
 8004542:	682b      	ldr	r3, [r5, #0]
 8004544:	1d1a      	adds	r2, r3, #4
 8004546:	602a      	str	r2, [r5, #0]
 8004548:	681d      	ldr	r5, [r3, #0]
 800454a:	6862      	ldr	r2, [r4, #4]
 800454c:	2100      	movs	r1, #0
 800454e:	4628      	mov	r0, r5
 8004550:	f7fb fe3e 	bl	80001d0 <memchr>
 8004554:	b108      	cbz	r0, 800455a <_printf_i+0x1ea>
 8004556:	1b40      	subs	r0, r0, r5
 8004558:	6060      	str	r0, [r4, #4]
 800455a:	6863      	ldr	r3, [r4, #4]
 800455c:	6123      	str	r3, [r4, #16]
 800455e:	2300      	movs	r3, #0
 8004560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004564:	e7aa      	b.n	80044bc <_printf_i+0x14c>
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	462a      	mov	r2, r5
 800456a:	4649      	mov	r1, r9
 800456c:	4640      	mov	r0, r8
 800456e:	47d0      	blx	sl
 8004570:	3001      	adds	r0, #1
 8004572:	d0ad      	beq.n	80044d0 <_printf_i+0x160>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	079b      	lsls	r3, r3, #30
 8004578:	d413      	bmi.n	80045a2 <_printf_i+0x232>
 800457a:	68e0      	ldr	r0, [r4, #12]
 800457c:	9b03      	ldr	r3, [sp, #12]
 800457e:	4298      	cmp	r0, r3
 8004580:	bfb8      	it	lt
 8004582:	4618      	movlt	r0, r3
 8004584:	e7a6      	b.n	80044d4 <_printf_i+0x164>
 8004586:	2301      	movs	r3, #1
 8004588:	4632      	mov	r2, r6
 800458a:	4649      	mov	r1, r9
 800458c:	4640      	mov	r0, r8
 800458e:	47d0      	blx	sl
 8004590:	3001      	adds	r0, #1
 8004592:	d09d      	beq.n	80044d0 <_printf_i+0x160>
 8004594:	3501      	adds	r5, #1
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	9903      	ldr	r1, [sp, #12]
 800459a:	1a5b      	subs	r3, r3, r1
 800459c:	42ab      	cmp	r3, r5
 800459e:	dcf2      	bgt.n	8004586 <_printf_i+0x216>
 80045a0:	e7eb      	b.n	800457a <_printf_i+0x20a>
 80045a2:	2500      	movs	r5, #0
 80045a4:	f104 0619 	add.w	r6, r4, #25
 80045a8:	e7f5      	b.n	8004596 <_printf_i+0x226>
 80045aa:	bf00      	nop
 80045ac:	080067aa 	.word	0x080067aa
 80045b0:	080067bb 	.word	0x080067bb

080045b4 <__sflush_r>:
 80045b4:	898a      	ldrh	r2, [r1, #12]
 80045b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ba:	4605      	mov	r5, r0
 80045bc:	0710      	lsls	r0, r2, #28
 80045be:	460c      	mov	r4, r1
 80045c0:	d458      	bmi.n	8004674 <__sflush_r+0xc0>
 80045c2:	684b      	ldr	r3, [r1, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	dc05      	bgt.n	80045d4 <__sflush_r+0x20>
 80045c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	dc02      	bgt.n	80045d4 <__sflush_r+0x20>
 80045ce:	2000      	movs	r0, #0
 80045d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045d6:	2e00      	cmp	r6, #0
 80045d8:	d0f9      	beq.n	80045ce <__sflush_r+0x1a>
 80045da:	2300      	movs	r3, #0
 80045dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045e0:	682f      	ldr	r7, [r5, #0]
 80045e2:	6a21      	ldr	r1, [r4, #32]
 80045e4:	602b      	str	r3, [r5, #0]
 80045e6:	d032      	beq.n	800464e <__sflush_r+0x9a>
 80045e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	075a      	lsls	r2, r3, #29
 80045ee:	d505      	bpl.n	80045fc <__sflush_r+0x48>
 80045f0:	6863      	ldr	r3, [r4, #4]
 80045f2:	1ac0      	subs	r0, r0, r3
 80045f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045f6:	b10b      	cbz	r3, 80045fc <__sflush_r+0x48>
 80045f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045fa:	1ac0      	subs	r0, r0, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	4602      	mov	r2, r0
 8004600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004602:	6a21      	ldr	r1, [r4, #32]
 8004604:	4628      	mov	r0, r5
 8004606:	47b0      	blx	r6
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	d106      	bne.n	800461c <__sflush_r+0x68>
 800460e:	6829      	ldr	r1, [r5, #0]
 8004610:	291d      	cmp	r1, #29
 8004612:	d82b      	bhi.n	800466c <__sflush_r+0xb8>
 8004614:	4a29      	ldr	r2, [pc, #164]	; (80046bc <__sflush_r+0x108>)
 8004616:	410a      	asrs	r2, r1
 8004618:	07d6      	lsls	r6, r2, #31
 800461a:	d427      	bmi.n	800466c <__sflush_r+0xb8>
 800461c:	2200      	movs	r2, #0
 800461e:	6062      	str	r2, [r4, #4]
 8004620:	04d9      	lsls	r1, r3, #19
 8004622:	6922      	ldr	r2, [r4, #16]
 8004624:	6022      	str	r2, [r4, #0]
 8004626:	d504      	bpl.n	8004632 <__sflush_r+0x7e>
 8004628:	1c42      	adds	r2, r0, #1
 800462a:	d101      	bne.n	8004630 <__sflush_r+0x7c>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	b903      	cbnz	r3, 8004632 <__sflush_r+0x7e>
 8004630:	6560      	str	r0, [r4, #84]	; 0x54
 8004632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004634:	602f      	str	r7, [r5, #0]
 8004636:	2900      	cmp	r1, #0
 8004638:	d0c9      	beq.n	80045ce <__sflush_r+0x1a>
 800463a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800463e:	4299      	cmp	r1, r3
 8004640:	d002      	beq.n	8004648 <__sflush_r+0x94>
 8004642:	4628      	mov	r0, r5
 8004644:	f001 f892 	bl	800576c <_free_r>
 8004648:	2000      	movs	r0, #0
 800464a:	6360      	str	r0, [r4, #52]	; 0x34
 800464c:	e7c0      	b.n	80045d0 <__sflush_r+0x1c>
 800464e:	2301      	movs	r3, #1
 8004650:	4628      	mov	r0, r5
 8004652:	47b0      	blx	r6
 8004654:	1c41      	adds	r1, r0, #1
 8004656:	d1c8      	bne.n	80045ea <__sflush_r+0x36>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0c5      	beq.n	80045ea <__sflush_r+0x36>
 800465e:	2b1d      	cmp	r3, #29
 8004660:	d001      	beq.n	8004666 <__sflush_r+0xb2>
 8004662:	2b16      	cmp	r3, #22
 8004664:	d101      	bne.n	800466a <__sflush_r+0xb6>
 8004666:	602f      	str	r7, [r5, #0]
 8004668:	e7b1      	b.n	80045ce <__sflush_r+0x1a>
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	e7ad      	b.n	80045d0 <__sflush_r+0x1c>
 8004674:	690f      	ldr	r7, [r1, #16]
 8004676:	2f00      	cmp	r7, #0
 8004678:	d0a9      	beq.n	80045ce <__sflush_r+0x1a>
 800467a:	0793      	lsls	r3, r2, #30
 800467c:	680e      	ldr	r6, [r1, #0]
 800467e:	bf08      	it	eq
 8004680:	694b      	ldreq	r3, [r1, #20]
 8004682:	600f      	str	r7, [r1, #0]
 8004684:	bf18      	it	ne
 8004686:	2300      	movne	r3, #0
 8004688:	eba6 0807 	sub.w	r8, r6, r7
 800468c:	608b      	str	r3, [r1, #8]
 800468e:	f1b8 0f00 	cmp.w	r8, #0
 8004692:	dd9c      	ble.n	80045ce <__sflush_r+0x1a>
 8004694:	6a21      	ldr	r1, [r4, #32]
 8004696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004698:	4643      	mov	r3, r8
 800469a:	463a      	mov	r2, r7
 800469c:	4628      	mov	r0, r5
 800469e:	47b0      	blx	r6
 80046a0:	2800      	cmp	r0, #0
 80046a2:	dc06      	bgt.n	80046b2 <__sflush_r+0xfe>
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	e78e      	b.n	80045d0 <__sflush_r+0x1c>
 80046b2:	4407      	add	r7, r0
 80046b4:	eba8 0800 	sub.w	r8, r8, r0
 80046b8:	e7e9      	b.n	800468e <__sflush_r+0xda>
 80046ba:	bf00      	nop
 80046bc:	dfbffffe 	.word	0xdfbffffe

080046c0 <_fflush_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	690b      	ldr	r3, [r1, #16]
 80046c4:	4605      	mov	r5, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	b913      	cbnz	r3, 80046d0 <_fflush_r+0x10>
 80046ca:	2500      	movs	r5, #0
 80046cc:	4628      	mov	r0, r5
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	b118      	cbz	r0, 80046da <_fflush_r+0x1a>
 80046d2:	6a03      	ldr	r3, [r0, #32]
 80046d4:	b90b      	cbnz	r3, 80046da <_fflush_r+0x1a>
 80046d6:	f000 f8bb 	bl	8004850 <__sinit>
 80046da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f3      	beq.n	80046ca <_fflush_r+0xa>
 80046e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046e4:	07d0      	lsls	r0, r2, #31
 80046e6:	d404      	bmi.n	80046f2 <_fflush_r+0x32>
 80046e8:	0599      	lsls	r1, r3, #22
 80046ea:	d402      	bmi.n	80046f2 <_fflush_r+0x32>
 80046ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ee:	f000 f9c0 	bl	8004a72 <__retarget_lock_acquire_recursive>
 80046f2:	4628      	mov	r0, r5
 80046f4:	4621      	mov	r1, r4
 80046f6:	f7ff ff5d 	bl	80045b4 <__sflush_r>
 80046fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046fc:	07da      	lsls	r2, r3, #31
 80046fe:	4605      	mov	r5, r0
 8004700:	d4e4      	bmi.n	80046cc <_fflush_r+0xc>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	059b      	lsls	r3, r3, #22
 8004706:	d4e1      	bmi.n	80046cc <_fflush_r+0xc>
 8004708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470a:	f000 f9b3 	bl	8004a74 <__retarget_lock_release_recursive>
 800470e:	e7dd      	b.n	80046cc <_fflush_r+0xc>

08004710 <fflush>:
 8004710:	4601      	mov	r1, r0
 8004712:	b920      	cbnz	r0, 800471e <fflush+0xe>
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <fflush+0x18>)
 8004716:	4905      	ldr	r1, [pc, #20]	; (800472c <fflush+0x1c>)
 8004718:	4805      	ldr	r0, [pc, #20]	; (8004730 <fflush+0x20>)
 800471a:	f000 b8b1 	b.w	8004880 <_fwalk_sglue>
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <fflush+0x24>)
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	f7ff bfcd 	b.w	80046c0 <_fflush_r>
 8004726:	bf00      	nop
 8004728:	2000000c 	.word	0x2000000c
 800472c:	080046c1 	.word	0x080046c1
 8004730:	20000018 	.word	0x20000018
 8004734:	20000064 	.word	0x20000064

08004738 <std>:
 8004738:	2300      	movs	r3, #0
 800473a:	b510      	push	{r4, lr}
 800473c:	4604      	mov	r4, r0
 800473e:	e9c0 3300 	strd	r3, r3, [r0]
 8004742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004746:	6083      	str	r3, [r0, #8]
 8004748:	8181      	strh	r1, [r0, #12]
 800474a:	6643      	str	r3, [r0, #100]	; 0x64
 800474c:	81c2      	strh	r2, [r0, #14]
 800474e:	6183      	str	r3, [r0, #24]
 8004750:	4619      	mov	r1, r3
 8004752:	2208      	movs	r2, #8
 8004754:	305c      	adds	r0, #92	; 0x5c
 8004756:	f000 f90e 	bl	8004976 <memset>
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <std+0x58>)
 800475c:	6263      	str	r3, [r4, #36]	; 0x24
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <std+0x5c>)
 8004760:	62a3      	str	r3, [r4, #40]	; 0x28
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <std+0x60>)
 8004764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <std+0x64>)
 8004768:	6323      	str	r3, [r4, #48]	; 0x30
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <std+0x68>)
 800476c:	6224      	str	r4, [r4, #32]
 800476e:	429c      	cmp	r4, r3
 8004770:	d006      	beq.n	8004780 <std+0x48>
 8004772:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004776:	4294      	cmp	r4, r2
 8004778:	d002      	beq.n	8004780 <std+0x48>
 800477a:	33d0      	adds	r3, #208	; 0xd0
 800477c:	429c      	cmp	r4, r3
 800477e:	d105      	bne.n	800478c <std+0x54>
 8004780:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004788:	f000 b972 	b.w	8004a70 <__retarget_lock_init_recursive>
 800478c:	bd10      	pop	{r4, pc}
 800478e:	bf00      	nop
 8004790:	080048f1 	.word	0x080048f1
 8004794:	08004913 	.word	0x08004913
 8004798:	0800494b 	.word	0x0800494b
 800479c:	0800496f 	.word	0x0800496f
 80047a0:	20000280 	.word	0x20000280

080047a4 <stdio_exit_handler>:
 80047a4:	4a02      	ldr	r2, [pc, #8]	; (80047b0 <stdio_exit_handler+0xc>)
 80047a6:	4903      	ldr	r1, [pc, #12]	; (80047b4 <stdio_exit_handler+0x10>)
 80047a8:	4803      	ldr	r0, [pc, #12]	; (80047b8 <stdio_exit_handler+0x14>)
 80047aa:	f000 b869 	b.w	8004880 <_fwalk_sglue>
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	080046c1 	.word	0x080046c1
 80047b8:	20000018 	.word	0x20000018

080047bc <cleanup_stdio>:
 80047bc:	6841      	ldr	r1, [r0, #4]
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <cleanup_stdio+0x34>)
 80047c0:	4299      	cmp	r1, r3
 80047c2:	b510      	push	{r4, lr}
 80047c4:	4604      	mov	r4, r0
 80047c6:	d001      	beq.n	80047cc <cleanup_stdio+0x10>
 80047c8:	f7ff ff7a 	bl	80046c0 <_fflush_r>
 80047cc:	68a1      	ldr	r1, [r4, #8]
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <cleanup_stdio+0x38>)
 80047d0:	4299      	cmp	r1, r3
 80047d2:	d002      	beq.n	80047da <cleanup_stdio+0x1e>
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7ff ff73 	bl	80046c0 <_fflush_r>
 80047da:	68e1      	ldr	r1, [r4, #12]
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <cleanup_stdio+0x3c>)
 80047de:	4299      	cmp	r1, r3
 80047e0:	d004      	beq.n	80047ec <cleanup_stdio+0x30>
 80047e2:	4620      	mov	r0, r4
 80047e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e8:	f7ff bf6a 	b.w	80046c0 <_fflush_r>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	bf00      	nop
 80047f0:	20000280 	.word	0x20000280
 80047f4:	200002e8 	.word	0x200002e8
 80047f8:	20000350 	.word	0x20000350

080047fc <global_stdio_init.part.0>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <global_stdio_init.part.0+0x30>)
 8004800:	4c0b      	ldr	r4, [pc, #44]	; (8004830 <global_stdio_init.part.0+0x34>)
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <global_stdio_init.part.0+0x38>)
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	4620      	mov	r0, r4
 8004808:	2200      	movs	r2, #0
 800480a:	2104      	movs	r1, #4
 800480c:	f7ff ff94 	bl	8004738 <std>
 8004810:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004814:	2201      	movs	r2, #1
 8004816:	2109      	movs	r1, #9
 8004818:	f7ff ff8e 	bl	8004738 <std>
 800481c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004820:	2202      	movs	r2, #2
 8004822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004826:	2112      	movs	r1, #18
 8004828:	f7ff bf86 	b.w	8004738 <std>
 800482c:	200003b8 	.word	0x200003b8
 8004830:	20000280 	.word	0x20000280
 8004834:	080047a5 	.word	0x080047a5

08004838 <__sfp_lock_acquire>:
 8004838:	4801      	ldr	r0, [pc, #4]	; (8004840 <__sfp_lock_acquire+0x8>)
 800483a:	f000 b91a 	b.w	8004a72 <__retarget_lock_acquire_recursive>
 800483e:	bf00      	nop
 8004840:	200003c1 	.word	0x200003c1

08004844 <__sfp_lock_release>:
 8004844:	4801      	ldr	r0, [pc, #4]	; (800484c <__sfp_lock_release+0x8>)
 8004846:	f000 b915 	b.w	8004a74 <__retarget_lock_release_recursive>
 800484a:	bf00      	nop
 800484c:	200003c1 	.word	0x200003c1

08004850 <__sinit>:
 8004850:	b510      	push	{r4, lr}
 8004852:	4604      	mov	r4, r0
 8004854:	f7ff fff0 	bl	8004838 <__sfp_lock_acquire>
 8004858:	6a23      	ldr	r3, [r4, #32]
 800485a:	b11b      	cbz	r3, 8004864 <__sinit+0x14>
 800485c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004860:	f7ff bff0 	b.w	8004844 <__sfp_lock_release>
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <__sinit+0x28>)
 8004866:	6223      	str	r3, [r4, #32]
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <__sinit+0x2c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f5      	bne.n	800485c <__sinit+0xc>
 8004870:	f7ff ffc4 	bl	80047fc <global_stdio_init.part.0>
 8004874:	e7f2      	b.n	800485c <__sinit+0xc>
 8004876:	bf00      	nop
 8004878:	080047bd 	.word	0x080047bd
 800487c:	200003b8 	.word	0x200003b8

08004880 <_fwalk_sglue>:
 8004880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004884:	4607      	mov	r7, r0
 8004886:	4688      	mov	r8, r1
 8004888:	4614      	mov	r4, r2
 800488a:	2600      	movs	r6, #0
 800488c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004890:	f1b9 0901 	subs.w	r9, r9, #1
 8004894:	d505      	bpl.n	80048a2 <_fwalk_sglue+0x22>
 8004896:	6824      	ldr	r4, [r4, #0]
 8004898:	2c00      	cmp	r4, #0
 800489a:	d1f7      	bne.n	800488c <_fwalk_sglue+0xc>
 800489c:	4630      	mov	r0, r6
 800489e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a2:	89ab      	ldrh	r3, [r5, #12]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d907      	bls.n	80048b8 <_fwalk_sglue+0x38>
 80048a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048ac:	3301      	adds	r3, #1
 80048ae:	d003      	beq.n	80048b8 <_fwalk_sglue+0x38>
 80048b0:	4629      	mov	r1, r5
 80048b2:	4638      	mov	r0, r7
 80048b4:	47c0      	blx	r8
 80048b6:	4306      	orrs	r6, r0
 80048b8:	3568      	adds	r5, #104	; 0x68
 80048ba:	e7e9      	b.n	8004890 <_fwalk_sglue+0x10>

080048bc <iprintf>:
 80048bc:	b40f      	push	{r0, r1, r2, r3}
 80048be:	b507      	push	{r0, r1, r2, lr}
 80048c0:	4906      	ldr	r1, [pc, #24]	; (80048dc <iprintf+0x20>)
 80048c2:	ab04      	add	r3, sp, #16
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ca:	6881      	ldr	r1, [r0, #8]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	f001 fbf3 	bl	80060b8 <_vfiprintf_r>
 80048d2:	b003      	add	sp, #12
 80048d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048d8:	b004      	add	sp, #16
 80048da:	4770      	bx	lr
 80048dc:	20000064 	.word	0x20000064

080048e0 <putchar>:
 80048e0:	4b02      	ldr	r3, [pc, #8]	; (80048ec <putchar+0xc>)
 80048e2:	4601      	mov	r1, r0
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	6882      	ldr	r2, [r0, #8]
 80048e8:	f001 bd00 	b.w	80062ec <_putc_r>
 80048ec:	20000064 	.word	0x20000064

080048f0 <__sread>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	460c      	mov	r4, r1
 80048f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f8:	f000 f86c 	bl	80049d4 <_read_r>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	bfab      	itete	ge
 8004900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004902:	89a3      	ldrhlt	r3, [r4, #12]
 8004904:	181b      	addge	r3, r3, r0
 8004906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800490a:	bfac      	ite	ge
 800490c:	6563      	strge	r3, [r4, #84]	; 0x54
 800490e:	81a3      	strhlt	r3, [r4, #12]
 8004910:	bd10      	pop	{r4, pc}

08004912 <__swrite>:
 8004912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004916:	461f      	mov	r7, r3
 8004918:	898b      	ldrh	r3, [r1, #12]
 800491a:	05db      	lsls	r3, r3, #23
 800491c:	4605      	mov	r5, r0
 800491e:	460c      	mov	r4, r1
 8004920:	4616      	mov	r6, r2
 8004922:	d505      	bpl.n	8004930 <__swrite+0x1e>
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	2302      	movs	r3, #2
 800492a:	2200      	movs	r2, #0
 800492c:	f000 f840 	bl	80049b0 <_lseek_r>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800493a:	81a3      	strh	r3, [r4, #12]
 800493c:	4632      	mov	r2, r6
 800493e:	463b      	mov	r3, r7
 8004940:	4628      	mov	r0, r5
 8004942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004946:	f000 b857 	b.w	80049f8 <_write_r>

0800494a <__sseek>:
 800494a:	b510      	push	{r4, lr}
 800494c:	460c      	mov	r4, r1
 800494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004952:	f000 f82d 	bl	80049b0 <_lseek_r>
 8004956:	1c43      	adds	r3, r0, #1
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	bf15      	itete	ne
 800495c:	6560      	strne	r0, [r4, #84]	; 0x54
 800495e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004966:	81a3      	strheq	r3, [r4, #12]
 8004968:	bf18      	it	ne
 800496a:	81a3      	strhne	r3, [r4, #12]
 800496c:	bd10      	pop	{r4, pc}

0800496e <__sclose>:
 800496e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004972:	f000 b80d 	b.w	8004990 <_close_r>

08004976 <memset>:
 8004976:	4402      	add	r2, r0
 8004978:	4603      	mov	r3, r0
 800497a:	4293      	cmp	r3, r2
 800497c:	d100      	bne.n	8004980 <memset+0xa>
 800497e:	4770      	bx	lr
 8004980:	f803 1b01 	strb.w	r1, [r3], #1
 8004984:	e7f9      	b.n	800497a <memset+0x4>
	...

08004988 <_localeconv_r>:
 8004988:	4800      	ldr	r0, [pc, #0]	; (800498c <_localeconv_r+0x4>)
 800498a:	4770      	bx	lr
 800498c:	20000158 	.word	0x20000158

08004990 <_close_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d06      	ldr	r5, [pc, #24]	; (80049ac <_close_r+0x1c>)
 8004994:	2300      	movs	r3, #0
 8004996:	4604      	mov	r4, r0
 8004998:	4608      	mov	r0, r1
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	f7fc fc69 	bl	8001272 <_close>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_close_r+0x1a>
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_close_r+0x1a>
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	200003bc 	.word	0x200003bc

080049b0 <_lseek_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d07      	ldr	r5, [pc, #28]	; (80049d0 <_lseek_r+0x20>)
 80049b4:	4604      	mov	r4, r0
 80049b6:	4608      	mov	r0, r1
 80049b8:	4611      	mov	r1, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	602a      	str	r2, [r5, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f7fc fc7e 	bl	80012c0 <_lseek>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_lseek_r+0x1e>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_lseek_r+0x1e>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	200003bc 	.word	0x200003bc

080049d4 <_read_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d07      	ldr	r5, [pc, #28]	; (80049f4 <_read_r+0x20>)
 80049d8:	4604      	mov	r4, r0
 80049da:	4608      	mov	r0, r1
 80049dc:	4611      	mov	r1, r2
 80049de:	2200      	movs	r2, #0
 80049e0:	602a      	str	r2, [r5, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7fc fc0c 	bl	8001200 <_read>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_read_r+0x1e>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_read_r+0x1e>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	200003bc 	.word	0x200003bc

080049f8 <_write_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d07      	ldr	r5, [pc, #28]	; (8004a18 <_write_r+0x20>)
 80049fc:	4604      	mov	r4, r0
 80049fe:	4608      	mov	r0, r1
 8004a00:	4611      	mov	r1, r2
 8004a02:	2200      	movs	r2, #0
 8004a04:	602a      	str	r2, [r5, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f7fc fc17 	bl	800123a <_write>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_write_r+0x1e>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_write_r+0x1e>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	200003bc 	.word	0x200003bc

08004a1c <__errno>:
 8004a1c:	4b01      	ldr	r3, [pc, #4]	; (8004a24 <__errno+0x8>)
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000064 	.word	0x20000064

08004a28 <__libc_init_array>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4d0d      	ldr	r5, [pc, #52]	; (8004a60 <__libc_init_array+0x38>)
 8004a2c:	4c0d      	ldr	r4, [pc, #52]	; (8004a64 <__libc_init_array+0x3c>)
 8004a2e:	1b64      	subs	r4, r4, r5
 8004a30:	10a4      	asrs	r4, r4, #2
 8004a32:	2600      	movs	r6, #0
 8004a34:	42a6      	cmp	r6, r4
 8004a36:	d109      	bne.n	8004a4c <__libc_init_array+0x24>
 8004a38:	4d0b      	ldr	r5, [pc, #44]	; (8004a68 <__libc_init_array+0x40>)
 8004a3a:	4c0c      	ldr	r4, [pc, #48]	; (8004a6c <__libc_init_array+0x44>)
 8004a3c:	f001 fe74 	bl	8006728 <_init>
 8004a40:	1b64      	subs	r4, r4, r5
 8004a42:	10a4      	asrs	r4, r4, #2
 8004a44:	2600      	movs	r6, #0
 8004a46:	42a6      	cmp	r6, r4
 8004a48:	d105      	bne.n	8004a56 <__libc_init_array+0x2e>
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a50:	4798      	blx	r3
 8004a52:	3601      	adds	r6, #1
 8004a54:	e7ee      	b.n	8004a34 <__libc_init_array+0xc>
 8004a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5a:	4798      	blx	r3
 8004a5c:	3601      	adds	r6, #1
 8004a5e:	e7f2      	b.n	8004a46 <__libc_init_array+0x1e>
 8004a60:	08006b14 	.word	0x08006b14
 8004a64:	08006b14 	.word	0x08006b14
 8004a68:	08006b14 	.word	0x08006b14
 8004a6c:	08006b18 	.word	0x08006b18

08004a70 <__retarget_lock_init_recursive>:
 8004a70:	4770      	bx	lr

08004a72 <__retarget_lock_acquire_recursive>:
 8004a72:	4770      	bx	lr

08004a74 <__retarget_lock_release_recursive>:
 8004a74:	4770      	bx	lr

08004a76 <quorem>:
 8004a76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	6903      	ldr	r3, [r0, #16]
 8004a7c:	690c      	ldr	r4, [r1, #16]
 8004a7e:	42a3      	cmp	r3, r4
 8004a80:	4607      	mov	r7, r0
 8004a82:	db7e      	blt.n	8004b82 <quorem+0x10c>
 8004a84:	3c01      	subs	r4, #1
 8004a86:	f101 0814 	add.w	r8, r1, #20
 8004a8a:	f100 0514 	add.w	r5, r0, #20
 8004a8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004aa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004aa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004aac:	d331      	bcc.n	8004b12 <quorem+0x9c>
 8004aae:	f04f 0e00 	mov.w	lr, #0
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	46ac      	mov	ip, r5
 8004ab6:	46f2      	mov	sl, lr
 8004ab8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004abc:	b293      	uxth	r3, r2
 8004abe:	fb06 e303 	mla	r3, r6, r3, lr
 8004ac2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ac6:	0c1a      	lsrs	r2, r3, #16
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	ebaa 0303 	sub.w	r3, sl, r3
 8004ace:	f8dc a000 	ldr.w	sl, [ip]
 8004ad2:	fa13 f38a 	uxtah	r3, r3, sl
 8004ad6:	fb06 220e 	mla	r2, r6, lr, r2
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	9b00      	ldr	r3, [sp, #0]
 8004ade:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004aec:	f8bd 3000 	ldrh.w	r3, [sp]
 8004af0:	4581      	cmp	r9, r0
 8004af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004af6:	f84c 3b04 	str.w	r3, [ip], #4
 8004afa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004afe:	d2db      	bcs.n	8004ab8 <quorem+0x42>
 8004b00:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b04:	b92b      	cbnz	r3, 8004b12 <quorem+0x9c>
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	429d      	cmp	r5, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	d32c      	bcc.n	8004b6a <quorem+0xf4>
 8004b10:	613c      	str	r4, [r7, #16]
 8004b12:	4638      	mov	r0, r7
 8004b14:	f001 f9a6 	bl	8005e64 <__mcmp>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	db22      	blt.n	8004b62 <quorem+0xec>
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	4629      	mov	r1, r5
 8004b20:	2000      	movs	r0, #0
 8004b22:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b26:	f8d1 c000 	ldr.w	ip, [r1]
 8004b2a:	b293      	uxth	r3, r2
 8004b2c:	1ac3      	subs	r3, r0, r3
 8004b2e:	0c12      	lsrs	r2, r2, #16
 8004b30:	fa13 f38c 	uxtah	r3, r3, ip
 8004b34:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004b38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b42:	45c1      	cmp	r9, r8
 8004b44:	f841 3b04 	str.w	r3, [r1], #4
 8004b48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b4c:	d2e9      	bcs.n	8004b22 <quorem+0xac>
 8004b4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b56:	b922      	cbnz	r2, 8004b62 <quorem+0xec>
 8004b58:	3b04      	subs	r3, #4
 8004b5a:	429d      	cmp	r5, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	d30a      	bcc.n	8004b76 <quorem+0x100>
 8004b60:	613c      	str	r4, [r7, #16]
 8004b62:	4630      	mov	r0, r6
 8004b64:	b003      	add	sp, #12
 8004b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	3b04      	subs	r3, #4
 8004b6e:	2a00      	cmp	r2, #0
 8004b70:	d1ce      	bne.n	8004b10 <quorem+0x9a>
 8004b72:	3c01      	subs	r4, #1
 8004b74:	e7c9      	b.n	8004b0a <quorem+0x94>
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	3b04      	subs	r3, #4
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	d1f0      	bne.n	8004b60 <quorem+0xea>
 8004b7e:	3c01      	subs	r4, #1
 8004b80:	e7eb      	b.n	8004b5a <quorem+0xe4>
 8004b82:	2000      	movs	r0, #0
 8004b84:	e7ee      	b.n	8004b64 <quorem+0xee>
	...

08004b88 <_dtoa_r>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	ed2d 8b04 	vpush	{d8-d9}
 8004b90:	69c5      	ldr	r5, [r0, #28]
 8004b92:	b093      	sub	sp, #76	; 0x4c
 8004b94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004b98:	ec57 6b10 	vmov	r6, r7, d0
 8004b9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ba0:	9107      	str	r1, [sp, #28]
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	920a      	str	r2, [sp, #40]	; 0x28
 8004ba6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ba8:	b975      	cbnz	r5, 8004bc8 <_dtoa_r+0x40>
 8004baa:	2010      	movs	r0, #16
 8004bac:	f000 fe2a 	bl	8005804 <malloc>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	61e0      	str	r0, [r4, #28]
 8004bb4:	b920      	cbnz	r0, 8004bc0 <_dtoa_r+0x38>
 8004bb6:	4bae      	ldr	r3, [pc, #696]	; (8004e70 <_dtoa_r+0x2e8>)
 8004bb8:	21ef      	movs	r1, #239	; 0xef
 8004bba:	48ae      	ldr	r0, [pc, #696]	; (8004e74 <_dtoa_r+0x2ec>)
 8004bbc:	f001 fc7e 	bl	80064bc <__assert_func>
 8004bc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004bc4:	6005      	str	r5, [r0, #0]
 8004bc6:	60c5      	str	r5, [r0, #12]
 8004bc8:	69e3      	ldr	r3, [r4, #28]
 8004bca:	6819      	ldr	r1, [r3, #0]
 8004bcc:	b151      	cbz	r1, 8004be4 <_dtoa_r+0x5c>
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	604a      	str	r2, [r1, #4]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4093      	lsls	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f000 ff07 	bl	80059ec <_Bfree>
 8004bde:	69e3      	ldr	r3, [r4, #28]
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	1e3b      	subs	r3, r7, #0
 8004be6:	bfbb      	ittet	lt
 8004be8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bec:	9303      	strlt	r3, [sp, #12]
 8004bee:	2300      	movge	r3, #0
 8004bf0:	2201      	movlt	r2, #1
 8004bf2:	bfac      	ite	ge
 8004bf4:	f8c8 3000 	strge.w	r3, [r8]
 8004bf8:	f8c8 2000 	strlt.w	r2, [r8]
 8004bfc:	4b9e      	ldr	r3, [pc, #632]	; (8004e78 <_dtoa_r+0x2f0>)
 8004bfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c02:	ea33 0308 	bics.w	r3, r3, r8
 8004c06:	d11b      	bne.n	8004c40 <_dtoa_r+0xb8>
 8004c08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004c14:	4333      	orrs	r3, r6
 8004c16:	f000 8593 	beq.w	8005740 <_dtoa_r+0xbb8>
 8004c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c1c:	b963      	cbnz	r3, 8004c38 <_dtoa_r+0xb0>
 8004c1e:	4b97      	ldr	r3, [pc, #604]	; (8004e7c <_dtoa_r+0x2f4>)
 8004c20:	e027      	b.n	8004c72 <_dtoa_r+0xea>
 8004c22:	4b97      	ldr	r3, [pc, #604]	; (8004e80 <_dtoa_r+0x2f8>)
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	3308      	adds	r3, #8
 8004c28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	9800      	ldr	r0, [sp, #0]
 8004c2e:	b013      	add	sp, #76	; 0x4c
 8004c30:	ecbd 8b04 	vpop	{d8-d9}
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	4b90      	ldr	r3, [pc, #576]	; (8004e7c <_dtoa_r+0x2f4>)
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	3303      	adds	r3, #3
 8004c3e:	e7f3      	b.n	8004c28 <_dtoa_r+0xa0>
 8004c40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	ec51 0b17 	vmov	r0, r1, d7
 8004c4a:	eeb0 8a47 	vmov.f32	s16, s14
 8004c4e:	eef0 8a67 	vmov.f32	s17, s15
 8004c52:	2300      	movs	r3, #0
 8004c54:	f7fb ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c58:	4681      	mov	r9, r0
 8004c5a:	b160      	cbz	r0, 8004c76 <_dtoa_r+0xee>
 8004c5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c5e:	2301      	movs	r3, #1
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8568 	beq.w	800573a <_dtoa_r+0xbb2>
 8004c6a:	4b86      	ldr	r3, [pc, #536]	; (8004e84 <_dtoa_r+0x2fc>)
 8004c6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	e7da      	b.n	8004c2c <_dtoa_r+0xa4>
 8004c76:	aa10      	add	r2, sp, #64	; 0x40
 8004c78:	a911      	add	r1, sp, #68	; 0x44
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8004c80:	eef0 0a68 	vmov.f32	s1, s17
 8004c84:	f001 f994 	bl	8005fb0 <__d2b>
 8004c88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c8c:	4682      	mov	sl, r0
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	d07f      	beq.n	8004d92 <_dtoa_r+0x20a>
 8004c92:	ee18 3a90 	vmov	r3, s17
 8004c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c9e:	ec51 0b18 	vmov	r0, r1, d8
 8004ca2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004ca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004caa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004cae:	4619      	mov	r1, r3
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4b75      	ldr	r3, [pc, #468]	; (8004e88 <_dtoa_r+0x300>)
 8004cb4:	f7fb fae8 	bl	8000288 <__aeabi_dsub>
 8004cb8:	a367      	add	r3, pc, #412	; (adr r3, 8004e58 <_dtoa_r+0x2d0>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fc9b 	bl	80005f8 <__aeabi_dmul>
 8004cc2:	a367      	add	r3, pc, #412	; (adr r3, 8004e60 <_dtoa_r+0x2d8>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f7fb fae0 	bl	800028c <__adddf3>
 8004ccc:	4606      	mov	r6, r0
 8004cce:	4628      	mov	r0, r5
 8004cd0:	460f      	mov	r7, r1
 8004cd2:	f7fb fc27 	bl	8000524 <__aeabi_i2d>
 8004cd6:	a364      	add	r3, pc, #400	; (adr r3, 8004e68 <_dtoa_r+0x2e0>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fc8c 	bl	80005f8 <__aeabi_dmul>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	f7fb fad0 	bl	800028c <__adddf3>
 8004cec:	4606      	mov	r6, r0
 8004cee:	460f      	mov	r7, r1
 8004cf0:	f7fb ff32 	bl	8000b58 <__aeabi_d2iz>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4683      	mov	fp, r0
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	f7fb feed 	bl	8000adc <__aeabi_dcmplt>
 8004d02:	b148      	cbz	r0, 8004d18 <_dtoa_r+0x190>
 8004d04:	4658      	mov	r0, fp
 8004d06:	f7fb fc0d 	bl	8000524 <__aeabi_i2d>
 8004d0a:	4632      	mov	r2, r6
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	f7fb fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d12:	b908      	cbnz	r0, 8004d18 <_dtoa_r+0x190>
 8004d14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d18:	f1bb 0f16 	cmp.w	fp, #22
 8004d1c:	d857      	bhi.n	8004dce <_dtoa_r+0x246>
 8004d1e:	4b5b      	ldr	r3, [pc, #364]	; (8004e8c <_dtoa_r+0x304>)
 8004d20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	ec51 0b18 	vmov	r0, r1, d8
 8004d2c:	f7fb fed6 	bl	8000adc <__aeabi_dcmplt>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d04e      	beq.n	8004dd2 <_dtoa_r+0x24a>
 8004d34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d38:	2300      	movs	r3, #0
 8004d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8004d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d3e:	1b5b      	subs	r3, r3, r5
 8004d40:	1e5a      	subs	r2, r3, #1
 8004d42:	bf45      	ittet	mi
 8004d44:	f1c3 0301 	rsbmi	r3, r3, #1
 8004d48:	9305      	strmi	r3, [sp, #20]
 8004d4a:	2300      	movpl	r3, #0
 8004d4c:	2300      	movmi	r3, #0
 8004d4e:	9206      	str	r2, [sp, #24]
 8004d50:	bf54      	ite	pl
 8004d52:	9305      	strpl	r3, [sp, #20]
 8004d54:	9306      	strmi	r3, [sp, #24]
 8004d56:	f1bb 0f00 	cmp.w	fp, #0
 8004d5a:	db3c      	blt.n	8004dd6 <_dtoa_r+0x24e>
 8004d5c:	9b06      	ldr	r3, [sp, #24]
 8004d5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004d62:	445b      	add	r3, fp
 8004d64:	9306      	str	r3, [sp, #24]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9308      	str	r3, [sp, #32]
 8004d6a:	9b07      	ldr	r3, [sp, #28]
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d868      	bhi.n	8004e42 <_dtoa_r+0x2ba>
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	bfc4      	itt	gt
 8004d74:	3b04      	subgt	r3, #4
 8004d76:	9307      	strgt	r3, [sp, #28]
 8004d78:	9b07      	ldr	r3, [sp, #28]
 8004d7a:	f1a3 0302 	sub.w	r3, r3, #2
 8004d7e:	bfcc      	ite	gt
 8004d80:	2500      	movgt	r5, #0
 8004d82:	2501      	movle	r5, #1
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	f200 8085 	bhi.w	8004e94 <_dtoa_r+0x30c>
 8004d8a:	e8df f003 	tbb	[pc, r3]
 8004d8e:	3b2e      	.short	0x3b2e
 8004d90:	5839      	.short	0x5839
 8004d92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004d96:	441d      	add	r5, r3
 8004d98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	bfc1      	itttt	gt
 8004da0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004da4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004da8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004dac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004db0:	bfd6      	itet	le
 8004db2:	f1c3 0320 	rsble	r3, r3, #32
 8004db6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004dba:	fa06 f003 	lslle.w	r0, r6, r3
 8004dbe:	f7fb fba1 	bl	8000504 <__aeabi_ui2d>
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004dc8:	3d01      	subs	r5, #1
 8004dca:	920e      	str	r2, [sp, #56]	; 0x38
 8004dcc:	e76f      	b.n	8004cae <_dtoa_r+0x126>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e7b3      	b.n	8004d3a <_dtoa_r+0x1b2>
 8004dd2:	900c      	str	r0, [sp, #48]	; 0x30
 8004dd4:	e7b2      	b.n	8004d3c <_dtoa_r+0x1b4>
 8004dd6:	9b05      	ldr	r3, [sp, #20]
 8004dd8:	eba3 030b 	sub.w	r3, r3, fp
 8004ddc:	9305      	str	r3, [sp, #20]
 8004dde:	f1cb 0300 	rsb	r3, fp, #0
 8004de2:	9308      	str	r3, [sp, #32]
 8004de4:	2300      	movs	r3, #0
 8004de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de8:	e7bf      	b.n	8004d6a <_dtoa_r+0x1e2>
 8004dea:	2300      	movs	r3, #0
 8004dec:	9309      	str	r3, [sp, #36]	; 0x24
 8004dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	dc52      	bgt.n	8004e9a <_dtoa_r+0x312>
 8004df4:	2301      	movs	r3, #1
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	9304      	str	r3, [sp, #16]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	920a      	str	r2, [sp, #40]	; 0x28
 8004dfe:	e00b      	b.n	8004e18 <_dtoa_r+0x290>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e7f3      	b.n	8004dec <_dtoa_r+0x264>
 8004e04:	2300      	movs	r3, #0
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
 8004e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0a:	445b      	add	r3, fp
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	bfb8      	it	lt
 8004e16:	2301      	movlt	r3, #1
 8004e18:	69e0      	ldr	r0, [r4, #28]
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	f102 0614 	add.w	r6, r2, #20
 8004e22:	429e      	cmp	r6, r3
 8004e24:	d93d      	bls.n	8004ea2 <_dtoa_r+0x31a>
 8004e26:	6041      	str	r1, [r0, #4]
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 fd9f 	bl	800596c <_Balloc>
 8004e2e:	9000      	str	r0, [sp, #0]
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d139      	bne.n	8004ea8 <_dtoa_r+0x320>
 8004e34:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <_dtoa_r+0x308>)
 8004e36:	4602      	mov	r2, r0
 8004e38:	f240 11af 	movw	r1, #431	; 0x1af
 8004e3c:	e6bd      	b.n	8004bba <_dtoa_r+0x32>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e7e1      	b.n	8004e06 <_dtoa_r+0x27e>
 8004e42:	2501      	movs	r5, #1
 8004e44:	2300      	movs	r3, #0
 8004e46:	9307      	str	r3, [sp, #28]
 8004e48:	9509      	str	r5, [sp, #36]	; 0x24
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2312      	movs	r3, #18
 8004e56:	e7d1      	b.n	8004dfc <_dtoa_r+0x274>
 8004e58:	636f4361 	.word	0x636f4361
 8004e5c:	3fd287a7 	.word	0x3fd287a7
 8004e60:	8b60c8b3 	.word	0x8b60c8b3
 8004e64:	3fc68a28 	.word	0x3fc68a28
 8004e68:	509f79fb 	.word	0x509f79fb
 8004e6c:	3fd34413 	.word	0x3fd34413
 8004e70:	080067d9 	.word	0x080067d9
 8004e74:	080067f0 	.word	0x080067f0
 8004e78:	7ff00000 	.word	0x7ff00000
 8004e7c:	080067d5 	.word	0x080067d5
 8004e80:	080067cc 	.word	0x080067cc
 8004e84:	080067a9 	.word	0x080067a9
 8004e88:	3ff80000 	.word	0x3ff80000
 8004e8c:	080068e0 	.word	0x080068e0
 8004e90:	08006848 	.word	0x08006848
 8004e94:	2301      	movs	r3, #1
 8004e96:	9309      	str	r3, [sp, #36]	; 0x24
 8004e98:	e7d7      	b.n	8004e4a <_dtoa_r+0x2c2>
 8004e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	e7ba      	b.n	8004e18 <_dtoa_r+0x290>
 8004ea2:	3101      	adds	r1, #1
 8004ea4:	0052      	lsls	r2, r2, #1
 8004ea6:	e7ba      	b.n	8004e1e <_dtoa_r+0x296>
 8004ea8:	69e3      	ldr	r3, [r4, #28]
 8004eaa:	9a00      	ldr	r2, [sp, #0]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	9b04      	ldr	r3, [sp, #16]
 8004eb0:	2b0e      	cmp	r3, #14
 8004eb2:	f200 80a8 	bhi.w	8005006 <_dtoa_r+0x47e>
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	f000 80a5 	beq.w	8005006 <_dtoa_r+0x47e>
 8004ebc:	f1bb 0f00 	cmp.w	fp, #0
 8004ec0:	dd38      	ble.n	8004f34 <_dtoa_r+0x3ac>
 8004ec2:	4bc0      	ldr	r3, [pc, #768]	; (80051c4 <_dtoa_r+0x63c>)
 8004ec4:	f00b 020f 	and.w	r2, fp, #15
 8004ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ecc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004ed0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004ed4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004ed8:	d019      	beq.n	8004f0e <_dtoa_r+0x386>
 8004eda:	4bbb      	ldr	r3, [pc, #748]	; (80051c8 <_dtoa_r+0x640>)
 8004edc:	ec51 0b18 	vmov	r0, r1, d8
 8004ee0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ee4:	f7fb fcb2 	bl	800084c <__aeabi_ddiv>
 8004ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eec:	f008 080f 	and.w	r8, r8, #15
 8004ef0:	2503      	movs	r5, #3
 8004ef2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80051c8 <_dtoa_r+0x640>
 8004ef6:	f1b8 0f00 	cmp.w	r8, #0
 8004efa:	d10a      	bne.n	8004f12 <_dtoa_r+0x38a>
 8004efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f00:	4632      	mov	r2, r6
 8004f02:	463b      	mov	r3, r7
 8004f04:	f7fb fca2 	bl	800084c <__aeabi_ddiv>
 8004f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f0c:	e02b      	b.n	8004f66 <_dtoa_r+0x3de>
 8004f0e:	2502      	movs	r5, #2
 8004f10:	e7ef      	b.n	8004ef2 <_dtoa_r+0x36a>
 8004f12:	f018 0f01 	tst.w	r8, #1
 8004f16:	d008      	beq.n	8004f2a <_dtoa_r+0x3a2>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	4639      	mov	r1, r7
 8004f1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004f20:	f7fb fb6a 	bl	80005f8 <__aeabi_dmul>
 8004f24:	3501      	adds	r5, #1
 8004f26:	4606      	mov	r6, r0
 8004f28:	460f      	mov	r7, r1
 8004f2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f2e:	f109 0908 	add.w	r9, r9, #8
 8004f32:	e7e0      	b.n	8004ef6 <_dtoa_r+0x36e>
 8004f34:	f000 809f 	beq.w	8005076 <_dtoa_r+0x4ee>
 8004f38:	f1cb 0600 	rsb	r6, fp, #0
 8004f3c:	4ba1      	ldr	r3, [pc, #644]	; (80051c4 <_dtoa_r+0x63c>)
 8004f3e:	4fa2      	ldr	r7, [pc, #648]	; (80051c8 <_dtoa_r+0x640>)
 8004f40:	f006 020f 	and.w	r2, r6, #15
 8004f44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	ec51 0b18 	vmov	r0, r1, d8
 8004f50:	f7fb fb52 	bl	80005f8 <__aeabi_dmul>
 8004f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f58:	1136      	asrs	r6, r6, #4
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2502      	movs	r5, #2
 8004f5e:	2e00      	cmp	r6, #0
 8004f60:	d17e      	bne.n	8005060 <_dtoa_r+0x4d8>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1d0      	bne.n	8004f08 <_dtoa_r+0x380>
 8004f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8084 	beq.w	800507a <_dtoa_r+0x4f2>
 8004f72:	4b96      	ldr	r3, [pc, #600]	; (80051cc <_dtoa_r+0x644>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	4640      	mov	r0, r8
 8004f78:	4649      	mov	r1, r9
 8004f7a:	f7fb fdaf 	bl	8000adc <__aeabi_dcmplt>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d07b      	beq.n	800507a <_dtoa_r+0x4f2>
 8004f82:	9b04      	ldr	r3, [sp, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d078      	beq.n	800507a <_dtoa_r+0x4f2>
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	dd39      	ble.n	8005002 <_dtoa_r+0x47a>
 8004f8e:	4b90      	ldr	r3, [pc, #576]	; (80051d0 <_dtoa_r+0x648>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f7fb fb2f 	bl	80005f8 <__aeabi_dmul>
 8004f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9e:	9e01      	ldr	r6, [sp, #4]
 8004fa0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004faa:	4628      	mov	r0, r5
 8004fac:	f7fb faba 	bl	8000524 <__aeabi_i2d>
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	f7fb fb20 	bl	80005f8 <__aeabi_dmul>
 8004fb8:	4b86      	ldr	r3, [pc, #536]	; (80051d4 <_dtoa_r+0x64c>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f7fb f966 	bl	800028c <__adddf3>
 8004fc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc8:	9303      	str	r3, [sp, #12]
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	d158      	bne.n	8005080 <_dtoa_r+0x4f8>
 8004fce:	4b82      	ldr	r3, [pc, #520]	; (80051d8 <_dtoa_r+0x650>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	f7fb f957 	bl	8000288 <__aeabi_dsub>
 8004fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fde:	4680      	mov	r8, r0
 8004fe0:	4689      	mov	r9, r1
 8004fe2:	f7fb fd99 	bl	8000b18 <__aeabi_dcmpgt>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f040 8296 	bne.w	8005518 <_dtoa_r+0x990>
 8004fec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	f7fb fd70 	bl	8000adc <__aeabi_dcmplt>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	f040 8289 	bne.w	8005514 <_dtoa_r+0x98c>
 8005002:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005008:	2b00      	cmp	r3, #0
 800500a:	f2c0 814e 	blt.w	80052aa <_dtoa_r+0x722>
 800500e:	f1bb 0f0e 	cmp.w	fp, #14
 8005012:	f300 814a 	bgt.w	80052aa <_dtoa_r+0x722>
 8005016:	4b6b      	ldr	r3, [pc, #428]	; (80051c4 <_dtoa_r+0x63c>)
 8005018:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800501c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	f280 80dc 	bge.w	80051e0 <_dtoa_r+0x658>
 8005028:	9b04      	ldr	r3, [sp, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f300 80d8 	bgt.w	80051e0 <_dtoa_r+0x658>
 8005030:	f040 826f 	bne.w	8005512 <_dtoa_r+0x98a>
 8005034:	4b68      	ldr	r3, [pc, #416]	; (80051d8 <_dtoa_r+0x650>)
 8005036:	2200      	movs	r2, #0
 8005038:	4640      	mov	r0, r8
 800503a:	4649      	mov	r1, r9
 800503c:	f7fb fadc 	bl	80005f8 <__aeabi_dmul>
 8005040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005044:	f7fb fd5e 	bl	8000b04 <__aeabi_dcmpge>
 8005048:	9e04      	ldr	r6, [sp, #16]
 800504a:	4637      	mov	r7, r6
 800504c:	2800      	cmp	r0, #0
 800504e:	f040 8245 	bne.w	80054dc <_dtoa_r+0x954>
 8005052:	9d00      	ldr	r5, [sp, #0]
 8005054:	2331      	movs	r3, #49	; 0x31
 8005056:	f805 3b01 	strb.w	r3, [r5], #1
 800505a:	f10b 0b01 	add.w	fp, fp, #1
 800505e:	e241      	b.n	80054e4 <_dtoa_r+0x95c>
 8005060:	07f2      	lsls	r2, r6, #31
 8005062:	d505      	bpl.n	8005070 <_dtoa_r+0x4e8>
 8005064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005068:	f7fb fac6 	bl	80005f8 <__aeabi_dmul>
 800506c:	3501      	adds	r5, #1
 800506e:	2301      	movs	r3, #1
 8005070:	1076      	asrs	r6, r6, #1
 8005072:	3708      	adds	r7, #8
 8005074:	e773      	b.n	8004f5e <_dtoa_r+0x3d6>
 8005076:	2502      	movs	r5, #2
 8005078:	e775      	b.n	8004f66 <_dtoa_r+0x3de>
 800507a:	9e04      	ldr	r6, [sp, #16]
 800507c:	465f      	mov	r7, fp
 800507e:	e792      	b.n	8004fa6 <_dtoa_r+0x41e>
 8005080:	9900      	ldr	r1, [sp, #0]
 8005082:	4b50      	ldr	r3, [pc, #320]	; (80051c4 <_dtoa_r+0x63c>)
 8005084:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005088:	4431      	add	r1, r6
 800508a:	9102      	str	r1, [sp, #8]
 800508c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800508e:	eeb0 9a47 	vmov.f32	s18, s14
 8005092:	eef0 9a67 	vmov.f32	s19, s15
 8005096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800509a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800509e:	2900      	cmp	r1, #0
 80050a0:	d044      	beq.n	800512c <_dtoa_r+0x5a4>
 80050a2:	494e      	ldr	r1, [pc, #312]	; (80051dc <_dtoa_r+0x654>)
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7fb fbd1 	bl	800084c <__aeabi_ddiv>
 80050aa:	ec53 2b19 	vmov	r2, r3, d9
 80050ae:	f7fb f8eb 	bl	8000288 <__aeabi_dsub>
 80050b2:	9d00      	ldr	r5, [sp, #0]
 80050b4:	ec41 0b19 	vmov	d9, r0, r1
 80050b8:	4649      	mov	r1, r9
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7fb fd4c 	bl	8000b58 <__aeabi_d2iz>
 80050c0:	4606      	mov	r6, r0
 80050c2:	f7fb fa2f 	bl	8000524 <__aeabi_i2d>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4640      	mov	r0, r8
 80050cc:	4649      	mov	r1, r9
 80050ce:	f7fb f8db 	bl	8000288 <__aeabi_dsub>
 80050d2:	3630      	adds	r6, #48	; 0x30
 80050d4:	f805 6b01 	strb.w	r6, [r5], #1
 80050d8:	ec53 2b19 	vmov	r2, r3, d9
 80050dc:	4680      	mov	r8, r0
 80050de:	4689      	mov	r9, r1
 80050e0:	f7fb fcfc 	bl	8000adc <__aeabi_dcmplt>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d164      	bne.n	80051b2 <_dtoa_r+0x62a>
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	4937      	ldr	r1, [pc, #220]	; (80051cc <_dtoa_r+0x644>)
 80050ee:	2000      	movs	r0, #0
 80050f0:	f7fb f8ca 	bl	8000288 <__aeabi_dsub>
 80050f4:	ec53 2b19 	vmov	r2, r3, d9
 80050f8:	f7fb fcf0 	bl	8000adc <__aeabi_dcmplt>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f040 80b6 	bne.w	800526e <_dtoa_r+0x6e6>
 8005102:	9b02      	ldr	r3, [sp, #8]
 8005104:	429d      	cmp	r5, r3
 8005106:	f43f af7c 	beq.w	8005002 <_dtoa_r+0x47a>
 800510a:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <_dtoa_r+0x648>)
 800510c:	ec51 0b19 	vmov	r0, r1, d9
 8005110:	2200      	movs	r2, #0
 8005112:	f7fb fa71 	bl	80005f8 <__aeabi_dmul>
 8005116:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <_dtoa_r+0x648>)
 8005118:	ec41 0b19 	vmov	d9, r0, r1
 800511c:	2200      	movs	r2, #0
 800511e:	4640      	mov	r0, r8
 8005120:	4649      	mov	r1, r9
 8005122:	f7fb fa69 	bl	80005f8 <__aeabi_dmul>
 8005126:	4680      	mov	r8, r0
 8005128:	4689      	mov	r9, r1
 800512a:	e7c5      	b.n	80050b8 <_dtoa_r+0x530>
 800512c:	ec51 0b17 	vmov	r0, r1, d7
 8005130:	f7fb fa62 	bl	80005f8 <__aeabi_dmul>
 8005134:	9b02      	ldr	r3, [sp, #8]
 8005136:	9d00      	ldr	r5, [sp, #0]
 8005138:	930f      	str	r3, [sp, #60]	; 0x3c
 800513a:	ec41 0b19 	vmov	d9, r0, r1
 800513e:	4649      	mov	r1, r9
 8005140:	4640      	mov	r0, r8
 8005142:	f7fb fd09 	bl	8000b58 <__aeabi_d2iz>
 8005146:	4606      	mov	r6, r0
 8005148:	f7fb f9ec 	bl	8000524 <__aeabi_i2d>
 800514c:	3630      	adds	r6, #48	; 0x30
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4640      	mov	r0, r8
 8005154:	4649      	mov	r1, r9
 8005156:	f7fb f897 	bl	8000288 <__aeabi_dsub>
 800515a:	f805 6b01 	strb.w	r6, [r5], #1
 800515e:	9b02      	ldr	r3, [sp, #8]
 8005160:	429d      	cmp	r5, r3
 8005162:	4680      	mov	r8, r0
 8005164:	4689      	mov	r9, r1
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	d124      	bne.n	80051b6 <_dtoa_r+0x62e>
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <_dtoa_r+0x654>)
 800516e:	ec51 0b19 	vmov	r0, r1, d9
 8005172:	f7fb f88b 	bl	800028c <__adddf3>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4640      	mov	r0, r8
 800517c:	4649      	mov	r1, r9
 800517e:	f7fb fccb 	bl	8000b18 <__aeabi_dcmpgt>
 8005182:	2800      	cmp	r0, #0
 8005184:	d173      	bne.n	800526e <_dtoa_r+0x6e6>
 8005186:	ec53 2b19 	vmov	r2, r3, d9
 800518a:	4914      	ldr	r1, [pc, #80]	; (80051dc <_dtoa_r+0x654>)
 800518c:	2000      	movs	r0, #0
 800518e:	f7fb f87b 	bl	8000288 <__aeabi_dsub>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	f7fb fc9f 	bl	8000adc <__aeabi_dcmplt>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f43f af2f 	beq.w	8005002 <_dtoa_r+0x47a>
 80051a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80051a6:	1e6b      	subs	r3, r5, #1
 80051a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80051aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051ae:	2b30      	cmp	r3, #48	; 0x30
 80051b0:	d0f8      	beq.n	80051a4 <_dtoa_r+0x61c>
 80051b2:	46bb      	mov	fp, r7
 80051b4:	e04a      	b.n	800524c <_dtoa_r+0x6c4>
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <_dtoa_r+0x648>)
 80051b8:	f7fb fa1e 	bl	80005f8 <__aeabi_dmul>
 80051bc:	4680      	mov	r8, r0
 80051be:	4689      	mov	r9, r1
 80051c0:	e7bd      	b.n	800513e <_dtoa_r+0x5b6>
 80051c2:	bf00      	nop
 80051c4:	080068e0 	.word	0x080068e0
 80051c8:	080068b8 	.word	0x080068b8
 80051cc:	3ff00000 	.word	0x3ff00000
 80051d0:	40240000 	.word	0x40240000
 80051d4:	401c0000 	.word	0x401c0000
 80051d8:	40140000 	.word	0x40140000
 80051dc:	3fe00000 	.word	0x3fe00000
 80051e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051e4:	9d00      	ldr	r5, [sp, #0]
 80051e6:	4642      	mov	r2, r8
 80051e8:	464b      	mov	r3, r9
 80051ea:	4630      	mov	r0, r6
 80051ec:	4639      	mov	r1, r7
 80051ee:	f7fb fb2d 	bl	800084c <__aeabi_ddiv>
 80051f2:	f7fb fcb1 	bl	8000b58 <__aeabi_d2iz>
 80051f6:	9001      	str	r0, [sp, #4]
 80051f8:	f7fb f994 	bl	8000524 <__aeabi_i2d>
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	f7fb f9fa 	bl	80005f8 <__aeabi_dmul>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4630      	mov	r0, r6
 800520a:	4639      	mov	r1, r7
 800520c:	f7fb f83c 	bl	8000288 <__aeabi_dsub>
 8005210:	9e01      	ldr	r6, [sp, #4]
 8005212:	9f04      	ldr	r7, [sp, #16]
 8005214:	3630      	adds	r6, #48	; 0x30
 8005216:	f805 6b01 	strb.w	r6, [r5], #1
 800521a:	9e00      	ldr	r6, [sp, #0]
 800521c:	1bae      	subs	r6, r5, r6
 800521e:	42b7      	cmp	r7, r6
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	d134      	bne.n	8005290 <_dtoa_r+0x708>
 8005226:	f7fb f831 	bl	800028c <__adddf3>
 800522a:	4642      	mov	r2, r8
 800522c:	464b      	mov	r3, r9
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	f7fb fc71 	bl	8000b18 <__aeabi_dcmpgt>
 8005236:	b9c8      	cbnz	r0, 800526c <_dtoa_r+0x6e4>
 8005238:	4642      	mov	r2, r8
 800523a:	464b      	mov	r3, r9
 800523c:	4630      	mov	r0, r6
 800523e:	4639      	mov	r1, r7
 8005240:	f7fb fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8005244:	b110      	cbz	r0, 800524c <_dtoa_r+0x6c4>
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	07db      	lsls	r3, r3, #31
 800524a:	d40f      	bmi.n	800526c <_dtoa_r+0x6e4>
 800524c:	4651      	mov	r1, sl
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fbcc 	bl	80059ec <_Bfree>
 8005254:	2300      	movs	r3, #0
 8005256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005258:	702b      	strb	r3, [r5, #0]
 800525a:	f10b 0301 	add.w	r3, fp, #1
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005262:	2b00      	cmp	r3, #0
 8005264:	f43f ace2 	beq.w	8004c2c <_dtoa_r+0xa4>
 8005268:	601d      	str	r5, [r3, #0]
 800526a:	e4df      	b.n	8004c2c <_dtoa_r+0xa4>
 800526c:	465f      	mov	r7, fp
 800526e:	462b      	mov	r3, r5
 8005270:	461d      	mov	r5, r3
 8005272:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005276:	2a39      	cmp	r2, #57	; 0x39
 8005278:	d106      	bne.n	8005288 <_dtoa_r+0x700>
 800527a:	9a00      	ldr	r2, [sp, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d1f7      	bne.n	8005270 <_dtoa_r+0x6e8>
 8005280:	9900      	ldr	r1, [sp, #0]
 8005282:	2230      	movs	r2, #48	; 0x30
 8005284:	3701      	adds	r7, #1
 8005286:	700a      	strb	r2, [r1, #0]
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	3201      	adds	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e790      	b.n	80051b2 <_dtoa_r+0x62a>
 8005290:	4ba3      	ldr	r3, [pc, #652]	; (8005520 <_dtoa_r+0x998>)
 8005292:	2200      	movs	r2, #0
 8005294:	f7fb f9b0 	bl	80005f8 <__aeabi_dmul>
 8005298:	2200      	movs	r2, #0
 800529a:	2300      	movs	r3, #0
 800529c:	4606      	mov	r6, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	f7fb fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d09e      	beq.n	80051e6 <_dtoa_r+0x65e>
 80052a8:	e7d0      	b.n	800524c <_dtoa_r+0x6c4>
 80052aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ac:	2a00      	cmp	r2, #0
 80052ae:	f000 80ca 	beq.w	8005446 <_dtoa_r+0x8be>
 80052b2:	9a07      	ldr	r2, [sp, #28]
 80052b4:	2a01      	cmp	r2, #1
 80052b6:	f300 80ad 	bgt.w	8005414 <_dtoa_r+0x88c>
 80052ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052bc:	2a00      	cmp	r2, #0
 80052be:	f000 80a5 	beq.w	800540c <_dtoa_r+0x884>
 80052c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052c6:	9e08      	ldr	r6, [sp, #32]
 80052c8:	9d05      	ldr	r5, [sp, #20]
 80052ca:	9a05      	ldr	r2, [sp, #20]
 80052cc:	441a      	add	r2, r3
 80052ce:	9205      	str	r2, [sp, #20]
 80052d0:	9a06      	ldr	r2, [sp, #24]
 80052d2:	2101      	movs	r1, #1
 80052d4:	441a      	add	r2, r3
 80052d6:	4620      	mov	r0, r4
 80052d8:	9206      	str	r2, [sp, #24]
 80052da:	f000 fc3d 	bl	8005b58 <__i2b>
 80052de:	4607      	mov	r7, r0
 80052e0:	b165      	cbz	r5, 80052fc <_dtoa_r+0x774>
 80052e2:	9b06      	ldr	r3, [sp, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dd09      	ble.n	80052fc <_dtoa_r+0x774>
 80052e8:	42ab      	cmp	r3, r5
 80052ea:	9a05      	ldr	r2, [sp, #20]
 80052ec:	bfa8      	it	ge
 80052ee:	462b      	movge	r3, r5
 80052f0:	1ad2      	subs	r2, r2, r3
 80052f2:	9205      	str	r2, [sp, #20]
 80052f4:	9a06      	ldr	r2, [sp, #24]
 80052f6:	1aed      	subs	r5, r5, r3
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	9306      	str	r3, [sp, #24]
 80052fc:	9b08      	ldr	r3, [sp, #32]
 80052fe:	b1f3      	cbz	r3, 800533e <_dtoa_r+0x7b6>
 8005300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80a3 	beq.w	800544e <_dtoa_r+0x8c6>
 8005308:	2e00      	cmp	r6, #0
 800530a:	dd10      	ble.n	800532e <_dtoa_r+0x7a6>
 800530c:	4639      	mov	r1, r7
 800530e:	4632      	mov	r2, r6
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fce1 	bl	8005cd8 <__pow5mult>
 8005316:	4652      	mov	r2, sl
 8005318:	4601      	mov	r1, r0
 800531a:	4607      	mov	r7, r0
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fc31 	bl	8005b84 <__multiply>
 8005322:	4651      	mov	r1, sl
 8005324:	4680      	mov	r8, r0
 8005326:	4620      	mov	r0, r4
 8005328:	f000 fb60 	bl	80059ec <_Bfree>
 800532c:	46c2      	mov	sl, r8
 800532e:	9b08      	ldr	r3, [sp, #32]
 8005330:	1b9a      	subs	r2, r3, r6
 8005332:	d004      	beq.n	800533e <_dtoa_r+0x7b6>
 8005334:	4651      	mov	r1, sl
 8005336:	4620      	mov	r0, r4
 8005338:	f000 fcce 	bl	8005cd8 <__pow5mult>
 800533c:	4682      	mov	sl, r0
 800533e:	2101      	movs	r1, #1
 8005340:	4620      	mov	r0, r4
 8005342:	f000 fc09 	bl	8005b58 <__i2b>
 8005346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	4606      	mov	r6, r0
 800534c:	f340 8081 	ble.w	8005452 <_dtoa_r+0x8ca>
 8005350:	461a      	mov	r2, r3
 8005352:	4601      	mov	r1, r0
 8005354:	4620      	mov	r0, r4
 8005356:	f000 fcbf 	bl	8005cd8 <__pow5mult>
 800535a:	9b07      	ldr	r3, [sp, #28]
 800535c:	2b01      	cmp	r3, #1
 800535e:	4606      	mov	r6, r0
 8005360:	dd7a      	ble.n	8005458 <_dtoa_r+0x8d0>
 8005362:	f04f 0800 	mov.w	r8, #0
 8005366:	6933      	ldr	r3, [r6, #16]
 8005368:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800536c:	6918      	ldr	r0, [r3, #16]
 800536e:	f000 fba5 	bl	8005abc <__hi0bits>
 8005372:	f1c0 0020 	rsb	r0, r0, #32
 8005376:	9b06      	ldr	r3, [sp, #24]
 8005378:	4418      	add	r0, r3
 800537a:	f010 001f 	ands.w	r0, r0, #31
 800537e:	f000 8094 	beq.w	80054aa <_dtoa_r+0x922>
 8005382:	f1c0 0320 	rsb	r3, r0, #32
 8005386:	2b04      	cmp	r3, #4
 8005388:	f340 8085 	ble.w	8005496 <_dtoa_r+0x90e>
 800538c:	9b05      	ldr	r3, [sp, #20]
 800538e:	f1c0 001c 	rsb	r0, r0, #28
 8005392:	4403      	add	r3, r0
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	9b06      	ldr	r3, [sp, #24]
 8005398:	4403      	add	r3, r0
 800539a:	4405      	add	r5, r0
 800539c:	9306      	str	r3, [sp, #24]
 800539e:	9b05      	ldr	r3, [sp, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	dd05      	ble.n	80053b0 <_dtoa_r+0x828>
 80053a4:	4651      	mov	r1, sl
 80053a6:	461a      	mov	r2, r3
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fcef 	bl	8005d8c <__lshift>
 80053ae:	4682      	mov	sl, r0
 80053b0:	9b06      	ldr	r3, [sp, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dd05      	ble.n	80053c2 <_dtoa_r+0x83a>
 80053b6:	4631      	mov	r1, r6
 80053b8:	461a      	mov	r2, r3
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 fce6 	bl	8005d8c <__lshift>
 80053c0:	4606      	mov	r6, r0
 80053c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d072      	beq.n	80054ae <_dtoa_r+0x926>
 80053c8:	4631      	mov	r1, r6
 80053ca:	4650      	mov	r0, sl
 80053cc:	f000 fd4a 	bl	8005e64 <__mcmp>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	da6c      	bge.n	80054ae <_dtoa_r+0x926>
 80053d4:	2300      	movs	r3, #0
 80053d6:	4651      	mov	r1, sl
 80053d8:	220a      	movs	r2, #10
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 fb28 	bl	8005a30 <__multadd>
 80053e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053e6:	4682      	mov	sl, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 81b0 	beq.w	800574e <_dtoa_r+0xbc6>
 80053ee:	2300      	movs	r3, #0
 80053f0:	4639      	mov	r1, r7
 80053f2:	220a      	movs	r2, #10
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fb1b 	bl	8005a30 <__multadd>
 80053fa:	9b01      	ldr	r3, [sp, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	4607      	mov	r7, r0
 8005400:	f300 8096 	bgt.w	8005530 <_dtoa_r+0x9a8>
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	2b02      	cmp	r3, #2
 8005408:	dc59      	bgt.n	80054be <_dtoa_r+0x936>
 800540a:	e091      	b.n	8005530 <_dtoa_r+0x9a8>
 800540c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800540e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005412:	e758      	b.n	80052c6 <_dtoa_r+0x73e>
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	1e5e      	subs	r6, r3, #1
 8005418:	9b08      	ldr	r3, [sp, #32]
 800541a:	42b3      	cmp	r3, r6
 800541c:	bfbf      	itttt	lt
 800541e:	9b08      	ldrlt	r3, [sp, #32]
 8005420:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005422:	9608      	strlt	r6, [sp, #32]
 8005424:	1af3      	sublt	r3, r6, r3
 8005426:	bfb4      	ite	lt
 8005428:	18d2      	addlt	r2, r2, r3
 800542a:	1b9e      	subge	r6, r3, r6
 800542c:	9b04      	ldr	r3, [sp, #16]
 800542e:	bfbc      	itt	lt
 8005430:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005432:	2600      	movlt	r6, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	bfb7      	itett	lt
 8005438:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800543c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005440:	1a9d      	sublt	r5, r3, r2
 8005442:	2300      	movlt	r3, #0
 8005444:	e741      	b.n	80052ca <_dtoa_r+0x742>
 8005446:	9e08      	ldr	r6, [sp, #32]
 8005448:	9d05      	ldr	r5, [sp, #20]
 800544a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800544c:	e748      	b.n	80052e0 <_dtoa_r+0x758>
 800544e:	9a08      	ldr	r2, [sp, #32]
 8005450:	e770      	b.n	8005334 <_dtoa_r+0x7ac>
 8005452:	9b07      	ldr	r3, [sp, #28]
 8005454:	2b01      	cmp	r3, #1
 8005456:	dc19      	bgt.n	800548c <_dtoa_r+0x904>
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	b9bb      	cbnz	r3, 800548c <_dtoa_r+0x904>
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005462:	b99b      	cbnz	r3, 800548c <_dtoa_r+0x904>
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800546a:	0d1b      	lsrs	r3, r3, #20
 800546c:	051b      	lsls	r3, r3, #20
 800546e:	b183      	cbz	r3, 8005492 <_dtoa_r+0x90a>
 8005470:	9b05      	ldr	r3, [sp, #20]
 8005472:	3301      	adds	r3, #1
 8005474:	9305      	str	r3, [sp, #20]
 8005476:	9b06      	ldr	r3, [sp, #24]
 8005478:	3301      	adds	r3, #1
 800547a:	9306      	str	r3, [sp, #24]
 800547c:	f04f 0801 	mov.w	r8, #1
 8005480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005482:	2b00      	cmp	r3, #0
 8005484:	f47f af6f 	bne.w	8005366 <_dtoa_r+0x7de>
 8005488:	2001      	movs	r0, #1
 800548a:	e774      	b.n	8005376 <_dtoa_r+0x7ee>
 800548c:	f04f 0800 	mov.w	r8, #0
 8005490:	e7f6      	b.n	8005480 <_dtoa_r+0x8f8>
 8005492:	4698      	mov	r8, r3
 8005494:	e7f4      	b.n	8005480 <_dtoa_r+0x8f8>
 8005496:	d082      	beq.n	800539e <_dtoa_r+0x816>
 8005498:	9a05      	ldr	r2, [sp, #20]
 800549a:	331c      	adds	r3, #28
 800549c:	441a      	add	r2, r3
 800549e:	9205      	str	r2, [sp, #20]
 80054a0:	9a06      	ldr	r2, [sp, #24]
 80054a2:	441a      	add	r2, r3
 80054a4:	441d      	add	r5, r3
 80054a6:	9206      	str	r2, [sp, #24]
 80054a8:	e779      	b.n	800539e <_dtoa_r+0x816>
 80054aa:	4603      	mov	r3, r0
 80054ac:	e7f4      	b.n	8005498 <_dtoa_r+0x910>
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	dc37      	bgt.n	8005524 <_dtoa_r+0x99c>
 80054b4:	9b07      	ldr	r3, [sp, #28]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	dd34      	ble.n	8005524 <_dtoa_r+0x99c>
 80054ba:	9b04      	ldr	r3, [sp, #16]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	b963      	cbnz	r3, 80054dc <_dtoa_r+0x954>
 80054c2:	4631      	mov	r1, r6
 80054c4:	2205      	movs	r2, #5
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fab2 	bl	8005a30 <__multadd>
 80054cc:	4601      	mov	r1, r0
 80054ce:	4606      	mov	r6, r0
 80054d0:	4650      	mov	r0, sl
 80054d2:	f000 fcc7 	bl	8005e64 <__mcmp>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f73f adbb 	bgt.w	8005052 <_dtoa_r+0x4ca>
 80054dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054de:	9d00      	ldr	r5, [sp, #0]
 80054e0:	ea6f 0b03 	mvn.w	fp, r3
 80054e4:	f04f 0800 	mov.w	r8, #0
 80054e8:	4631      	mov	r1, r6
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 fa7e 	bl	80059ec <_Bfree>
 80054f0:	2f00      	cmp	r7, #0
 80054f2:	f43f aeab 	beq.w	800524c <_dtoa_r+0x6c4>
 80054f6:	f1b8 0f00 	cmp.w	r8, #0
 80054fa:	d005      	beq.n	8005508 <_dtoa_r+0x980>
 80054fc:	45b8      	cmp	r8, r7
 80054fe:	d003      	beq.n	8005508 <_dtoa_r+0x980>
 8005500:	4641      	mov	r1, r8
 8005502:	4620      	mov	r0, r4
 8005504:	f000 fa72 	bl	80059ec <_Bfree>
 8005508:	4639      	mov	r1, r7
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fa6e 	bl	80059ec <_Bfree>
 8005510:	e69c      	b.n	800524c <_dtoa_r+0x6c4>
 8005512:	2600      	movs	r6, #0
 8005514:	4637      	mov	r7, r6
 8005516:	e7e1      	b.n	80054dc <_dtoa_r+0x954>
 8005518:	46bb      	mov	fp, r7
 800551a:	4637      	mov	r7, r6
 800551c:	e599      	b.n	8005052 <_dtoa_r+0x4ca>
 800551e:	bf00      	nop
 8005520:	40240000 	.word	0x40240000
 8005524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80c8 	beq.w	80056bc <_dtoa_r+0xb34>
 800552c:	9b04      	ldr	r3, [sp, #16]
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	2d00      	cmp	r5, #0
 8005532:	dd05      	ble.n	8005540 <_dtoa_r+0x9b8>
 8005534:	4639      	mov	r1, r7
 8005536:	462a      	mov	r2, r5
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fc27 	bl	8005d8c <__lshift>
 800553e:	4607      	mov	r7, r0
 8005540:	f1b8 0f00 	cmp.w	r8, #0
 8005544:	d05b      	beq.n	80055fe <_dtoa_r+0xa76>
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4620      	mov	r0, r4
 800554a:	f000 fa0f 	bl	800596c <_Balloc>
 800554e:	4605      	mov	r5, r0
 8005550:	b928      	cbnz	r0, 800555e <_dtoa_r+0x9d6>
 8005552:	4b83      	ldr	r3, [pc, #524]	; (8005760 <_dtoa_r+0xbd8>)
 8005554:	4602      	mov	r2, r0
 8005556:	f240 21ef 	movw	r1, #751	; 0x2ef
 800555a:	f7ff bb2e 	b.w	8004bba <_dtoa_r+0x32>
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	3202      	adds	r2, #2
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	f107 010c 	add.w	r1, r7, #12
 8005568:	300c      	adds	r0, #12
 800556a:	f000 ff99 	bl	80064a0 <memcpy>
 800556e:	2201      	movs	r2, #1
 8005570:	4629      	mov	r1, r5
 8005572:	4620      	mov	r0, r4
 8005574:	f000 fc0a 	bl	8005d8c <__lshift>
 8005578:	9b00      	ldr	r3, [sp, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	9304      	str	r3, [sp, #16]
 800557e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005582:	4413      	add	r3, r2
 8005584:	9308      	str	r3, [sp, #32]
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	46b8      	mov	r8, r7
 800558e:	9306      	str	r3, [sp, #24]
 8005590:	4607      	mov	r7, r0
 8005592:	9b04      	ldr	r3, [sp, #16]
 8005594:	4631      	mov	r1, r6
 8005596:	3b01      	subs	r3, #1
 8005598:	4650      	mov	r0, sl
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	f7ff fa6b 	bl	8004a76 <quorem>
 80055a0:	4641      	mov	r1, r8
 80055a2:	9002      	str	r0, [sp, #8]
 80055a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055a8:	4650      	mov	r0, sl
 80055aa:	f000 fc5b 	bl	8005e64 <__mcmp>
 80055ae:	463a      	mov	r2, r7
 80055b0:	9005      	str	r0, [sp, #20]
 80055b2:	4631      	mov	r1, r6
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 fc71 	bl	8005e9c <__mdiff>
 80055ba:	68c2      	ldr	r2, [r0, #12]
 80055bc:	4605      	mov	r5, r0
 80055be:	bb02      	cbnz	r2, 8005602 <_dtoa_r+0xa7a>
 80055c0:	4601      	mov	r1, r0
 80055c2:	4650      	mov	r0, sl
 80055c4:	f000 fc4e 	bl	8005e64 <__mcmp>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4629      	mov	r1, r5
 80055cc:	4620      	mov	r0, r4
 80055ce:	9209      	str	r2, [sp, #36]	; 0x24
 80055d0:	f000 fa0c 	bl	80059ec <_Bfree>
 80055d4:	9b07      	ldr	r3, [sp, #28]
 80055d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055d8:	9d04      	ldr	r5, [sp, #16]
 80055da:	ea43 0102 	orr.w	r1, r3, r2
 80055de:	9b06      	ldr	r3, [sp, #24]
 80055e0:	4319      	orrs	r1, r3
 80055e2:	d110      	bne.n	8005606 <_dtoa_r+0xa7e>
 80055e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055e8:	d029      	beq.n	800563e <_dtoa_r+0xab6>
 80055ea:	9b05      	ldr	r3, [sp, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dd02      	ble.n	80055f6 <_dtoa_r+0xa6e>
 80055f0:	9b02      	ldr	r3, [sp, #8]
 80055f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	f883 9000 	strb.w	r9, [r3]
 80055fc:	e774      	b.n	80054e8 <_dtoa_r+0x960>
 80055fe:	4638      	mov	r0, r7
 8005600:	e7ba      	b.n	8005578 <_dtoa_r+0x9f0>
 8005602:	2201      	movs	r2, #1
 8005604:	e7e1      	b.n	80055ca <_dtoa_r+0xa42>
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	db04      	blt.n	8005616 <_dtoa_r+0xa8e>
 800560c:	9907      	ldr	r1, [sp, #28]
 800560e:	430b      	orrs	r3, r1
 8005610:	9906      	ldr	r1, [sp, #24]
 8005612:	430b      	orrs	r3, r1
 8005614:	d120      	bne.n	8005658 <_dtoa_r+0xad0>
 8005616:	2a00      	cmp	r2, #0
 8005618:	dded      	ble.n	80055f6 <_dtoa_r+0xa6e>
 800561a:	4651      	mov	r1, sl
 800561c:	2201      	movs	r2, #1
 800561e:	4620      	mov	r0, r4
 8005620:	f000 fbb4 	bl	8005d8c <__lshift>
 8005624:	4631      	mov	r1, r6
 8005626:	4682      	mov	sl, r0
 8005628:	f000 fc1c 	bl	8005e64 <__mcmp>
 800562c:	2800      	cmp	r0, #0
 800562e:	dc03      	bgt.n	8005638 <_dtoa_r+0xab0>
 8005630:	d1e1      	bne.n	80055f6 <_dtoa_r+0xa6e>
 8005632:	f019 0f01 	tst.w	r9, #1
 8005636:	d0de      	beq.n	80055f6 <_dtoa_r+0xa6e>
 8005638:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800563c:	d1d8      	bne.n	80055f0 <_dtoa_r+0xa68>
 800563e:	9a01      	ldr	r2, [sp, #4]
 8005640:	2339      	movs	r3, #57	; 0x39
 8005642:	7013      	strb	r3, [r2, #0]
 8005644:	462b      	mov	r3, r5
 8005646:	461d      	mov	r5, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800564e:	2a39      	cmp	r2, #57	; 0x39
 8005650:	d06c      	beq.n	800572c <_dtoa_r+0xba4>
 8005652:	3201      	adds	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e747      	b.n	80054e8 <_dtoa_r+0x960>
 8005658:	2a00      	cmp	r2, #0
 800565a:	dd07      	ble.n	800566c <_dtoa_r+0xae4>
 800565c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005660:	d0ed      	beq.n	800563e <_dtoa_r+0xab6>
 8005662:	9a01      	ldr	r2, [sp, #4]
 8005664:	f109 0301 	add.w	r3, r9, #1
 8005668:	7013      	strb	r3, [r2, #0]
 800566a:	e73d      	b.n	80054e8 <_dtoa_r+0x960>
 800566c:	9b04      	ldr	r3, [sp, #16]
 800566e:	9a08      	ldr	r2, [sp, #32]
 8005670:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005674:	4293      	cmp	r3, r2
 8005676:	d043      	beq.n	8005700 <_dtoa_r+0xb78>
 8005678:	4651      	mov	r1, sl
 800567a:	2300      	movs	r3, #0
 800567c:	220a      	movs	r2, #10
 800567e:	4620      	mov	r0, r4
 8005680:	f000 f9d6 	bl	8005a30 <__multadd>
 8005684:	45b8      	cmp	r8, r7
 8005686:	4682      	mov	sl, r0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	f04f 020a 	mov.w	r2, #10
 8005690:	4641      	mov	r1, r8
 8005692:	4620      	mov	r0, r4
 8005694:	d107      	bne.n	80056a6 <_dtoa_r+0xb1e>
 8005696:	f000 f9cb 	bl	8005a30 <__multadd>
 800569a:	4680      	mov	r8, r0
 800569c:	4607      	mov	r7, r0
 800569e:	9b04      	ldr	r3, [sp, #16]
 80056a0:	3301      	adds	r3, #1
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	e775      	b.n	8005592 <_dtoa_r+0xa0a>
 80056a6:	f000 f9c3 	bl	8005a30 <__multadd>
 80056aa:	4639      	mov	r1, r7
 80056ac:	4680      	mov	r8, r0
 80056ae:	2300      	movs	r3, #0
 80056b0:	220a      	movs	r2, #10
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f9bc 	bl	8005a30 <__multadd>
 80056b8:	4607      	mov	r7, r0
 80056ba:	e7f0      	b.n	800569e <_dtoa_r+0xb16>
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	9d00      	ldr	r5, [sp, #0]
 80056c2:	4631      	mov	r1, r6
 80056c4:	4650      	mov	r0, sl
 80056c6:	f7ff f9d6 	bl	8004a76 <quorem>
 80056ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056ce:	9b00      	ldr	r3, [sp, #0]
 80056d0:	f805 9b01 	strb.w	r9, [r5], #1
 80056d4:	1aea      	subs	r2, r5, r3
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	4293      	cmp	r3, r2
 80056da:	dd07      	ble.n	80056ec <_dtoa_r+0xb64>
 80056dc:	4651      	mov	r1, sl
 80056de:	2300      	movs	r3, #0
 80056e0:	220a      	movs	r2, #10
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f9a4 	bl	8005a30 <__multadd>
 80056e8:	4682      	mov	sl, r0
 80056ea:	e7ea      	b.n	80056c2 <_dtoa_r+0xb3a>
 80056ec:	9b01      	ldr	r3, [sp, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bfc8      	it	gt
 80056f2:	461d      	movgt	r5, r3
 80056f4:	9b00      	ldr	r3, [sp, #0]
 80056f6:	bfd8      	it	le
 80056f8:	2501      	movle	r5, #1
 80056fa:	441d      	add	r5, r3
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	4651      	mov	r1, sl
 8005702:	2201      	movs	r2, #1
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fb41 	bl	8005d8c <__lshift>
 800570a:	4631      	mov	r1, r6
 800570c:	4682      	mov	sl, r0
 800570e:	f000 fba9 	bl	8005e64 <__mcmp>
 8005712:	2800      	cmp	r0, #0
 8005714:	dc96      	bgt.n	8005644 <_dtoa_r+0xabc>
 8005716:	d102      	bne.n	800571e <_dtoa_r+0xb96>
 8005718:	f019 0f01 	tst.w	r9, #1
 800571c:	d192      	bne.n	8005644 <_dtoa_r+0xabc>
 800571e:	462b      	mov	r3, r5
 8005720:	461d      	mov	r5, r3
 8005722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005726:	2a30      	cmp	r2, #48	; 0x30
 8005728:	d0fa      	beq.n	8005720 <_dtoa_r+0xb98>
 800572a:	e6dd      	b.n	80054e8 <_dtoa_r+0x960>
 800572c:	9a00      	ldr	r2, [sp, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d189      	bne.n	8005646 <_dtoa_r+0xabe>
 8005732:	f10b 0b01 	add.w	fp, fp, #1
 8005736:	2331      	movs	r3, #49	; 0x31
 8005738:	e796      	b.n	8005668 <_dtoa_r+0xae0>
 800573a:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <_dtoa_r+0xbdc>)
 800573c:	f7ff ba99 	b.w	8004c72 <_dtoa_r+0xea>
 8005740:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005742:	2b00      	cmp	r3, #0
 8005744:	f47f aa6d 	bne.w	8004c22 <_dtoa_r+0x9a>
 8005748:	4b07      	ldr	r3, [pc, #28]	; (8005768 <_dtoa_r+0xbe0>)
 800574a:	f7ff ba92 	b.w	8004c72 <_dtoa_r+0xea>
 800574e:	9b01      	ldr	r3, [sp, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	dcb5      	bgt.n	80056c0 <_dtoa_r+0xb38>
 8005754:	9b07      	ldr	r3, [sp, #28]
 8005756:	2b02      	cmp	r3, #2
 8005758:	f73f aeb1 	bgt.w	80054be <_dtoa_r+0x936>
 800575c:	e7b0      	b.n	80056c0 <_dtoa_r+0xb38>
 800575e:	bf00      	nop
 8005760:	08006848 	.word	0x08006848
 8005764:	080067a8 	.word	0x080067a8
 8005768:	080067cc 	.word	0x080067cc

0800576c <_free_r>:
 800576c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800576e:	2900      	cmp	r1, #0
 8005770:	d044      	beq.n	80057fc <_free_r+0x90>
 8005772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005776:	9001      	str	r0, [sp, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f1a1 0404 	sub.w	r4, r1, #4
 800577e:	bfb8      	it	lt
 8005780:	18e4      	addlt	r4, r4, r3
 8005782:	f000 f8e7 	bl	8005954 <__malloc_lock>
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <_free_r+0x94>)
 8005788:	9801      	ldr	r0, [sp, #4]
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	b933      	cbnz	r3, 800579c <_free_r+0x30>
 800578e:	6063      	str	r3, [r4, #4]
 8005790:	6014      	str	r4, [r2, #0]
 8005792:	b003      	add	sp, #12
 8005794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005798:	f000 b8e2 	b.w	8005960 <__malloc_unlock>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d908      	bls.n	80057b2 <_free_r+0x46>
 80057a0:	6825      	ldr	r5, [r4, #0]
 80057a2:	1961      	adds	r1, r4, r5
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf01      	itttt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	1949      	addeq	r1, r1, r5
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	e7ed      	b.n	800578e <_free_r+0x22>
 80057b2:	461a      	mov	r2, r3
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b10b      	cbz	r3, 80057bc <_free_r+0x50>
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	d9fa      	bls.n	80057b2 <_free_r+0x46>
 80057bc:	6811      	ldr	r1, [r2, #0]
 80057be:	1855      	adds	r5, r2, r1
 80057c0:	42a5      	cmp	r5, r4
 80057c2:	d10b      	bne.n	80057dc <_free_r+0x70>
 80057c4:	6824      	ldr	r4, [r4, #0]
 80057c6:	4421      	add	r1, r4
 80057c8:	1854      	adds	r4, r2, r1
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	d1e0      	bne.n	8005792 <_free_r+0x26>
 80057d0:	681c      	ldr	r4, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	6053      	str	r3, [r2, #4]
 80057d6:	440c      	add	r4, r1
 80057d8:	6014      	str	r4, [r2, #0]
 80057da:	e7da      	b.n	8005792 <_free_r+0x26>
 80057dc:	d902      	bls.n	80057e4 <_free_r+0x78>
 80057de:	230c      	movs	r3, #12
 80057e0:	6003      	str	r3, [r0, #0]
 80057e2:	e7d6      	b.n	8005792 <_free_r+0x26>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf04      	itt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	bf04      	itt	eq
 80057f4:	1949      	addeq	r1, r1, r5
 80057f6:	6021      	streq	r1, [r4, #0]
 80057f8:	6054      	str	r4, [r2, #4]
 80057fa:	e7ca      	b.n	8005792 <_free_r+0x26>
 80057fc:	b003      	add	sp, #12
 80057fe:	bd30      	pop	{r4, r5, pc}
 8005800:	200003c4 	.word	0x200003c4

08005804 <malloc>:
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <malloc+0xc>)
 8005806:	4601      	mov	r1, r0
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	f000 b823 	b.w	8005854 <_malloc_r>
 800580e:	bf00      	nop
 8005810:	20000064 	.word	0x20000064

08005814 <sbrk_aligned>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	4e0e      	ldr	r6, [pc, #56]	; (8005850 <sbrk_aligned+0x3c>)
 8005818:	460c      	mov	r4, r1
 800581a:	6831      	ldr	r1, [r6, #0]
 800581c:	4605      	mov	r5, r0
 800581e:	b911      	cbnz	r1, 8005826 <sbrk_aligned+0x12>
 8005820:	f000 fe2e 	bl	8006480 <_sbrk_r>
 8005824:	6030      	str	r0, [r6, #0]
 8005826:	4621      	mov	r1, r4
 8005828:	4628      	mov	r0, r5
 800582a:	f000 fe29 	bl	8006480 <_sbrk_r>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d00a      	beq.n	8005848 <sbrk_aligned+0x34>
 8005832:	1cc4      	adds	r4, r0, #3
 8005834:	f024 0403 	bic.w	r4, r4, #3
 8005838:	42a0      	cmp	r0, r4
 800583a:	d007      	beq.n	800584c <sbrk_aligned+0x38>
 800583c:	1a21      	subs	r1, r4, r0
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fe1e 	bl	8006480 <_sbrk_r>
 8005844:	3001      	adds	r0, #1
 8005846:	d101      	bne.n	800584c <sbrk_aligned+0x38>
 8005848:	f04f 34ff 	mov.w	r4, #4294967295
 800584c:	4620      	mov	r0, r4
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	200003c8 	.word	0x200003c8

08005854 <_malloc_r>:
 8005854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005858:	1ccd      	adds	r5, r1, #3
 800585a:	f025 0503 	bic.w	r5, r5, #3
 800585e:	3508      	adds	r5, #8
 8005860:	2d0c      	cmp	r5, #12
 8005862:	bf38      	it	cc
 8005864:	250c      	movcc	r5, #12
 8005866:	2d00      	cmp	r5, #0
 8005868:	4607      	mov	r7, r0
 800586a:	db01      	blt.n	8005870 <_malloc_r+0x1c>
 800586c:	42a9      	cmp	r1, r5
 800586e:	d905      	bls.n	800587c <_malloc_r+0x28>
 8005870:	230c      	movs	r3, #12
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	2600      	movs	r6, #0
 8005876:	4630      	mov	r0, r6
 8005878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005950 <_malloc_r+0xfc>
 8005880:	f000 f868 	bl	8005954 <__malloc_lock>
 8005884:	f8d8 3000 	ldr.w	r3, [r8]
 8005888:	461c      	mov	r4, r3
 800588a:	bb5c      	cbnz	r4, 80058e4 <_malloc_r+0x90>
 800588c:	4629      	mov	r1, r5
 800588e:	4638      	mov	r0, r7
 8005890:	f7ff ffc0 	bl	8005814 <sbrk_aligned>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	4604      	mov	r4, r0
 8005898:	d155      	bne.n	8005946 <_malloc_r+0xf2>
 800589a:	f8d8 4000 	ldr.w	r4, [r8]
 800589e:	4626      	mov	r6, r4
 80058a0:	2e00      	cmp	r6, #0
 80058a2:	d145      	bne.n	8005930 <_malloc_r+0xdc>
 80058a4:	2c00      	cmp	r4, #0
 80058a6:	d048      	beq.n	800593a <_malloc_r+0xe6>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	4631      	mov	r1, r6
 80058ac:	4638      	mov	r0, r7
 80058ae:	eb04 0903 	add.w	r9, r4, r3
 80058b2:	f000 fde5 	bl	8006480 <_sbrk_r>
 80058b6:	4581      	cmp	r9, r0
 80058b8:	d13f      	bne.n	800593a <_malloc_r+0xe6>
 80058ba:	6821      	ldr	r1, [r4, #0]
 80058bc:	1a6d      	subs	r5, r5, r1
 80058be:	4629      	mov	r1, r5
 80058c0:	4638      	mov	r0, r7
 80058c2:	f7ff ffa7 	bl	8005814 <sbrk_aligned>
 80058c6:	3001      	adds	r0, #1
 80058c8:	d037      	beq.n	800593a <_malloc_r+0xe6>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	442b      	add	r3, r5
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	f8d8 3000 	ldr.w	r3, [r8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d038      	beq.n	800594a <_malloc_r+0xf6>
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	42a2      	cmp	r2, r4
 80058dc:	d12b      	bne.n	8005936 <_malloc_r+0xe2>
 80058de:	2200      	movs	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	e00f      	b.n	8005904 <_malloc_r+0xb0>
 80058e4:	6822      	ldr	r2, [r4, #0]
 80058e6:	1b52      	subs	r2, r2, r5
 80058e8:	d41f      	bmi.n	800592a <_malloc_r+0xd6>
 80058ea:	2a0b      	cmp	r2, #11
 80058ec:	d917      	bls.n	800591e <_malloc_r+0xca>
 80058ee:	1961      	adds	r1, r4, r5
 80058f0:	42a3      	cmp	r3, r4
 80058f2:	6025      	str	r5, [r4, #0]
 80058f4:	bf18      	it	ne
 80058f6:	6059      	strne	r1, [r3, #4]
 80058f8:	6863      	ldr	r3, [r4, #4]
 80058fa:	bf08      	it	eq
 80058fc:	f8c8 1000 	streq.w	r1, [r8]
 8005900:	5162      	str	r2, [r4, r5]
 8005902:	604b      	str	r3, [r1, #4]
 8005904:	4638      	mov	r0, r7
 8005906:	f104 060b 	add.w	r6, r4, #11
 800590a:	f000 f829 	bl	8005960 <__malloc_unlock>
 800590e:	f026 0607 	bic.w	r6, r6, #7
 8005912:	1d23      	adds	r3, r4, #4
 8005914:	1af2      	subs	r2, r6, r3
 8005916:	d0ae      	beq.n	8005876 <_malloc_r+0x22>
 8005918:	1b9b      	subs	r3, r3, r6
 800591a:	50a3      	str	r3, [r4, r2]
 800591c:	e7ab      	b.n	8005876 <_malloc_r+0x22>
 800591e:	42a3      	cmp	r3, r4
 8005920:	6862      	ldr	r2, [r4, #4]
 8005922:	d1dd      	bne.n	80058e0 <_malloc_r+0x8c>
 8005924:	f8c8 2000 	str.w	r2, [r8]
 8005928:	e7ec      	b.n	8005904 <_malloc_r+0xb0>
 800592a:	4623      	mov	r3, r4
 800592c:	6864      	ldr	r4, [r4, #4]
 800592e:	e7ac      	b.n	800588a <_malloc_r+0x36>
 8005930:	4634      	mov	r4, r6
 8005932:	6876      	ldr	r6, [r6, #4]
 8005934:	e7b4      	b.n	80058a0 <_malloc_r+0x4c>
 8005936:	4613      	mov	r3, r2
 8005938:	e7cc      	b.n	80058d4 <_malloc_r+0x80>
 800593a:	230c      	movs	r3, #12
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	4638      	mov	r0, r7
 8005940:	f000 f80e 	bl	8005960 <__malloc_unlock>
 8005944:	e797      	b.n	8005876 <_malloc_r+0x22>
 8005946:	6025      	str	r5, [r4, #0]
 8005948:	e7dc      	b.n	8005904 <_malloc_r+0xb0>
 800594a:	605b      	str	r3, [r3, #4]
 800594c:	deff      	udf	#255	; 0xff
 800594e:	bf00      	nop
 8005950:	200003c4 	.word	0x200003c4

08005954 <__malloc_lock>:
 8005954:	4801      	ldr	r0, [pc, #4]	; (800595c <__malloc_lock+0x8>)
 8005956:	f7ff b88c 	b.w	8004a72 <__retarget_lock_acquire_recursive>
 800595a:	bf00      	nop
 800595c:	200003c0 	.word	0x200003c0

08005960 <__malloc_unlock>:
 8005960:	4801      	ldr	r0, [pc, #4]	; (8005968 <__malloc_unlock+0x8>)
 8005962:	f7ff b887 	b.w	8004a74 <__retarget_lock_release_recursive>
 8005966:	bf00      	nop
 8005968:	200003c0 	.word	0x200003c0

0800596c <_Balloc>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	69c6      	ldr	r6, [r0, #28]
 8005970:	4604      	mov	r4, r0
 8005972:	460d      	mov	r5, r1
 8005974:	b976      	cbnz	r6, 8005994 <_Balloc+0x28>
 8005976:	2010      	movs	r0, #16
 8005978:	f7ff ff44 	bl	8005804 <malloc>
 800597c:	4602      	mov	r2, r0
 800597e:	61e0      	str	r0, [r4, #28]
 8005980:	b920      	cbnz	r0, 800598c <_Balloc+0x20>
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <_Balloc+0x78>)
 8005984:	4818      	ldr	r0, [pc, #96]	; (80059e8 <_Balloc+0x7c>)
 8005986:	216b      	movs	r1, #107	; 0x6b
 8005988:	f000 fd98 	bl	80064bc <__assert_func>
 800598c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005990:	6006      	str	r6, [r0, #0]
 8005992:	60c6      	str	r6, [r0, #12]
 8005994:	69e6      	ldr	r6, [r4, #28]
 8005996:	68f3      	ldr	r3, [r6, #12]
 8005998:	b183      	cbz	r3, 80059bc <_Balloc+0x50>
 800599a:	69e3      	ldr	r3, [r4, #28]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059a2:	b9b8      	cbnz	r0, 80059d4 <_Balloc+0x68>
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f605 	lsl.w	r6, r1, r5
 80059aa:	1d72      	adds	r2, r6, #5
 80059ac:	0092      	lsls	r2, r2, #2
 80059ae:	4620      	mov	r0, r4
 80059b0:	f000 fda2 	bl	80064f8 <_calloc_r>
 80059b4:	b160      	cbz	r0, 80059d0 <_Balloc+0x64>
 80059b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059ba:	e00e      	b.n	80059da <_Balloc+0x6e>
 80059bc:	2221      	movs	r2, #33	; 0x21
 80059be:	2104      	movs	r1, #4
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 fd99 	bl	80064f8 <_calloc_r>
 80059c6:	69e3      	ldr	r3, [r4, #28]
 80059c8:	60f0      	str	r0, [r6, #12]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e4      	bne.n	800599a <_Balloc+0x2e>
 80059d0:	2000      	movs	r0, #0
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	6802      	ldr	r2, [r0, #0]
 80059d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059da:	2300      	movs	r3, #0
 80059dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059e0:	e7f7      	b.n	80059d2 <_Balloc+0x66>
 80059e2:	bf00      	nop
 80059e4:	080067d9 	.word	0x080067d9
 80059e8:	08006859 	.word	0x08006859

080059ec <_Bfree>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	69c6      	ldr	r6, [r0, #28]
 80059f0:	4605      	mov	r5, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	b976      	cbnz	r6, 8005a14 <_Bfree+0x28>
 80059f6:	2010      	movs	r0, #16
 80059f8:	f7ff ff04 	bl	8005804 <malloc>
 80059fc:	4602      	mov	r2, r0
 80059fe:	61e8      	str	r0, [r5, #28]
 8005a00:	b920      	cbnz	r0, 8005a0c <_Bfree+0x20>
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <_Bfree+0x3c>)
 8005a04:	4809      	ldr	r0, [pc, #36]	; (8005a2c <_Bfree+0x40>)
 8005a06:	218f      	movs	r1, #143	; 0x8f
 8005a08:	f000 fd58 	bl	80064bc <__assert_func>
 8005a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a10:	6006      	str	r6, [r0, #0]
 8005a12:	60c6      	str	r6, [r0, #12]
 8005a14:	b13c      	cbz	r4, 8005a26 <_Bfree+0x3a>
 8005a16:	69eb      	ldr	r3, [r5, #28]
 8005a18:	6862      	ldr	r2, [r4, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a20:	6021      	str	r1, [r4, #0]
 8005a22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	080067d9 	.word	0x080067d9
 8005a2c:	08006859 	.word	0x08006859

08005a30 <__multadd>:
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	690d      	ldr	r5, [r1, #16]
 8005a36:	4607      	mov	r7, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	461e      	mov	r6, r3
 8005a3c:	f101 0c14 	add.w	ip, r1, #20
 8005a40:	2000      	movs	r0, #0
 8005a42:	f8dc 3000 	ldr.w	r3, [ip]
 8005a46:	b299      	uxth	r1, r3
 8005a48:	fb02 6101 	mla	r1, r2, r1, r6
 8005a4c:	0c1e      	lsrs	r6, r3, #16
 8005a4e:	0c0b      	lsrs	r3, r1, #16
 8005a50:	fb02 3306 	mla	r3, r2, r6, r3
 8005a54:	b289      	uxth	r1, r1
 8005a56:	3001      	adds	r0, #1
 8005a58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a5c:	4285      	cmp	r5, r0
 8005a5e:	f84c 1b04 	str.w	r1, [ip], #4
 8005a62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a66:	dcec      	bgt.n	8005a42 <__multadd+0x12>
 8005a68:	b30e      	cbz	r6, 8005aae <__multadd+0x7e>
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dc19      	bgt.n	8005aa4 <__multadd+0x74>
 8005a70:	6861      	ldr	r1, [r4, #4]
 8005a72:	4638      	mov	r0, r7
 8005a74:	3101      	adds	r1, #1
 8005a76:	f7ff ff79 	bl	800596c <_Balloc>
 8005a7a:	4680      	mov	r8, r0
 8005a7c:	b928      	cbnz	r0, 8005a8a <__multadd+0x5a>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <__multadd+0x84>)
 8005a82:	480d      	ldr	r0, [pc, #52]	; (8005ab8 <__multadd+0x88>)
 8005a84:	21ba      	movs	r1, #186	; 0xba
 8005a86:	f000 fd19 	bl	80064bc <__assert_func>
 8005a8a:	6922      	ldr	r2, [r4, #16]
 8005a8c:	3202      	adds	r2, #2
 8005a8e:	f104 010c 	add.w	r1, r4, #12
 8005a92:	0092      	lsls	r2, r2, #2
 8005a94:	300c      	adds	r0, #12
 8005a96:	f000 fd03 	bl	80064a0 <memcpy>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	f7ff ffa5 	bl	80059ec <_Bfree>
 8005aa2:	4644      	mov	r4, r8
 8005aa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005aa8:	3501      	adds	r5, #1
 8005aaa:	615e      	str	r6, [r3, #20]
 8005aac:	6125      	str	r5, [r4, #16]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab4:	08006848 	.word	0x08006848
 8005ab8:	08006859 	.word	0x08006859

08005abc <__hi0bits>:
 8005abc:	0c03      	lsrs	r3, r0, #16
 8005abe:	041b      	lsls	r3, r3, #16
 8005ac0:	b9d3      	cbnz	r3, 8005af8 <__hi0bits+0x3c>
 8005ac2:	0400      	lsls	r0, r0, #16
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005aca:	bf04      	itt	eq
 8005acc:	0200      	lsleq	r0, r0, #8
 8005ace:	3308      	addeq	r3, #8
 8005ad0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ad4:	bf04      	itt	eq
 8005ad6:	0100      	lsleq	r0, r0, #4
 8005ad8:	3304      	addeq	r3, #4
 8005ada:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ade:	bf04      	itt	eq
 8005ae0:	0080      	lsleq	r0, r0, #2
 8005ae2:	3302      	addeq	r3, #2
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	db05      	blt.n	8005af4 <__hi0bits+0x38>
 8005ae8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005aec:	f103 0301 	add.w	r3, r3, #1
 8005af0:	bf08      	it	eq
 8005af2:	2320      	moveq	r3, #32
 8005af4:	4618      	mov	r0, r3
 8005af6:	4770      	bx	lr
 8005af8:	2300      	movs	r3, #0
 8005afa:	e7e4      	b.n	8005ac6 <__hi0bits+0xa>

08005afc <__lo0bits>:
 8005afc:	6803      	ldr	r3, [r0, #0]
 8005afe:	f013 0207 	ands.w	r2, r3, #7
 8005b02:	d00c      	beq.n	8005b1e <__lo0bits+0x22>
 8005b04:	07d9      	lsls	r1, r3, #31
 8005b06:	d422      	bmi.n	8005b4e <__lo0bits+0x52>
 8005b08:	079a      	lsls	r2, r3, #30
 8005b0a:	bf49      	itett	mi
 8005b0c:	085b      	lsrmi	r3, r3, #1
 8005b0e:	089b      	lsrpl	r3, r3, #2
 8005b10:	6003      	strmi	r3, [r0, #0]
 8005b12:	2201      	movmi	r2, #1
 8005b14:	bf5c      	itt	pl
 8005b16:	6003      	strpl	r3, [r0, #0]
 8005b18:	2202      	movpl	r2, #2
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4770      	bx	lr
 8005b1e:	b299      	uxth	r1, r3
 8005b20:	b909      	cbnz	r1, 8005b26 <__lo0bits+0x2a>
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	2210      	movs	r2, #16
 8005b26:	b2d9      	uxtb	r1, r3
 8005b28:	b909      	cbnz	r1, 8005b2e <__lo0bits+0x32>
 8005b2a:	3208      	adds	r2, #8
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	0719      	lsls	r1, r3, #28
 8005b30:	bf04      	itt	eq
 8005b32:	091b      	lsreq	r3, r3, #4
 8005b34:	3204      	addeq	r2, #4
 8005b36:	0799      	lsls	r1, r3, #30
 8005b38:	bf04      	itt	eq
 8005b3a:	089b      	lsreq	r3, r3, #2
 8005b3c:	3202      	addeq	r2, #2
 8005b3e:	07d9      	lsls	r1, r3, #31
 8005b40:	d403      	bmi.n	8005b4a <__lo0bits+0x4e>
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	f102 0201 	add.w	r2, r2, #1
 8005b48:	d003      	beq.n	8005b52 <__lo0bits+0x56>
 8005b4a:	6003      	str	r3, [r0, #0]
 8005b4c:	e7e5      	b.n	8005b1a <__lo0bits+0x1e>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	e7e3      	b.n	8005b1a <__lo0bits+0x1e>
 8005b52:	2220      	movs	r2, #32
 8005b54:	e7e1      	b.n	8005b1a <__lo0bits+0x1e>
	...

08005b58 <__i2b>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	f7ff ff05 	bl	800596c <_Balloc>
 8005b62:	4602      	mov	r2, r0
 8005b64:	b928      	cbnz	r0, 8005b72 <__i2b+0x1a>
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <__i2b+0x24>)
 8005b68:	4805      	ldr	r0, [pc, #20]	; (8005b80 <__i2b+0x28>)
 8005b6a:	f240 1145 	movw	r1, #325	; 0x145
 8005b6e:	f000 fca5 	bl	80064bc <__assert_func>
 8005b72:	2301      	movs	r3, #1
 8005b74:	6144      	str	r4, [r0, #20]
 8005b76:	6103      	str	r3, [r0, #16]
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	bf00      	nop
 8005b7c:	08006848 	.word	0x08006848
 8005b80:	08006859 	.word	0x08006859

08005b84 <__multiply>:
 8005b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b88:	4691      	mov	r9, r2
 8005b8a:	690a      	ldr	r2, [r1, #16]
 8005b8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	bfb8      	it	lt
 8005b94:	460b      	movlt	r3, r1
 8005b96:	460c      	mov	r4, r1
 8005b98:	bfbc      	itt	lt
 8005b9a:	464c      	movlt	r4, r9
 8005b9c:	4699      	movlt	r9, r3
 8005b9e:	6927      	ldr	r7, [r4, #16]
 8005ba0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ba4:	68a3      	ldr	r3, [r4, #8]
 8005ba6:	6861      	ldr	r1, [r4, #4]
 8005ba8:	eb07 060a 	add.w	r6, r7, sl
 8005bac:	42b3      	cmp	r3, r6
 8005bae:	b085      	sub	sp, #20
 8005bb0:	bfb8      	it	lt
 8005bb2:	3101      	addlt	r1, #1
 8005bb4:	f7ff feda 	bl	800596c <_Balloc>
 8005bb8:	b930      	cbnz	r0, 8005bc8 <__multiply+0x44>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	4b44      	ldr	r3, [pc, #272]	; (8005cd0 <__multiply+0x14c>)
 8005bbe:	4845      	ldr	r0, [pc, #276]	; (8005cd4 <__multiply+0x150>)
 8005bc0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005bc4:	f000 fc7a 	bl	80064bc <__assert_func>
 8005bc8:	f100 0514 	add.w	r5, r0, #20
 8005bcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4543      	cmp	r3, r8
 8005bd6:	d321      	bcc.n	8005c1c <__multiply+0x98>
 8005bd8:	f104 0314 	add.w	r3, r4, #20
 8005bdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005be0:	f109 0314 	add.w	r3, r9, #20
 8005be4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005be8:	9202      	str	r2, [sp, #8]
 8005bea:	1b3a      	subs	r2, r7, r4
 8005bec:	3a15      	subs	r2, #21
 8005bee:	f022 0203 	bic.w	r2, r2, #3
 8005bf2:	3204      	adds	r2, #4
 8005bf4:	f104 0115 	add.w	r1, r4, #21
 8005bf8:	428f      	cmp	r7, r1
 8005bfa:	bf38      	it	cc
 8005bfc:	2204      	movcc	r2, #4
 8005bfe:	9201      	str	r2, [sp, #4]
 8005c00:	9a02      	ldr	r2, [sp, #8]
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d80c      	bhi.n	8005c22 <__multiply+0x9e>
 8005c08:	2e00      	cmp	r6, #0
 8005c0a:	dd03      	ble.n	8005c14 <__multiply+0x90>
 8005c0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d05b      	beq.n	8005ccc <__multiply+0x148>
 8005c14:	6106      	str	r6, [r0, #16]
 8005c16:	b005      	add	sp, #20
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	f843 2b04 	str.w	r2, [r3], #4
 8005c20:	e7d8      	b.n	8005bd4 <__multiply+0x50>
 8005c22:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c26:	f1ba 0f00 	cmp.w	sl, #0
 8005c2a:	d024      	beq.n	8005c76 <__multiply+0xf2>
 8005c2c:	f104 0e14 	add.w	lr, r4, #20
 8005c30:	46a9      	mov	r9, r5
 8005c32:	f04f 0c00 	mov.w	ip, #0
 8005c36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c3a:	f8d9 1000 	ldr.w	r1, [r9]
 8005c3e:	fa1f fb82 	uxth.w	fp, r2
 8005c42:	b289      	uxth	r1, r1
 8005c44:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c50:	4461      	add	r1, ip
 8005c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c56:	fb0a c20b 	mla	r2, sl, fp, ip
 8005c5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c5e:	b289      	uxth	r1, r1
 8005c60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c64:	4577      	cmp	r7, lr
 8005c66:	f849 1b04 	str.w	r1, [r9], #4
 8005c6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c6e:	d8e2      	bhi.n	8005c36 <__multiply+0xb2>
 8005c70:	9a01      	ldr	r2, [sp, #4]
 8005c72:	f845 c002 	str.w	ip, [r5, r2]
 8005c76:	9a03      	ldr	r2, [sp, #12]
 8005c78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	f1b9 0f00 	cmp.w	r9, #0
 8005c82:	d021      	beq.n	8005cc8 <__multiply+0x144>
 8005c84:	6829      	ldr	r1, [r5, #0]
 8005c86:	f104 0c14 	add.w	ip, r4, #20
 8005c8a:	46ae      	mov	lr, r5
 8005c8c:	f04f 0a00 	mov.w	sl, #0
 8005c90:	f8bc b000 	ldrh.w	fp, [ip]
 8005c94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c98:	fb09 220b 	mla	r2, r9, fp, r2
 8005c9c:	4452      	add	r2, sl
 8005c9e:	b289      	uxth	r1, r1
 8005ca0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ca4:	f84e 1b04 	str.w	r1, [lr], #4
 8005ca8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005cac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005cb0:	f8be 1000 	ldrh.w	r1, [lr]
 8005cb4:	fb09 110a 	mla	r1, r9, sl, r1
 8005cb8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005cbc:	4567      	cmp	r7, ip
 8005cbe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005cc2:	d8e5      	bhi.n	8005c90 <__multiply+0x10c>
 8005cc4:	9a01      	ldr	r2, [sp, #4]
 8005cc6:	50a9      	str	r1, [r5, r2]
 8005cc8:	3504      	adds	r5, #4
 8005cca:	e799      	b.n	8005c00 <__multiply+0x7c>
 8005ccc:	3e01      	subs	r6, #1
 8005cce:	e79b      	b.n	8005c08 <__multiply+0x84>
 8005cd0:	08006848 	.word	0x08006848
 8005cd4:	08006859 	.word	0x08006859

08005cd8 <__pow5mult>:
 8005cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cdc:	4615      	mov	r5, r2
 8005cde:	f012 0203 	ands.w	r2, r2, #3
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	460f      	mov	r7, r1
 8005ce6:	d007      	beq.n	8005cf8 <__pow5mult+0x20>
 8005ce8:	4c25      	ldr	r4, [pc, #148]	; (8005d80 <__pow5mult+0xa8>)
 8005cea:	3a01      	subs	r2, #1
 8005cec:	2300      	movs	r3, #0
 8005cee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cf2:	f7ff fe9d 	bl	8005a30 <__multadd>
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	10ad      	asrs	r5, r5, #2
 8005cfa:	d03d      	beq.n	8005d78 <__pow5mult+0xa0>
 8005cfc:	69f4      	ldr	r4, [r6, #28]
 8005cfe:	b97c      	cbnz	r4, 8005d20 <__pow5mult+0x48>
 8005d00:	2010      	movs	r0, #16
 8005d02:	f7ff fd7f 	bl	8005804 <malloc>
 8005d06:	4602      	mov	r2, r0
 8005d08:	61f0      	str	r0, [r6, #28]
 8005d0a:	b928      	cbnz	r0, 8005d18 <__pow5mult+0x40>
 8005d0c:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <__pow5mult+0xac>)
 8005d0e:	481e      	ldr	r0, [pc, #120]	; (8005d88 <__pow5mult+0xb0>)
 8005d10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005d14:	f000 fbd2 	bl	80064bc <__assert_func>
 8005d18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d1c:	6004      	str	r4, [r0, #0]
 8005d1e:	60c4      	str	r4, [r0, #12]
 8005d20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005d24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d28:	b94c      	cbnz	r4, 8005d3e <__pow5mult+0x66>
 8005d2a:	f240 2171 	movw	r1, #625	; 0x271
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7ff ff12 	bl	8005b58 <__i2b>
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	6003      	str	r3, [r0, #0]
 8005d3e:	f04f 0900 	mov.w	r9, #0
 8005d42:	07eb      	lsls	r3, r5, #31
 8005d44:	d50a      	bpl.n	8005d5c <__pow5mult+0x84>
 8005d46:	4639      	mov	r1, r7
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ff1a 	bl	8005b84 <__multiply>
 8005d50:	4639      	mov	r1, r7
 8005d52:	4680      	mov	r8, r0
 8005d54:	4630      	mov	r0, r6
 8005d56:	f7ff fe49 	bl	80059ec <_Bfree>
 8005d5a:	4647      	mov	r7, r8
 8005d5c:	106d      	asrs	r5, r5, #1
 8005d5e:	d00b      	beq.n	8005d78 <__pow5mult+0xa0>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	b938      	cbnz	r0, 8005d74 <__pow5mult+0x9c>
 8005d64:	4622      	mov	r2, r4
 8005d66:	4621      	mov	r1, r4
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f7ff ff0b 	bl	8005b84 <__multiply>
 8005d6e:	6020      	str	r0, [r4, #0]
 8005d70:	f8c0 9000 	str.w	r9, [r0]
 8005d74:	4604      	mov	r4, r0
 8005d76:	e7e4      	b.n	8005d42 <__pow5mult+0x6a>
 8005d78:	4638      	mov	r0, r7
 8005d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7e:	bf00      	nop
 8005d80:	080069a8 	.word	0x080069a8
 8005d84:	080067d9 	.word	0x080067d9
 8005d88:	08006859 	.word	0x08006859

08005d8c <__lshift>:
 8005d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d90:	460c      	mov	r4, r1
 8005d92:	6849      	ldr	r1, [r1, #4]
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d9a:	68a3      	ldr	r3, [r4, #8]
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	4691      	mov	r9, r2
 8005da0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005da4:	f108 0601 	add.w	r6, r8, #1
 8005da8:	42b3      	cmp	r3, r6
 8005daa:	db0b      	blt.n	8005dc4 <__lshift+0x38>
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff fddd 	bl	800596c <_Balloc>
 8005db2:	4605      	mov	r5, r0
 8005db4:	b948      	cbnz	r0, 8005dca <__lshift+0x3e>
 8005db6:	4602      	mov	r2, r0
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <__lshift+0xd0>)
 8005dba:	4829      	ldr	r0, [pc, #164]	; (8005e60 <__lshift+0xd4>)
 8005dbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005dc0:	f000 fb7c 	bl	80064bc <__assert_func>
 8005dc4:	3101      	adds	r1, #1
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	e7ee      	b.n	8005da8 <__lshift+0x1c>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f100 0114 	add.w	r1, r0, #20
 8005dd0:	f100 0210 	add.w	r2, r0, #16
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	4553      	cmp	r3, sl
 8005dd8:	db33      	blt.n	8005e42 <__lshift+0xb6>
 8005dda:	6920      	ldr	r0, [r4, #16]
 8005ddc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005de0:	f104 0314 	add.w	r3, r4, #20
 8005de4:	f019 091f 	ands.w	r9, r9, #31
 8005de8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005df0:	d02b      	beq.n	8005e4a <__lshift+0xbe>
 8005df2:	f1c9 0e20 	rsb	lr, r9, #32
 8005df6:	468a      	mov	sl, r1
 8005df8:	2200      	movs	r2, #0
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	fa00 f009 	lsl.w	r0, r0, r9
 8005e00:	4310      	orrs	r0, r2
 8005e02:	f84a 0b04 	str.w	r0, [sl], #4
 8005e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e0a:	459c      	cmp	ip, r3
 8005e0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e10:	d8f3      	bhi.n	8005dfa <__lshift+0x6e>
 8005e12:	ebac 0304 	sub.w	r3, ip, r4
 8005e16:	3b15      	subs	r3, #21
 8005e18:	f023 0303 	bic.w	r3, r3, #3
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	f104 0015 	add.w	r0, r4, #21
 8005e22:	4584      	cmp	ip, r0
 8005e24:	bf38      	it	cc
 8005e26:	2304      	movcc	r3, #4
 8005e28:	50ca      	str	r2, [r1, r3]
 8005e2a:	b10a      	cbz	r2, 8005e30 <__lshift+0xa4>
 8005e2c:	f108 0602 	add.w	r6, r8, #2
 8005e30:	3e01      	subs	r6, #1
 8005e32:	4638      	mov	r0, r7
 8005e34:	612e      	str	r6, [r5, #16]
 8005e36:	4621      	mov	r1, r4
 8005e38:	f7ff fdd8 	bl	80059ec <_Bfree>
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e46:	3301      	adds	r3, #1
 8005e48:	e7c5      	b.n	8005dd6 <__lshift+0x4a>
 8005e4a:	3904      	subs	r1, #4
 8005e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e50:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e54:	459c      	cmp	ip, r3
 8005e56:	d8f9      	bhi.n	8005e4c <__lshift+0xc0>
 8005e58:	e7ea      	b.n	8005e30 <__lshift+0xa4>
 8005e5a:	bf00      	nop
 8005e5c:	08006848 	.word	0x08006848
 8005e60:	08006859 	.word	0x08006859

08005e64 <__mcmp>:
 8005e64:	b530      	push	{r4, r5, lr}
 8005e66:	6902      	ldr	r2, [r0, #16]
 8005e68:	690c      	ldr	r4, [r1, #16]
 8005e6a:	1b12      	subs	r2, r2, r4
 8005e6c:	d10e      	bne.n	8005e8c <__mcmp+0x28>
 8005e6e:	f100 0314 	add.w	r3, r0, #20
 8005e72:	3114      	adds	r1, #20
 8005e74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005e78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005e7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005e80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e84:	42a5      	cmp	r5, r4
 8005e86:	d003      	beq.n	8005e90 <__mcmp+0x2c>
 8005e88:	d305      	bcc.n	8005e96 <__mcmp+0x32>
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	bd30      	pop	{r4, r5, pc}
 8005e90:	4283      	cmp	r3, r0
 8005e92:	d3f3      	bcc.n	8005e7c <__mcmp+0x18>
 8005e94:	e7fa      	b.n	8005e8c <__mcmp+0x28>
 8005e96:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9a:	e7f7      	b.n	8005e8c <__mcmp+0x28>

08005e9c <__mdiff>:
 8005e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4690      	mov	r8, r2
 8005eaa:	f7ff ffdb 	bl	8005e64 <__mcmp>
 8005eae:	1e05      	subs	r5, r0, #0
 8005eb0:	d110      	bne.n	8005ed4 <__mdiff+0x38>
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff fd59 	bl	800596c <_Balloc>
 8005eba:	b930      	cbnz	r0, 8005eca <__mdiff+0x2e>
 8005ebc:	4b3a      	ldr	r3, [pc, #232]	; (8005fa8 <__mdiff+0x10c>)
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	f240 2137 	movw	r1, #567	; 0x237
 8005ec4:	4839      	ldr	r0, [pc, #228]	; (8005fac <__mdiff+0x110>)
 8005ec6:	f000 faf9 	bl	80064bc <__assert_func>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed4:	bfa4      	itt	ge
 8005ed6:	4643      	movge	r3, r8
 8005ed8:	46a0      	movge	r8, r4
 8005eda:	4630      	mov	r0, r6
 8005edc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ee0:	bfa6      	itte	ge
 8005ee2:	461c      	movge	r4, r3
 8005ee4:	2500      	movge	r5, #0
 8005ee6:	2501      	movlt	r5, #1
 8005ee8:	f7ff fd40 	bl	800596c <_Balloc>
 8005eec:	b920      	cbnz	r0, 8005ef8 <__mdiff+0x5c>
 8005eee:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <__mdiff+0x10c>)
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	f240 2145 	movw	r1, #581	; 0x245
 8005ef6:	e7e5      	b.n	8005ec4 <__mdiff+0x28>
 8005ef8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005efc:	6926      	ldr	r6, [r4, #16]
 8005efe:	60c5      	str	r5, [r0, #12]
 8005f00:	f104 0914 	add.w	r9, r4, #20
 8005f04:	f108 0514 	add.w	r5, r8, #20
 8005f08:	f100 0e14 	add.w	lr, r0, #20
 8005f0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005f10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f14:	f108 0210 	add.w	r2, r8, #16
 8005f18:	46f2      	mov	sl, lr
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f24:	fa11 f88b 	uxtah	r8, r1, fp
 8005f28:	b299      	uxth	r1, r3
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	eba8 0801 	sub.w	r8, r8, r1
 8005f30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f38:	fa1f f888 	uxth.w	r8, r8
 8005f3c:	1419      	asrs	r1, r3, #16
 8005f3e:	454e      	cmp	r6, r9
 8005f40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f44:	f84a 3b04 	str.w	r3, [sl], #4
 8005f48:	d8e8      	bhi.n	8005f1c <__mdiff+0x80>
 8005f4a:	1b33      	subs	r3, r6, r4
 8005f4c:	3b15      	subs	r3, #21
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	3304      	adds	r3, #4
 8005f54:	3415      	adds	r4, #21
 8005f56:	42a6      	cmp	r6, r4
 8005f58:	bf38      	it	cc
 8005f5a:	2304      	movcc	r3, #4
 8005f5c:	441d      	add	r5, r3
 8005f5e:	4473      	add	r3, lr
 8005f60:	469e      	mov	lr, r3
 8005f62:	462e      	mov	r6, r5
 8005f64:	4566      	cmp	r6, ip
 8005f66:	d30e      	bcc.n	8005f86 <__mdiff+0xea>
 8005f68:	f10c 0203 	add.w	r2, ip, #3
 8005f6c:	1b52      	subs	r2, r2, r5
 8005f6e:	f022 0203 	bic.w	r2, r2, #3
 8005f72:	3d03      	subs	r5, #3
 8005f74:	45ac      	cmp	ip, r5
 8005f76:	bf38      	it	cc
 8005f78:	2200      	movcc	r2, #0
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005f80:	b17a      	cbz	r2, 8005fa2 <__mdiff+0x106>
 8005f82:	6107      	str	r7, [r0, #16]
 8005f84:	e7a4      	b.n	8005ed0 <__mdiff+0x34>
 8005f86:	f856 8b04 	ldr.w	r8, [r6], #4
 8005f8a:	fa11 f288 	uxtah	r2, r1, r8
 8005f8e:	1414      	asrs	r4, r2, #16
 8005f90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f94:	b292      	uxth	r2, r2
 8005f96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005f9a:	f84e 2b04 	str.w	r2, [lr], #4
 8005f9e:	1421      	asrs	r1, r4, #16
 8005fa0:	e7e0      	b.n	8005f64 <__mdiff+0xc8>
 8005fa2:	3f01      	subs	r7, #1
 8005fa4:	e7ea      	b.n	8005f7c <__mdiff+0xe0>
 8005fa6:	bf00      	nop
 8005fa8:	08006848 	.word	0x08006848
 8005fac:	08006859 	.word	0x08006859

08005fb0 <__d2b>:
 8005fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	ec59 8b10 	vmov	r8, r9, d0
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	f7ff fcd5 	bl	800596c <_Balloc>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	b930      	cbnz	r0, 8005fd4 <__d2b+0x24>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	4b24      	ldr	r3, [pc, #144]	; (800605c <__d2b+0xac>)
 8005fca:	4825      	ldr	r0, [pc, #148]	; (8006060 <__d2b+0xb0>)
 8005fcc:	f240 310f 	movw	r1, #783	; 0x30f
 8005fd0:	f000 fa74 	bl	80064bc <__assert_func>
 8005fd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fdc:	bb2d      	cbnz	r5, 800602a <__d2b+0x7a>
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	f1b8 0300 	subs.w	r3, r8, #0
 8005fe4:	d026      	beq.n	8006034 <__d2b+0x84>
 8005fe6:	4668      	mov	r0, sp
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	f7ff fd87 	bl	8005afc <__lo0bits>
 8005fee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ff2:	b1e8      	cbz	r0, 8006030 <__d2b+0x80>
 8005ff4:	f1c0 0320 	rsb	r3, r0, #32
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	40c2      	lsrs	r2, r0
 8006000:	6163      	str	r3, [r4, #20]
 8006002:	9201      	str	r2, [sp, #4]
 8006004:	9b01      	ldr	r3, [sp, #4]
 8006006:	61a3      	str	r3, [r4, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	bf14      	ite	ne
 800600c:	2202      	movne	r2, #2
 800600e:	2201      	moveq	r2, #1
 8006010:	6122      	str	r2, [r4, #16]
 8006012:	b1bd      	cbz	r5, 8006044 <__d2b+0x94>
 8006014:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006018:	4405      	add	r5, r0
 800601a:	603d      	str	r5, [r7, #0]
 800601c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006020:	6030      	str	r0, [r6, #0]
 8006022:	4620      	mov	r0, r4
 8006024:	b003      	add	sp, #12
 8006026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800602a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800602e:	e7d6      	b.n	8005fde <__d2b+0x2e>
 8006030:	6161      	str	r1, [r4, #20]
 8006032:	e7e7      	b.n	8006004 <__d2b+0x54>
 8006034:	a801      	add	r0, sp, #4
 8006036:	f7ff fd61 	bl	8005afc <__lo0bits>
 800603a:	9b01      	ldr	r3, [sp, #4]
 800603c:	6163      	str	r3, [r4, #20]
 800603e:	3020      	adds	r0, #32
 8006040:	2201      	movs	r2, #1
 8006042:	e7e5      	b.n	8006010 <__d2b+0x60>
 8006044:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800604c:	6038      	str	r0, [r7, #0]
 800604e:	6918      	ldr	r0, [r3, #16]
 8006050:	f7ff fd34 	bl	8005abc <__hi0bits>
 8006054:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006058:	e7e2      	b.n	8006020 <__d2b+0x70>
 800605a:	bf00      	nop
 800605c:	08006848 	.word	0x08006848
 8006060:	08006859 	.word	0x08006859

08006064 <__sfputc_r>:
 8006064:	6893      	ldr	r3, [r2, #8]
 8006066:	3b01      	subs	r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	b410      	push	{r4}
 800606c:	6093      	str	r3, [r2, #8]
 800606e:	da08      	bge.n	8006082 <__sfputc_r+0x1e>
 8006070:	6994      	ldr	r4, [r2, #24]
 8006072:	42a3      	cmp	r3, r4
 8006074:	db01      	blt.n	800607a <__sfputc_r+0x16>
 8006076:	290a      	cmp	r1, #10
 8006078:	d103      	bne.n	8006082 <__sfputc_r+0x1e>
 800607a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800607e:	f000 b969 	b.w	8006354 <__swbuf_r>
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	1c58      	adds	r0, r3, #1
 8006086:	6010      	str	r0, [r2, #0]
 8006088:	7019      	strb	r1, [r3, #0]
 800608a:	4608      	mov	r0, r1
 800608c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006090:	4770      	bx	lr

08006092 <__sfputs_r>:
 8006092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006094:	4606      	mov	r6, r0
 8006096:	460f      	mov	r7, r1
 8006098:	4614      	mov	r4, r2
 800609a:	18d5      	adds	r5, r2, r3
 800609c:	42ac      	cmp	r4, r5
 800609e:	d101      	bne.n	80060a4 <__sfputs_r+0x12>
 80060a0:	2000      	movs	r0, #0
 80060a2:	e007      	b.n	80060b4 <__sfputs_r+0x22>
 80060a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a8:	463a      	mov	r2, r7
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ffda 	bl	8006064 <__sfputc_r>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d1f3      	bne.n	800609c <__sfputs_r+0xa>
 80060b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060b8 <_vfiprintf_r>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	460d      	mov	r5, r1
 80060be:	b09d      	sub	sp, #116	; 0x74
 80060c0:	4614      	mov	r4, r2
 80060c2:	4698      	mov	r8, r3
 80060c4:	4606      	mov	r6, r0
 80060c6:	b118      	cbz	r0, 80060d0 <_vfiprintf_r+0x18>
 80060c8:	6a03      	ldr	r3, [r0, #32]
 80060ca:	b90b      	cbnz	r3, 80060d0 <_vfiprintf_r+0x18>
 80060cc:	f7fe fbc0 	bl	8004850 <__sinit>
 80060d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060d2:	07d9      	lsls	r1, r3, #31
 80060d4:	d405      	bmi.n	80060e2 <_vfiprintf_r+0x2a>
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	059a      	lsls	r2, r3, #22
 80060da:	d402      	bmi.n	80060e2 <_vfiprintf_r+0x2a>
 80060dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060de:	f7fe fcc8 	bl	8004a72 <__retarget_lock_acquire_recursive>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	071b      	lsls	r3, r3, #28
 80060e6:	d501      	bpl.n	80060ec <_vfiprintf_r+0x34>
 80060e8:	692b      	ldr	r3, [r5, #16]
 80060ea:	b99b      	cbnz	r3, 8006114 <_vfiprintf_r+0x5c>
 80060ec:	4629      	mov	r1, r5
 80060ee:	4630      	mov	r0, r6
 80060f0:	f000 f96e 	bl	80063d0 <__swsetup_r>
 80060f4:	b170      	cbz	r0, 8006114 <_vfiprintf_r+0x5c>
 80060f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060f8:	07dc      	lsls	r4, r3, #31
 80060fa:	d504      	bpl.n	8006106 <_vfiprintf_r+0x4e>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	b01d      	add	sp, #116	; 0x74
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	0598      	lsls	r0, r3, #22
 800610a:	d4f7      	bmi.n	80060fc <_vfiprintf_r+0x44>
 800610c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800610e:	f7fe fcb1 	bl	8004a74 <__retarget_lock_release_recursive>
 8006112:	e7f3      	b.n	80060fc <_vfiprintf_r+0x44>
 8006114:	2300      	movs	r3, #0
 8006116:	9309      	str	r3, [sp, #36]	; 0x24
 8006118:	2320      	movs	r3, #32
 800611a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800611e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006122:	2330      	movs	r3, #48	; 0x30
 8006124:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80062d8 <_vfiprintf_r+0x220>
 8006128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800612c:	f04f 0901 	mov.w	r9, #1
 8006130:	4623      	mov	r3, r4
 8006132:	469a      	mov	sl, r3
 8006134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006138:	b10a      	cbz	r2, 800613e <_vfiprintf_r+0x86>
 800613a:	2a25      	cmp	r2, #37	; 0x25
 800613c:	d1f9      	bne.n	8006132 <_vfiprintf_r+0x7a>
 800613e:	ebba 0b04 	subs.w	fp, sl, r4
 8006142:	d00b      	beq.n	800615c <_vfiprintf_r+0xa4>
 8006144:	465b      	mov	r3, fp
 8006146:	4622      	mov	r2, r4
 8006148:	4629      	mov	r1, r5
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ffa1 	bl	8006092 <__sfputs_r>
 8006150:	3001      	adds	r0, #1
 8006152:	f000 80a9 	beq.w	80062a8 <_vfiprintf_r+0x1f0>
 8006156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006158:	445a      	add	r2, fp
 800615a:	9209      	str	r2, [sp, #36]	; 0x24
 800615c:	f89a 3000 	ldrb.w	r3, [sl]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80a1 	beq.w	80062a8 <_vfiprintf_r+0x1f0>
 8006166:	2300      	movs	r3, #0
 8006168:	f04f 32ff 	mov.w	r2, #4294967295
 800616c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006170:	f10a 0a01 	add.w	sl, sl, #1
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	9307      	str	r3, [sp, #28]
 8006178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800617c:	931a      	str	r3, [sp, #104]	; 0x68
 800617e:	4654      	mov	r4, sl
 8006180:	2205      	movs	r2, #5
 8006182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006186:	4854      	ldr	r0, [pc, #336]	; (80062d8 <_vfiprintf_r+0x220>)
 8006188:	f7fa f822 	bl	80001d0 <memchr>
 800618c:	9a04      	ldr	r2, [sp, #16]
 800618e:	b9d8      	cbnz	r0, 80061c8 <_vfiprintf_r+0x110>
 8006190:	06d1      	lsls	r1, r2, #27
 8006192:	bf44      	itt	mi
 8006194:	2320      	movmi	r3, #32
 8006196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800619a:	0713      	lsls	r3, r2, #28
 800619c:	bf44      	itt	mi
 800619e:	232b      	movmi	r3, #43	; 0x2b
 80061a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061a4:	f89a 3000 	ldrb.w	r3, [sl]
 80061a8:	2b2a      	cmp	r3, #42	; 0x2a
 80061aa:	d015      	beq.n	80061d8 <_vfiprintf_r+0x120>
 80061ac:	9a07      	ldr	r2, [sp, #28]
 80061ae:	4654      	mov	r4, sl
 80061b0:	2000      	movs	r0, #0
 80061b2:	f04f 0c0a 	mov.w	ip, #10
 80061b6:	4621      	mov	r1, r4
 80061b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061bc:	3b30      	subs	r3, #48	; 0x30
 80061be:	2b09      	cmp	r3, #9
 80061c0:	d94d      	bls.n	800625e <_vfiprintf_r+0x1a6>
 80061c2:	b1b0      	cbz	r0, 80061f2 <_vfiprintf_r+0x13a>
 80061c4:	9207      	str	r2, [sp, #28]
 80061c6:	e014      	b.n	80061f2 <_vfiprintf_r+0x13a>
 80061c8:	eba0 0308 	sub.w	r3, r0, r8
 80061cc:	fa09 f303 	lsl.w	r3, r9, r3
 80061d0:	4313      	orrs	r3, r2
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	46a2      	mov	sl, r4
 80061d6:	e7d2      	b.n	800617e <_vfiprintf_r+0xc6>
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	1d19      	adds	r1, r3, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	9103      	str	r1, [sp, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bfbb      	ittet	lt
 80061e4:	425b      	neglt	r3, r3
 80061e6:	f042 0202 	orrlt.w	r2, r2, #2
 80061ea:	9307      	strge	r3, [sp, #28]
 80061ec:	9307      	strlt	r3, [sp, #28]
 80061ee:	bfb8      	it	lt
 80061f0:	9204      	strlt	r2, [sp, #16]
 80061f2:	7823      	ldrb	r3, [r4, #0]
 80061f4:	2b2e      	cmp	r3, #46	; 0x2e
 80061f6:	d10c      	bne.n	8006212 <_vfiprintf_r+0x15a>
 80061f8:	7863      	ldrb	r3, [r4, #1]
 80061fa:	2b2a      	cmp	r3, #42	; 0x2a
 80061fc:	d134      	bne.n	8006268 <_vfiprintf_r+0x1b0>
 80061fe:	9b03      	ldr	r3, [sp, #12]
 8006200:	1d1a      	adds	r2, r3, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	9203      	str	r2, [sp, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	bfb8      	it	lt
 800620a:	f04f 33ff 	movlt.w	r3, #4294967295
 800620e:	3402      	adds	r4, #2
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80062e8 <_vfiprintf_r+0x230>
 8006216:	7821      	ldrb	r1, [r4, #0]
 8006218:	2203      	movs	r2, #3
 800621a:	4650      	mov	r0, sl
 800621c:	f7f9 ffd8 	bl	80001d0 <memchr>
 8006220:	b138      	cbz	r0, 8006232 <_vfiprintf_r+0x17a>
 8006222:	9b04      	ldr	r3, [sp, #16]
 8006224:	eba0 000a 	sub.w	r0, r0, sl
 8006228:	2240      	movs	r2, #64	; 0x40
 800622a:	4082      	lsls	r2, r0
 800622c:	4313      	orrs	r3, r2
 800622e:	3401      	adds	r4, #1
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006236:	4829      	ldr	r0, [pc, #164]	; (80062dc <_vfiprintf_r+0x224>)
 8006238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800623c:	2206      	movs	r2, #6
 800623e:	f7f9 ffc7 	bl	80001d0 <memchr>
 8006242:	2800      	cmp	r0, #0
 8006244:	d03f      	beq.n	80062c6 <_vfiprintf_r+0x20e>
 8006246:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <_vfiprintf_r+0x228>)
 8006248:	bb1b      	cbnz	r3, 8006292 <_vfiprintf_r+0x1da>
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	3307      	adds	r3, #7
 800624e:	f023 0307 	bic.w	r3, r3, #7
 8006252:	3308      	adds	r3, #8
 8006254:	9303      	str	r3, [sp, #12]
 8006256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006258:	443b      	add	r3, r7
 800625a:	9309      	str	r3, [sp, #36]	; 0x24
 800625c:	e768      	b.n	8006130 <_vfiprintf_r+0x78>
 800625e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006262:	460c      	mov	r4, r1
 8006264:	2001      	movs	r0, #1
 8006266:	e7a6      	b.n	80061b6 <_vfiprintf_r+0xfe>
 8006268:	2300      	movs	r3, #0
 800626a:	3401      	adds	r4, #1
 800626c:	9305      	str	r3, [sp, #20]
 800626e:	4619      	mov	r1, r3
 8006270:	f04f 0c0a 	mov.w	ip, #10
 8006274:	4620      	mov	r0, r4
 8006276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800627a:	3a30      	subs	r2, #48	; 0x30
 800627c:	2a09      	cmp	r2, #9
 800627e:	d903      	bls.n	8006288 <_vfiprintf_r+0x1d0>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0c6      	beq.n	8006212 <_vfiprintf_r+0x15a>
 8006284:	9105      	str	r1, [sp, #20]
 8006286:	e7c4      	b.n	8006212 <_vfiprintf_r+0x15a>
 8006288:	fb0c 2101 	mla	r1, ip, r1, r2
 800628c:	4604      	mov	r4, r0
 800628e:	2301      	movs	r3, #1
 8006290:	e7f0      	b.n	8006274 <_vfiprintf_r+0x1bc>
 8006292:	ab03      	add	r3, sp, #12
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	462a      	mov	r2, r5
 8006298:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <_vfiprintf_r+0x22c>)
 800629a:	a904      	add	r1, sp, #16
 800629c:	4630      	mov	r0, r6
 800629e:	f7fd fdc3 	bl	8003e28 <_printf_float>
 80062a2:	4607      	mov	r7, r0
 80062a4:	1c78      	adds	r0, r7, #1
 80062a6:	d1d6      	bne.n	8006256 <_vfiprintf_r+0x19e>
 80062a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062aa:	07d9      	lsls	r1, r3, #31
 80062ac:	d405      	bmi.n	80062ba <_vfiprintf_r+0x202>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	059a      	lsls	r2, r3, #22
 80062b2:	d402      	bmi.n	80062ba <_vfiprintf_r+0x202>
 80062b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062b6:	f7fe fbdd 	bl	8004a74 <__retarget_lock_release_recursive>
 80062ba:	89ab      	ldrh	r3, [r5, #12]
 80062bc:	065b      	lsls	r3, r3, #25
 80062be:	f53f af1d 	bmi.w	80060fc <_vfiprintf_r+0x44>
 80062c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062c4:	e71c      	b.n	8006100 <_vfiprintf_r+0x48>
 80062c6:	ab03      	add	r3, sp, #12
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	462a      	mov	r2, r5
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <_vfiprintf_r+0x22c>)
 80062ce:	a904      	add	r1, sp, #16
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7fe f84d 	bl	8004370 <_printf_i>
 80062d6:	e7e4      	b.n	80062a2 <_vfiprintf_r+0x1ea>
 80062d8:	080069b4 	.word	0x080069b4
 80062dc:	080069be 	.word	0x080069be
 80062e0:	08003e29 	.word	0x08003e29
 80062e4:	08006093 	.word	0x08006093
 80062e8:	080069ba 	.word	0x080069ba

080062ec <_putc_r>:
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	460d      	mov	r5, r1
 80062f0:	4614      	mov	r4, r2
 80062f2:	4606      	mov	r6, r0
 80062f4:	b118      	cbz	r0, 80062fe <_putc_r+0x12>
 80062f6:	6a03      	ldr	r3, [r0, #32]
 80062f8:	b90b      	cbnz	r3, 80062fe <_putc_r+0x12>
 80062fa:	f7fe faa9 	bl	8004850 <__sinit>
 80062fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006300:	07d8      	lsls	r0, r3, #31
 8006302:	d405      	bmi.n	8006310 <_putc_r+0x24>
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	0599      	lsls	r1, r3, #22
 8006308:	d402      	bmi.n	8006310 <_putc_r+0x24>
 800630a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800630c:	f7fe fbb1 	bl	8004a72 <__retarget_lock_acquire_recursive>
 8006310:	68a3      	ldr	r3, [r4, #8]
 8006312:	3b01      	subs	r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	60a3      	str	r3, [r4, #8]
 8006318:	da05      	bge.n	8006326 <_putc_r+0x3a>
 800631a:	69a2      	ldr	r2, [r4, #24]
 800631c:	4293      	cmp	r3, r2
 800631e:	db12      	blt.n	8006346 <_putc_r+0x5a>
 8006320:	b2eb      	uxtb	r3, r5
 8006322:	2b0a      	cmp	r3, #10
 8006324:	d00f      	beq.n	8006346 <_putc_r+0x5a>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	6022      	str	r2, [r4, #0]
 800632c:	701d      	strb	r5, [r3, #0]
 800632e:	b2ed      	uxtb	r5, r5
 8006330:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006332:	07da      	lsls	r2, r3, #31
 8006334:	d405      	bmi.n	8006342 <_putc_r+0x56>
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	059b      	lsls	r3, r3, #22
 800633a:	d402      	bmi.n	8006342 <_putc_r+0x56>
 800633c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800633e:	f7fe fb99 	bl	8004a74 <__retarget_lock_release_recursive>
 8006342:	4628      	mov	r0, r5
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	4629      	mov	r1, r5
 8006348:	4622      	mov	r2, r4
 800634a:	4630      	mov	r0, r6
 800634c:	f000 f802 	bl	8006354 <__swbuf_r>
 8006350:	4605      	mov	r5, r0
 8006352:	e7ed      	b.n	8006330 <_putc_r+0x44>

08006354 <__swbuf_r>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	460e      	mov	r6, r1
 8006358:	4614      	mov	r4, r2
 800635a:	4605      	mov	r5, r0
 800635c:	b118      	cbz	r0, 8006366 <__swbuf_r+0x12>
 800635e:	6a03      	ldr	r3, [r0, #32]
 8006360:	b90b      	cbnz	r3, 8006366 <__swbuf_r+0x12>
 8006362:	f7fe fa75 	bl	8004850 <__sinit>
 8006366:	69a3      	ldr	r3, [r4, #24]
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	071a      	lsls	r2, r3, #28
 800636e:	d525      	bpl.n	80063bc <__swbuf_r+0x68>
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	b31b      	cbz	r3, 80063bc <__swbuf_r+0x68>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	6922      	ldr	r2, [r4, #16]
 8006378:	1a98      	subs	r0, r3, r2
 800637a:	6963      	ldr	r3, [r4, #20]
 800637c:	b2f6      	uxtb	r6, r6
 800637e:	4283      	cmp	r3, r0
 8006380:	4637      	mov	r7, r6
 8006382:	dc04      	bgt.n	800638e <__swbuf_r+0x3a>
 8006384:	4621      	mov	r1, r4
 8006386:	4628      	mov	r0, r5
 8006388:	f7fe f99a 	bl	80046c0 <_fflush_r>
 800638c:	b9e0      	cbnz	r0, 80063c8 <__swbuf_r+0x74>
 800638e:	68a3      	ldr	r3, [r4, #8]
 8006390:	3b01      	subs	r3, #1
 8006392:	60a3      	str	r3, [r4, #8]
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	6022      	str	r2, [r4, #0]
 800639a:	701e      	strb	r6, [r3, #0]
 800639c:	6962      	ldr	r2, [r4, #20]
 800639e:	1c43      	adds	r3, r0, #1
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d004      	beq.n	80063ae <__swbuf_r+0x5a>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	07db      	lsls	r3, r3, #31
 80063a8:	d506      	bpl.n	80063b8 <__swbuf_r+0x64>
 80063aa:	2e0a      	cmp	r6, #10
 80063ac:	d104      	bne.n	80063b8 <__swbuf_r+0x64>
 80063ae:	4621      	mov	r1, r4
 80063b0:	4628      	mov	r0, r5
 80063b2:	f7fe f985 	bl	80046c0 <_fflush_r>
 80063b6:	b938      	cbnz	r0, 80063c8 <__swbuf_r+0x74>
 80063b8:	4638      	mov	r0, r7
 80063ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063bc:	4621      	mov	r1, r4
 80063be:	4628      	mov	r0, r5
 80063c0:	f000 f806 	bl	80063d0 <__swsetup_r>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d0d5      	beq.n	8006374 <__swbuf_r+0x20>
 80063c8:	f04f 37ff 	mov.w	r7, #4294967295
 80063cc:	e7f4      	b.n	80063b8 <__swbuf_r+0x64>
	...

080063d0 <__swsetup_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4b2a      	ldr	r3, [pc, #168]	; (800647c <__swsetup_r+0xac>)
 80063d4:	4605      	mov	r5, r0
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	460c      	mov	r4, r1
 80063da:	b118      	cbz	r0, 80063e4 <__swsetup_r+0x14>
 80063dc:	6a03      	ldr	r3, [r0, #32]
 80063de:	b90b      	cbnz	r3, 80063e4 <__swsetup_r+0x14>
 80063e0:	f7fe fa36 	bl	8004850 <__sinit>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ea:	0718      	lsls	r0, r3, #28
 80063ec:	d422      	bmi.n	8006434 <__swsetup_r+0x64>
 80063ee:	06d9      	lsls	r1, r3, #27
 80063f0:	d407      	bmi.n	8006402 <__swsetup_r+0x32>
 80063f2:	2309      	movs	r3, #9
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e034      	b.n	800646c <__swsetup_r+0x9c>
 8006402:	0758      	lsls	r0, r3, #29
 8006404:	d512      	bpl.n	800642c <__swsetup_r+0x5c>
 8006406:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006408:	b141      	cbz	r1, 800641c <__swsetup_r+0x4c>
 800640a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800640e:	4299      	cmp	r1, r3
 8006410:	d002      	beq.n	8006418 <__swsetup_r+0x48>
 8006412:	4628      	mov	r0, r5
 8006414:	f7ff f9aa 	bl	800576c <_free_r>
 8006418:	2300      	movs	r3, #0
 800641a:	6363      	str	r3, [r4, #52]	; 0x34
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	2300      	movs	r3, #0
 8006426:	6063      	str	r3, [r4, #4]
 8006428:	6923      	ldr	r3, [r4, #16]
 800642a:	6023      	str	r3, [r4, #0]
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	f043 0308 	orr.w	r3, r3, #8
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	b94b      	cbnz	r3, 800644c <__swsetup_r+0x7c>
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800643e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006442:	d003      	beq.n	800644c <__swsetup_r+0x7c>
 8006444:	4621      	mov	r1, r4
 8006446:	4628      	mov	r0, r5
 8006448:	f000 f8c4 	bl	80065d4 <__smakebuf_r>
 800644c:	89a0      	ldrh	r0, [r4, #12]
 800644e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006452:	f010 0301 	ands.w	r3, r0, #1
 8006456:	d00a      	beq.n	800646e <__swsetup_r+0x9e>
 8006458:	2300      	movs	r3, #0
 800645a:	60a3      	str	r3, [r4, #8]
 800645c:	6963      	ldr	r3, [r4, #20]
 800645e:	425b      	negs	r3, r3
 8006460:	61a3      	str	r3, [r4, #24]
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	b943      	cbnz	r3, 8006478 <__swsetup_r+0xa8>
 8006466:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800646a:	d1c4      	bne.n	80063f6 <__swsetup_r+0x26>
 800646c:	bd38      	pop	{r3, r4, r5, pc}
 800646e:	0781      	lsls	r1, r0, #30
 8006470:	bf58      	it	pl
 8006472:	6963      	ldrpl	r3, [r4, #20]
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	e7f4      	b.n	8006462 <__swsetup_r+0x92>
 8006478:	2000      	movs	r0, #0
 800647a:	e7f7      	b.n	800646c <__swsetup_r+0x9c>
 800647c:	20000064 	.word	0x20000064

08006480 <_sbrk_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d06      	ldr	r5, [pc, #24]	; (800649c <_sbrk_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fa ff26 	bl	80012dc <_sbrk>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_sbrk_r+0x1a>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_sbrk_r+0x1a>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	200003bc 	.word	0x200003bc

080064a0 <memcpy>:
 80064a0:	440a      	add	r2, r1
 80064a2:	4291      	cmp	r1, r2
 80064a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064a8:	d100      	bne.n	80064ac <memcpy+0xc>
 80064aa:	4770      	bx	lr
 80064ac:	b510      	push	{r4, lr}
 80064ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b6:	4291      	cmp	r1, r2
 80064b8:	d1f9      	bne.n	80064ae <memcpy+0xe>
 80064ba:	bd10      	pop	{r4, pc}

080064bc <__assert_func>:
 80064bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064be:	4614      	mov	r4, r2
 80064c0:	461a      	mov	r2, r3
 80064c2:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <__assert_func+0x2c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4605      	mov	r5, r0
 80064c8:	68d8      	ldr	r0, [r3, #12]
 80064ca:	b14c      	cbz	r4, 80064e0 <__assert_func+0x24>
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <__assert_func+0x30>)
 80064ce:	9100      	str	r1, [sp, #0]
 80064d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064d4:	4906      	ldr	r1, [pc, #24]	; (80064f0 <__assert_func+0x34>)
 80064d6:	462b      	mov	r3, r5
 80064d8:	f000 f844 	bl	8006564 <fiprintf>
 80064dc:	f000 f8d8 	bl	8006690 <abort>
 80064e0:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <__assert_func+0x38>)
 80064e2:	461c      	mov	r4, r3
 80064e4:	e7f3      	b.n	80064ce <__assert_func+0x12>
 80064e6:	bf00      	nop
 80064e8:	20000064 	.word	0x20000064
 80064ec:	080069cf 	.word	0x080069cf
 80064f0:	080069dc 	.word	0x080069dc
 80064f4:	08006a0a 	.word	0x08006a0a

080064f8 <_calloc_r>:
 80064f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064fa:	fba1 2402 	umull	r2, r4, r1, r2
 80064fe:	b94c      	cbnz	r4, 8006514 <_calloc_r+0x1c>
 8006500:	4611      	mov	r1, r2
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	f7ff f9a6 	bl	8005854 <_malloc_r>
 8006508:	9a01      	ldr	r2, [sp, #4]
 800650a:	4605      	mov	r5, r0
 800650c:	b930      	cbnz	r0, 800651c <_calloc_r+0x24>
 800650e:	4628      	mov	r0, r5
 8006510:	b003      	add	sp, #12
 8006512:	bd30      	pop	{r4, r5, pc}
 8006514:	220c      	movs	r2, #12
 8006516:	6002      	str	r2, [r0, #0]
 8006518:	2500      	movs	r5, #0
 800651a:	e7f8      	b.n	800650e <_calloc_r+0x16>
 800651c:	4621      	mov	r1, r4
 800651e:	f7fe fa2a 	bl	8004976 <memset>
 8006522:	e7f4      	b.n	800650e <_calloc_r+0x16>

08006524 <__ascii_mbtowc>:
 8006524:	b082      	sub	sp, #8
 8006526:	b901      	cbnz	r1, 800652a <__ascii_mbtowc+0x6>
 8006528:	a901      	add	r1, sp, #4
 800652a:	b142      	cbz	r2, 800653e <__ascii_mbtowc+0x1a>
 800652c:	b14b      	cbz	r3, 8006542 <__ascii_mbtowc+0x1e>
 800652e:	7813      	ldrb	r3, [r2, #0]
 8006530:	600b      	str	r3, [r1, #0]
 8006532:	7812      	ldrb	r2, [r2, #0]
 8006534:	1e10      	subs	r0, r2, #0
 8006536:	bf18      	it	ne
 8006538:	2001      	movne	r0, #1
 800653a:	b002      	add	sp, #8
 800653c:	4770      	bx	lr
 800653e:	4610      	mov	r0, r2
 8006540:	e7fb      	b.n	800653a <__ascii_mbtowc+0x16>
 8006542:	f06f 0001 	mvn.w	r0, #1
 8006546:	e7f8      	b.n	800653a <__ascii_mbtowc+0x16>

08006548 <__ascii_wctomb>:
 8006548:	b149      	cbz	r1, 800655e <__ascii_wctomb+0x16>
 800654a:	2aff      	cmp	r2, #255	; 0xff
 800654c:	bf85      	ittet	hi
 800654e:	238a      	movhi	r3, #138	; 0x8a
 8006550:	6003      	strhi	r3, [r0, #0]
 8006552:	700a      	strbls	r2, [r1, #0]
 8006554:	f04f 30ff 	movhi.w	r0, #4294967295
 8006558:	bf98      	it	ls
 800655a:	2001      	movls	r0, #1
 800655c:	4770      	bx	lr
 800655e:	4608      	mov	r0, r1
 8006560:	4770      	bx	lr
	...

08006564 <fiprintf>:
 8006564:	b40e      	push	{r1, r2, r3}
 8006566:	b503      	push	{r0, r1, lr}
 8006568:	4601      	mov	r1, r0
 800656a:	ab03      	add	r3, sp, #12
 800656c:	4805      	ldr	r0, [pc, #20]	; (8006584 <fiprintf+0x20>)
 800656e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006572:	6800      	ldr	r0, [r0, #0]
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	f7ff fd9f 	bl	80060b8 <_vfiprintf_r>
 800657a:	b002      	add	sp, #8
 800657c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006580:	b003      	add	sp, #12
 8006582:	4770      	bx	lr
 8006584:	20000064 	.word	0x20000064

08006588 <__swhatbuf_r>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	460c      	mov	r4, r1
 800658c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006590:	2900      	cmp	r1, #0
 8006592:	b096      	sub	sp, #88	; 0x58
 8006594:	4615      	mov	r5, r2
 8006596:	461e      	mov	r6, r3
 8006598:	da0d      	bge.n	80065b6 <__swhatbuf_r+0x2e>
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065a0:	f04f 0100 	mov.w	r1, #0
 80065a4:	bf0c      	ite	eq
 80065a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80065aa:	2340      	movne	r3, #64	; 0x40
 80065ac:	2000      	movs	r0, #0
 80065ae:	6031      	str	r1, [r6, #0]
 80065b0:	602b      	str	r3, [r5, #0]
 80065b2:	b016      	add	sp, #88	; 0x58
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
 80065b6:	466a      	mov	r2, sp
 80065b8:	f000 f848 	bl	800664c <_fstat_r>
 80065bc:	2800      	cmp	r0, #0
 80065be:	dbec      	blt.n	800659a <__swhatbuf_r+0x12>
 80065c0:	9901      	ldr	r1, [sp, #4]
 80065c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80065c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80065ca:	4259      	negs	r1, r3
 80065cc:	4159      	adcs	r1, r3
 80065ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d2:	e7eb      	b.n	80065ac <__swhatbuf_r+0x24>

080065d4 <__smakebuf_r>:
 80065d4:	898b      	ldrh	r3, [r1, #12]
 80065d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065d8:	079d      	lsls	r5, r3, #30
 80065da:	4606      	mov	r6, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	d507      	bpl.n	80065f0 <__smakebuf_r+0x1c>
 80065e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	2301      	movs	r3, #1
 80065ea:	6163      	str	r3, [r4, #20]
 80065ec:	b002      	add	sp, #8
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	ab01      	add	r3, sp, #4
 80065f2:	466a      	mov	r2, sp
 80065f4:	f7ff ffc8 	bl	8006588 <__swhatbuf_r>
 80065f8:	9900      	ldr	r1, [sp, #0]
 80065fa:	4605      	mov	r5, r0
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7ff f929 	bl	8005854 <_malloc_r>
 8006602:	b948      	cbnz	r0, 8006618 <__smakebuf_r+0x44>
 8006604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006608:	059a      	lsls	r2, r3, #22
 800660a:	d4ef      	bmi.n	80065ec <__smakebuf_r+0x18>
 800660c:	f023 0303 	bic.w	r3, r3, #3
 8006610:	f043 0302 	orr.w	r3, r3, #2
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	e7e3      	b.n	80065e0 <__smakebuf_r+0xc>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	6020      	str	r0, [r4, #0]
 800661c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006620:	81a3      	strh	r3, [r4, #12]
 8006622:	9b00      	ldr	r3, [sp, #0]
 8006624:	6163      	str	r3, [r4, #20]
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	6120      	str	r0, [r4, #16]
 800662a:	b15b      	cbz	r3, 8006644 <__smakebuf_r+0x70>
 800662c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006630:	4630      	mov	r0, r6
 8006632:	f000 f81d 	bl	8006670 <_isatty_r>
 8006636:	b128      	cbz	r0, 8006644 <__smakebuf_r+0x70>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	431d      	orrs	r5, r3
 8006648:	81a5      	strh	r5, [r4, #12]
 800664a:	e7cf      	b.n	80065ec <__smakebuf_r+0x18>

0800664c <_fstat_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_fstat_r+0x20>)
 8006650:	2300      	movs	r3, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f7fa fe16 	bl	800128a <_fstat>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d102      	bne.n	8006668 <_fstat_r+0x1c>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	b103      	cbz	r3, 8006668 <_fstat_r+0x1c>
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	bd38      	pop	{r3, r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	200003bc 	.word	0x200003bc

08006670 <_isatty_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d06      	ldr	r5, [pc, #24]	; (800668c <_isatty_r+0x1c>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fa fe15 	bl	80012aa <_isatty>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_isatty_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_isatty_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	200003bc 	.word	0x200003bc

08006690 <abort>:
 8006690:	b508      	push	{r3, lr}
 8006692:	2006      	movs	r0, #6
 8006694:	f000 f82c 	bl	80066f0 <raise>
 8006698:	2001      	movs	r0, #1
 800669a:	f7fa fda7 	bl	80011ec <_exit>

0800669e <_raise_r>:
 800669e:	291f      	cmp	r1, #31
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4604      	mov	r4, r0
 80066a4:	460d      	mov	r5, r1
 80066a6:	d904      	bls.n	80066b2 <_raise_r+0x14>
 80066a8:	2316      	movs	r3, #22
 80066aa:	6003      	str	r3, [r0, #0]
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	bd38      	pop	{r3, r4, r5, pc}
 80066b2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80066b4:	b112      	cbz	r2, 80066bc <_raise_r+0x1e>
 80066b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066ba:	b94b      	cbnz	r3, 80066d0 <_raise_r+0x32>
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 f831 	bl	8006724 <_getpid_r>
 80066c2:	462a      	mov	r2, r5
 80066c4:	4601      	mov	r1, r0
 80066c6:	4620      	mov	r0, r4
 80066c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066cc:	f000 b818 	b.w	8006700 <_kill_r>
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d00a      	beq.n	80066ea <_raise_r+0x4c>
 80066d4:	1c59      	adds	r1, r3, #1
 80066d6:	d103      	bne.n	80066e0 <_raise_r+0x42>
 80066d8:	2316      	movs	r3, #22
 80066da:	6003      	str	r3, [r0, #0]
 80066dc:	2001      	movs	r0, #1
 80066de:	e7e7      	b.n	80066b0 <_raise_r+0x12>
 80066e0:	2400      	movs	r4, #0
 80066e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066e6:	4628      	mov	r0, r5
 80066e8:	4798      	blx	r3
 80066ea:	2000      	movs	r0, #0
 80066ec:	e7e0      	b.n	80066b0 <_raise_r+0x12>
	...

080066f0 <raise>:
 80066f0:	4b02      	ldr	r3, [pc, #8]	; (80066fc <raise+0xc>)
 80066f2:	4601      	mov	r1, r0
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f7ff bfd2 	b.w	800669e <_raise_r>
 80066fa:	bf00      	nop
 80066fc:	20000064 	.word	0x20000064

08006700 <_kill_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d07      	ldr	r5, [pc, #28]	; (8006720 <_kill_r+0x20>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	4611      	mov	r1, r2
 800670c:	602b      	str	r3, [r5, #0]
 800670e:	f7fa fd5d 	bl	80011cc <_kill>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d102      	bne.n	800671c <_kill_r+0x1c>
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	b103      	cbz	r3, 800671c <_kill_r+0x1c>
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	bd38      	pop	{r3, r4, r5, pc}
 800671e:	bf00      	nop
 8006720:	200003bc 	.word	0x200003bc

08006724 <_getpid_r>:
 8006724:	f7fa bd4a 	b.w	80011bc <_getpid>

08006728 <_init>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr

08006734 <_fini>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	bf00      	nop
 8006738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673a:	bc08      	pop	{r3}
 800673c:	469e      	mov	lr, r3
 800673e:	4770      	bx	lr
