
UART_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08006878  08006878  00016878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c7c  08006c7c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001d4  08006e58  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08006e58  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae35  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a1f  00000000  00000000  0002b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002caa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072d  00000000  00000000  0002d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026618  00000000  00000000  0002db3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b66a  00000000  00000000  00054155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9541  00000000  00000000  0005f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000368c  00000000  00000000  00148d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014c38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800685c 	.word	0x0800685c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800685c 	.word	0x0800685c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if(ch=='\n')
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0a      	cmp	r3, #10
 8000eb0:	d109      	bne.n	8000ec6 <__io_putchar+0x22>
	{
		uint8_t ch2='\r';	//to fix end of line
 8000eb2:	230d      	movs	r3, #13
 8000eb4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 8000eb6:	f107 010f 	add.w	r1, r7, #15
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <__io_putchar+0x3c>)
 8000ec2:	f002 f92f 	bl	8003124 <HAL_UART_Transmit>
	}
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ec6:	1d39      	adds	r1, r7, #4
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <__io_putchar+0x3c>)
 8000ed0:	f002 f928 	bl	8003124 <HAL_UART_Transmit>
    return 1;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001f0 	.word	0x200001f0

08000ee4 <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b0d      	cmp	r3, #13
 8000ef2:	d002      	beq.n	8000efa <line_append+0x16>
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b0a      	cmp	r3, #10
 8000ef8:	d113      	bne.n	8000f22 <line_append+0x3e>
		if (line_length > 0) {
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <line_append+0x88>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d030      	beq.n	8000f64 <line_append+0x80>
			line_buffer[line_length] = '\0';
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <line_append+0x88>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1a      	ldr	r2, [pc, #104]	; (8000f70 <line_append+0x8c>)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	54d1      	strb	r1, [r2, r3]
			printf("\n");
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f003 fd27 	bl	8004960 <putchar>
			printf("text: %s\n", line_buffer);
 8000f12:	4917      	ldr	r1, [pc, #92]	; (8000f70 <line_append+0x8c>)
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <line_append+0x90>)
 8000f16:	f003 fd11 	bl	800493c <iprintf>
			line_length = 0;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <line_append+0x88>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 8000f20:	e020      	b.n	8000f64 <line_append+0x80>
		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <line_append+0x88>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b09      	cmp	r3, #9
 8000f28:	d909      	bls.n	8000f3e <line_append+0x5a>
			line_length = 0;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <line_append+0x88>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
			printf("\nbuffor full\n");
 8000f30:	4811      	ldr	r0, [pc, #68]	; (8000f78 <line_append+0x94>)
 8000f32:	f003 fd71 	bl	8004a18 <puts>
			printf("this data will be overwrite: %s\n", line_buffer);
 8000f36:	490e      	ldr	r1, [pc, #56]	; (8000f70 <line_append+0x8c>)
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <line_append+0x98>)
 8000f3a:	f003 fcff 	bl	800493c <iprintf>
		}

		line_buffer[line_length++] = value;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <line_append+0x88>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	4909      	ldr	r1, [pc, #36]	; (8000f6c <line_append+0x88>)
 8000f46:	600a      	str	r2, [r1, #0]
 8000f48:	4909      	ldr	r1, [pc, #36]	; (8000f70 <line_append+0x8c>)
 8000f4a:	79fa      	ldrb	r2, [r7, #7]
 8000f4c:	54ca      	strb	r2, [r1, r3]
		printf("%c", value);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fd05 	bl	8004960 <putchar>
		fflush(stdout);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <line_append+0x9c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fc17 	bl	8004790 <fflush>

	}
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000284 	.word	0x20000284
 8000f70:	20000278 	.word	0x20000278
 8000f74:	08006878 	.word	0x08006878
 8000f78:	08006884 	.word	0x08006884
 8000f7c:	08006894 	.word	0x08006894
 8000f80:	20000064 	.word	0x20000064

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f000 fa58 	bl	800143e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f817 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 f88b 	bl	80010ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f96:	f000 f859 	bl	800104c <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  uint8_t value;

	 text = HAL_UART_Receive(&huart2, &value, 1, 0);//2000ms
 8000f9a:	1db9      	adds	r1, r7, #6
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <main+0x38>)
 8000fa2:	f002 f949 	bl	8003238 <HAL_UART_Receive>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	 if(text==HAL_OK)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f4      	bne.n	8000f9a <main+0x16>
	 {
		 line_append(value);
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff96 	bl	8000ee4 <line_append>
  {
 8000fb8:	e7ef      	b.n	8000f9a <main+0x16>
 8000fba:	bf00      	nop
 8000fbc:	200001f0 	.word	0x200001f0

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b096      	sub	sp, #88	; 0x58
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2244      	movs	r2, #68	; 0x44
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fe02 	bl	8004bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fe2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fe6:	f000 fd3d 	bl	8001a64 <HAL_PWREx_ControlVoltageScaling>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff0:	f000 f874 	bl	80010dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001000:	2360      	movs	r3, #96	; 0x60
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001004:	2300      	movs	r3, #0
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fd7f 	bl	8001b10 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001018:	f000 f860 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
 800101e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f001 f947 	bl	80022c8 <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001040:	f000 f84c 	bl	80010dc <Error_Handler>
  }
}
 8001044:	bf00      	nop
 8001046:	3758      	adds	r7, #88	; 0x58
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_USART2_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001090:	f001 fffa 	bl	8003088 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f000 f81f 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001f0 	.word	0x200001f0
 80010a8:	40004400 	.word	0x40004400

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_GPIO_Init+0x2c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <MX_GPIO_Init+0x2c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_GPIO_Init+0x2c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <Error_Handler+0x8>
	...

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_MspInit+0x44>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_MspInit+0x44>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6613      	str	r3, [r2, #96]	; 0x60
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_MspInit+0x44>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_MspInit+0x44>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_MspInit+0x44>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6593      	str	r3, [r2, #88]	; 0x58
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_MspInit+0x44>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ac      	sub	sp, #176	; 0xb0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2288      	movs	r2, #136	; 0x88
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fd41 	bl	8004bd8 <memset>
  if(huart->Instance==USART2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <HAL_UART_MspInit+0xb0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d13b      	bne.n	80011d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001164:	2300      	movs	r3, #0
 8001166:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f001 facf 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001178:	f7ff ffb0 	bl	80010dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_UART_MspInit+0xb4>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_UART_MspInit+0xb4>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001186:	6593      	str	r3, [r2, #88]	; 0x58
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_UART_MspInit+0xb4>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_UART_MspInit+0xb4>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <HAL_UART_MspInit+0xb4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_UART_MspInit+0xb4>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ac:	230c      	movs	r3, #12
 80011ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c4:	2307      	movs	r3, #7
 80011c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f000 fa8e 	bl	80016f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	37b0      	adds	r7, #176	; 0xb0
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40004400 	.word	0x40004400
 80011e4:	40021000 	.word	0x40021000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f958 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return 1;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_kill>:

int _kill(int pid, int sig)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001256:	f003 fd11 	bl	8004c7c <__errno>
 800125a:	4603      	mov	r3, r0
 800125c:	2216      	movs	r2, #22
 800125e:	601a      	str	r2, [r3, #0]
  return -1;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_exit>:

void _exit (int status)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffe7 	bl	800124c <_kill>
  while (1) {}    /* Make sure we hang here */
 800127e:	e7fe      	b.n	800127e <_exit+0x12>

08001280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e00a      	b.n	80012a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001292:	f3af 8000 	nop.w
 8001296:	4601      	mov	r1, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf0      	blt.n	8001292 <_read+0x12>
  }

  return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e009      	b.n	80012e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fde5 	bl	8000ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf1      	blt.n	80012cc <_write+0x12>
  }
  return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_close>:

int _close(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131a:	605a      	str	r2, [r3, #4]
  return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_isatty>:

int _isatty(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f003 fc76 	bl	8004c7c <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20018000 	.word	0x20018000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	20000288 	.word	0x20000288
 80013c4:	200003e0 	.word	0x200003e0

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001424 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f0:	f7ff ffea 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <LoopForever+0x6>)
  ldr r1, =_edata
 80013f6:	490d      	ldr	r1, [pc, #52]	; (800142c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <LoopForever+0xe>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800140c:	4c0a      	ldr	r4, [pc, #40]	; (8001438 <LoopForever+0x16>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141a:	f003 fc35 	bl	8004c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141e:	f7ff fdb1 	bl	8000f84 <main>

08001422 <LoopForever>:

LoopForever:
    b LoopForever
 8001422:	e7fe      	b.n	8001422 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001424:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001430:	08006c84 	.word	0x08006c84
  ldr r2, =_sbss
 8001434:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001438:	200003dc 	.word	0x200003dc

0800143c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>

0800143e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f91f 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144e:	200f      	movs	r0, #15
 8001450:	f000 f80e 	bl	8001470 <HAL_InitTick>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	e001      	b.n	8001464 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001460:	f7ff fe42 	bl	80010e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001464:	79fb      	ldrb	r3, [r7, #7]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_InitTick+0x6c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d023      	beq.n	80014cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_InitTick+0x70>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_InitTick+0x6c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f91d 	bl	80016da <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d809      	bhi.n	80014c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f8f5 	bl	80016a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_InitTick+0x74>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e007      	b.n	80014d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e004      	b.n	80014d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e001      	b.n	80014d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	2000028c 	.word	0x2000028c

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	2000028c 	.word	0x2000028c

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff47 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff5c 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffb0 	bl	8001648 <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e17f      	b.n	8001a04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8171 	beq.w	80019fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d005      	beq.n	8001734 <HAL_GPIO_Init+0x40>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d130      	bne.n	8001796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176a:	2201      	movs	r2, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 0201 	and.w	r2, r3, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d118      	bne.n	80017d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80ac 	beq.w	80019fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_GPIO_Init+0x330>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018aa:	4a5e      	ldr	r2, [pc, #376]	; (8001a24 <HAL_GPIO_Init+0x330>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6613      	str	r3, [r2, #96]	; 0x60
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <HAL_GPIO_Init+0x330>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018be:	4a5a      	ldr	r2, [pc, #360]	; (8001a28 <HAL_GPIO_Init+0x334>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x242>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4f      	ldr	r2, [pc, #316]	; (8001a2c <HAL_GPIO_Init+0x338>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x23e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_GPIO_Init+0x33c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x23a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_GPIO_Init+0x340>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x236>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <HAL_GPIO_Init+0x344>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x232>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <HAL_GPIO_Init+0x348>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x22e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4a      	ldr	r2, [pc, #296]	; (8001a40 <HAL_GPIO_Init+0x34c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x22a>
 800191a:	2306      	movs	r3, #6
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_Init+0x244>
 800191e:	2307      	movs	r3, #7
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_Init+0x244>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_Init+0x244>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x244>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_Init+0x244>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x244>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x244>
 8001936:	2300      	movs	r3, #0
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	4093      	lsls	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001948:	4937      	ldr	r1, [pc, #220]	; (8001a28 <HAL_GPIO_Init+0x334>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_GPIO_Init+0x350>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_GPIO_Init+0x350>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_GPIO_Init+0x350>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a4:	4a27      	ldr	r2, [pc, #156]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f47f ae78 	bne.w	8001704 <HAL_GPIO_Init+0x10>
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	48000800 	.word	0x48000800
 8001a34:	48000c00 	.word	0x48000c00
 8001a38:	48001000 	.word	0x48001000
 8001a3c:	48001400 	.word	0x48001400
 8001a40:	48001800 	.word	0x48001800
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40007000 	.word	0x40007000

08001a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a72:	d130      	bne.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	d038      	beq.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2232      	movs	r2, #50	; 0x32
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa8:	e002      	b.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abc:	d102      	bne.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f2      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad0:	d110      	bne.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e00f      	b.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae2:	d007      	beq.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aec:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40007000 	.word	0x40007000
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e3ca      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b97      	ldr	r3, [pc, #604]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2c:	4b94      	ldr	r3, [pc, #592]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80e4 	beq.w	8001d0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_RCC_OscConfig+0x4a>
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	f040 808b 	bne.w	8001c68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	f040 8087 	bne.w	8001c68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b5a:	4b89      	ldr	r3, [pc, #548]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x62>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e3a2      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1a      	ldr	r2, [r3, #32]
 8001b76:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_RCC_OscConfig+0x7c>
 8001b82:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8a:	e005      	b.n	8001b98 <HAL_RCC_OscConfig+0x88>
 8001b8c:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d223      	bcs.n	8001be4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fd55 	bl	8002650 <RCC_SetFlashLatencyFromMSIRange>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e383      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb0:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a72      	ldr	r2, [pc, #456]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	496d      	ldr	r1, [pc, #436]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bce:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	4968      	ldr	r1, [pc, #416]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	e025      	b.n	8001c30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be4:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a65      	ldr	r2, [pc, #404]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4960      	ldr	r1, [pc, #384]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c02:	4b5f      	ldr	r3, [pc, #380]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	495b      	ldr	r1, [pc, #364]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fd15 	bl	8002650 <RCC_SetFlashLatencyFromMSIRange>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e343      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c30:	f000 fc4a 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b52      	ldr	r3, [pc, #328]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	4950      	ldr	r1, [pc, #320]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <HAL_RCC_OscConfig+0x278>)
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c50:	4b4e      	ldr	r3, [pc, #312]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fc0b 	bl	8001470 <HAL_InitTick>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d052      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	e327      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d032      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a42      	ldr	r2, [pc, #264]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fc48 	bl	8001510 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c84:	f7ff fc44 	bl	8001510 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e310      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4931      	ldr	r1, [pc, #196]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	492c      	ldr	r1, [pc, #176]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e01a      	b.n	8001d0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fc15 	bl	8001510 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cea:	f7ff fc11 	bl	8001510 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e2dd      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x1da>
 8001d08:	e000      	b.n	8001d0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d074      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x21a>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d10e      	bne.n	8001d42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d064      	beq.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d160      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e2ba      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x24a>
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e026      	b.n	8001da8 <HAL_RCC_OscConfig+0x298>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d62:	d115      	bne.n	8001d90 <HAL_RCC_OscConfig+0x280>
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a02      	ldr	r2, [pc, #8]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e014      	b.n	8001da8 <HAL_RCC_OscConfig+0x298>
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080068b8 	.word	0x080068b8
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	4ba0      	ldr	r3, [pc, #640]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a9f      	ldr	r2, [pc, #636]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b9d      	ldr	r3, [pc, #628]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a9c      	ldr	r2, [pc, #624]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff fbae 	bl	8001510 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fbaa 	bl	8001510 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e276      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dca:	4b92      	ldr	r3, [pc, #584]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x2a8>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fb9a 	bl	8001510 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fb96 	bl	8001510 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e262      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df2:	4b88      	ldr	r3, [pc, #544]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2d0>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d060      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_OscConfig+0x310>
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d119      	bne.n	8001e4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d116      	bne.n	8001e4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e20:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_OscConfig+0x328>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e23f      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	4973      	ldr	r1, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4c:	e040      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d023      	beq.n	8001e9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e56:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff fb55 	bl	8001510 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fb51 	bl	8001510 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e21d      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7c:	4b65      	ldr	r3, [pc, #404]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b62      	ldr	r3, [pc, #392]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	495f      	ldr	r1, [pc, #380]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
 8001e9c:	e018      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a5c      	ldr	r2, [pc, #368]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fb31 	bl	8001510 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fb2d 	bl	8001510 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1f9      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eea:	4a4a      	ldr	r2, [pc, #296]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fb0c 	bl	8001510 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efc:	f7ff fb08 	bl	8001510 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e1d4      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ef      	beq.n	8001efc <HAL_RCC_OscConfig+0x3ec>
 8001f1c:	e01b      	b.n	8001f56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f24:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff faef 	bl	8001510 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff faeb 	bl	8001510 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1b7      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f48:	4b32      	ldr	r3, [pc, #200]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ef      	bne.n	8001f36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a6 	beq.w	80020b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_RCC_OscConfig+0x508>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d118      	bne.n	8001fce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_RCC_OscConfig+0x508>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x508>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fab2 	bl	8001510 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7ff faae 	bl	8001510 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e17a      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_RCC_OscConfig+0x508>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4d8>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe6:	e029      	b.n	800203c <HAL_RCC_OscConfig+0x52c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d115      	bne.n	800201c <HAL_RCC_OscConfig+0x50c>
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_RCC_OscConfig+0x504>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002010:	e014      	b.n	800203c <HAL_RCC_OscConfig+0x52c>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	4b9c      	ldr	r3, [pc, #624]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	4a9b      	ldr	r2, [pc, #620]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800202c:	4b98      	ldr	r3, [pc, #608]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	4a97      	ldr	r2, [pc, #604]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d016      	beq.n	8002072 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff fa64 	bl	8001510 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7ff fa60 	bl	8001510 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e12a      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ed      	beq.n	800204c <HAL_RCC_OscConfig+0x53c>
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff fa4d 	bl	8001510 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff fa49 	bl	8001510 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e113      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002090:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ed      	bne.n	800207a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a79      	ldr	r2, [pc, #484]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 80020aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80fe 	beq.w	80022b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	2b02      	cmp	r3, #2
 80020c0:	f040 80d0 	bne.w	8002264 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020c4:	4b72      	ldr	r3, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d130      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	3b01      	subs	r3, #1
 80020e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d127      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d11f      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002104:	2a07      	cmp	r2, #7
 8002106:	bf14      	ite	ne
 8002108:	2201      	movne	r2, #1
 800210a:	2200      	moveq	r2, #0
 800210c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210e:	4293      	cmp	r3, r2
 8002110:	d113      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	3b01      	subs	r3, #1
 8002120:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d109      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	3b01      	subs	r3, #1
 8002134:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d06e      	beq.n	8002218 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b0c      	cmp	r3, #12
 800213e:	d069      	beq.n	8002214 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0ad      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a4b      	ldr	r2, [pc, #300]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002166:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002168:	f7ff f9d2 	bl	8001510 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f9ce 	bl	8001510 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e09a      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218e:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	4b40      	ldr	r3, [pc, #256]	; (8002294 <HAL_RCC_OscConfig+0x784>)
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	3a01      	subs	r2, #1
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021a8:	0212      	lsls	r2, r2, #8
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021b0:	0852      	lsrs	r2, r2, #1
 80021b2:	3a01      	subs	r2, #1
 80021b4:	0552      	lsls	r2, r2, #21
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021bc:	0852      	lsrs	r2, r2, #1
 80021be:	3a01      	subs	r2, #1
 80021c0:	0652      	lsls	r2, r2, #25
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021c8:	0912      	lsrs	r2, r2, #4
 80021ca:	0452      	lsls	r2, r2, #17
 80021cc:	430a      	orrs	r2, r1
 80021ce:	4930      	ldr	r1, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ec:	f7ff f990 	bl	8001510 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f98c 	bl	8001510 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e058      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002212:	e050      	b.n	80022b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e04f      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d148      	bne.n	80022b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a16      	ldr	r2, [pc, #88]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800223c:	f7ff f968 	bl	8001510 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff f964 	bl	8001510 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e030      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x734>
 8002262:	e028      	b.n	80022b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d023      	beq.n	80022b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_RCC_OscConfig+0x780>)
 8002270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff f94b 	bl	8001510 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227c:	e00c      	b.n	8002298 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff f947 	bl	8001510 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d905      	bls.n	8002298 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e013      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
 8002290:	40021000 	.word	0x40021000
 8002294:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x7b0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ec      	bne.n	800227e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x7b0>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4905      	ldr	r1, [pc, #20]	; (80022c0 <HAL_RCC_OscConfig+0x7b0>)
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_OscConfig+0x7b4>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
 80022b0:	e001      	b.n	80022b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	feeefffc 	.word	0xfeeefffc

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0e7      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b75      	ldr	r3, [pc, #468]	; (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d910      	bls.n	800230c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	4970      	ldr	r1, [pc, #448]	; (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b6e      	ldr	r3, [pc, #440]	; (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0cf      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002324:	429a      	cmp	r2, r3
 8002326:	d908      	bls.n	800233a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4960      	ldr	r1, [pc, #384]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d04c      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	4b5a      	ldr	r3, [pc, #360]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d121      	bne.n	800239e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0a6      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d115      	bne.n	800239e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e09a      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	4b4e      	ldr	r3, [pc, #312]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e08e      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800238e:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e086      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4943      	ldr	r1, [pc, #268]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b0:	f7ff f8ae 	bl	8001510 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7ff f8aa 	bl	8001510 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e06e      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d010      	beq.n	800240e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d208      	bcs.n	800240e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	492b      	ldr	r1, [pc, #172]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d210      	bcs.n	800243e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 0207 	bic.w	r2, r3, #7
 8002424:	4923      	ldr	r1, [pc, #140]	; (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e036      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4918      	ldr	r1, [pc, #96]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4910      	ldr	r1, [pc, #64]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800247c:	f000 f824 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	490b      	ldr	r1, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1f4>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x1f8>)
 800249a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1fc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe ffe5 	bl	8001470 <HAL_InitTick>
 80024a6:	4603      	mov	r3, r0
 80024a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80024aa:	7afb      	ldrb	r3, [r7, #11]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	080068b8 	.word	0x080068b8
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e0:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x34>
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d121      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d11e      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024fc:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002508:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e005      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002524:	4a2b      	ldr	r2, [pc, #172]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d102      	bne.n	8002546 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	e004      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d101      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800254c:	4b23      	ldr	r3, [pc, #140]	; (80025dc <HAL_RCC_GetSysClockFreq+0x114>)
 800254e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d134      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0xa6>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d003      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0xac>
 800256c:	e005      	b.n	800257a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002570:	617b      	str	r3, [r7, #20]
      break;
 8002572:	e005      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002576:	617b      	str	r3, [r7, #20]
      break;
 8002578:	e002      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	617b      	str	r3, [r7, #20]
      break;
 800257e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	3301      	adds	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	fb03 f202 	mul.w	r2, r3, r2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	0e5b      	lsrs	r3, r3, #25
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	3301      	adds	r3, #1
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025c0:	69bb      	ldr	r3, [r7, #24]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	080068d0 	.word	0x080068d0
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200

080025e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000

080025f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025fc:	f7ff fff0 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4904      	ldr	r1, [pc, #16]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x28>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	080068c8 	.word	0x080068c8

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002628:	f7ff ffda 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0adb      	lsrs	r3, r3, #11
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4904      	ldr	r1, [pc, #16]	; (800264c <HAL_RCC_GetPCLK2Freq+0x28>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	080068c8 	.word	0x080068c8

08002650 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002668:	f7ff f9ee 	bl	8001a48 <HAL_PWREx_GetVoltageRange>
 800266c:	6178      	str	r0, [r7, #20]
 800266e:	e014      	b.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a24      	ldr	r2, [pc, #144]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002688:	f7ff f9de 	bl	8001a48 <HAL_PWREx_GetVoltageRange>
 800268c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a0:	d10b      	bne.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d919      	bls.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2ba0      	cmp	r3, #160	; 0xa0
 80026ac:	d902      	bls.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ae:	2302      	movs	r3, #2
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	e013      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026b4:	2301      	movs	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e010      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b80      	cmp	r3, #128	; 0x80
 80026be:	d902      	bls.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026c0:	2303      	movs	r3, #3
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	e00a      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d102      	bne.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026cc:	2302      	movs	r3, #2
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e004      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b70      	cmp	r3, #112	; 0x70
 80026d6:	d101      	bne.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 0207 	bic.w	r2, r3, #7
 80026e4:	4909      	ldr	r1, [pc, #36]	; (800270c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	40022000 	.word	0x40022000

08002710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002718:	2300      	movs	r3, #0
 800271a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800271c:	2300      	movs	r3, #0
 800271e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002728:	2b00      	cmp	r3, #0
 800272a:	d041      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002730:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002734:	d02a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002736:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800273a:	d824      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800273c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002740:	d008      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002742:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002746:	d81e      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800274c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002750:	d010      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002752:	e018      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002754:	4b86      	ldr	r3, [pc, #536]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4a85      	ldr	r2, [pc, #532]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002760:	e015      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fabb 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002772:	e00c      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3320      	adds	r3, #32
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fba6 	bl	8002ecc <RCCEx_PLLSAI2_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002784:	e003      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	74fb      	strb	r3, [r7, #19]
      break;
 800278a:	e000      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800278c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002794:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a2:	4973      	ldr	r1, [pc, #460]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027aa:	e001      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d041      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027c4:	d02a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ca:	d824      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027d6:	d81e      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e0:	d010      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027e2:	e018      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027e4:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a61      	ldr	r2, [pc, #388]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027f0:	e015      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fa73 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002802:	e00c      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3320      	adds	r3, #32
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fb5e 	bl	8002ecc <RCCEx_PLLSAI2_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002814:	e003      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	74fb      	strb	r3, [r7, #19]
      break;
 800281a:	e000      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800281c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002824:	4b52      	ldr	r3, [pc, #328]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002832:	494f      	ldr	r1, [pc, #316]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800283a:	e001      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a0 	beq.w	800298e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	4b41      	ldr	r3, [pc, #260]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	4a40      	ldr	r2, [pc, #256]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002872:	6593      	str	r3, [r2, #88]	; 0x58
 8002874:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002880:	2301      	movs	r3, #1
 8002882:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002884:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3a      	ldr	r2, [pc, #232]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002890:	f7fe fe3e 	bl	8001510 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002896:	e009      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fe3a 	bl	8001510 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	74fb      	strb	r3, [r7, #19]
        break;
 80028aa:	e005      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d15c      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01f      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d019      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002908:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fdf9 	bl	8001510 <HAL_GetTick>
 800291e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002920:	e00b      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe fdf5 	bl	8001510 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d902      	bls.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	74fb      	strb	r3, [r7, #19]
            break;
 8002938:	e006      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ec      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295e:	4904      	ldr	r1, [pc, #16]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002966:	e009      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297c:	7c7b      	ldrb	r3, [r7, #17]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b9e      	ldr	r3, [pc, #632]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	4a9d      	ldr	r2, [pc, #628]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299a:	4b98      	ldr	r3, [pc, #608]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f023 0203 	bic.w	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	4994      	ldr	r1, [pc, #592]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029bc:	4b8f      	ldr	r3, [pc, #572]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 020c 	bic.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	498c      	ldr	r1, [pc, #560]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029de:	4b87      	ldr	r3, [pc, #540]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4983      	ldr	r1, [pc, #524]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a00:	4b7e      	ldr	r3, [pc, #504]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	497b      	ldr	r1, [pc, #492]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a22:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a30:	4972      	ldr	r1, [pc, #456]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a44:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	496a      	ldr	r1, [pc, #424]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a66:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	4961      	ldr	r1, [pc, #388]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a88:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	4959      	ldr	r1, [pc, #356]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aaa:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab8:	4950      	ldr	r1, [pc, #320]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	4948      	ldr	r1, [pc, #288]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	493f      	ldr	r1, [pc, #252]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d028      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b10:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1e:	4937      	ldr	r1, [pc, #220]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a31      	ldr	r2, [pc, #196]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b3a:	60d3      	str	r3, [r2, #12]
 8002b3c:	e011      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f8c8 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	491f      	ldr	r1, [pc, #124]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b98:	60d3      	str	r3, [r2, #12]
 8002b9a:	e011      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f899 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02b      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bea:	d109      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a02      	ldr	r2, [pc, #8]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf6:	60d3      	str	r3, [r2, #12]
 8002bf8:	e014      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f867 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02f      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c3e:	4928      	ldr	r1, [pc, #160]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c4e:	d10d      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	2102      	movs	r1, #2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f844 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	74bb      	strb	r3, [r7, #18]
 8002c6a:	e011      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3320      	adds	r3, #32
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 f925 	bl	8002ecc <RCCEx_PLLSAI2_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002caa:	490d      	ldr	r1, [pc, #52]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cce:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cf2:	4b75      	ldr	r3, [pc, #468]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d018      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cfe:	4b72      	ldr	r3, [pc, #456]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d10d      	bne.n	8002d2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
       ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d16:	4b6c      	ldr	r3, [pc, #432]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
       ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d047      	beq.n	8002dba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e044      	b.n	8002dba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d018      	beq.n	8002d6a <RCCEx_PLLSAI1_Config+0x86>
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d825      	bhi.n	8002d88 <RCCEx_PLLSAI1_Config+0xa4>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d002      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0x62>
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d009      	beq.n	8002d58 <RCCEx_PLLSAI1_Config+0x74>
 8002d44:	e020      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d46:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11d      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d56:	e01a      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d58:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d68:	e013      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d6a:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d76:	4b54      	ldr	r3, [pc, #336]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d86:	e006      	b.n	8002d96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e004      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6819      	ldr	r1, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	430b      	orrs	r3, r1
 8002db4:	4944      	ldr	r1, [pc, #272]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d17d      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a40      	ldr	r2, [pc, #256]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fba0 	bl	8001510 <HAL_GetTick>
 8002dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dd2:	e009      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dd4:	f7fe fb9c 	bl	8001510 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	73fb      	strb	r3, [r7, #15]
        break;
 8002de6:	e005      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002de8:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ef      	bne.n	8002dd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d160      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d111      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	0211      	lsls	r1, r2, #8
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68d2      	ldr	r2, [r2, #12]
 8002e16:	0912      	lsrs	r2, r2, #4
 8002e18:	0452      	lsls	r2, r2, #17
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	492a      	ldr	r1, [pc, #168]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	610b      	str	r3, [r1, #16]
 8002e22:	e027      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d112      	bne.n	8002e50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6892      	ldr	r2, [r2, #8]
 8002e3a:	0211      	lsls	r1, r2, #8
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6912      	ldr	r2, [r2, #16]
 8002e40:	0852      	lsrs	r2, r2, #1
 8002e42:	3a01      	subs	r2, #1
 8002e44:	0552      	lsls	r2, r2, #21
 8002e46:	430a      	orrs	r2, r1
 8002e48:	491f      	ldr	r1, [pc, #124]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	610b      	str	r3, [r1, #16]
 8002e4e:	e011      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6892      	ldr	r2, [r2, #8]
 8002e60:	0211      	lsls	r1, r2, #8
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6952      	ldr	r2, [r2, #20]
 8002e66:	0852      	lsrs	r2, r2, #1
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	0652      	lsls	r2, r2, #25
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	4916      	ldr	r1, [pc, #88]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fb46 	bl	8001510 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e88:	f7fe fb42 	bl	8001510 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
          break;
 8002e9a:	e005      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000

08002ecc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eda:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ee6:	4b67      	ldr	r3, [pc, #412]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0203 	and.w	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d10d      	bne.n	8002f12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
       ||
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002efe:	4b61      	ldr	r3, [pc, #388]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d047      	beq.n	8002fa2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e044      	b.n	8002fa2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d018      	beq.n	8002f52 <RCCEx_PLLSAI2_Config+0x86>
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d825      	bhi.n	8002f70 <RCCEx_PLLSAI2_Config+0xa4>
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d002      	beq.n	8002f2e <RCCEx_PLLSAI2_Config+0x62>
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d009      	beq.n	8002f40 <RCCEx_PLLSAI2_Config+0x74>
 8002f2c:	e020      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f2e:	4b55      	ldr	r3, [pc, #340]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d11d      	bne.n	8002f76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3e:	e01a      	b.n	8002f76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f40:	4b50      	ldr	r3, [pc, #320]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f50:	e013      	b.n	8002f7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f52:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f5e:	4b49      	ldr	r3, [pc, #292]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f6e:	e006      	b.n	8002f7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e004      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	4939      	ldr	r1, [pc, #228]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d167      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fa8:	4b36      	ldr	r3, [pc, #216]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a35      	ldr	r2, [pc, #212]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb4:	f7fe faac 	bl	8001510 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fba:	e009      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fbc:	f7fe faa8 	bl	8001510 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8002fce:	e005      	b.n	8002fdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ef      	bne.n	8002fbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d14a      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d111      	bne.n	800300c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	0211      	lsls	r1, r2, #8
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68d2      	ldr	r2, [r2, #12]
 8002ffe:	0912      	lsrs	r2, r2, #4
 8003000:	0452      	lsls	r2, r2, #17
 8003002:	430a      	orrs	r2, r1
 8003004:	491f      	ldr	r1, [pc, #124]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	614b      	str	r3, [r1, #20]
 800300a:	e011      	b.n	8003030 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003014:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6892      	ldr	r2, [r2, #8]
 800301c:	0211      	lsls	r1, r2, #8
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6912      	ldr	r2, [r2, #16]
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	0652      	lsls	r2, r2, #25
 8003028:	430a      	orrs	r2, r1
 800302a:	4916      	ldr	r1, [pc, #88]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a13      	ldr	r2, [pc, #76]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe fa68 	bl	8001510 <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003042:	e009      	b.n	8003058 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003044:	f7fe fa64 	bl	8001510 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d902      	bls.n	8003058 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	73fb      	strb	r3, [r7, #15]
          break;
 8003056:	e005      	b.n	8003064 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ef      	beq.n	8003044 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4904      	ldr	r1, [pc, #16]	; (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e040      	b.n	800311c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe f840 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fc34 	bl	800393c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f979 	bl	80033cc <UART_SetConfig>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e01b      	b.n	800311c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fcb3 	bl	8003a80 <UART_CheckIdleState>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003138:	2b20      	cmp	r3, #32
 800313a:	d178      	bne.n	800322e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_UART_Transmit+0x24>
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e071      	b.n	8003230 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2221      	movs	r2, #33	; 0x21
 8003158:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315a:	f7fe f9d9 	bl	8001510 <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d108      	bne.n	800318c <HAL_UART_Transmit+0x68>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	e003      	b.n	8003194 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003194:	e030      	b.n	80031f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fd15 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e03c      	b.n	8003230 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	881a      	ldrh	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c8:	b292      	uxth	r2, r2
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3302      	adds	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e008      	b.n	80031e6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	b292      	uxth	r2, r2
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3301      	adds	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1c8      	bne.n	8003196 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2200      	movs	r2, #0
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fcde 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e005      	b.n	8003230 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e000      	b.n	8003230 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
  }
}
 8003230:	4618      	mov	r0, r3
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324e:	2b20      	cmp	r3, #32
 8003250:	f040 80b6 	bne.w	80033c0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_UART_Receive+0x28>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0ae      	b.n	80033c2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2222      	movs	r2, #34	; 0x22
 8003270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327a:	f7fe f949 	bl	8001510 <HAL_GetTick>
 800327e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003298:	d10e      	bne.n	80032b8 <HAL_UART_Receive+0x80>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_UART_Receive+0x76>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032ac:	e02d      	b.n	800330a <HAL_UART_Receive+0xd2>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	22ff      	movs	r2, #255	; 0xff
 80032b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032b6:	e028      	b.n	800330a <HAL_UART_Receive+0xd2>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_UART_Receive+0xa4>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <HAL_UART_Receive+0x9a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	22ff      	movs	r2, #255	; 0xff
 80032cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032d0:	e01b      	b.n	800330a <HAL_UART_Receive+0xd2>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	227f      	movs	r2, #127	; 0x7f
 80032d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032da:	e016      	b.n	800330a <HAL_UART_Receive+0xd2>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032e4:	d10d      	bne.n	8003302 <HAL_UART_Receive+0xca>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <HAL_UART_Receive+0xc0>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	227f      	movs	r2, #127	; 0x7f
 80032f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032f6:	e008      	b.n	800330a <HAL_UART_Receive+0xd2>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	223f      	movs	r2, #63	; 0x3f
 80032fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003300:	e003      	b.n	800330a <HAL_UART_Receive+0xd2>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003310:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d108      	bne.n	800332e <HAL_UART_Receive+0xf6>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	e003      	b.n	8003336 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003336:	e037      	b.n	80033a8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2200      	movs	r2, #0
 8003340:	2120      	movs	r1, #32
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fc44 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e033      	b.n	80033c2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10c      	bne.n	800337a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003366:	b29a      	uxth	r2, r3
 8003368:	8a7b      	ldrh	r3, [r7, #18]
 800336a:	4013      	ands	r3, r2
 800336c:	b29a      	uxth	r2, r3
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	3302      	adds	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e00d      	b.n	8003396 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003380:	b29b      	uxth	r3, r3
 8003382:	b2da      	uxtb	r2, r3
 8003384:	8a7b      	ldrh	r3, [r7, #18]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4013      	ands	r3, r2
 800338a:	b2da      	uxtb	r2, r3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3301      	adds	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1c1      	bne.n	8003338 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b08a      	sub	sp, #40	; 0x28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4ba4      	ldr	r3, [pc, #656]	; (800368c <UART_SetConfig+0x2c0>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003404:	430b      	orrs	r3, r1
 8003406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a99      	ldr	r2, [pc, #612]	; (8003690 <UART_SetConfig+0x2c4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	4313      	orrs	r3, r2
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a90      	ldr	r2, [pc, #576]	; (8003694 <UART_SetConfig+0x2c8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d126      	bne.n	80034a4 <UART_SetConfig+0xd8>
 8003456:	4b90      	ldr	r3, [pc, #576]	; (8003698 <UART_SetConfig+0x2cc>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b03      	cmp	r3, #3
 8003462:	d81b      	bhi.n	800349c <UART_SetConfig+0xd0>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <UART_SetConfig+0xa0>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	0800347d 	.word	0x0800347d
 8003470:	0800348d 	.word	0x0800348d
 8003474:	08003485 	.word	0x08003485
 8003478:	08003495 	.word	0x08003495
 800347c:	2301      	movs	r3, #1
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003482:	e116      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003484:	2302      	movs	r3, #2
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348a:	e112      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800348c:	2304      	movs	r3, #4
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003492:	e10e      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003494:	2308      	movs	r3, #8
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349a:	e10a      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800349c:	2310      	movs	r3, #16
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a2:	e106      	b.n	80036b2 <UART_SetConfig+0x2e6>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a7c      	ldr	r2, [pc, #496]	; (800369c <UART_SetConfig+0x2d0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d138      	bne.n	8003520 <UART_SetConfig+0x154>
 80034ae:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <UART_SetConfig+0x2cc>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	d82d      	bhi.n	8003518 <UART_SetConfig+0x14c>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0xf8>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	08003519 	.word	0x08003519
 80034cc:	08003519 	.word	0x08003519
 80034d0:	08003519 	.word	0x08003519
 80034d4:	08003509 	.word	0x08003509
 80034d8:	08003519 	.word	0x08003519
 80034dc:	08003519 	.word	0x08003519
 80034e0:	08003519 	.word	0x08003519
 80034e4:	08003501 	.word	0x08003501
 80034e8:	08003519 	.word	0x08003519
 80034ec:	08003519 	.word	0x08003519
 80034f0:	08003519 	.word	0x08003519
 80034f4:	08003511 	.word	0x08003511
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fe:	e0d8      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003500:	2302      	movs	r3, #2
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e0d4      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003508:	2304      	movs	r3, #4
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e0d0      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003510:	2308      	movs	r3, #8
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003516:	e0cc      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003518:	2310      	movs	r3, #16
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351e:	e0c8      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a5e      	ldr	r2, [pc, #376]	; (80036a0 <UART_SetConfig+0x2d4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d125      	bne.n	8003576 <UART_SetConfig+0x1aa>
 800352a:	4b5b      	ldr	r3, [pc, #364]	; (8003698 <UART_SetConfig+0x2cc>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003534:	2b30      	cmp	r3, #48	; 0x30
 8003536:	d016      	beq.n	8003566 <UART_SetConfig+0x19a>
 8003538:	2b30      	cmp	r3, #48	; 0x30
 800353a:	d818      	bhi.n	800356e <UART_SetConfig+0x1a2>
 800353c:	2b20      	cmp	r3, #32
 800353e:	d00a      	beq.n	8003556 <UART_SetConfig+0x18a>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d814      	bhi.n	800356e <UART_SetConfig+0x1a2>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <UART_SetConfig+0x182>
 8003548:	2b10      	cmp	r3, #16
 800354a:	d008      	beq.n	800355e <UART_SetConfig+0x192>
 800354c:	e00f      	b.n	800356e <UART_SetConfig+0x1a2>
 800354e:	2300      	movs	r3, #0
 8003550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003554:	e0ad      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003556:	2302      	movs	r3, #2
 8003558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355c:	e0a9      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800355e:	2304      	movs	r3, #4
 8003560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003564:	e0a5      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003566:	2308      	movs	r3, #8
 8003568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356c:	e0a1      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800356e:	2310      	movs	r3, #16
 8003570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003574:	e09d      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <UART_SetConfig+0x2d8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d125      	bne.n	80035cc <UART_SetConfig+0x200>
 8003580:	4b45      	ldr	r3, [pc, #276]	; (8003698 <UART_SetConfig+0x2cc>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800358a:	2bc0      	cmp	r3, #192	; 0xc0
 800358c:	d016      	beq.n	80035bc <UART_SetConfig+0x1f0>
 800358e:	2bc0      	cmp	r3, #192	; 0xc0
 8003590:	d818      	bhi.n	80035c4 <UART_SetConfig+0x1f8>
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d00a      	beq.n	80035ac <UART_SetConfig+0x1e0>
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d814      	bhi.n	80035c4 <UART_SetConfig+0x1f8>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <UART_SetConfig+0x1d8>
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d008      	beq.n	80035b4 <UART_SetConfig+0x1e8>
 80035a2:	e00f      	b.n	80035c4 <UART_SetConfig+0x1f8>
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e082      	b.n	80036b2 <UART_SetConfig+0x2e6>
 80035ac:	2302      	movs	r3, #2
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b2:	e07e      	b.n	80036b2 <UART_SetConfig+0x2e6>
 80035b4:	2304      	movs	r3, #4
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ba:	e07a      	b.n	80036b2 <UART_SetConfig+0x2e6>
 80035bc:	2308      	movs	r3, #8
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c2:	e076      	b.n	80036b2 <UART_SetConfig+0x2e6>
 80035c4:	2310      	movs	r3, #16
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ca:	e072      	b.n	80036b2 <UART_SetConfig+0x2e6>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a35      	ldr	r2, [pc, #212]	; (80036a8 <UART_SetConfig+0x2dc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d12a      	bne.n	800362c <UART_SetConfig+0x260>
 80035d6:	4b30      	ldr	r3, [pc, #192]	; (8003698 <UART_SetConfig+0x2cc>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035e4:	d01a      	beq.n	800361c <UART_SetConfig+0x250>
 80035e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ea:	d81b      	bhi.n	8003624 <UART_SetConfig+0x258>
 80035ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f0:	d00c      	beq.n	800360c <UART_SetConfig+0x240>
 80035f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f6:	d815      	bhi.n	8003624 <UART_SetConfig+0x258>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <UART_SetConfig+0x238>
 80035fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003600:	d008      	beq.n	8003614 <UART_SetConfig+0x248>
 8003602:	e00f      	b.n	8003624 <UART_SetConfig+0x258>
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e052      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800360c:	2302      	movs	r3, #2
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e04e      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003614:	2304      	movs	r3, #4
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e04a      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800361c:	2308      	movs	r3, #8
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e046      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003624:	2310      	movs	r3, #16
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e042      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <UART_SetConfig+0x2c4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d13a      	bne.n	80036ac <UART_SetConfig+0x2e0>
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <UART_SetConfig+0x2cc>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003644:	d01a      	beq.n	800367c <UART_SetConfig+0x2b0>
 8003646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800364a:	d81b      	bhi.n	8003684 <UART_SetConfig+0x2b8>
 800364c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003650:	d00c      	beq.n	800366c <UART_SetConfig+0x2a0>
 8003652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003656:	d815      	bhi.n	8003684 <UART_SetConfig+0x2b8>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <UART_SetConfig+0x298>
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d008      	beq.n	8003674 <UART_SetConfig+0x2a8>
 8003662:	e00f      	b.n	8003684 <UART_SetConfig+0x2b8>
 8003664:	2300      	movs	r3, #0
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366a:	e022      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800366c:	2302      	movs	r3, #2
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003672:	e01e      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003674:	2304      	movs	r3, #4
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e01a      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800367c:	2308      	movs	r3, #8
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e016      	b.n	80036b2 <UART_SetConfig+0x2e6>
 8003684:	2310      	movs	r3, #16
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368a:	e012      	b.n	80036b2 <UART_SetConfig+0x2e6>
 800368c:	efff69f3 	.word	0xefff69f3
 8003690:	40008000 	.word	0x40008000
 8003694:	40013800 	.word	0x40013800
 8003698:	40021000 	.word	0x40021000
 800369c:	40004400 	.word	0x40004400
 80036a0:	40004800 	.word	0x40004800
 80036a4:	40004c00 	.word	0x40004c00
 80036a8:	40005000 	.word	0x40005000
 80036ac:	2310      	movs	r3, #16
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a9f      	ldr	r2, [pc, #636]	; (8003934 <UART_SetConfig+0x568>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d17a      	bne.n	80037b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d824      	bhi.n	800370e <UART_SetConfig+0x342>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <UART_SetConfig+0x300>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036f1 	.word	0x080036f1
 80036d0:	0800370f 	.word	0x0800370f
 80036d4:	080036f9 	.word	0x080036f9
 80036d8:	0800370f 	.word	0x0800370f
 80036dc:	080036ff 	.word	0x080036ff
 80036e0:	0800370f 	.word	0x0800370f
 80036e4:	0800370f 	.word	0x0800370f
 80036e8:	0800370f 	.word	0x0800370f
 80036ec:	08003707 	.word	0x08003707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7fe ff82 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 80036f4:	61f8      	str	r0, [r7, #28]
        break;
 80036f6:	e010      	b.n	800371a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f8:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <UART_SetConfig+0x56c>)
 80036fa:	61fb      	str	r3, [r7, #28]
        break;
 80036fc:	e00d      	b.n	800371a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fe:	f7fe fee3 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8003702:	61f8      	str	r0, [r7, #28]
        break;
 8003704:	e009      	b.n	800371a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370a:	61fb      	str	r3, [r7, #28]
        break;
 800370c:	e005      	b.n	800371a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80fb 	beq.w	8003918 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	429a      	cmp	r2, r3
 8003730:	d305      	bcc.n	800373e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	429a      	cmp	r2, r3
 800373c:	d903      	bls.n	8003746 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003744:	e0e8      	b.n	8003918 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2200      	movs	r2, #0
 800374a:	461c      	mov	r4, r3
 800374c:	4615      	mov	r5, r2
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	022b      	lsls	r3, r5, #8
 8003758:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800375c:	0222      	lsls	r2, r4, #8
 800375e:	68f9      	ldr	r1, [r7, #12]
 8003760:	6849      	ldr	r1, [r1, #4]
 8003762:	0849      	lsrs	r1, r1, #1
 8003764:	2000      	movs	r0, #0
 8003766:	4688      	mov	r8, r1
 8003768:	4681      	mov	r9, r0
 800376a:	eb12 0a08 	adds.w	sl, r2, r8
 800376e:	eb43 0b09 	adc.w	fp, r3, r9
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003780:	4650      	mov	r0, sl
 8003782:	4659      	mov	r1, fp
 8003784:	f7fd fa10 	bl	8000ba8 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4613      	mov	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003796:	d308      	bcc.n	80037aa <UART_SetConfig+0x3de>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800379e:	d204      	bcs.n	80037aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	60da      	str	r2, [r3, #12]
 80037a8:	e0b6      	b.n	8003918 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037b0:	e0b2      	b.n	8003918 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d15e      	bne.n	800387a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d828      	bhi.n	8003816 <UART_SetConfig+0x44a>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <UART_SetConfig+0x400>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	080037f9 	.word	0x080037f9
 80037d4:	08003801 	.word	0x08003801
 80037d8:	08003817 	.word	0x08003817
 80037dc:	08003807 	.word	0x08003807
 80037e0:	08003817 	.word	0x08003817
 80037e4:	08003817 	.word	0x08003817
 80037e8:	08003817 	.word	0x08003817
 80037ec:	0800380f 	.word	0x0800380f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7fe ff02 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 80037f4:	61f8      	str	r0, [r7, #28]
        break;
 80037f6:	e014      	b.n	8003822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f8:	f7fe ff14 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 80037fc:	61f8      	str	r0, [r7, #28]
        break;
 80037fe:	e010      	b.n	8003822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <UART_SetConfig+0x56c>)
 8003802:	61fb      	str	r3, [r7, #28]
        break;
 8003804:	e00d      	b.n	8003822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003806:	f7fe fe5f 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 800380a:	61f8      	str	r0, [r7, #28]
        break;
 800380c:	e009      	b.n	8003822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	61fb      	str	r3, [r7, #28]
        break;
 8003814:	e005      	b.n	8003822 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d077      	beq.n	8003918 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005a      	lsls	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	441a      	add	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b0f      	cmp	r3, #15
 8003842:	d916      	bls.n	8003872 <UART_SetConfig+0x4a6>
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d212      	bcs.n	8003872 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f023 030f 	bic.w	r3, r3, #15
 8003854:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	b29b      	uxth	r3, r3
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	b29a      	uxth	r2, r3
 8003862:	8afb      	ldrh	r3, [r7, #22]
 8003864:	4313      	orrs	r3, r2
 8003866:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	8afa      	ldrh	r2, [r7, #22]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	e052      	b.n	8003918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003878:	e04e      	b.n	8003918 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800387e:	2b08      	cmp	r3, #8
 8003880:	d827      	bhi.n	80038d2 <UART_SetConfig+0x506>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0x4bc>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038ad 	.word	0x080038ad
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038d3 	.word	0x080038d3
 8003898:	080038c3 	.word	0x080038c3
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	080038d3 	.word	0x080038d3
 80038a4:	080038d3 	.word	0x080038d3
 80038a8:	080038cb 	.word	0x080038cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7fe fea4 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 80038b0:	61f8      	str	r0, [r7, #28]
        break;
 80038b2:	e014      	b.n	80038de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7fe feb6 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 80038b8:	61f8      	str	r0, [r7, #28]
        break;
 80038ba:	e010      	b.n	80038de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038bc:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <UART_SetConfig+0x56c>)
 80038be:	61fb      	str	r3, [r7, #28]
        break;
 80038c0:	e00d      	b.n	80038de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c2:	f7fe fe01 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 80038c6:	61f8      	str	r0, [r7, #28]
        break;
 80038c8:	e009      	b.n	80038de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ce:	61fb      	str	r3, [r7, #28]
        break;
 80038d0:	e005      	b.n	80038de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038dc:	bf00      	nop
    }

    if (pclk != 0U)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d019      	beq.n	8003918 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	085a      	lsrs	r2, r3, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	441a      	add	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	d909      	bls.n	8003912 <UART_SetConfig+0x546>
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d205      	bcs.n	8003912 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e002      	b.n	8003918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003924:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003928:	4618      	mov	r0, r3
 800392a:	3728      	adds	r7, #40	; 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003932:	bf00      	nop
 8003934:	40008000 	.word	0x40008000
 8003938:	00f42400 	.word	0x00f42400

0800393c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3a:	d10a      	bne.n	8003a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b098      	sub	sp, #96	; 0x60
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a90:	f7fd fd3e 	bl	8001510 <HAL_GetTick>
 8003a94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d12e      	bne.n	8003b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aac:	2200      	movs	r2, #0
 8003aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f88c 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d021      	beq.n	8003b02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ade:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e6      	bne.n	8003abe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e062      	b.n	8003bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d149      	bne.n	8003ba4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f856 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d03c      	beq.n	8003ba4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	623b      	str	r3, [r7, #32]
   return(result);
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e6      	bne.n	8003b2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3308      	adds	r3, #8
 8003b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b7c:	61fa      	str	r2, [r7, #28]
 8003b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	69b9      	ldr	r1, [r7, #24]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	617b      	str	r3, [r7, #20]
   return(result);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e5      	bne.n	8003b5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e011      	b.n	8003bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3758      	adds	r7, #88	; 0x58
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be0:	e049      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d045      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fd fc91 	bl	8001510 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e048      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d031      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d110      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2208      	movs	r2, #8
 8003c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f838 	bl	8003c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2208      	movs	r2, #8
 8003c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e029      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c50:	d111      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f81e 	bl	8003c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e00f      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d0a6      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b095      	sub	sp, #84	; 0x54
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e6      	bne.n	8003ca6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3308      	adds	r3, #8
 8003cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d118      	bne.n	8003d46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f023 0310 	bic.w	r3, r3, #16
 8003d28:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6979      	ldr	r1, [r7, #20]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e6      	bne.n	8003d14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d5a:	bf00      	nop
 8003d5c:	3754      	adds	r7, #84	; 0x54
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <__cvt>:
 8003d66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d6a:	ec55 4b10 	vmov	r4, r5, d0
 8003d6e:	2d00      	cmp	r5, #0
 8003d70:	460e      	mov	r6, r1
 8003d72:	4619      	mov	r1, r3
 8003d74:	462b      	mov	r3, r5
 8003d76:	bfbb      	ittet	lt
 8003d78:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d7c:	461d      	movlt	r5, r3
 8003d7e:	2300      	movge	r3, #0
 8003d80:	232d      	movlt	r3, #45	; 0x2d
 8003d82:	700b      	strb	r3, [r1, #0]
 8003d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d86:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d8a:	4691      	mov	r9, r2
 8003d8c:	f023 0820 	bic.w	r8, r3, #32
 8003d90:	bfbc      	itt	lt
 8003d92:	4622      	movlt	r2, r4
 8003d94:	4614      	movlt	r4, r2
 8003d96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d9a:	d005      	beq.n	8003da8 <__cvt+0x42>
 8003d9c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003da0:	d100      	bne.n	8003da4 <__cvt+0x3e>
 8003da2:	3601      	adds	r6, #1
 8003da4:	2102      	movs	r1, #2
 8003da6:	e000      	b.n	8003daa <__cvt+0x44>
 8003da8:	2103      	movs	r1, #3
 8003daa:	ab03      	add	r3, sp, #12
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	ab02      	add	r3, sp, #8
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	ec45 4b10 	vmov	d0, r4, r5
 8003db6:	4653      	mov	r3, sl
 8003db8:	4632      	mov	r2, r6
 8003dba:	f001 f815 	bl	8004de8 <_dtoa_r>
 8003dbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003dc2:	4607      	mov	r7, r0
 8003dc4:	d102      	bne.n	8003dcc <__cvt+0x66>
 8003dc6:	f019 0f01 	tst.w	r9, #1
 8003dca:	d022      	beq.n	8003e12 <__cvt+0xac>
 8003dcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dd0:	eb07 0906 	add.w	r9, r7, r6
 8003dd4:	d110      	bne.n	8003df8 <__cvt+0x92>
 8003dd6:	783b      	ldrb	r3, [r7, #0]
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d10a      	bne.n	8003df2 <__cvt+0x8c>
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2300      	movs	r3, #0
 8003de0:	4620      	mov	r0, r4
 8003de2:	4629      	mov	r1, r5
 8003de4:	f7fc fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 8003de8:	b918      	cbnz	r0, 8003df2 <__cvt+0x8c>
 8003dea:	f1c6 0601 	rsb	r6, r6, #1
 8003dee:	f8ca 6000 	str.w	r6, [sl]
 8003df2:	f8da 3000 	ldr.w	r3, [sl]
 8003df6:	4499      	add	r9, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f7fc fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e04:	b108      	cbz	r0, 8003e0a <__cvt+0xa4>
 8003e06:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e0a:	2230      	movs	r2, #48	; 0x30
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	454b      	cmp	r3, r9
 8003e10:	d307      	bcc.n	8003e22 <__cvt+0xbc>
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e16:	1bdb      	subs	r3, r3, r7
 8003e18:	4638      	mov	r0, r7
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	b004      	add	sp, #16
 8003e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e22:	1c59      	adds	r1, r3, #1
 8003e24:	9103      	str	r1, [sp, #12]
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e7f0      	b.n	8003e0c <__cvt+0xa6>

08003e2a <__exponent>:
 8003e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	bfb8      	it	lt
 8003e32:	4249      	neglt	r1, r1
 8003e34:	f803 2b02 	strb.w	r2, [r3], #2
 8003e38:	bfb4      	ite	lt
 8003e3a:	222d      	movlt	r2, #45	; 0x2d
 8003e3c:	222b      	movge	r2, #43	; 0x2b
 8003e3e:	2909      	cmp	r1, #9
 8003e40:	7042      	strb	r2, [r0, #1]
 8003e42:	dd2a      	ble.n	8003e9a <__exponent+0x70>
 8003e44:	f10d 0207 	add.w	r2, sp, #7
 8003e48:	4617      	mov	r7, r2
 8003e4a:	260a      	movs	r6, #10
 8003e4c:	4694      	mov	ip, r2
 8003e4e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e52:	fb06 1415 	mls	r4, r6, r5, r1
 8003e56:	3430      	adds	r4, #48	; 0x30
 8003e58:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	2c63      	cmp	r4, #99	; 0x63
 8003e60:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e64:	4629      	mov	r1, r5
 8003e66:	dcf1      	bgt.n	8003e4c <__exponent+0x22>
 8003e68:	3130      	adds	r1, #48	; 0x30
 8003e6a:	f1ac 0402 	sub.w	r4, ip, #2
 8003e6e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e72:	1c41      	adds	r1, r0, #1
 8003e74:	4622      	mov	r2, r4
 8003e76:	42ba      	cmp	r2, r7
 8003e78:	d30a      	bcc.n	8003e90 <__exponent+0x66>
 8003e7a:	f10d 0209 	add.w	r2, sp, #9
 8003e7e:	eba2 020c 	sub.w	r2, r2, ip
 8003e82:	42bc      	cmp	r4, r7
 8003e84:	bf88      	it	hi
 8003e86:	2200      	movhi	r2, #0
 8003e88:	4413      	add	r3, r2
 8003e8a:	1a18      	subs	r0, r3, r0
 8003e8c:	b003      	add	sp, #12
 8003e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e90:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003e94:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003e98:	e7ed      	b.n	8003e76 <__exponent+0x4c>
 8003e9a:	2330      	movs	r3, #48	; 0x30
 8003e9c:	3130      	adds	r1, #48	; 0x30
 8003e9e:	7083      	strb	r3, [r0, #2]
 8003ea0:	70c1      	strb	r1, [r0, #3]
 8003ea2:	1d03      	adds	r3, r0, #4
 8003ea4:	e7f1      	b.n	8003e8a <__exponent+0x60>
	...

08003ea8 <_printf_float>:
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	ed2d 8b02 	vpush	{d8}
 8003eb0:	b08d      	sub	sp, #52	; 0x34
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003eb8:	4616      	mov	r6, r2
 8003eba:	461f      	mov	r7, r3
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	f000 fe93 	bl	8004be8 <_localeconv_r>
 8003ec2:	f8d0 a000 	ldr.w	sl, [r0]
 8003ec6:	4650      	mov	r0, sl
 8003ec8:	f7fc f9d2 	bl	8000270 <strlen>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	930a      	str	r3, [sp, #40]	; 0x28
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	9305      	str	r3, [sp, #20]
 8003ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ed8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003edc:	3307      	adds	r3, #7
 8003ede:	f023 0307 	bic.w	r3, r3, #7
 8003ee2:	f103 0208 	add.w	r2, r3, #8
 8003ee6:	f8c8 2000 	str.w	r2, [r8]
 8003eea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003eee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ef2:	9307      	str	r3, [sp, #28]
 8003ef4:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ef8:	ee08 0a10 	vmov	s16, r0
 8003efc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003f00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f04:	4b9e      	ldr	r3, [pc, #632]	; (8004180 <_printf_float+0x2d8>)
 8003f06:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0a:	f7fc fe0f 	bl	8000b2c <__aeabi_dcmpun>
 8003f0e:	bb88      	cbnz	r0, 8003f74 <_printf_float+0xcc>
 8003f10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f14:	4b9a      	ldr	r3, [pc, #616]	; (8004180 <_printf_float+0x2d8>)
 8003f16:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1a:	f7fc fde9 	bl	8000af0 <__aeabi_dcmple>
 8003f1e:	bb48      	cbnz	r0, 8003f74 <_printf_float+0xcc>
 8003f20:	2200      	movs	r2, #0
 8003f22:	2300      	movs	r3, #0
 8003f24:	4640      	mov	r0, r8
 8003f26:	4649      	mov	r1, r9
 8003f28:	f7fc fdd8 	bl	8000adc <__aeabi_dcmplt>
 8003f2c:	b110      	cbz	r0, 8003f34 <_printf_float+0x8c>
 8003f2e:	232d      	movs	r3, #45	; 0x2d
 8003f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f34:	4a93      	ldr	r2, [pc, #588]	; (8004184 <_printf_float+0x2dc>)
 8003f36:	4b94      	ldr	r3, [pc, #592]	; (8004188 <_printf_float+0x2e0>)
 8003f38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f3c:	bf94      	ite	ls
 8003f3e:	4690      	movls	r8, r2
 8003f40:	4698      	movhi	r8, r3
 8003f42:	2303      	movs	r3, #3
 8003f44:	6123      	str	r3, [r4, #16]
 8003f46:	9b05      	ldr	r3, [sp, #20]
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	f04f 0900 	mov.w	r9, #0
 8003f52:	9700      	str	r7, [sp, #0]
 8003f54:	4633      	mov	r3, r6
 8003f56:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 f9da 	bl	8004314 <_printf_common>
 8003f60:	3001      	adds	r0, #1
 8003f62:	f040 8090 	bne.w	8004086 <_printf_float+0x1de>
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6a:	b00d      	add	sp, #52	; 0x34
 8003f6c:	ecbd 8b02 	vpop	{d8}
 8003f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	4640      	mov	r0, r8
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	f7fc fdd6 	bl	8000b2c <__aeabi_dcmpun>
 8003f80:	b140      	cbz	r0, 8003f94 <_printf_float+0xec>
 8003f82:	464b      	mov	r3, r9
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bfbc      	itt	lt
 8003f88:	232d      	movlt	r3, #45	; 0x2d
 8003f8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f8e:	4a7f      	ldr	r2, [pc, #508]	; (800418c <_printf_float+0x2e4>)
 8003f90:	4b7f      	ldr	r3, [pc, #508]	; (8004190 <_printf_float+0x2e8>)
 8003f92:	e7d1      	b.n	8003f38 <_printf_float+0x90>
 8003f94:	6863      	ldr	r3, [r4, #4]
 8003f96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003f9a:	9206      	str	r2, [sp, #24]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	d13f      	bne.n	8004020 <_printf_float+0x178>
 8003fa0:	2306      	movs	r3, #6
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	9b05      	ldr	r3, [sp, #20]
 8003fa6:	6861      	ldr	r1, [r4, #4]
 8003fa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fac:	2300      	movs	r3, #0
 8003fae:	9303      	str	r3, [sp, #12]
 8003fb0:	ab0a      	add	r3, sp, #40	; 0x28
 8003fb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003fb6:	ab09      	add	r3, sp, #36	; 0x24
 8003fb8:	ec49 8b10 	vmov	d0, r8, r9
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	6022      	str	r2, [r4, #0]
 8003fc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f7ff fece 	bl	8003d66 <__cvt>
 8003fca:	9b06      	ldr	r3, [sp, #24]
 8003fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fce:	2b47      	cmp	r3, #71	; 0x47
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	d108      	bne.n	8003fe6 <_printf_float+0x13e>
 8003fd4:	1cc8      	adds	r0, r1, #3
 8003fd6:	db02      	blt.n	8003fde <_printf_float+0x136>
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	4299      	cmp	r1, r3
 8003fdc:	dd41      	ble.n	8004062 <_printf_float+0x1ba>
 8003fde:	f1ab 0302 	sub.w	r3, fp, #2
 8003fe2:	fa5f fb83 	uxtb.w	fp, r3
 8003fe6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fea:	d820      	bhi.n	800402e <_printf_float+0x186>
 8003fec:	3901      	subs	r1, #1
 8003fee:	465a      	mov	r2, fp
 8003ff0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ff4:	9109      	str	r1, [sp, #36]	; 0x24
 8003ff6:	f7ff ff18 	bl	8003e2a <__exponent>
 8003ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ffc:	1813      	adds	r3, r2, r0
 8003ffe:	2a01      	cmp	r2, #1
 8004000:	4681      	mov	r9, r0
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	dc02      	bgt.n	800400c <_printf_float+0x164>
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	07d2      	lsls	r2, r2, #31
 800400a:	d501      	bpl.n	8004010 <_printf_float+0x168>
 800400c:	3301      	adds	r3, #1
 800400e:	6123      	str	r3, [r4, #16]
 8004010:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004014:	2b00      	cmp	r3, #0
 8004016:	d09c      	beq.n	8003f52 <_printf_float+0xaa>
 8004018:	232d      	movs	r3, #45	; 0x2d
 800401a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800401e:	e798      	b.n	8003f52 <_printf_float+0xaa>
 8004020:	9a06      	ldr	r2, [sp, #24]
 8004022:	2a47      	cmp	r2, #71	; 0x47
 8004024:	d1be      	bne.n	8003fa4 <_printf_float+0xfc>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1bc      	bne.n	8003fa4 <_printf_float+0xfc>
 800402a:	2301      	movs	r3, #1
 800402c:	e7b9      	b.n	8003fa2 <_printf_float+0xfa>
 800402e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004032:	d118      	bne.n	8004066 <_printf_float+0x1be>
 8004034:	2900      	cmp	r1, #0
 8004036:	6863      	ldr	r3, [r4, #4]
 8004038:	dd0b      	ble.n	8004052 <_printf_float+0x1aa>
 800403a:	6121      	str	r1, [r4, #16]
 800403c:	b913      	cbnz	r3, 8004044 <_printf_float+0x19c>
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	07d0      	lsls	r0, r2, #31
 8004042:	d502      	bpl.n	800404a <_printf_float+0x1a2>
 8004044:	3301      	adds	r3, #1
 8004046:	440b      	add	r3, r1
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	65a1      	str	r1, [r4, #88]	; 0x58
 800404c:	f04f 0900 	mov.w	r9, #0
 8004050:	e7de      	b.n	8004010 <_printf_float+0x168>
 8004052:	b913      	cbnz	r3, 800405a <_printf_float+0x1b2>
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	07d2      	lsls	r2, r2, #31
 8004058:	d501      	bpl.n	800405e <_printf_float+0x1b6>
 800405a:	3302      	adds	r3, #2
 800405c:	e7f4      	b.n	8004048 <_printf_float+0x1a0>
 800405e:	2301      	movs	r3, #1
 8004060:	e7f2      	b.n	8004048 <_printf_float+0x1a0>
 8004062:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004068:	4299      	cmp	r1, r3
 800406a:	db05      	blt.n	8004078 <_printf_float+0x1d0>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	6121      	str	r1, [r4, #16]
 8004070:	07d8      	lsls	r0, r3, #31
 8004072:	d5ea      	bpl.n	800404a <_printf_float+0x1a2>
 8004074:	1c4b      	adds	r3, r1, #1
 8004076:	e7e7      	b.n	8004048 <_printf_float+0x1a0>
 8004078:	2900      	cmp	r1, #0
 800407a:	bfd4      	ite	le
 800407c:	f1c1 0202 	rsble	r2, r1, #2
 8004080:	2201      	movgt	r2, #1
 8004082:	4413      	add	r3, r2
 8004084:	e7e0      	b.n	8004048 <_printf_float+0x1a0>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	055a      	lsls	r2, r3, #21
 800408a:	d407      	bmi.n	800409c <_printf_float+0x1f4>
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	4642      	mov	r2, r8
 8004090:	4631      	mov	r1, r6
 8004092:	4628      	mov	r0, r5
 8004094:	47b8      	blx	r7
 8004096:	3001      	adds	r0, #1
 8004098:	d12c      	bne.n	80040f4 <_printf_float+0x24c>
 800409a:	e764      	b.n	8003f66 <_printf_float+0xbe>
 800409c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040a0:	f240 80e0 	bls.w	8004264 <_printf_float+0x3bc>
 80040a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040a8:	2200      	movs	r2, #0
 80040aa:	2300      	movs	r3, #0
 80040ac:	f7fc fd0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d034      	beq.n	800411e <_printf_float+0x276>
 80040b4:	4a37      	ldr	r2, [pc, #220]	; (8004194 <_printf_float+0x2ec>)
 80040b6:	2301      	movs	r3, #1
 80040b8:	4631      	mov	r1, r6
 80040ba:	4628      	mov	r0, r5
 80040bc:	47b8      	blx	r7
 80040be:	3001      	adds	r0, #1
 80040c0:	f43f af51 	beq.w	8003f66 <_printf_float+0xbe>
 80040c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040c8:	429a      	cmp	r2, r3
 80040ca:	db02      	blt.n	80040d2 <_printf_float+0x22a>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	07d8      	lsls	r0, r3, #31
 80040d0:	d510      	bpl.n	80040f4 <_printf_float+0x24c>
 80040d2:	ee18 3a10 	vmov	r3, s16
 80040d6:	4652      	mov	r2, sl
 80040d8:	4631      	mov	r1, r6
 80040da:	4628      	mov	r0, r5
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	f43f af41 	beq.w	8003f66 <_printf_float+0xbe>
 80040e4:	f04f 0800 	mov.w	r8, #0
 80040e8:	f104 091a 	add.w	r9, r4, #26
 80040ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ee:	3b01      	subs	r3, #1
 80040f0:	4543      	cmp	r3, r8
 80040f2:	dc09      	bgt.n	8004108 <_printf_float+0x260>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	079b      	lsls	r3, r3, #30
 80040f8:	f100 8107 	bmi.w	800430a <_printf_float+0x462>
 80040fc:	68e0      	ldr	r0, [r4, #12]
 80040fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004100:	4298      	cmp	r0, r3
 8004102:	bfb8      	it	lt
 8004104:	4618      	movlt	r0, r3
 8004106:	e730      	b.n	8003f6a <_printf_float+0xc2>
 8004108:	2301      	movs	r3, #1
 800410a:	464a      	mov	r2, r9
 800410c:	4631      	mov	r1, r6
 800410e:	4628      	mov	r0, r5
 8004110:	47b8      	blx	r7
 8004112:	3001      	adds	r0, #1
 8004114:	f43f af27 	beq.w	8003f66 <_printf_float+0xbe>
 8004118:	f108 0801 	add.w	r8, r8, #1
 800411c:	e7e6      	b.n	80040ec <_printf_float+0x244>
 800411e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004120:	2b00      	cmp	r3, #0
 8004122:	dc39      	bgt.n	8004198 <_printf_float+0x2f0>
 8004124:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <_printf_float+0x2ec>)
 8004126:	2301      	movs	r3, #1
 8004128:	4631      	mov	r1, r6
 800412a:	4628      	mov	r0, r5
 800412c:	47b8      	blx	r7
 800412e:	3001      	adds	r0, #1
 8004130:	f43f af19 	beq.w	8003f66 <_printf_float+0xbe>
 8004134:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004138:	4313      	orrs	r3, r2
 800413a:	d102      	bne.n	8004142 <_printf_float+0x29a>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	07d9      	lsls	r1, r3, #31
 8004140:	d5d8      	bpl.n	80040f4 <_printf_float+0x24c>
 8004142:	ee18 3a10 	vmov	r3, s16
 8004146:	4652      	mov	r2, sl
 8004148:	4631      	mov	r1, r6
 800414a:	4628      	mov	r0, r5
 800414c:	47b8      	blx	r7
 800414e:	3001      	adds	r0, #1
 8004150:	f43f af09 	beq.w	8003f66 <_printf_float+0xbe>
 8004154:	f04f 0900 	mov.w	r9, #0
 8004158:	f104 0a1a 	add.w	sl, r4, #26
 800415c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800415e:	425b      	negs	r3, r3
 8004160:	454b      	cmp	r3, r9
 8004162:	dc01      	bgt.n	8004168 <_printf_float+0x2c0>
 8004164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004166:	e792      	b.n	800408e <_printf_float+0x1e6>
 8004168:	2301      	movs	r3, #1
 800416a:	4652      	mov	r2, sl
 800416c:	4631      	mov	r1, r6
 800416e:	4628      	mov	r0, r5
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f aef7 	beq.w	8003f66 <_printf_float+0xbe>
 8004178:	f109 0901 	add.w	r9, r9, #1
 800417c:	e7ee      	b.n	800415c <_printf_float+0x2b4>
 800417e:	bf00      	nop
 8004180:	7fefffff 	.word	0x7fefffff
 8004184:	08006900 	.word	0x08006900
 8004188:	08006904 	.word	0x08006904
 800418c:	08006908 	.word	0x08006908
 8004190:	0800690c 	.word	0x0800690c
 8004194:	08006910 	.word	0x08006910
 8004198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800419a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800419c:	429a      	cmp	r2, r3
 800419e:	bfa8      	it	ge
 80041a0:	461a      	movge	r2, r3
 80041a2:	2a00      	cmp	r2, #0
 80041a4:	4691      	mov	r9, r2
 80041a6:	dc37      	bgt.n	8004218 <_printf_float+0x370>
 80041a8:	f04f 0b00 	mov.w	fp, #0
 80041ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041b0:	f104 021a 	add.w	r2, r4, #26
 80041b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041b6:	9305      	str	r3, [sp, #20]
 80041b8:	eba3 0309 	sub.w	r3, r3, r9
 80041bc:	455b      	cmp	r3, fp
 80041be:	dc33      	bgt.n	8004228 <_printf_float+0x380>
 80041c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041c4:	429a      	cmp	r2, r3
 80041c6:	db3b      	blt.n	8004240 <_printf_float+0x398>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	07da      	lsls	r2, r3, #31
 80041cc:	d438      	bmi.n	8004240 <_printf_float+0x398>
 80041ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80041d2:	eba2 0903 	sub.w	r9, r2, r3
 80041d6:	9b05      	ldr	r3, [sp, #20]
 80041d8:	1ad2      	subs	r2, r2, r3
 80041da:	4591      	cmp	r9, r2
 80041dc:	bfa8      	it	ge
 80041de:	4691      	movge	r9, r2
 80041e0:	f1b9 0f00 	cmp.w	r9, #0
 80041e4:	dc35      	bgt.n	8004252 <_printf_float+0x3aa>
 80041e6:	f04f 0800 	mov.w	r8, #0
 80041ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041ee:	f104 0a1a 	add.w	sl, r4, #26
 80041f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	eba3 0309 	sub.w	r3, r3, r9
 80041fc:	4543      	cmp	r3, r8
 80041fe:	f77f af79 	ble.w	80040f4 <_printf_float+0x24c>
 8004202:	2301      	movs	r3, #1
 8004204:	4652      	mov	r2, sl
 8004206:	4631      	mov	r1, r6
 8004208:	4628      	mov	r0, r5
 800420a:	47b8      	blx	r7
 800420c:	3001      	adds	r0, #1
 800420e:	f43f aeaa 	beq.w	8003f66 <_printf_float+0xbe>
 8004212:	f108 0801 	add.w	r8, r8, #1
 8004216:	e7ec      	b.n	80041f2 <_printf_float+0x34a>
 8004218:	4613      	mov	r3, r2
 800421a:	4631      	mov	r1, r6
 800421c:	4642      	mov	r2, r8
 800421e:	4628      	mov	r0, r5
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	d1c0      	bne.n	80041a8 <_printf_float+0x300>
 8004226:	e69e      	b.n	8003f66 <_printf_float+0xbe>
 8004228:	2301      	movs	r3, #1
 800422a:	4631      	mov	r1, r6
 800422c:	4628      	mov	r0, r5
 800422e:	9205      	str	r2, [sp, #20]
 8004230:	47b8      	blx	r7
 8004232:	3001      	adds	r0, #1
 8004234:	f43f ae97 	beq.w	8003f66 <_printf_float+0xbe>
 8004238:	9a05      	ldr	r2, [sp, #20]
 800423a:	f10b 0b01 	add.w	fp, fp, #1
 800423e:	e7b9      	b.n	80041b4 <_printf_float+0x30c>
 8004240:	ee18 3a10 	vmov	r3, s16
 8004244:	4652      	mov	r2, sl
 8004246:	4631      	mov	r1, r6
 8004248:	4628      	mov	r0, r5
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	d1be      	bne.n	80041ce <_printf_float+0x326>
 8004250:	e689      	b.n	8003f66 <_printf_float+0xbe>
 8004252:	9a05      	ldr	r2, [sp, #20]
 8004254:	464b      	mov	r3, r9
 8004256:	4442      	add	r2, r8
 8004258:	4631      	mov	r1, r6
 800425a:	4628      	mov	r0, r5
 800425c:	47b8      	blx	r7
 800425e:	3001      	adds	r0, #1
 8004260:	d1c1      	bne.n	80041e6 <_printf_float+0x33e>
 8004262:	e680      	b.n	8003f66 <_printf_float+0xbe>
 8004264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004266:	2a01      	cmp	r2, #1
 8004268:	dc01      	bgt.n	800426e <_printf_float+0x3c6>
 800426a:	07db      	lsls	r3, r3, #31
 800426c:	d53a      	bpl.n	80042e4 <_printf_float+0x43c>
 800426e:	2301      	movs	r3, #1
 8004270:	4642      	mov	r2, r8
 8004272:	4631      	mov	r1, r6
 8004274:	4628      	mov	r0, r5
 8004276:	47b8      	blx	r7
 8004278:	3001      	adds	r0, #1
 800427a:	f43f ae74 	beq.w	8003f66 <_printf_float+0xbe>
 800427e:	ee18 3a10 	vmov	r3, s16
 8004282:	4652      	mov	r2, sl
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	f43f ae6b 	beq.w	8003f66 <_printf_float+0xbe>
 8004290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004294:	2200      	movs	r2, #0
 8004296:	2300      	movs	r3, #0
 8004298:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800429c:	f7fc fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 80042a0:	b9d8      	cbnz	r0, 80042da <_printf_float+0x432>
 80042a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80042a6:	f108 0201 	add.w	r2, r8, #1
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	d10e      	bne.n	80042d2 <_printf_float+0x42a>
 80042b4:	e657      	b.n	8003f66 <_printf_float+0xbe>
 80042b6:	2301      	movs	r3, #1
 80042b8:	4652      	mov	r2, sl
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	f43f ae50 	beq.w	8003f66 <_printf_float+0xbe>
 80042c6:	f108 0801 	add.w	r8, r8, #1
 80042ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	4543      	cmp	r3, r8
 80042d0:	dcf1      	bgt.n	80042b6 <_printf_float+0x40e>
 80042d2:	464b      	mov	r3, r9
 80042d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042d8:	e6da      	b.n	8004090 <_printf_float+0x1e8>
 80042da:	f04f 0800 	mov.w	r8, #0
 80042de:	f104 0a1a 	add.w	sl, r4, #26
 80042e2:	e7f2      	b.n	80042ca <_printf_float+0x422>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4642      	mov	r2, r8
 80042e8:	e7df      	b.n	80042aa <_printf_float+0x402>
 80042ea:	2301      	movs	r3, #1
 80042ec:	464a      	mov	r2, r9
 80042ee:	4631      	mov	r1, r6
 80042f0:	4628      	mov	r0, r5
 80042f2:	47b8      	blx	r7
 80042f4:	3001      	adds	r0, #1
 80042f6:	f43f ae36 	beq.w	8003f66 <_printf_float+0xbe>
 80042fa:	f108 0801 	add.w	r8, r8, #1
 80042fe:	68e3      	ldr	r3, [r4, #12]
 8004300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004302:	1a5b      	subs	r3, r3, r1
 8004304:	4543      	cmp	r3, r8
 8004306:	dcf0      	bgt.n	80042ea <_printf_float+0x442>
 8004308:	e6f8      	b.n	80040fc <_printf_float+0x254>
 800430a:	f04f 0800 	mov.w	r8, #0
 800430e:	f104 0919 	add.w	r9, r4, #25
 8004312:	e7f4      	b.n	80042fe <_printf_float+0x456>

08004314 <_printf_common>:
 8004314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004318:	4616      	mov	r6, r2
 800431a:	4699      	mov	r9, r3
 800431c:	688a      	ldr	r2, [r1, #8]
 800431e:	690b      	ldr	r3, [r1, #16]
 8004320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004324:	4293      	cmp	r3, r2
 8004326:	bfb8      	it	lt
 8004328:	4613      	movlt	r3, r2
 800432a:	6033      	str	r3, [r6, #0]
 800432c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004330:	4607      	mov	r7, r0
 8004332:	460c      	mov	r4, r1
 8004334:	b10a      	cbz	r2, 800433a <_printf_common+0x26>
 8004336:	3301      	adds	r3, #1
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	0699      	lsls	r1, r3, #26
 800433e:	bf42      	ittt	mi
 8004340:	6833      	ldrmi	r3, [r6, #0]
 8004342:	3302      	addmi	r3, #2
 8004344:	6033      	strmi	r3, [r6, #0]
 8004346:	6825      	ldr	r5, [r4, #0]
 8004348:	f015 0506 	ands.w	r5, r5, #6
 800434c:	d106      	bne.n	800435c <_printf_common+0x48>
 800434e:	f104 0a19 	add.w	sl, r4, #25
 8004352:	68e3      	ldr	r3, [r4, #12]
 8004354:	6832      	ldr	r2, [r6, #0]
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	42ab      	cmp	r3, r5
 800435a:	dc26      	bgt.n	80043aa <_printf_common+0x96>
 800435c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004360:	1e13      	subs	r3, r2, #0
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	bf18      	it	ne
 8004366:	2301      	movne	r3, #1
 8004368:	0692      	lsls	r2, r2, #26
 800436a:	d42b      	bmi.n	80043c4 <_printf_common+0xb0>
 800436c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004370:	4649      	mov	r1, r9
 8004372:	4638      	mov	r0, r7
 8004374:	47c0      	blx	r8
 8004376:	3001      	adds	r0, #1
 8004378:	d01e      	beq.n	80043b8 <_printf_common+0xa4>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	6922      	ldr	r2, [r4, #16]
 800437e:	f003 0306 	and.w	r3, r3, #6
 8004382:	2b04      	cmp	r3, #4
 8004384:	bf02      	ittt	eq
 8004386:	68e5      	ldreq	r5, [r4, #12]
 8004388:	6833      	ldreq	r3, [r6, #0]
 800438a:	1aed      	subeq	r5, r5, r3
 800438c:	68a3      	ldr	r3, [r4, #8]
 800438e:	bf0c      	ite	eq
 8004390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004394:	2500      	movne	r5, #0
 8004396:	4293      	cmp	r3, r2
 8004398:	bfc4      	itt	gt
 800439a:	1a9b      	subgt	r3, r3, r2
 800439c:	18ed      	addgt	r5, r5, r3
 800439e:	2600      	movs	r6, #0
 80043a0:	341a      	adds	r4, #26
 80043a2:	42b5      	cmp	r5, r6
 80043a4:	d11a      	bne.n	80043dc <_printf_common+0xc8>
 80043a6:	2000      	movs	r0, #0
 80043a8:	e008      	b.n	80043bc <_printf_common+0xa8>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4652      	mov	r2, sl
 80043ae:	4649      	mov	r1, r9
 80043b0:	4638      	mov	r0, r7
 80043b2:	47c0      	blx	r8
 80043b4:	3001      	adds	r0, #1
 80043b6:	d103      	bne.n	80043c0 <_printf_common+0xac>
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c0:	3501      	adds	r5, #1
 80043c2:	e7c6      	b.n	8004352 <_printf_common+0x3e>
 80043c4:	18e1      	adds	r1, r4, r3
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	2030      	movs	r0, #48	; 0x30
 80043ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043ce:	4422      	add	r2, r4
 80043d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043d8:	3302      	adds	r3, #2
 80043da:	e7c7      	b.n	800436c <_printf_common+0x58>
 80043dc:	2301      	movs	r3, #1
 80043de:	4622      	mov	r2, r4
 80043e0:	4649      	mov	r1, r9
 80043e2:	4638      	mov	r0, r7
 80043e4:	47c0      	blx	r8
 80043e6:	3001      	adds	r0, #1
 80043e8:	d0e6      	beq.n	80043b8 <_printf_common+0xa4>
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7d9      	b.n	80043a2 <_printf_common+0x8e>
	...

080043f0 <_printf_i>:
 80043f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043f4:	7e0f      	ldrb	r7, [r1, #24]
 80043f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043f8:	2f78      	cmp	r7, #120	; 0x78
 80043fa:	4691      	mov	r9, r2
 80043fc:	4680      	mov	r8, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	469a      	mov	sl, r3
 8004402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004406:	d807      	bhi.n	8004418 <_printf_i+0x28>
 8004408:	2f62      	cmp	r7, #98	; 0x62
 800440a:	d80a      	bhi.n	8004422 <_printf_i+0x32>
 800440c:	2f00      	cmp	r7, #0
 800440e:	f000 80d4 	beq.w	80045ba <_printf_i+0x1ca>
 8004412:	2f58      	cmp	r7, #88	; 0x58
 8004414:	f000 80c0 	beq.w	8004598 <_printf_i+0x1a8>
 8004418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800441c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004420:	e03a      	b.n	8004498 <_printf_i+0xa8>
 8004422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004426:	2b15      	cmp	r3, #21
 8004428:	d8f6      	bhi.n	8004418 <_printf_i+0x28>
 800442a:	a101      	add	r1, pc, #4	; (adr r1, 8004430 <_printf_i+0x40>)
 800442c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004430:	08004489 	.word	0x08004489
 8004434:	0800449d 	.word	0x0800449d
 8004438:	08004419 	.word	0x08004419
 800443c:	08004419 	.word	0x08004419
 8004440:	08004419 	.word	0x08004419
 8004444:	08004419 	.word	0x08004419
 8004448:	0800449d 	.word	0x0800449d
 800444c:	08004419 	.word	0x08004419
 8004450:	08004419 	.word	0x08004419
 8004454:	08004419 	.word	0x08004419
 8004458:	08004419 	.word	0x08004419
 800445c:	080045a1 	.word	0x080045a1
 8004460:	080044c9 	.word	0x080044c9
 8004464:	0800455b 	.word	0x0800455b
 8004468:	08004419 	.word	0x08004419
 800446c:	08004419 	.word	0x08004419
 8004470:	080045c3 	.word	0x080045c3
 8004474:	08004419 	.word	0x08004419
 8004478:	080044c9 	.word	0x080044c9
 800447c:	08004419 	.word	0x08004419
 8004480:	08004419 	.word	0x08004419
 8004484:	08004563 	.word	0x08004563
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	1d1a      	adds	r2, r3, #4
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	602a      	str	r2, [r5, #0]
 8004490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004498:	2301      	movs	r3, #1
 800449a:	e09f      	b.n	80045dc <_printf_i+0x1ec>
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	0607      	lsls	r7, r0, #24
 80044a2:	f103 0104 	add.w	r1, r3, #4
 80044a6:	6029      	str	r1, [r5, #0]
 80044a8:	d501      	bpl.n	80044ae <_printf_i+0xbe>
 80044aa:	681e      	ldr	r6, [r3, #0]
 80044ac:	e003      	b.n	80044b6 <_printf_i+0xc6>
 80044ae:	0646      	lsls	r6, r0, #25
 80044b0:	d5fb      	bpl.n	80044aa <_printf_i+0xba>
 80044b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	da03      	bge.n	80044c2 <_printf_i+0xd2>
 80044ba:	232d      	movs	r3, #45	; 0x2d
 80044bc:	4276      	negs	r6, r6
 80044be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c2:	485a      	ldr	r0, [pc, #360]	; (800462c <_printf_i+0x23c>)
 80044c4:	230a      	movs	r3, #10
 80044c6:	e012      	b.n	80044ee <_printf_i+0xfe>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	6820      	ldr	r0, [r4, #0]
 80044cc:	1d19      	adds	r1, r3, #4
 80044ce:	6029      	str	r1, [r5, #0]
 80044d0:	0605      	lsls	r5, r0, #24
 80044d2:	d501      	bpl.n	80044d8 <_printf_i+0xe8>
 80044d4:	681e      	ldr	r6, [r3, #0]
 80044d6:	e002      	b.n	80044de <_printf_i+0xee>
 80044d8:	0641      	lsls	r1, r0, #25
 80044da:	d5fb      	bpl.n	80044d4 <_printf_i+0xe4>
 80044dc:	881e      	ldrh	r6, [r3, #0]
 80044de:	4853      	ldr	r0, [pc, #332]	; (800462c <_printf_i+0x23c>)
 80044e0:	2f6f      	cmp	r7, #111	; 0x6f
 80044e2:	bf0c      	ite	eq
 80044e4:	2308      	moveq	r3, #8
 80044e6:	230a      	movne	r3, #10
 80044e8:	2100      	movs	r1, #0
 80044ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044ee:	6865      	ldr	r5, [r4, #4]
 80044f0:	60a5      	str	r5, [r4, #8]
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	bfa2      	ittt	ge
 80044f6:	6821      	ldrge	r1, [r4, #0]
 80044f8:	f021 0104 	bicge.w	r1, r1, #4
 80044fc:	6021      	strge	r1, [r4, #0]
 80044fe:	b90e      	cbnz	r6, 8004504 <_printf_i+0x114>
 8004500:	2d00      	cmp	r5, #0
 8004502:	d04b      	beq.n	800459c <_printf_i+0x1ac>
 8004504:	4615      	mov	r5, r2
 8004506:	fbb6 f1f3 	udiv	r1, r6, r3
 800450a:	fb03 6711 	mls	r7, r3, r1, r6
 800450e:	5dc7      	ldrb	r7, [r0, r7]
 8004510:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004514:	4637      	mov	r7, r6
 8004516:	42bb      	cmp	r3, r7
 8004518:	460e      	mov	r6, r1
 800451a:	d9f4      	bls.n	8004506 <_printf_i+0x116>
 800451c:	2b08      	cmp	r3, #8
 800451e:	d10b      	bne.n	8004538 <_printf_i+0x148>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	07de      	lsls	r6, r3, #31
 8004524:	d508      	bpl.n	8004538 <_printf_i+0x148>
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	6861      	ldr	r1, [r4, #4]
 800452a:	4299      	cmp	r1, r3
 800452c:	bfde      	ittt	le
 800452e:	2330      	movle	r3, #48	; 0x30
 8004530:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004534:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004538:	1b52      	subs	r2, r2, r5
 800453a:	6122      	str	r2, [r4, #16]
 800453c:	f8cd a000 	str.w	sl, [sp]
 8004540:	464b      	mov	r3, r9
 8004542:	aa03      	add	r2, sp, #12
 8004544:	4621      	mov	r1, r4
 8004546:	4640      	mov	r0, r8
 8004548:	f7ff fee4 	bl	8004314 <_printf_common>
 800454c:	3001      	adds	r0, #1
 800454e:	d14a      	bne.n	80045e6 <_printf_i+0x1f6>
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	b004      	add	sp, #16
 8004556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	f043 0320 	orr.w	r3, r3, #32
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	4833      	ldr	r0, [pc, #204]	; (8004630 <_printf_i+0x240>)
 8004564:	2778      	movs	r7, #120	; 0x78
 8004566:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	6829      	ldr	r1, [r5, #0]
 800456e:	061f      	lsls	r7, r3, #24
 8004570:	f851 6b04 	ldr.w	r6, [r1], #4
 8004574:	d402      	bmi.n	800457c <_printf_i+0x18c>
 8004576:	065f      	lsls	r7, r3, #25
 8004578:	bf48      	it	mi
 800457a:	b2b6      	uxthmi	r6, r6
 800457c:	07df      	lsls	r7, r3, #31
 800457e:	bf48      	it	mi
 8004580:	f043 0320 	orrmi.w	r3, r3, #32
 8004584:	6029      	str	r1, [r5, #0]
 8004586:	bf48      	it	mi
 8004588:	6023      	strmi	r3, [r4, #0]
 800458a:	b91e      	cbnz	r6, 8004594 <_printf_i+0x1a4>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f023 0320 	bic.w	r3, r3, #32
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	2310      	movs	r3, #16
 8004596:	e7a7      	b.n	80044e8 <_printf_i+0xf8>
 8004598:	4824      	ldr	r0, [pc, #144]	; (800462c <_printf_i+0x23c>)
 800459a:	e7e4      	b.n	8004566 <_printf_i+0x176>
 800459c:	4615      	mov	r5, r2
 800459e:	e7bd      	b.n	800451c <_printf_i+0x12c>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	6826      	ldr	r6, [r4, #0]
 80045a4:	6961      	ldr	r1, [r4, #20]
 80045a6:	1d18      	adds	r0, r3, #4
 80045a8:	6028      	str	r0, [r5, #0]
 80045aa:	0635      	lsls	r5, r6, #24
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	d501      	bpl.n	80045b4 <_printf_i+0x1c4>
 80045b0:	6019      	str	r1, [r3, #0]
 80045b2:	e002      	b.n	80045ba <_printf_i+0x1ca>
 80045b4:	0670      	lsls	r0, r6, #25
 80045b6:	d5fb      	bpl.n	80045b0 <_printf_i+0x1c0>
 80045b8:	8019      	strh	r1, [r3, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	6123      	str	r3, [r4, #16]
 80045be:	4615      	mov	r5, r2
 80045c0:	e7bc      	b.n	800453c <_printf_i+0x14c>
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	1d1a      	adds	r2, r3, #4
 80045c6:	602a      	str	r2, [r5, #0]
 80045c8:	681d      	ldr	r5, [r3, #0]
 80045ca:	6862      	ldr	r2, [r4, #4]
 80045cc:	2100      	movs	r1, #0
 80045ce:	4628      	mov	r0, r5
 80045d0:	f7fb fdfe 	bl	80001d0 <memchr>
 80045d4:	b108      	cbz	r0, 80045da <_printf_i+0x1ea>
 80045d6:	1b40      	subs	r0, r0, r5
 80045d8:	6060      	str	r0, [r4, #4]
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	6123      	str	r3, [r4, #16]
 80045de:	2300      	movs	r3, #0
 80045e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e4:	e7aa      	b.n	800453c <_printf_i+0x14c>
 80045e6:	6923      	ldr	r3, [r4, #16]
 80045e8:	462a      	mov	r2, r5
 80045ea:	4649      	mov	r1, r9
 80045ec:	4640      	mov	r0, r8
 80045ee:	47d0      	blx	sl
 80045f0:	3001      	adds	r0, #1
 80045f2:	d0ad      	beq.n	8004550 <_printf_i+0x160>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	079b      	lsls	r3, r3, #30
 80045f8:	d413      	bmi.n	8004622 <_printf_i+0x232>
 80045fa:	68e0      	ldr	r0, [r4, #12]
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	4298      	cmp	r0, r3
 8004600:	bfb8      	it	lt
 8004602:	4618      	movlt	r0, r3
 8004604:	e7a6      	b.n	8004554 <_printf_i+0x164>
 8004606:	2301      	movs	r3, #1
 8004608:	4632      	mov	r2, r6
 800460a:	4649      	mov	r1, r9
 800460c:	4640      	mov	r0, r8
 800460e:	47d0      	blx	sl
 8004610:	3001      	adds	r0, #1
 8004612:	d09d      	beq.n	8004550 <_printf_i+0x160>
 8004614:	3501      	adds	r5, #1
 8004616:	68e3      	ldr	r3, [r4, #12]
 8004618:	9903      	ldr	r1, [sp, #12]
 800461a:	1a5b      	subs	r3, r3, r1
 800461c:	42ab      	cmp	r3, r5
 800461e:	dcf2      	bgt.n	8004606 <_printf_i+0x216>
 8004620:	e7eb      	b.n	80045fa <_printf_i+0x20a>
 8004622:	2500      	movs	r5, #0
 8004624:	f104 0619 	add.w	r6, r4, #25
 8004628:	e7f5      	b.n	8004616 <_printf_i+0x226>
 800462a:	bf00      	nop
 800462c:	08006912 	.word	0x08006912
 8004630:	08006923 	.word	0x08006923

08004634 <__sflush_r>:
 8004634:	898a      	ldrh	r2, [r1, #12]
 8004636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463a:	4605      	mov	r5, r0
 800463c:	0710      	lsls	r0, r2, #28
 800463e:	460c      	mov	r4, r1
 8004640:	d458      	bmi.n	80046f4 <__sflush_r+0xc0>
 8004642:	684b      	ldr	r3, [r1, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	dc05      	bgt.n	8004654 <__sflush_r+0x20>
 8004648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	dc02      	bgt.n	8004654 <__sflush_r+0x20>
 800464e:	2000      	movs	r0, #0
 8004650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004656:	2e00      	cmp	r6, #0
 8004658:	d0f9      	beq.n	800464e <__sflush_r+0x1a>
 800465a:	2300      	movs	r3, #0
 800465c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004660:	682f      	ldr	r7, [r5, #0]
 8004662:	6a21      	ldr	r1, [r4, #32]
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	d032      	beq.n	80046ce <__sflush_r+0x9a>
 8004668:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	075a      	lsls	r2, r3, #29
 800466e:	d505      	bpl.n	800467c <__sflush_r+0x48>
 8004670:	6863      	ldr	r3, [r4, #4]
 8004672:	1ac0      	subs	r0, r0, r3
 8004674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004676:	b10b      	cbz	r3, 800467c <__sflush_r+0x48>
 8004678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800467a:	1ac0      	subs	r0, r0, r3
 800467c:	2300      	movs	r3, #0
 800467e:	4602      	mov	r2, r0
 8004680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004682:	6a21      	ldr	r1, [r4, #32]
 8004684:	4628      	mov	r0, r5
 8004686:	47b0      	blx	r6
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	d106      	bne.n	800469c <__sflush_r+0x68>
 800468e:	6829      	ldr	r1, [r5, #0]
 8004690:	291d      	cmp	r1, #29
 8004692:	d82b      	bhi.n	80046ec <__sflush_r+0xb8>
 8004694:	4a29      	ldr	r2, [pc, #164]	; (800473c <__sflush_r+0x108>)
 8004696:	410a      	asrs	r2, r1
 8004698:	07d6      	lsls	r6, r2, #31
 800469a:	d427      	bmi.n	80046ec <__sflush_r+0xb8>
 800469c:	2200      	movs	r2, #0
 800469e:	6062      	str	r2, [r4, #4]
 80046a0:	04d9      	lsls	r1, r3, #19
 80046a2:	6922      	ldr	r2, [r4, #16]
 80046a4:	6022      	str	r2, [r4, #0]
 80046a6:	d504      	bpl.n	80046b2 <__sflush_r+0x7e>
 80046a8:	1c42      	adds	r2, r0, #1
 80046aa:	d101      	bne.n	80046b0 <__sflush_r+0x7c>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	b903      	cbnz	r3, 80046b2 <__sflush_r+0x7e>
 80046b0:	6560      	str	r0, [r4, #84]	; 0x54
 80046b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046b4:	602f      	str	r7, [r5, #0]
 80046b6:	2900      	cmp	r1, #0
 80046b8:	d0c9      	beq.n	800464e <__sflush_r+0x1a>
 80046ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046be:	4299      	cmp	r1, r3
 80046c0:	d002      	beq.n	80046c8 <__sflush_r+0x94>
 80046c2:	4628      	mov	r0, r5
 80046c4:	f001 f982 	bl	80059cc <_free_r>
 80046c8:	2000      	movs	r0, #0
 80046ca:	6360      	str	r0, [r4, #52]	; 0x34
 80046cc:	e7c0      	b.n	8004650 <__sflush_r+0x1c>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b0      	blx	r6
 80046d4:	1c41      	adds	r1, r0, #1
 80046d6:	d1c8      	bne.n	800466a <__sflush_r+0x36>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0c5      	beq.n	800466a <__sflush_r+0x36>
 80046de:	2b1d      	cmp	r3, #29
 80046e0:	d001      	beq.n	80046e6 <__sflush_r+0xb2>
 80046e2:	2b16      	cmp	r3, #22
 80046e4:	d101      	bne.n	80046ea <__sflush_r+0xb6>
 80046e6:	602f      	str	r7, [r5, #0]
 80046e8:	e7b1      	b.n	800464e <__sflush_r+0x1a>
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	e7ad      	b.n	8004650 <__sflush_r+0x1c>
 80046f4:	690f      	ldr	r7, [r1, #16]
 80046f6:	2f00      	cmp	r7, #0
 80046f8:	d0a9      	beq.n	800464e <__sflush_r+0x1a>
 80046fa:	0793      	lsls	r3, r2, #30
 80046fc:	680e      	ldr	r6, [r1, #0]
 80046fe:	bf08      	it	eq
 8004700:	694b      	ldreq	r3, [r1, #20]
 8004702:	600f      	str	r7, [r1, #0]
 8004704:	bf18      	it	ne
 8004706:	2300      	movne	r3, #0
 8004708:	eba6 0807 	sub.w	r8, r6, r7
 800470c:	608b      	str	r3, [r1, #8]
 800470e:	f1b8 0f00 	cmp.w	r8, #0
 8004712:	dd9c      	ble.n	800464e <__sflush_r+0x1a>
 8004714:	6a21      	ldr	r1, [r4, #32]
 8004716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004718:	4643      	mov	r3, r8
 800471a:	463a      	mov	r2, r7
 800471c:	4628      	mov	r0, r5
 800471e:	47b0      	blx	r6
 8004720:	2800      	cmp	r0, #0
 8004722:	dc06      	bgt.n	8004732 <__sflush_r+0xfe>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472a:	81a3      	strh	r3, [r4, #12]
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	e78e      	b.n	8004650 <__sflush_r+0x1c>
 8004732:	4407      	add	r7, r0
 8004734:	eba8 0800 	sub.w	r8, r8, r0
 8004738:	e7e9      	b.n	800470e <__sflush_r+0xda>
 800473a:	bf00      	nop
 800473c:	dfbffffe 	.word	0xdfbffffe

08004740 <_fflush_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	690b      	ldr	r3, [r1, #16]
 8004744:	4605      	mov	r5, r0
 8004746:	460c      	mov	r4, r1
 8004748:	b913      	cbnz	r3, 8004750 <_fflush_r+0x10>
 800474a:	2500      	movs	r5, #0
 800474c:	4628      	mov	r0, r5
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	b118      	cbz	r0, 800475a <_fflush_r+0x1a>
 8004752:	6a03      	ldr	r3, [r0, #32]
 8004754:	b90b      	cbnz	r3, 800475a <_fflush_r+0x1a>
 8004756:	f000 f8bb 	bl	80048d0 <__sinit>
 800475a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f3      	beq.n	800474a <_fflush_r+0xa>
 8004762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004764:	07d0      	lsls	r0, r2, #31
 8004766:	d404      	bmi.n	8004772 <_fflush_r+0x32>
 8004768:	0599      	lsls	r1, r3, #22
 800476a:	d402      	bmi.n	8004772 <_fflush_r+0x32>
 800476c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800476e:	f000 fab0 	bl	8004cd2 <__retarget_lock_acquire_recursive>
 8004772:	4628      	mov	r0, r5
 8004774:	4621      	mov	r1, r4
 8004776:	f7ff ff5d 	bl	8004634 <__sflush_r>
 800477a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800477c:	07da      	lsls	r2, r3, #31
 800477e:	4605      	mov	r5, r0
 8004780:	d4e4      	bmi.n	800474c <_fflush_r+0xc>
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	059b      	lsls	r3, r3, #22
 8004786:	d4e1      	bmi.n	800474c <_fflush_r+0xc>
 8004788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800478a:	f000 faa3 	bl	8004cd4 <__retarget_lock_release_recursive>
 800478e:	e7dd      	b.n	800474c <_fflush_r+0xc>

08004790 <fflush>:
 8004790:	4601      	mov	r1, r0
 8004792:	b920      	cbnz	r0, 800479e <fflush+0xe>
 8004794:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <fflush+0x18>)
 8004796:	4905      	ldr	r1, [pc, #20]	; (80047ac <fflush+0x1c>)
 8004798:	4805      	ldr	r0, [pc, #20]	; (80047b0 <fflush+0x20>)
 800479a:	f000 b8b1 	b.w	8004900 <_fwalk_sglue>
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <fflush+0x24>)
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	f7ff bfcd 	b.w	8004740 <_fflush_r>
 80047a6:	bf00      	nop
 80047a8:	2000000c 	.word	0x2000000c
 80047ac:	08004741 	.word	0x08004741
 80047b0:	20000018 	.word	0x20000018
 80047b4:	20000064 	.word	0x20000064

080047b8 <std>:
 80047b8:	2300      	movs	r3, #0
 80047ba:	b510      	push	{r4, lr}
 80047bc:	4604      	mov	r4, r0
 80047be:	e9c0 3300 	strd	r3, r3, [r0]
 80047c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047c6:	6083      	str	r3, [r0, #8]
 80047c8:	8181      	strh	r1, [r0, #12]
 80047ca:	6643      	str	r3, [r0, #100]	; 0x64
 80047cc:	81c2      	strh	r2, [r0, #14]
 80047ce:	6183      	str	r3, [r0, #24]
 80047d0:	4619      	mov	r1, r3
 80047d2:	2208      	movs	r2, #8
 80047d4:	305c      	adds	r0, #92	; 0x5c
 80047d6:	f000 f9ff 	bl	8004bd8 <memset>
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <std+0x58>)
 80047dc:	6263      	str	r3, [r4, #36]	; 0x24
 80047de:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <std+0x5c>)
 80047e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <std+0x60>)
 80047e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <std+0x64>)
 80047e8:	6323      	str	r3, [r4, #48]	; 0x30
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <std+0x68>)
 80047ec:	6224      	str	r4, [r4, #32]
 80047ee:	429c      	cmp	r4, r3
 80047f0:	d006      	beq.n	8004800 <std+0x48>
 80047f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80047f6:	4294      	cmp	r4, r2
 80047f8:	d002      	beq.n	8004800 <std+0x48>
 80047fa:	33d0      	adds	r3, #208	; 0xd0
 80047fc:	429c      	cmp	r4, r3
 80047fe:	d105      	bne.n	800480c <std+0x54>
 8004800:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004808:	f000 ba62 	b.w	8004cd0 <__retarget_lock_init_recursive>
 800480c:	bd10      	pop	{r4, pc}
 800480e:	bf00      	nop
 8004810:	08004a29 	.word	0x08004a29
 8004814:	08004a4b 	.word	0x08004a4b
 8004818:	08004a83 	.word	0x08004a83
 800481c:	08004aa7 	.word	0x08004aa7
 8004820:	20000290 	.word	0x20000290

08004824 <stdio_exit_handler>:
 8004824:	4a02      	ldr	r2, [pc, #8]	; (8004830 <stdio_exit_handler+0xc>)
 8004826:	4903      	ldr	r1, [pc, #12]	; (8004834 <stdio_exit_handler+0x10>)
 8004828:	4803      	ldr	r0, [pc, #12]	; (8004838 <stdio_exit_handler+0x14>)
 800482a:	f000 b869 	b.w	8004900 <_fwalk_sglue>
 800482e:	bf00      	nop
 8004830:	2000000c 	.word	0x2000000c
 8004834:	08004741 	.word	0x08004741
 8004838:	20000018 	.word	0x20000018

0800483c <cleanup_stdio>:
 800483c:	6841      	ldr	r1, [r0, #4]
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <cleanup_stdio+0x34>)
 8004840:	4299      	cmp	r1, r3
 8004842:	b510      	push	{r4, lr}
 8004844:	4604      	mov	r4, r0
 8004846:	d001      	beq.n	800484c <cleanup_stdio+0x10>
 8004848:	f7ff ff7a 	bl	8004740 <_fflush_r>
 800484c:	68a1      	ldr	r1, [r4, #8]
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <cleanup_stdio+0x38>)
 8004850:	4299      	cmp	r1, r3
 8004852:	d002      	beq.n	800485a <cleanup_stdio+0x1e>
 8004854:	4620      	mov	r0, r4
 8004856:	f7ff ff73 	bl	8004740 <_fflush_r>
 800485a:	68e1      	ldr	r1, [r4, #12]
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <cleanup_stdio+0x3c>)
 800485e:	4299      	cmp	r1, r3
 8004860:	d004      	beq.n	800486c <cleanup_stdio+0x30>
 8004862:	4620      	mov	r0, r4
 8004864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004868:	f7ff bf6a 	b.w	8004740 <_fflush_r>
 800486c:	bd10      	pop	{r4, pc}
 800486e:	bf00      	nop
 8004870:	20000290 	.word	0x20000290
 8004874:	200002f8 	.word	0x200002f8
 8004878:	20000360 	.word	0x20000360

0800487c <global_stdio_init.part.0>:
 800487c:	b510      	push	{r4, lr}
 800487e:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <global_stdio_init.part.0+0x30>)
 8004880:	4c0b      	ldr	r4, [pc, #44]	; (80048b0 <global_stdio_init.part.0+0x34>)
 8004882:	4a0c      	ldr	r2, [pc, #48]	; (80048b4 <global_stdio_init.part.0+0x38>)
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	4620      	mov	r0, r4
 8004888:	2200      	movs	r2, #0
 800488a:	2104      	movs	r1, #4
 800488c:	f7ff ff94 	bl	80047b8 <std>
 8004890:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004894:	2201      	movs	r2, #1
 8004896:	2109      	movs	r1, #9
 8004898:	f7ff ff8e 	bl	80047b8 <std>
 800489c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80048a0:	2202      	movs	r2, #2
 80048a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a6:	2112      	movs	r1, #18
 80048a8:	f7ff bf86 	b.w	80047b8 <std>
 80048ac:	200003c8 	.word	0x200003c8
 80048b0:	20000290 	.word	0x20000290
 80048b4:	08004825 	.word	0x08004825

080048b8 <__sfp_lock_acquire>:
 80048b8:	4801      	ldr	r0, [pc, #4]	; (80048c0 <__sfp_lock_acquire+0x8>)
 80048ba:	f000 ba0a 	b.w	8004cd2 <__retarget_lock_acquire_recursive>
 80048be:	bf00      	nop
 80048c0:	200003d1 	.word	0x200003d1

080048c4 <__sfp_lock_release>:
 80048c4:	4801      	ldr	r0, [pc, #4]	; (80048cc <__sfp_lock_release+0x8>)
 80048c6:	f000 ba05 	b.w	8004cd4 <__retarget_lock_release_recursive>
 80048ca:	bf00      	nop
 80048cc:	200003d1 	.word	0x200003d1

080048d0 <__sinit>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4604      	mov	r4, r0
 80048d4:	f7ff fff0 	bl	80048b8 <__sfp_lock_acquire>
 80048d8:	6a23      	ldr	r3, [r4, #32]
 80048da:	b11b      	cbz	r3, 80048e4 <__sinit+0x14>
 80048dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e0:	f7ff bff0 	b.w	80048c4 <__sfp_lock_release>
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <__sinit+0x28>)
 80048e6:	6223      	str	r3, [r4, #32]
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <__sinit+0x2c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f5      	bne.n	80048dc <__sinit+0xc>
 80048f0:	f7ff ffc4 	bl	800487c <global_stdio_init.part.0>
 80048f4:	e7f2      	b.n	80048dc <__sinit+0xc>
 80048f6:	bf00      	nop
 80048f8:	0800483d 	.word	0x0800483d
 80048fc:	200003c8 	.word	0x200003c8

08004900 <_fwalk_sglue>:
 8004900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004904:	4607      	mov	r7, r0
 8004906:	4688      	mov	r8, r1
 8004908:	4614      	mov	r4, r2
 800490a:	2600      	movs	r6, #0
 800490c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004910:	f1b9 0901 	subs.w	r9, r9, #1
 8004914:	d505      	bpl.n	8004922 <_fwalk_sglue+0x22>
 8004916:	6824      	ldr	r4, [r4, #0]
 8004918:	2c00      	cmp	r4, #0
 800491a:	d1f7      	bne.n	800490c <_fwalk_sglue+0xc>
 800491c:	4630      	mov	r0, r6
 800491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d907      	bls.n	8004938 <_fwalk_sglue+0x38>
 8004928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800492c:	3301      	adds	r3, #1
 800492e:	d003      	beq.n	8004938 <_fwalk_sglue+0x38>
 8004930:	4629      	mov	r1, r5
 8004932:	4638      	mov	r0, r7
 8004934:	47c0      	blx	r8
 8004936:	4306      	orrs	r6, r0
 8004938:	3568      	adds	r5, #104	; 0x68
 800493a:	e7e9      	b.n	8004910 <_fwalk_sglue+0x10>

0800493c <iprintf>:
 800493c:	b40f      	push	{r0, r1, r2, r3}
 800493e:	b507      	push	{r0, r1, r2, lr}
 8004940:	4906      	ldr	r1, [pc, #24]	; (800495c <iprintf+0x20>)
 8004942:	ab04      	add	r3, sp, #16
 8004944:	6808      	ldr	r0, [r1, #0]
 8004946:	f853 2b04 	ldr.w	r2, [r3], #4
 800494a:	6881      	ldr	r1, [r0, #8]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	f001 fce3 	bl	8006318 <_vfiprintf_r>
 8004952:	b003      	add	sp, #12
 8004954:	f85d eb04 	ldr.w	lr, [sp], #4
 8004958:	b004      	add	sp, #16
 800495a:	4770      	bx	lr
 800495c:	20000064 	.word	0x20000064

08004960 <putchar>:
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <putchar+0xc>)
 8004962:	4601      	mov	r1, r0
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	6882      	ldr	r2, [r0, #8]
 8004968:	f001 be52 	b.w	8006610 <_putc_r>
 800496c:	20000064 	.word	0x20000064

08004970 <_puts_r>:
 8004970:	6a03      	ldr	r3, [r0, #32]
 8004972:	b570      	push	{r4, r5, r6, lr}
 8004974:	6884      	ldr	r4, [r0, #8]
 8004976:	4605      	mov	r5, r0
 8004978:	460e      	mov	r6, r1
 800497a:	b90b      	cbnz	r3, 8004980 <_puts_r+0x10>
 800497c:	f7ff ffa8 	bl	80048d0 <__sinit>
 8004980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004982:	07db      	lsls	r3, r3, #31
 8004984:	d405      	bmi.n	8004992 <_puts_r+0x22>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	0598      	lsls	r0, r3, #22
 800498a:	d402      	bmi.n	8004992 <_puts_r+0x22>
 800498c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800498e:	f000 f9a0 	bl	8004cd2 <__retarget_lock_acquire_recursive>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	0719      	lsls	r1, r3, #28
 8004996:	d513      	bpl.n	80049c0 <_puts_r+0x50>
 8004998:	6923      	ldr	r3, [r4, #16]
 800499a:	b18b      	cbz	r3, 80049c0 <_puts_r+0x50>
 800499c:	3e01      	subs	r6, #1
 800499e:	68a3      	ldr	r3, [r4, #8]
 80049a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049a4:	3b01      	subs	r3, #1
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	b9e9      	cbnz	r1, 80049e6 <_puts_r+0x76>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da2e      	bge.n	8004a0c <_puts_r+0x9c>
 80049ae:	4622      	mov	r2, r4
 80049b0:	210a      	movs	r1, #10
 80049b2:	4628      	mov	r0, r5
 80049b4:	f000 f87b 	bl	8004aae <__swbuf_r>
 80049b8:	3001      	adds	r0, #1
 80049ba:	d007      	beq.n	80049cc <_puts_r+0x5c>
 80049bc:	250a      	movs	r5, #10
 80049be:	e007      	b.n	80049d0 <_puts_r+0x60>
 80049c0:	4621      	mov	r1, r4
 80049c2:	4628      	mov	r0, r5
 80049c4:	f000 f8b0 	bl	8004b28 <__swsetup_r>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d0e7      	beq.n	800499c <_puts_r+0x2c>
 80049cc:	f04f 35ff 	mov.w	r5, #4294967295
 80049d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049d2:	07da      	lsls	r2, r3, #31
 80049d4:	d405      	bmi.n	80049e2 <_puts_r+0x72>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	059b      	lsls	r3, r3, #22
 80049da:	d402      	bmi.n	80049e2 <_puts_r+0x72>
 80049dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049de:	f000 f979 	bl	8004cd4 <__retarget_lock_release_recursive>
 80049e2:	4628      	mov	r0, r5
 80049e4:	bd70      	pop	{r4, r5, r6, pc}
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da04      	bge.n	80049f4 <_puts_r+0x84>
 80049ea:	69a2      	ldr	r2, [r4, #24]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	dc06      	bgt.n	80049fe <_puts_r+0x8e>
 80049f0:	290a      	cmp	r1, #10
 80049f2:	d004      	beq.n	80049fe <_puts_r+0x8e>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	6022      	str	r2, [r4, #0]
 80049fa:	7019      	strb	r1, [r3, #0]
 80049fc:	e7cf      	b.n	800499e <_puts_r+0x2e>
 80049fe:	4622      	mov	r2, r4
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 f854 	bl	8004aae <__swbuf_r>
 8004a06:	3001      	adds	r0, #1
 8004a08:	d1c9      	bne.n	800499e <_puts_r+0x2e>
 8004a0a:	e7df      	b.n	80049cc <_puts_r+0x5c>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	250a      	movs	r5, #10
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	6022      	str	r2, [r4, #0]
 8004a14:	701d      	strb	r5, [r3, #0]
 8004a16:	e7db      	b.n	80049d0 <_puts_r+0x60>

08004a18 <puts>:
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <puts+0xc>)
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	f7ff bfa7 	b.w	8004970 <_puts_r>
 8004a22:	bf00      	nop
 8004a24:	20000064 	.word	0x20000064

08004a28 <__sread>:
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a30:	f000 f900 	bl	8004c34 <_read_r>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	bfab      	itete	ge
 8004a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a3c:	181b      	addge	r3, r3, r0
 8004a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a42:	bfac      	ite	ge
 8004a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a46:	81a3      	strhlt	r3, [r4, #12]
 8004a48:	bd10      	pop	{r4, pc}

08004a4a <__swrite>:
 8004a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4e:	461f      	mov	r7, r3
 8004a50:	898b      	ldrh	r3, [r1, #12]
 8004a52:	05db      	lsls	r3, r3, #23
 8004a54:	4605      	mov	r5, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	4616      	mov	r6, r2
 8004a5a:	d505      	bpl.n	8004a68 <__swrite+0x1e>
 8004a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a60:	2302      	movs	r3, #2
 8004a62:	2200      	movs	r2, #0
 8004a64:	f000 f8d4 	bl	8004c10 <_lseek_r>
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a72:	81a3      	strh	r3, [r4, #12]
 8004a74:	4632      	mov	r2, r6
 8004a76:	463b      	mov	r3, r7
 8004a78:	4628      	mov	r0, r5
 8004a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7e:	f000 b8eb 	b.w	8004c58 <_write_r>

08004a82 <__sseek>:
 8004a82:	b510      	push	{r4, lr}
 8004a84:	460c      	mov	r4, r1
 8004a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8a:	f000 f8c1 	bl	8004c10 <_lseek_r>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	bf15      	itete	ne
 8004a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a9e:	81a3      	strheq	r3, [r4, #12]
 8004aa0:	bf18      	it	ne
 8004aa2:	81a3      	strhne	r3, [r4, #12]
 8004aa4:	bd10      	pop	{r4, pc}

08004aa6 <__sclose>:
 8004aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aaa:	f000 b8a1 	b.w	8004bf0 <_close_r>

08004aae <__swbuf_r>:
 8004aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab0:	460e      	mov	r6, r1
 8004ab2:	4614      	mov	r4, r2
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	b118      	cbz	r0, 8004ac0 <__swbuf_r+0x12>
 8004ab8:	6a03      	ldr	r3, [r0, #32]
 8004aba:	b90b      	cbnz	r3, 8004ac0 <__swbuf_r+0x12>
 8004abc:	f7ff ff08 	bl	80048d0 <__sinit>
 8004ac0:	69a3      	ldr	r3, [r4, #24]
 8004ac2:	60a3      	str	r3, [r4, #8]
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	071a      	lsls	r2, r3, #28
 8004ac8:	d525      	bpl.n	8004b16 <__swbuf_r+0x68>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	b31b      	cbz	r3, 8004b16 <__swbuf_r+0x68>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	1a98      	subs	r0, r3, r2
 8004ad4:	6963      	ldr	r3, [r4, #20]
 8004ad6:	b2f6      	uxtb	r6, r6
 8004ad8:	4283      	cmp	r3, r0
 8004ada:	4637      	mov	r7, r6
 8004adc:	dc04      	bgt.n	8004ae8 <__swbuf_r+0x3a>
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f7ff fe2d 	bl	8004740 <_fflush_r>
 8004ae6:	b9e0      	cbnz	r0, 8004b22 <__swbuf_r+0x74>
 8004ae8:	68a3      	ldr	r3, [r4, #8]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	60a3      	str	r3, [r4, #8]
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	6022      	str	r2, [r4, #0]
 8004af4:	701e      	strb	r6, [r3, #0]
 8004af6:	6962      	ldr	r2, [r4, #20]
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d004      	beq.n	8004b08 <__swbuf_r+0x5a>
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	07db      	lsls	r3, r3, #31
 8004b02:	d506      	bpl.n	8004b12 <__swbuf_r+0x64>
 8004b04:	2e0a      	cmp	r6, #10
 8004b06:	d104      	bne.n	8004b12 <__swbuf_r+0x64>
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7ff fe18 	bl	8004740 <_fflush_r>
 8004b10:	b938      	cbnz	r0, 8004b22 <__swbuf_r+0x74>
 8004b12:	4638      	mov	r0, r7
 8004b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 f805 	bl	8004b28 <__swsetup_r>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0d5      	beq.n	8004ace <__swbuf_r+0x20>
 8004b22:	f04f 37ff 	mov.w	r7, #4294967295
 8004b26:	e7f4      	b.n	8004b12 <__swbuf_r+0x64>

08004b28 <__swsetup_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <__swsetup_r+0xac>)
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	460c      	mov	r4, r1
 8004b32:	b118      	cbz	r0, 8004b3c <__swsetup_r+0x14>
 8004b34:	6a03      	ldr	r3, [r0, #32]
 8004b36:	b90b      	cbnz	r3, 8004b3c <__swsetup_r+0x14>
 8004b38:	f7ff feca 	bl	80048d0 <__sinit>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b42:	0718      	lsls	r0, r3, #28
 8004b44:	d422      	bmi.n	8004b8c <__swsetup_r+0x64>
 8004b46:	06d9      	lsls	r1, r3, #27
 8004b48:	d407      	bmi.n	8004b5a <__swsetup_r+0x32>
 8004b4a:	2309      	movs	r3, #9
 8004b4c:	602b      	str	r3, [r5, #0]
 8004b4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	e034      	b.n	8004bc4 <__swsetup_r+0x9c>
 8004b5a:	0758      	lsls	r0, r3, #29
 8004b5c:	d512      	bpl.n	8004b84 <__swsetup_r+0x5c>
 8004b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b60:	b141      	cbz	r1, 8004b74 <__swsetup_r+0x4c>
 8004b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b66:	4299      	cmp	r1, r3
 8004b68:	d002      	beq.n	8004b70 <__swsetup_r+0x48>
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 ff2e 	bl	80059cc <_free_r>
 8004b70:	2300      	movs	r3, #0
 8004b72:	6363      	str	r3, [r4, #52]	; 0x34
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6063      	str	r3, [r4, #4]
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f043 0308 	orr.w	r3, r3, #8
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	b94b      	cbnz	r3, 8004ba4 <__swsetup_r+0x7c>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9a:	d003      	beq.n	8004ba4 <__swsetup_r+0x7c>
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f001 fcfa 	bl	8006598 <__smakebuf_r>
 8004ba4:	89a0      	ldrh	r0, [r4, #12]
 8004ba6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004baa:	f010 0301 	ands.w	r3, r0, #1
 8004bae:	d00a      	beq.n	8004bc6 <__swsetup_r+0x9e>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60a3      	str	r3, [r4, #8]
 8004bb4:	6963      	ldr	r3, [r4, #20]
 8004bb6:	425b      	negs	r3, r3
 8004bb8:	61a3      	str	r3, [r4, #24]
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	b943      	cbnz	r3, 8004bd0 <__swsetup_r+0xa8>
 8004bbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bc2:	d1c4      	bne.n	8004b4e <__swsetup_r+0x26>
 8004bc4:	bd38      	pop	{r3, r4, r5, pc}
 8004bc6:	0781      	lsls	r1, r0, #30
 8004bc8:	bf58      	it	pl
 8004bca:	6963      	ldrpl	r3, [r4, #20]
 8004bcc:	60a3      	str	r3, [r4, #8]
 8004bce:	e7f4      	b.n	8004bba <__swsetup_r+0x92>
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e7f7      	b.n	8004bc4 <__swsetup_r+0x9c>
 8004bd4:	20000064 	.word	0x20000064

08004bd8 <memset>:
 8004bd8:	4402      	add	r2, r0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d100      	bne.n	8004be2 <memset+0xa>
 8004be0:	4770      	bx	lr
 8004be2:	f803 1b01 	strb.w	r1, [r3], #1
 8004be6:	e7f9      	b.n	8004bdc <memset+0x4>

08004be8 <_localeconv_r>:
 8004be8:	4800      	ldr	r0, [pc, #0]	; (8004bec <_localeconv_r+0x4>)
 8004bea:	4770      	bx	lr
 8004bec:	20000158 	.word	0x20000158

08004bf0 <_close_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4d06      	ldr	r5, [pc, #24]	; (8004c0c <_close_r+0x1c>)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	f7fc fb79 	bl	80012f2 <_close>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_close_r+0x1a>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_close_r+0x1a>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	200003cc 	.word	0x200003cc

08004c10 <_lseek_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d07      	ldr	r5, [pc, #28]	; (8004c30 <_lseek_r+0x20>)
 8004c14:	4604      	mov	r4, r0
 8004c16:	4608      	mov	r0, r1
 8004c18:	4611      	mov	r1, r2
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	602a      	str	r2, [r5, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f7fc fb8e 	bl	8001340 <_lseek>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d102      	bne.n	8004c2e <_lseek_r+0x1e>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	b103      	cbz	r3, 8004c2e <_lseek_r+0x1e>
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	200003cc 	.word	0x200003cc

08004c34 <_read_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d07      	ldr	r5, [pc, #28]	; (8004c54 <_read_r+0x20>)
 8004c38:	4604      	mov	r4, r0
 8004c3a:	4608      	mov	r0, r1
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	602a      	str	r2, [r5, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	f7fc fb1c 	bl	8001280 <_read>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_read_r+0x1e>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_read_r+0x1e>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	200003cc 	.word	0x200003cc

08004c58 <_write_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d07      	ldr	r5, [pc, #28]	; (8004c78 <_write_r+0x20>)
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	4608      	mov	r0, r1
 8004c60:	4611      	mov	r1, r2
 8004c62:	2200      	movs	r2, #0
 8004c64:	602a      	str	r2, [r5, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7fc fb27 	bl	80012ba <_write>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_write_r+0x1e>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_write_r+0x1e>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	200003cc 	.word	0x200003cc

08004c7c <__errno>:
 8004c7c:	4b01      	ldr	r3, [pc, #4]	; (8004c84 <__errno+0x8>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000064 	.word	0x20000064

08004c88 <__libc_init_array>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	4d0d      	ldr	r5, [pc, #52]	; (8004cc0 <__libc_init_array+0x38>)
 8004c8c:	4c0d      	ldr	r4, [pc, #52]	; (8004cc4 <__libc_init_array+0x3c>)
 8004c8e:	1b64      	subs	r4, r4, r5
 8004c90:	10a4      	asrs	r4, r4, #2
 8004c92:	2600      	movs	r6, #0
 8004c94:	42a6      	cmp	r6, r4
 8004c96:	d109      	bne.n	8004cac <__libc_init_array+0x24>
 8004c98:	4d0b      	ldr	r5, [pc, #44]	; (8004cc8 <__libc_init_array+0x40>)
 8004c9a:	4c0c      	ldr	r4, [pc, #48]	; (8004ccc <__libc_init_array+0x44>)
 8004c9c:	f001 fdde 	bl	800685c <_init>
 8004ca0:	1b64      	subs	r4, r4, r5
 8004ca2:	10a4      	asrs	r4, r4, #2
 8004ca4:	2600      	movs	r6, #0
 8004ca6:	42a6      	cmp	r6, r4
 8004ca8:	d105      	bne.n	8004cb6 <__libc_init_array+0x2e>
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb0:	4798      	blx	r3
 8004cb2:	3601      	adds	r6, #1
 8004cb4:	e7ee      	b.n	8004c94 <__libc_init_array+0xc>
 8004cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cba:	4798      	blx	r3
 8004cbc:	3601      	adds	r6, #1
 8004cbe:	e7f2      	b.n	8004ca6 <__libc_init_array+0x1e>
 8004cc0:	08006c7c 	.word	0x08006c7c
 8004cc4:	08006c7c 	.word	0x08006c7c
 8004cc8:	08006c7c 	.word	0x08006c7c
 8004ccc:	08006c80 	.word	0x08006c80

08004cd0 <__retarget_lock_init_recursive>:
 8004cd0:	4770      	bx	lr

08004cd2 <__retarget_lock_acquire_recursive>:
 8004cd2:	4770      	bx	lr

08004cd4 <__retarget_lock_release_recursive>:
 8004cd4:	4770      	bx	lr

08004cd6 <quorem>:
 8004cd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	6903      	ldr	r3, [r0, #16]
 8004cdc:	690c      	ldr	r4, [r1, #16]
 8004cde:	42a3      	cmp	r3, r4
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	db7e      	blt.n	8004de2 <quorem+0x10c>
 8004ce4:	3c01      	subs	r4, #1
 8004ce6:	f101 0814 	add.w	r8, r1, #20
 8004cea:	f100 0514 	add.w	r5, r0, #20
 8004cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d08:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d0c:	d331      	bcc.n	8004d72 <quorem+0x9c>
 8004d0e:	f04f 0e00 	mov.w	lr, #0
 8004d12:	4640      	mov	r0, r8
 8004d14:	46ac      	mov	ip, r5
 8004d16:	46f2      	mov	sl, lr
 8004d18:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d1c:	b293      	uxth	r3, r2
 8004d1e:	fb06 e303 	mla	r3, r6, r3, lr
 8004d22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d26:	0c1a      	lsrs	r2, r3, #16
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	ebaa 0303 	sub.w	r3, sl, r3
 8004d2e:	f8dc a000 	ldr.w	sl, [ip]
 8004d32:	fa13 f38a 	uxtah	r3, r3, sl
 8004d36:	fb06 220e 	mla	r2, r6, lr, r2
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	9b00      	ldr	r3, [sp, #0]
 8004d3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d42:	b292      	uxth	r2, r2
 8004d44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004d50:	4581      	cmp	r9, r0
 8004d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d56:	f84c 3b04 	str.w	r3, [ip], #4
 8004d5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d5e:	d2db      	bcs.n	8004d18 <quorem+0x42>
 8004d60:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d64:	b92b      	cbnz	r3, 8004d72 <quorem+0x9c>
 8004d66:	9b01      	ldr	r3, [sp, #4]
 8004d68:	3b04      	subs	r3, #4
 8004d6a:	429d      	cmp	r5, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	d32c      	bcc.n	8004dca <quorem+0xf4>
 8004d70:	613c      	str	r4, [r7, #16]
 8004d72:	4638      	mov	r0, r7
 8004d74:	f001 f9a6 	bl	80060c4 <__mcmp>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	db22      	blt.n	8004dc2 <quorem+0xec>
 8004d7c:	3601      	adds	r6, #1
 8004d7e:	4629      	mov	r1, r5
 8004d80:	2000      	movs	r0, #0
 8004d82:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d86:	f8d1 c000 	ldr.w	ip, [r1]
 8004d8a:	b293      	uxth	r3, r2
 8004d8c:	1ac3      	subs	r3, r0, r3
 8004d8e:	0c12      	lsrs	r2, r2, #16
 8004d90:	fa13 f38c 	uxtah	r3, r3, ip
 8004d94:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004d98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004da2:	45c1      	cmp	r9, r8
 8004da4:	f841 3b04 	str.w	r3, [r1], #4
 8004da8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004dac:	d2e9      	bcs.n	8004d82 <quorem+0xac>
 8004dae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004db2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004db6:	b922      	cbnz	r2, 8004dc2 <quorem+0xec>
 8004db8:	3b04      	subs	r3, #4
 8004dba:	429d      	cmp	r5, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	d30a      	bcc.n	8004dd6 <quorem+0x100>
 8004dc0:	613c      	str	r4, [r7, #16]
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	b003      	add	sp, #12
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	3b04      	subs	r3, #4
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	d1ce      	bne.n	8004d70 <quorem+0x9a>
 8004dd2:	3c01      	subs	r4, #1
 8004dd4:	e7c9      	b.n	8004d6a <quorem+0x94>
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <quorem+0xea>
 8004dde:	3c01      	subs	r4, #1
 8004de0:	e7eb      	b.n	8004dba <quorem+0xe4>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e7ee      	b.n	8004dc4 <quorem+0xee>
	...

08004de8 <_dtoa_r>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	ed2d 8b04 	vpush	{d8-d9}
 8004df0:	69c5      	ldr	r5, [r0, #28]
 8004df2:	b093      	sub	sp, #76	; 0x4c
 8004df4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004df8:	ec57 6b10 	vmov	r6, r7, d0
 8004dfc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e00:	9107      	str	r1, [sp, #28]
 8004e02:	4604      	mov	r4, r0
 8004e04:	920a      	str	r2, [sp, #40]	; 0x28
 8004e06:	930d      	str	r3, [sp, #52]	; 0x34
 8004e08:	b975      	cbnz	r5, 8004e28 <_dtoa_r+0x40>
 8004e0a:	2010      	movs	r0, #16
 8004e0c:	f000 fe2a 	bl	8005a64 <malloc>
 8004e10:	4602      	mov	r2, r0
 8004e12:	61e0      	str	r0, [r4, #28]
 8004e14:	b920      	cbnz	r0, 8004e20 <_dtoa_r+0x38>
 8004e16:	4bae      	ldr	r3, [pc, #696]	; (80050d0 <_dtoa_r+0x2e8>)
 8004e18:	21ef      	movs	r1, #239	; 0xef
 8004e1a:	48ae      	ldr	r0, [pc, #696]	; (80050d4 <_dtoa_r+0x2ec>)
 8004e1c:	f001 fc6c 	bl	80066f8 <__assert_func>
 8004e20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e24:	6005      	str	r5, [r0, #0]
 8004e26:	60c5      	str	r5, [r0, #12]
 8004e28:	69e3      	ldr	r3, [r4, #28]
 8004e2a:	6819      	ldr	r1, [r3, #0]
 8004e2c:	b151      	cbz	r1, 8004e44 <_dtoa_r+0x5c>
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	604a      	str	r2, [r1, #4]
 8004e32:	2301      	movs	r3, #1
 8004e34:	4093      	lsls	r3, r2
 8004e36:	608b      	str	r3, [r1, #8]
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 ff07 	bl	8005c4c <_Bfree>
 8004e3e:	69e3      	ldr	r3, [r4, #28]
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	1e3b      	subs	r3, r7, #0
 8004e46:	bfbb      	ittet	lt
 8004e48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e4c:	9303      	strlt	r3, [sp, #12]
 8004e4e:	2300      	movge	r3, #0
 8004e50:	2201      	movlt	r2, #1
 8004e52:	bfac      	ite	ge
 8004e54:	f8c8 3000 	strge.w	r3, [r8]
 8004e58:	f8c8 2000 	strlt.w	r2, [r8]
 8004e5c:	4b9e      	ldr	r3, [pc, #632]	; (80050d8 <_dtoa_r+0x2f0>)
 8004e5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e62:	ea33 0308 	bics.w	r3, r3, r8
 8004e66:	d11b      	bne.n	8004ea0 <_dtoa_r+0xb8>
 8004e68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004e74:	4333      	orrs	r3, r6
 8004e76:	f000 8593 	beq.w	80059a0 <_dtoa_r+0xbb8>
 8004e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e7c:	b963      	cbnz	r3, 8004e98 <_dtoa_r+0xb0>
 8004e7e:	4b97      	ldr	r3, [pc, #604]	; (80050dc <_dtoa_r+0x2f4>)
 8004e80:	e027      	b.n	8004ed2 <_dtoa_r+0xea>
 8004e82:	4b97      	ldr	r3, [pc, #604]	; (80050e0 <_dtoa_r+0x2f8>)
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	9800      	ldr	r0, [sp, #0]
 8004e8e:	b013      	add	sp, #76	; 0x4c
 8004e90:	ecbd 8b04 	vpop	{d8-d9}
 8004e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e98:	4b90      	ldr	r3, [pc, #576]	; (80050dc <_dtoa_r+0x2f4>)
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	3303      	adds	r3, #3
 8004e9e:	e7f3      	b.n	8004e88 <_dtoa_r+0xa0>
 8004ea0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	ec51 0b17 	vmov	r0, r1, d7
 8004eaa:	eeb0 8a47 	vmov.f32	s16, s14
 8004eae:	eef0 8a67 	vmov.f32	s17, s15
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f7fb fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eb8:	4681      	mov	r9, r0
 8004eba:	b160      	cbz	r0, 8004ed6 <_dtoa_r+0xee>
 8004ebc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8568 	beq.w	800599a <_dtoa_r+0xbb2>
 8004eca:	4b86      	ldr	r3, [pc, #536]	; (80050e4 <_dtoa_r+0x2fc>)
 8004ecc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	e7da      	b.n	8004e8c <_dtoa_r+0xa4>
 8004ed6:	aa10      	add	r2, sp, #64	; 0x40
 8004ed8:	a911      	add	r1, sp, #68	; 0x44
 8004eda:	4620      	mov	r0, r4
 8004edc:	eeb0 0a48 	vmov.f32	s0, s16
 8004ee0:	eef0 0a68 	vmov.f32	s1, s17
 8004ee4:	f001 f994 	bl	8006210 <__d2b>
 8004ee8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004eec:	4682      	mov	sl, r0
 8004eee:	2d00      	cmp	r5, #0
 8004ef0:	d07f      	beq.n	8004ff2 <_dtoa_r+0x20a>
 8004ef2:	ee18 3a90 	vmov	r3, s17
 8004ef6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004efa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004efe:	ec51 0b18 	vmov	r0, r1, d8
 8004f02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f0e:	4619      	mov	r1, r3
 8004f10:	2200      	movs	r2, #0
 8004f12:	4b75      	ldr	r3, [pc, #468]	; (80050e8 <_dtoa_r+0x300>)
 8004f14:	f7fb f9b8 	bl	8000288 <__aeabi_dsub>
 8004f18:	a367      	add	r3, pc, #412	; (adr r3, 80050b8 <_dtoa_r+0x2d0>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fb6b 	bl	80005f8 <__aeabi_dmul>
 8004f22:	a367      	add	r3, pc, #412	; (adr r3, 80050c0 <_dtoa_r+0x2d8>)
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	f7fb f9b0 	bl	800028c <__adddf3>
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	4628      	mov	r0, r5
 8004f30:	460f      	mov	r7, r1
 8004f32:	f7fb faf7 	bl	8000524 <__aeabi_i2d>
 8004f36:	a364      	add	r3, pc, #400	; (adr r3, 80050c8 <_dtoa_r+0x2e0>)
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb fb5c 	bl	80005f8 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4630      	mov	r0, r6
 8004f46:	4639      	mov	r1, r7
 8004f48:	f7fb f9a0 	bl	800028c <__adddf3>
 8004f4c:	4606      	mov	r6, r0
 8004f4e:	460f      	mov	r7, r1
 8004f50:	f7fb fe02 	bl	8000b58 <__aeabi_d2iz>
 8004f54:	2200      	movs	r2, #0
 8004f56:	4683      	mov	fp, r0
 8004f58:	2300      	movs	r3, #0
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	4639      	mov	r1, r7
 8004f5e:	f7fb fdbd 	bl	8000adc <__aeabi_dcmplt>
 8004f62:	b148      	cbz	r0, 8004f78 <_dtoa_r+0x190>
 8004f64:	4658      	mov	r0, fp
 8004f66:	f7fb fadd 	bl	8000524 <__aeabi_i2d>
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	f7fb fdab 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f72:	b908      	cbnz	r0, 8004f78 <_dtoa_r+0x190>
 8004f74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f78:	f1bb 0f16 	cmp.w	fp, #22
 8004f7c:	d857      	bhi.n	800502e <_dtoa_r+0x246>
 8004f7e:	4b5b      	ldr	r3, [pc, #364]	; (80050ec <_dtoa_r+0x304>)
 8004f80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	ec51 0b18 	vmov	r0, r1, d8
 8004f8c:	f7fb fda6 	bl	8000adc <__aeabi_dcmplt>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d04e      	beq.n	8005032 <_dtoa_r+0x24a>
 8004f94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f98:	2300      	movs	r3, #0
 8004f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8004f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f9e:	1b5b      	subs	r3, r3, r5
 8004fa0:	1e5a      	subs	r2, r3, #1
 8004fa2:	bf45      	ittet	mi
 8004fa4:	f1c3 0301 	rsbmi	r3, r3, #1
 8004fa8:	9305      	strmi	r3, [sp, #20]
 8004faa:	2300      	movpl	r3, #0
 8004fac:	2300      	movmi	r3, #0
 8004fae:	9206      	str	r2, [sp, #24]
 8004fb0:	bf54      	ite	pl
 8004fb2:	9305      	strpl	r3, [sp, #20]
 8004fb4:	9306      	strmi	r3, [sp, #24]
 8004fb6:	f1bb 0f00 	cmp.w	fp, #0
 8004fba:	db3c      	blt.n	8005036 <_dtoa_r+0x24e>
 8004fbc:	9b06      	ldr	r3, [sp, #24]
 8004fbe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004fc2:	445b      	add	r3, fp
 8004fc4:	9306      	str	r3, [sp, #24]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9308      	str	r3, [sp, #32]
 8004fca:	9b07      	ldr	r3, [sp, #28]
 8004fcc:	2b09      	cmp	r3, #9
 8004fce:	d868      	bhi.n	80050a2 <_dtoa_r+0x2ba>
 8004fd0:	2b05      	cmp	r3, #5
 8004fd2:	bfc4      	itt	gt
 8004fd4:	3b04      	subgt	r3, #4
 8004fd6:	9307      	strgt	r3, [sp, #28]
 8004fd8:	9b07      	ldr	r3, [sp, #28]
 8004fda:	f1a3 0302 	sub.w	r3, r3, #2
 8004fde:	bfcc      	ite	gt
 8004fe0:	2500      	movgt	r5, #0
 8004fe2:	2501      	movle	r5, #1
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	f200 8085 	bhi.w	80050f4 <_dtoa_r+0x30c>
 8004fea:	e8df f003 	tbb	[pc, r3]
 8004fee:	3b2e      	.short	0x3b2e
 8004ff0:	5839      	.short	0x5839
 8004ff2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004ff6:	441d      	add	r5, r3
 8004ff8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	bfc1      	itttt	gt
 8005000:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005004:	fa08 f803 	lslgt.w	r8, r8, r3
 8005008:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800500c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005010:	bfd6      	itet	le
 8005012:	f1c3 0320 	rsble	r3, r3, #32
 8005016:	ea48 0003 	orrgt.w	r0, r8, r3
 800501a:	fa06 f003 	lslle.w	r0, r6, r3
 800501e:	f7fb fa71 	bl	8000504 <__aeabi_ui2d>
 8005022:	2201      	movs	r2, #1
 8005024:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005028:	3d01      	subs	r5, #1
 800502a:	920e      	str	r2, [sp, #56]	; 0x38
 800502c:	e76f      	b.n	8004f0e <_dtoa_r+0x126>
 800502e:	2301      	movs	r3, #1
 8005030:	e7b3      	b.n	8004f9a <_dtoa_r+0x1b2>
 8005032:	900c      	str	r0, [sp, #48]	; 0x30
 8005034:	e7b2      	b.n	8004f9c <_dtoa_r+0x1b4>
 8005036:	9b05      	ldr	r3, [sp, #20]
 8005038:	eba3 030b 	sub.w	r3, r3, fp
 800503c:	9305      	str	r3, [sp, #20]
 800503e:	f1cb 0300 	rsb	r3, fp, #0
 8005042:	9308      	str	r3, [sp, #32]
 8005044:	2300      	movs	r3, #0
 8005046:	930b      	str	r3, [sp, #44]	; 0x2c
 8005048:	e7bf      	b.n	8004fca <_dtoa_r+0x1e2>
 800504a:	2300      	movs	r3, #0
 800504c:	9309      	str	r3, [sp, #36]	; 0x24
 800504e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005050:	2b00      	cmp	r3, #0
 8005052:	dc52      	bgt.n	80050fa <_dtoa_r+0x312>
 8005054:	2301      	movs	r3, #1
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	9304      	str	r3, [sp, #16]
 800505a:	461a      	mov	r2, r3
 800505c:	920a      	str	r2, [sp, #40]	; 0x28
 800505e:	e00b      	b.n	8005078 <_dtoa_r+0x290>
 8005060:	2301      	movs	r3, #1
 8005062:	e7f3      	b.n	800504c <_dtoa_r+0x264>
 8005064:	2300      	movs	r3, #0
 8005066:	9309      	str	r3, [sp, #36]	; 0x24
 8005068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506a:	445b      	add	r3, fp
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	3301      	adds	r3, #1
 8005070:	2b01      	cmp	r3, #1
 8005072:	9304      	str	r3, [sp, #16]
 8005074:	bfb8      	it	lt
 8005076:	2301      	movlt	r3, #1
 8005078:	69e0      	ldr	r0, [r4, #28]
 800507a:	2100      	movs	r1, #0
 800507c:	2204      	movs	r2, #4
 800507e:	f102 0614 	add.w	r6, r2, #20
 8005082:	429e      	cmp	r6, r3
 8005084:	d93d      	bls.n	8005102 <_dtoa_r+0x31a>
 8005086:	6041      	str	r1, [r0, #4]
 8005088:	4620      	mov	r0, r4
 800508a:	f000 fd9f 	bl	8005bcc <_Balloc>
 800508e:	9000      	str	r0, [sp, #0]
 8005090:	2800      	cmp	r0, #0
 8005092:	d139      	bne.n	8005108 <_dtoa_r+0x320>
 8005094:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <_dtoa_r+0x308>)
 8005096:	4602      	mov	r2, r0
 8005098:	f240 11af 	movw	r1, #431	; 0x1af
 800509c:	e6bd      	b.n	8004e1a <_dtoa_r+0x32>
 800509e:	2301      	movs	r3, #1
 80050a0:	e7e1      	b.n	8005066 <_dtoa_r+0x27e>
 80050a2:	2501      	movs	r5, #1
 80050a4:	2300      	movs	r3, #0
 80050a6:	9307      	str	r3, [sp, #28]
 80050a8:	9509      	str	r5, [sp, #36]	; 0x24
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	9304      	str	r3, [sp, #16]
 80050b2:	2200      	movs	r2, #0
 80050b4:	2312      	movs	r3, #18
 80050b6:	e7d1      	b.n	800505c <_dtoa_r+0x274>
 80050b8:	636f4361 	.word	0x636f4361
 80050bc:	3fd287a7 	.word	0x3fd287a7
 80050c0:	8b60c8b3 	.word	0x8b60c8b3
 80050c4:	3fc68a28 	.word	0x3fc68a28
 80050c8:	509f79fb 	.word	0x509f79fb
 80050cc:	3fd34413 	.word	0x3fd34413
 80050d0:	08006941 	.word	0x08006941
 80050d4:	08006958 	.word	0x08006958
 80050d8:	7ff00000 	.word	0x7ff00000
 80050dc:	0800693d 	.word	0x0800693d
 80050e0:	08006934 	.word	0x08006934
 80050e4:	08006911 	.word	0x08006911
 80050e8:	3ff80000 	.word	0x3ff80000
 80050ec:	08006a48 	.word	0x08006a48
 80050f0:	080069b0 	.word	0x080069b0
 80050f4:	2301      	movs	r3, #1
 80050f6:	9309      	str	r3, [sp, #36]	; 0x24
 80050f8:	e7d7      	b.n	80050aa <_dtoa_r+0x2c2>
 80050fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	9304      	str	r3, [sp, #16]
 8005100:	e7ba      	b.n	8005078 <_dtoa_r+0x290>
 8005102:	3101      	adds	r1, #1
 8005104:	0052      	lsls	r2, r2, #1
 8005106:	e7ba      	b.n	800507e <_dtoa_r+0x296>
 8005108:	69e3      	ldr	r3, [r4, #28]
 800510a:	9a00      	ldr	r2, [sp, #0]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	9b04      	ldr	r3, [sp, #16]
 8005110:	2b0e      	cmp	r3, #14
 8005112:	f200 80a8 	bhi.w	8005266 <_dtoa_r+0x47e>
 8005116:	2d00      	cmp	r5, #0
 8005118:	f000 80a5 	beq.w	8005266 <_dtoa_r+0x47e>
 800511c:	f1bb 0f00 	cmp.w	fp, #0
 8005120:	dd38      	ble.n	8005194 <_dtoa_r+0x3ac>
 8005122:	4bc0      	ldr	r3, [pc, #768]	; (8005424 <_dtoa_r+0x63c>)
 8005124:	f00b 020f 	and.w	r2, fp, #15
 8005128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800512c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005130:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005134:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005138:	d019      	beq.n	800516e <_dtoa_r+0x386>
 800513a:	4bbb      	ldr	r3, [pc, #748]	; (8005428 <_dtoa_r+0x640>)
 800513c:	ec51 0b18 	vmov	r0, r1, d8
 8005140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005144:	f7fb fb82 	bl	800084c <__aeabi_ddiv>
 8005148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800514c:	f008 080f 	and.w	r8, r8, #15
 8005150:	2503      	movs	r5, #3
 8005152:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005428 <_dtoa_r+0x640>
 8005156:	f1b8 0f00 	cmp.w	r8, #0
 800515a:	d10a      	bne.n	8005172 <_dtoa_r+0x38a>
 800515c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005160:	4632      	mov	r2, r6
 8005162:	463b      	mov	r3, r7
 8005164:	f7fb fb72 	bl	800084c <__aeabi_ddiv>
 8005168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800516c:	e02b      	b.n	80051c6 <_dtoa_r+0x3de>
 800516e:	2502      	movs	r5, #2
 8005170:	e7ef      	b.n	8005152 <_dtoa_r+0x36a>
 8005172:	f018 0f01 	tst.w	r8, #1
 8005176:	d008      	beq.n	800518a <_dtoa_r+0x3a2>
 8005178:	4630      	mov	r0, r6
 800517a:	4639      	mov	r1, r7
 800517c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005180:	f7fb fa3a 	bl	80005f8 <__aeabi_dmul>
 8005184:	3501      	adds	r5, #1
 8005186:	4606      	mov	r6, r0
 8005188:	460f      	mov	r7, r1
 800518a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800518e:	f109 0908 	add.w	r9, r9, #8
 8005192:	e7e0      	b.n	8005156 <_dtoa_r+0x36e>
 8005194:	f000 809f 	beq.w	80052d6 <_dtoa_r+0x4ee>
 8005198:	f1cb 0600 	rsb	r6, fp, #0
 800519c:	4ba1      	ldr	r3, [pc, #644]	; (8005424 <_dtoa_r+0x63c>)
 800519e:	4fa2      	ldr	r7, [pc, #648]	; (8005428 <_dtoa_r+0x640>)
 80051a0:	f006 020f 	and.w	r2, r6, #15
 80051a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	ec51 0b18 	vmov	r0, r1, d8
 80051b0:	f7fb fa22 	bl	80005f8 <__aeabi_dmul>
 80051b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051b8:	1136      	asrs	r6, r6, #4
 80051ba:	2300      	movs	r3, #0
 80051bc:	2502      	movs	r5, #2
 80051be:	2e00      	cmp	r6, #0
 80051c0:	d17e      	bne.n	80052c0 <_dtoa_r+0x4d8>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1d0      	bne.n	8005168 <_dtoa_r+0x380>
 80051c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8084 	beq.w	80052da <_dtoa_r+0x4f2>
 80051d2:	4b96      	ldr	r3, [pc, #600]	; (800542c <_dtoa_r+0x644>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	4640      	mov	r0, r8
 80051d8:	4649      	mov	r1, r9
 80051da:	f7fb fc7f 	bl	8000adc <__aeabi_dcmplt>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d07b      	beq.n	80052da <_dtoa_r+0x4f2>
 80051e2:	9b04      	ldr	r3, [sp, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d078      	beq.n	80052da <_dtoa_r+0x4f2>
 80051e8:	9b01      	ldr	r3, [sp, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	dd39      	ble.n	8005262 <_dtoa_r+0x47a>
 80051ee:	4b90      	ldr	r3, [pc, #576]	; (8005430 <_dtoa_r+0x648>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	4640      	mov	r0, r8
 80051f4:	4649      	mov	r1, r9
 80051f6:	f7fb f9ff 	bl	80005f8 <__aeabi_dmul>
 80051fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051fe:	9e01      	ldr	r6, [sp, #4]
 8005200:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005204:	3501      	adds	r5, #1
 8005206:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800520a:	4628      	mov	r0, r5
 800520c:	f7fb f98a 	bl	8000524 <__aeabi_i2d>
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	f7fb f9f0 	bl	80005f8 <__aeabi_dmul>
 8005218:	4b86      	ldr	r3, [pc, #536]	; (8005434 <_dtoa_r+0x64c>)
 800521a:	2200      	movs	r2, #0
 800521c:	f7fb f836 	bl	800028c <__adddf3>
 8005220:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005228:	9303      	str	r3, [sp, #12]
 800522a:	2e00      	cmp	r6, #0
 800522c:	d158      	bne.n	80052e0 <_dtoa_r+0x4f8>
 800522e:	4b82      	ldr	r3, [pc, #520]	; (8005438 <_dtoa_r+0x650>)
 8005230:	2200      	movs	r2, #0
 8005232:	4640      	mov	r0, r8
 8005234:	4649      	mov	r1, r9
 8005236:	f7fb f827 	bl	8000288 <__aeabi_dsub>
 800523a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800523e:	4680      	mov	r8, r0
 8005240:	4689      	mov	r9, r1
 8005242:	f7fb fc69 	bl	8000b18 <__aeabi_dcmpgt>
 8005246:	2800      	cmp	r0, #0
 8005248:	f040 8296 	bne.w	8005778 <_dtoa_r+0x990>
 800524c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005250:	4640      	mov	r0, r8
 8005252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005256:	4649      	mov	r1, r9
 8005258:	f7fb fc40 	bl	8000adc <__aeabi_dcmplt>
 800525c:	2800      	cmp	r0, #0
 800525e:	f040 8289 	bne.w	8005774 <_dtoa_r+0x98c>
 8005262:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005266:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005268:	2b00      	cmp	r3, #0
 800526a:	f2c0 814e 	blt.w	800550a <_dtoa_r+0x722>
 800526e:	f1bb 0f0e 	cmp.w	fp, #14
 8005272:	f300 814a 	bgt.w	800550a <_dtoa_r+0x722>
 8005276:	4b6b      	ldr	r3, [pc, #428]	; (8005424 <_dtoa_r+0x63c>)
 8005278:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800527c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	f280 80dc 	bge.w	8005440 <_dtoa_r+0x658>
 8005288:	9b04      	ldr	r3, [sp, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f300 80d8 	bgt.w	8005440 <_dtoa_r+0x658>
 8005290:	f040 826f 	bne.w	8005772 <_dtoa_r+0x98a>
 8005294:	4b68      	ldr	r3, [pc, #416]	; (8005438 <_dtoa_r+0x650>)
 8005296:	2200      	movs	r2, #0
 8005298:	4640      	mov	r0, r8
 800529a:	4649      	mov	r1, r9
 800529c:	f7fb f9ac 	bl	80005f8 <__aeabi_dmul>
 80052a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052a4:	f7fb fc2e 	bl	8000b04 <__aeabi_dcmpge>
 80052a8:	9e04      	ldr	r6, [sp, #16]
 80052aa:	4637      	mov	r7, r6
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f040 8245 	bne.w	800573c <_dtoa_r+0x954>
 80052b2:	9d00      	ldr	r5, [sp, #0]
 80052b4:	2331      	movs	r3, #49	; 0x31
 80052b6:	f805 3b01 	strb.w	r3, [r5], #1
 80052ba:	f10b 0b01 	add.w	fp, fp, #1
 80052be:	e241      	b.n	8005744 <_dtoa_r+0x95c>
 80052c0:	07f2      	lsls	r2, r6, #31
 80052c2:	d505      	bpl.n	80052d0 <_dtoa_r+0x4e8>
 80052c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c8:	f7fb f996 	bl	80005f8 <__aeabi_dmul>
 80052cc:	3501      	adds	r5, #1
 80052ce:	2301      	movs	r3, #1
 80052d0:	1076      	asrs	r6, r6, #1
 80052d2:	3708      	adds	r7, #8
 80052d4:	e773      	b.n	80051be <_dtoa_r+0x3d6>
 80052d6:	2502      	movs	r5, #2
 80052d8:	e775      	b.n	80051c6 <_dtoa_r+0x3de>
 80052da:	9e04      	ldr	r6, [sp, #16]
 80052dc:	465f      	mov	r7, fp
 80052de:	e792      	b.n	8005206 <_dtoa_r+0x41e>
 80052e0:	9900      	ldr	r1, [sp, #0]
 80052e2:	4b50      	ldr	r3, [pc, #320]	; (8005424 <_dtoa_r+0x63c>)
 80052e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052e8:	4431      	add	r1, r6
 80052ea:	9102      	str	r1, [sp, #8]
 80052ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ee:	eeb0 9a47 	vmov.f32	s18, s14
 80052f2:	eef0 9a67 	vmov.f32	s19, s15
 80052f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80052fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052fe:	2900      	cmp	r1, #0
 8005300:	d044      	beq.n	800538c <_dtoa_r+0x5a4>
 8005302:	494e      	ldr	r1, [pc, #312]	; (800543c <_dtoa_r+0x654>)
 8005304:	2000      	movs	r0, #0
 8005306:	f7fb faa1 	bl	800084c <__aeabi_ddiv>
 800530a:	ec53 2b19 	vmov	r2, r3, d9
 800530e:	f7fa ffbb 	bl	8000288 <__aeabi_dsub>
 8005312:	9d00      	ldr	r5, [sp, #0]
 8005314:	ec41 0b19 	vmov	d9, r0, r1
 8005318:	4649      	mov	r1, r9
 800531a:	4640      	mov	r0, r8
 800531c:	f7fb fc1c 	bl	8000b58 <__aeabi_d2iz>
 8005320:	4606      	mov	r6, r0
 8005322:	f7fb f8ff 	bl	8000524 <__aeabi_i2d>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fa ffab 	bl	8000288 <__aeabi_dsub>
 8005332:	3630      	adds	r6, #48	; 0x30
 8005334:	f805 6b01 	strb.w	r6, [r5], #1
 8005338:	ec53 2b19 	vmov	r2, r3, d9
 800533c:	4680      	mov	r8, r0
 800533e:	4689      	mov	r9, r1
 8005340:	f7fb fbcc 	bl	8000adc <__aeabi_dcmplt>
 8005344:	2800      	cmp	r0, #0
 8005346:	d164      	bne.n	8005412 <_dtoa_r+0x62a>
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	4937      	ldr	r1, [pc, #220]	; (800542c <_dtoa_r+0x644>)
 800534e:	2000      	movs	r0, #0
 8005350:	f7fa ff9a 	bl	8000288 <__aeabi_dsub>
 8005354:	ec53 2b19 	vmov	r2, r3, d9
 8005358:	f7fb fbc0 	bl	8000adc <__aeabi_dcmplt>
 800535c:	2800      	cmp	r0, #0
 800535e:	f040 80b6 	bne.w	80054ce <_dtoa_r+0x6e6>
 8005362:	9b02      	ldr	r3, [sp, #8]
 8005364:	429d      	cmp	r5, r3
 8005366:	f43f af7c 	beq.w	8005262 <_dtoa_r+0x47a>
 800536a:	4b31      	ldr	r3, [pc, #196]	; (8005430 <_dtoa_r+0x648>)
 800536c:	ec51 0b19 	vmov	r0, r1, d9
 8005370:	2200      	movs	r2, #0
 8005372:	f7fb f941 	bl	80005f8 <__aeabi_dmul>
 8005376:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <_dtoa_r+0x648>)
 8005378:	ec41 0b19 	vmov	d9, r0, r1
 800537c:	2200      	movs	r2, #0
 800537e:	4640      	mov	r0, r8
 8005380:	4649      	mov	r1, r9
 8005382:	f7fb f939 	bl	80005f8 <__aeabi_dmul>
 8005386:	4680      	mov	r8, r0
 8005388:	4689      	mov	r9, r1
 800538a:	e7c5      	b.n	8005318 <_dtoa_r+0x530>
 800538c:	ec51 0b17 	vmov	r0, r1, d7
 8005390:	f7fb f932 	bl	80005f8 <__aeabi_dmul>
 8005394:	9b02      	ldr	r3, [sp, #8]
 8005396:	9d00      	ldr	r5, [sp, #0]
 8005398:	930f      	str	r3, [sp, #60]	; 0x3c
 800539a:	ec41 0b19 	vmov	d9, r0, r1
 800539e:	4649      	mov	r1, r9
 80053a0:	4640      	mov	r0, r8
 80053a2:	f7fb fbd9 	bl	8000b58 <__aeabi_d2iz>
 80053a6:	4606      	mov	r6, r0
 80053a8:	f7fb f8bc 	bl	8000524 <__aeabi_i2d>
 80053ac:	3630      	adds	r6, #48	; 0x30
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4640      	mov	r0, r8
 80053b4:	4649      	mov	r1, r9
 80053b6:	f7fa ff67 	bl	8000288 <__aeabi_dsub>
 80053ba:	f805 6b01 	strb.w	r6, [r5], #1
 80053be:	9b02      	ldr	r3, [sp, #8]
 80053c0:	429d      	cmp	r5, r3
 80053c2:	4680      	mov	r8, r0
 80053c4:	4689      	mov	r9, r1
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	d124      	bne.n	8005416 <_dtoa_r+0x62e>
 80053cc:	4b1b      	ldr	r3, [pc, #108]	; (800543c <_dtoa_r+0x654>)
 80053ce:	ec51 0b19 	vmov	r0, r1, d9
 80053d2:	f7fa ff5b 	bl	800028c <__adddf3>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4640      	mov	r0, r8
 80053dc:	4649      	mov	r1, r9
 80053de:	f7fb fb9b 	bl	8000b18 <__aeabi_dcmpgt>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d173      	bne.n	80054ce <_dtoa_r+0x6e6>
 80053e6:	ec53 2b19 	vmov	r2, r3, d9
 80053ea:	4914      	ldr	r1, [pc, #80]	; (800543c <_dtoa_r+0x654>)
 80053ec:	2000      	movs	r0, #0
 80053ee:	f7fa ff4b 	bl	8000288 <__aeabi_dsub>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4640      	mov	r0, r8
 80053f8:	4649      	mov	r1, r9
 80053fa:	f7fb fb6f 	bl	8000adc <__aeabi_dcmplt>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f43f af2f 	beq.w	8005262 <_dtoa_r+0x47a>
 8005404:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005406:	1e6b      	subs	r3, r5, #1
 8005408:	930f      	str	r3, [sp, #60]	; 0x3c
 800540a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d0f8      	beq.n	8005404 <_dtoa_r+0x61c>
 8005412:	46bb      	mov	fp, r7
 8005414:	e04a      	b.n	80054ac <_dtoa_r+0x6c4>
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <_dtoa_r+0x648>)
 8005418:	f7fb f8ee 	bl	80005f8 <__aeabi_dmul>
 800541c:	4680      	mov	r8, r0
 800541e:	4689      	mov	r9, r1
 8005420:	e7bd      	b.n	800539e <_dtoa_r+0x5b6>
 8005422:	bf00      	nop
 8005424:	08006a48 	.word	0x08006a48
 8005428:	08006a20 	.word	0x08006a20
 800542c:	3ff00000 	.word	0x3ff00000
 8005430:	40240000 	.word	0x40240000
 8005434:	401c0000 	.word	0x401c0000
 8005438:	40140000 	.word	0x40140000
 800543c:	3fe00000 	.word	0x3fe00000
 8005440:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005444:	9d00      	ldr	r5, [sp, #0]
 8005446:	4642      	mov	r2, r8
 8005448:	464b      	mov	r3, r9
 800544a:	4630      	mov	r0, r6
 800544c:	4639      	mov	r1, r7
 800544e:	f7fb f9fd 	bl	800084c <__aeabi_ddiv>
 8005452:	f7fb fb81 	bl	8000b58 <__aeabi_d2iz>
 8005456:	9001      	str	r0, [sp, #4]
 8005458:	f7fb f864 	bl	8000524 <__aeabi_i2d>
 800545c:	4642      	mov	r2, r8
 800545e:	464b      	mov	r3, r9
 8005460:	f7fb f8ca 	bl	80005f8 <__aeabi_dmul>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4630      	mov	r0, r6
 800546a:	4639      	mov	r1, r7
 800546c:	f7fa ff0c 	bl	8000288 <__aeabi_dsub>
 8005470:	9e01      	ldr	r6, [sp, #4]
 8005472:	9f04      	ldr	r7, [sp, #16]
 8005474:	3630      	adds	r6, #48	; 0x30
 8005476:	f805 6b01 	strb.w	r6, [r5], #1
 800547a:	9e00      	ldr	r6, [sp, #0]
 800547c:	1bae      	subs	r6, r5, r6
 800547e:	42b7      	cmp	r7, r6
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	d134      	bne.n	80054f0 <_dtoa_r+0x708>
 8005486:	f7fa ff01 	bl	800028c <__adddf3>
 800548a:	4642      	mov	r2, r8
 800548c:	464b      	mov	r3, r9
 800548e:	4606      	mov	r6, r0
 8005490:	460f      	mov	r7, r1
 8005492:	f7fb fb41 	bl	8000b18 <__aeabi_dcmpgt>
 8005496:	b9c8      	cbnz	r0, 80054cc <_dtoa_r+0x6e4>
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	f7fb fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 80054a4:	b110      	cbz	r0, 80054ac <_dtoa_r+0x6c4>
 80054a6:	9b01      	ldr	r3, [sp, #4]
 80054a8:	07db      	lsls	r3, r3, #31
 80054aa:	d40f      	bmi.n	80054cc <_dtoa_r+0x6e4>
 80054ac:	4651      	mov	r1, sl
 80054ae:	4620      	mov	r0, r4
 80054b0:	f000 fbcc 	bl	8005c4c <_Bfree>
 80054b4:	2300      	movs	r3, #0
 80054b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054b8:	702b      	strb	r3, [r5, #0]
 80054ba:	f10b 0301 	add.w	r3, fp, #1
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f43f ace2 	beq.w	8004e8c <_dtoa_r+0xa4>
 80054c8:	601d      	str	r5, [r3, #0]
 80054ca:	e4df      	b.n	8004e8c <_dtoa_r+0xa4>
 80054cc:	465f      	mov	r7, fp
 80054ce:	462b      	mov	r3, r5
 80054d0:	461d      	mov	r5, r3
 80054d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054d6:	2a39      	cmp	r2, #57	; 0x39
 80054d8:	d106      	bne.n	80054e8 <_dtoa_r+0x700>
 80054da:	9a00      	ldr	r2, [sp, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d1f7      	bne.n	80054d0 <_dtoa_r+0x6e8>
 80054e0:	9900      	ldr	r1, [sp, #0]
 80054e2:	2230      	movs	r2, #48	; 0x30
 80054e4:	3701      	adds	r7, #1
 80054e6:	700a      	strb	r2, [r1, #0]
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	3201      	adds	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e790      	b.n	8005412 <_dtoa_r+0x62a>
 80054f0:	4ba3      	ldr	r3, [pc, #652]	; (8005780 <_dtoa_r+0x998>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	f7fb f880 	bl	80005f8 <__aeabi_dmul>
 80054f8:	2200      	movs	r2, #0
 80054fa:	2300      	movs	r3, #0
 80054fc:	4606      	mov	r6, r0
 80054fe:	460f      	mov	r7, r1
 8005500:	f7fb fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005504:	2800      	cmp	r0, #0
 8005506:	d09e      	beq.n	8005446 <_dtoa_r+0x65e>
 8005508:	e7d0      	b.n	80054ac <_dtoa_r+0x6c4>
 800550a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550c:	2a00      	cmp	r2, #0
 800550e:	f000 80ca 	beq.w	80056a6 <_dtoa_r+0x8be>
 8005512:	9a07      	ldr	r2, [sp, #28]
 8005514:	2a01      	cmp	r2, #1
 8005516:	f300 80ad 	bgt.w	8005674 <_dtoa_r+0x88c>
 800551a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800551c:	2a00      	cmp	r2, #0
 800551e:	f000 80a5 	beq.w	800566c <_dtoa_r+0x884>
 8005522:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005526:	9e08      	ldr	r6, [sp, #32]
 8005528:	9d05      	ldr	r5, [sp, #20]
 800552a:	9a05      	ldr	r2, [sp, #20]
 800552c:	441a      	add	r2, r3
 800552e:	9205      	str	r2, [sp, #20]
 8005530:	9a06      	ldr	r2, [sp, #24]
 8005532:	2101      	movs	r1, #1
 8005534:	441a      	add	r2, r3
 8005536:	4620      	mov	r0, r4
 8005538:	9206      	str	r2, [sp, #24]
 800553a:	f000 fc3d 	bl	8005db8 <__i2b>
 800553e:	4607      	mov	r7, r0
 8005540:	b165      	cbz	r5, 800555c <_dtoa_r+0x774>
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dd09      	ble.n	800555c <_dtoa_r+0x774>
 8005548:	42ab      	cmp	r3, r5
 800554a:	9a05      	ldr	r2, [sp, #20]
 800554c:	bfa8      	it	ge
 800554e:	462b      	movge	r3, r5
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	9205      	str	r2, [sp, #20]
 8005554:	9a06      	ldr	r2, [sp, #24]
 8005556:	1aed      	subs	r5, r5, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	9306      	str	r3, [sp, #24]
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	b1f3      	cbz	r3, 800559e <_dtoa_r+0x7b6>
 8005560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80a3 	beq.w	80056ae <_dtoa_r+0x8c6>
 8005568:	2e00      	cmp	r6, #0
 800556a:	dd10      	ble.n	800558e <_dtoa_r+0x7a6>
 800556c:	4639      	mov	r1, r7
 800556e:	4632      	mov	r2, r6
 8005570:	4620      	mov	r0, r4
 8005572:	f000 fce1 	bl	8005f38 <__pow5mult>
 8005576:	4652      	mov	r2, sl
 8005578:	4601      	mov	r1, r0
 800557a:	4607      	mov	r7, r0
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fc31 	bl	8005de4 <__multiply>
 8005582:	4651      	mov	r1, sl
 8005584:	4680      	mov	r8, r0
 8005586:	4620      	mov	r0, r4
 8005588:	f000 fb60 	bl	8005c4c <_Bfree>
 800558c:	46c2      	mov	sl, r8
 800558e:	9b08      	ldr	r3, [sp, #32]
 8005590:	1b9a      	subs	r2, r3, r6
 8005592:	d004      	beq.n	800559e <_dtoa_r+0x7b6>
 8005594:	4651      	mov	r1, sl
 8005596:	4620      	mov	r0, r4
 8005598:	f000 fcce 	bl	8005f38 <__pow5mult>
 800559c:	4682      	mov	sl, r0
 800559e:	2101      	movs	r1, #1
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 fc09 	bl	8005db8 <__i2b>
 80055a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	4606      	mov	r6, r0
 80055ac:	f340 8081 	ble.w	80056b2 <_dtoa_r+0x8ca>
 80055b0:	461a      	mov	r2, r3
 80055b2:	4601      	mov	r1, r0
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 fcbf 	bl	8005f38 <__pow5mult>
 80055ba:	9b07      	ldr	r3, [sp, #28]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	4606      	mov	r6, r0
 80055c0:	dd7a      	ble.n	80056b8 <_dtoa_r+0x8d0>
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	6933      	ldr	r3, [r6, #16]
 80055c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055cc:	6918      	ldr	r0, [r3, #16]
 80055ce:	f000 fba5 	bl	8005d1c <__hi0bits>
 80055d2:	f1c0 0020 	rsb	r0, r0, #32
 80055d6:	9b06      	ldr	r3, [sp, #24]
 80055d8:	4418      	add	r0, r3
 80055da:	f010 001f 	ands.w	r0, r0, #31
 80055de:	f000 8094 	beq.w	800570a <_dtoa_r+0x922>
 80055e2:	f1c0 0320 	rsb	r3, r0, #32
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	f340 8085 	ble.w	80056f6 <_dtoa_r+0x90e>
 80055ec:	9b05      	ldr	r3, [sp, #20]
 80055ee:	f1c0 001c 	rsb	r0, r0, #28
 80055f2:	4403      	add	r3, r0
 80055f4:	9305      	str	r3, [sp, #20]
 80055f6:	9b06      	ldr	r3, [sp, #24]
 80055f8:	4403      	add	r3, r0
 80055fa:	4405      	add	r5, r0
 80055fc:	9306      	str	r3, [sp, #24]
 80055fe:	9b05      	ldr	r3, [sp, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	dd05      	ble.n	8005610 <_dtoa_r+0x828>
 8005604:	4651      	mov	r1, sl
 8005606:	461a      	mov	r2, r3
 8005608:	4620      	mov	r0, r4
 800560a:	f000 fcef 	bl	8005fec <__lshift>
 800560e:	4682      	mov	sl, r0
 8005610:	9b06      	ldr	r3, [sp, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	dd05      	ble.n	8005622 <_dtoa_r+0x83a>
 8005616:	4631      	mov	r1, r6
 8005618:	461a      	mov	r2, r3
 800561a:	4620      	mov	r0, r4
 800561c:	f000 fce6 	bl	8005fec <__lshift>
 8005620:	4606      	mov	r6, r0
 8005622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005624:	2b00      	cmp	r3, #0
 8005626:	d072      	beq.n	800570e <_dtoa_r+0x926>
 8005628:	4631      	mov	r1, r6
 800562a:	4650      	mov	r0, sl
 800562c:	f000 fd4a 	bl	80060c4 <__mcmp>
 8005630:	2800      	cmp	r0, #0
 8005632:	da6c      	bge.n	800570e <_dtoa_r+0x926>
 8005634:	2300      	movs	r3, #0
 8005636:	4651      	mov	r1, sl
 8005638:	220a      	movs	r2, #10
 800563a:	4620      	mov	r0, r4
 800563c:	f000 fb28 	bl	8005c90 <__multadd>
 8005640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005642:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005646:	4682      	mov	sl, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 81b0 	beq.w	80059ae <_dtoa_r+0xbc6>
 800564e:	2300      	movs	r3, #0
 8005650:	4639      	mov	r1, r7
 8005652:	220a      	movs	r2, #10
 8005654:	4620      	mov	r0, r4
 8005656:	f000 fb1b 	bl	8005c90 <__multadd>
 800565a:	9b01      	ldr	r3, [sp, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	4607      	mov	r7, r0
 8005660:	f300 8096 	bgt.w	8005790 <_dtoa_r+0x9a8>
 8005664:	9b07      	ldr	r3, [sp, #28]
 8005666:	2b02      	cmp	r3, #2
 8005668:	dc59      	bgt.n	800571e <_dtoa_r+0x936>
 800566a:	e091      	b.n	8005790 <_dtoa_r+0x9a8>
 800566c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800566e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005672:	e758      	b.n	8005526 <_dtoa_r+0x73e>
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	1e5e      	subs	r6, r3, #1
 8005678:	9b08      	ldr	r3, [sp, #32]
 800567a:	42b3      	cmp	r3, r6
 800567c:	bfbf      	itttt	lt
 800567e:	9b08      	ldrlt	r3, [sp, #32]
 8005680:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005682:	9608      	strlt	r6, [sp, #32]
 8005684:	1af3      	sublt	r3, r6, r3
 8005686:	bfb4      	ite	lt
 8005688:	18d2      	addlt	r2, r2, r3
 800568a:	1b9e      	subge	r6, r3, r6
 800568c:	9b04      	ldr	r3, [sp, #16]
 800568e:	bfbc      	itt	lt
 8005690:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005692:	2600      	movlt	r6, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	bfb7      	itett	lt
 8005698:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800569c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80056a0:	1a9d      	sublt	r5, r3, r2
 80056a2:	2300      	movlt	r3, #0
 80056a4:	e741      	b.n	800552a <_dtoa_r+0x742>
 80056a6:	9e08      	ldr	r6, [sp, #32]
 80056a8:	9d05      	ldr	r5, [sp, #20]
 80056aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056ac:	e748      	b.n	8005540 <_dtoa_r+0x758>
 80056ae:	9a08      	ldr	r2, [sp, #32]
 80056b0:	e770      	b.n	8005594 <_dtoa_r+0x7ac>
 80056b2:	9b07      	ldr	r3, [sp, #28]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	dc19      	bgt.n	80056ec <_dtoa_r+0x904>
 80056b8:	9b02      	ldr	r3, [sp, #8]
 80056ba:	b9bb      	cbnz	r3, 80056ec <_dtoa_r+0x904>
 80056bc:	9b03      	ldr	r3, [sp, #12]
 80056be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c2:	b99b      	cbnz	r3, 80056ec <_dtoa_r+0x904>
 80056c4:	9b03      	ldr	r3, [sp, #12]
 80056c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ca:	0d1b      	lsrs	r3, r3, #20
 80056cc:	051b      	lsls	r3, r3, #20
 80056ce:	b183      	cbz	r3, 80056f2 <_dtoa_r+0x90a>
 80056d0:	9b05      	ldr	r3, [sp, #20]
 80056d2:	3301      	adds	r3, #1
 80056d4:	9305      	str	r3, [sp, #20]
 80056d6:	9b06      	ldr	r3, [sp, #24]
 80056d8:	3301      	adds	r3, #1
 80056da:	9306      	str	r3, [sp, #24]
 80056dc:	f04f 0801 	mov.w	r8, #1
 80056e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f47f af6f 	bne.w	80055c6 <_dtoa_r+0x7de>
 80056e8:	2001      	movs	r0, #1
 80056ea:	e774      	b.n	80055d6 <_dtoa_r+0x7ee>
 80056ec:	f04f 0800 	mov.w	r8, #0
 80056f0:	e7f6      	b.n	80056e0 <_dtoa_r+0x8f8>
 80056f2:	4698      	mov	r8, r3
 80056f4:	e7f4      	b.n	80056e0 <_dtoa_r+0x8f8>
 80056f6:	d082      	beq.n	80055fe <_dtoa_r+0x816>
 80056f8:	9a05      	ldr	r2, [sp, #20]
 80056fa:	331c      	adds	r3, #28
 80056fc:	441a      	add	r2, r3
 80056fe:	9205      	str	r2, [sp, #20]
 8005700:	9a06      	ldr	r2, [sp, #24]
 8005702:	441a      	add	r2, r3
 8005704:	441d      	add	r5, r3
 8005706:	9206      	str	r2, [sp, #24]
 8005708:	e779      	b.n	80055fe <_dtoa_r+0x816>
 800570a:	4603      	mov	r3, r0
 800570c:	e7f4      	b.n	80056f8 <_dtoa_r+0x910>
 800570e:	9b04      	ldr	r3, [sp, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc37      	bgt.n	8005784 <_dtoa_r+0x99c>
 8005714:	9b07      	ldr	r3, [sp, #28]
 8005716:	2b02      	cmp	r3, #2
 8005718:	dd34      	ble.n	8005784 <_dtoa_r+0x99c>
 800571a:	9b04      	ldr	r3, [sp, #16]
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	9b01      	ldr	r3, [sp, #4]
 8005720:	b963      	cbnz	r3, 800573c <_dtoa_r+0x954>
 8005722:	4631      	mov	r1, r6
 8005724:	2205      	movs	r2, #5
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fab2 	bl	8005c90 <__multadd>
 800572c:	4601      	mov	r1, r0
 800572e:	4606      	mov	r6, r0
 8005730:	4650      	mov	r0, sl
 8005732:	f000 fcc7 	bl	80060c4 <__mcmp>
 8005736:	2800      	cmp	r0, #0
 8005738:	f73f adbb 	bgt.w	80052b2 <_dtoa_r+0x4ca>
 800573c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800573e:	9d00      	ldr	r5, [sp, #0]
 8005740:	ea6f 0b03 	mvn.w	fp, r3
 8005744:	f04f 0800 	mov.w	r8, #0
 8005748:	4631      	mov	r1, r6
 800574a:	4620      	mov	r0, r4
 800574c:	f000 fa7e 	bl	8005c4c <_Bfree>
 8005750:	2f00      	cmp	r7, #0
 8005752:	f43f aeab 	beq.w	80054ac <_dtoa_r+0x6c4>
 8005756:	f1b8 0f00 	cmp.w	r8, #0
 800575a:	d005      	beq.n	8005768 <_dtoa_r+0x980>
 800575c:	45b8      	cmp	r8, r7
 800575e:	d003      	beq.n	8005768 <_dtoa_r+0x980>
 8005760:	4641      	mov	r1, r8
 8005762:	4620      	mov	r0, r4
 8005764:	f000 fa72 	bl	8005c4c <_Bfree>
 8005768:	4639      	mov	r1, r7
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fa6e 	bl	8005c4c <_Bfree>
 8005770:	e69c      	b.n	80054ac <_dtoa_r+0x6c4>
 8005772:	2600      	movs	r6, #0
 8005774:	4637      	mov	r7, r6
 8005776:	e7e1      	b.n	800573c <_dtoa_r+0x954>
 8005778:	46bb      	mov	fp, r7
 800577a:	4637      	mov	r7, r6
 800577c:	e599      	b.n	80052b2 <_dtoa_r+0x4ca>
 800577e:	bf00      	nop
 8005780:	40240000 	.word	0x40240000
 8005784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 80c8 	beq.w	800591c <_dtoa_r+0xb34>
 800578c:	9b04      	ldr	r3, [sp, #16]
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	2d00      	cmp	r5, #0
 8005792:	dd05      	ble.n	80057a0 <_dtoa_r+0x9b8>
 8005794:	4639      	mov	r1, r7
 8005796:	462a      	mov	r2, r5
 8005798:	4620      	mov	r0, r4
 800579a:	f000 fc27 	bl	8005fec <__lshift>
 800579e:	4607      	mov	r7, r0
 80057a0:	f1b8 0f00 	cmp.w	r8, #0
 80057a4:	d05b      	beq.n	800585e <_dtoa_r+0xa76>
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fa0f 	bl	8005bcc <_Balloc>
 80057ae:	4605      	mov	r5, r0
 80057b0:	b928      	cbnz	r0, 80057be <_dtoa_r+0x9d6>
 80057b2:	4b83      	ldr	r3, [pc, #524]	; (80059c0 <_dtoa_r+0xbd8>)
 80057b4:	4602      	mov	r2, r0
 80057b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80057ba:	f7ff bb2e 	b.w	8004e1a <_dtoa_r+0x32>
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	3202      	adds	r2, #2
 80057c2:	0092      	lsls	r2, r2, #2
 80057c4:	f107 010c 	add.w	r1, r7, #12
 80057c8:	300c      	adds	r0, #12
 80057ca:	f000 ff87 	bl	80066dc <memcpy>
 80057ce:	2201      	movs	r2, #1
 80057d0:	4629      	mov	r1, r5
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fc0a 	bl	8005fec <__lshift>
 80057d8:	9b00      	ldr	r3, [sp, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057e2:	4413      	add	r3, r2
 80057e4:	9308      	str	r3, [sp, #32]
 80057e6:	9b02      	ldr	r3, [sp, #8]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	46b8      	mov	r8, r7
 80057ee:	9306      	str	r3, [sp, #24]
 80057f0:	4607      	mov	r7, r0
 80057f2:	9b04      	ldr	r3, [sp, #16]
 80057f4:	4631      	mov	r1, r6
 80057f6:	3b01      	subs	r3, #1
 80057f8:	4650      	mov	r0, sl
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	f7ff fa6b 	bl	8004cd6 <quorem>
 8005800:	4641      	mov	r1, r8
 8005802:	9002      	str	r0, [sp, #8]
 8005804:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005808:	4650      	mov	r0, sl
 800580a:	f000 fc5b 	bl	80060c4 <__mcmp>
 800580e:	463a      	mov	r2, r7
 8005810:	9005      	str	r0, [sp, #20]
 8005812:	4631      	mov	r1, r6
 8005814:	4620      	mov	r0, r4
 8005816:	f000 fc71 	bl	80060fc <__mdiff>
 800581a:	68c2      	ldr	r2, [r0, #12]
 800581c:	4605      	mov	r5, r0
 800581e:	bb02      	cbnz	r2, 8005862 <_dtoa_r+0xa7a>
 8005820:	4601      	mov	r1, r0
 8005822:	4650      	mov	r0, sl
 8005824:	f000 fc4e 	bl	80060c4 <__mcmp>
 8005828:	4602      	mov	r2, r0
 800582a:	4629      	mov	r1, r5
 800582c:	4620      	mov	r0, r4
 800582e:	9209      	str	r2, [sp, #36]	; 0x24
 8005830:	f000 fa0c 	bl	8005c4c <_Bfree>
 8005834:	9b07      	ldr	r3, [sp, #28]
 8005836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005838:	9d04      	ldr	r5, [sp, #16]
 800583a:	ea43 0102 	orr.w	r1, r3, r2
 800583e:	9b06      	ldr	r3, [sp, #24]
 8005840:	4319      	orrs	r1, r3
 8005842:	d110      	bne.n	8005866 <_dtoa_r+0xa7e>
 8005844:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005848:	d029      	beq.n	800589e <_dtoa_r+0xab6>
 800584a:	9b05      	ldr	r3, [sp, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	dd02      	ble.n	8005856 <_dtoa_r+0xa6e>
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	f883 9000 	strb.w	r9, [r3]
 800585c:	e774      	b.n	8005748 <_dtoa_r+0x960>
 800585e:	4638      	mov	r0, r7
 8005860:	e7ba      	b.n	80057d8 <_dtoa_r+0x9f0>
 8005862:	2201      	movs	r2, #1
 8005864:	e7e1      	b.n	800582a <_dtoa_r+0xa42>
 8005866:	9b05      	ldr	r3, [sp, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	db04      	blt.n	8005876 <_dtoa_r+0xa8e>
 800586c:	9907      	ldr	r1, [sp, #28]
 800586e:	430b      	orrs	r3, r1
 8005870:	9906      	ldr	r1, [sp, #24]
 8005872:	430b      	orrs	r3, r1
 8005874:	d120      	bne.n	80058b8 <_dtoa_r+0xad0>
 8005876:	2a00      	cmp	r2, #0
 8005878:	dded      	ble.n	8005856 <_dtoa_r+0xa6e>
 800587a:	4651      	mov	r1, sl
 800587c:	2201      	movs	r2, #1
 800587e:	4620      	mov	r0, r4
 8005880:	f000 fbb4 	bl	8005fec <__lshift>
 8005884:	4631      	mov	r1, r6
 8005886:	4682      	mov	sl, r0
 8005888:	f000 fc1c 	bl	80060c4 <__mcmp>
 800588c:	2800      	cmp	r0, #0
 800588e:	dc03      	bgt.n	8005898 <_dtoa_r+0xab0>
 8005890:	d1e1      	bne.n	8005856 <_dtoa_r+0xa6e>
 8005892:	f019 0f01 	tst.w	r9, #1
 8005896:	d0de      	beq.n	8005856 <_dtoa_r+0xa6e>
 8005898:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800589c:	d1d8      	bne.n	8005850 <_dtoa_r+0xa68>
 800589e:	9a01      	ldr	r2, [sp, #4]
 80058a0:	2339      	movs	r3, #57	; 0x39
 80058a2:	7013      	strb	r3, [r2, #0]
 80058a4:	462b      	mov	r3, r5
 80058a6:	461d      	mov	r5, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058ae:	2a39      	cmp	r2, #57	; 0x39
 80058b0:	d06c      	beq.n	800598c <_dtoa_r+0xba4>
 80058b2:	3201      	adds	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e747      	b.n	8005748 <_dtoa_r+0x960>
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	dd07      	ble.n	80058cc <_dtoa_r+0xae4>
 80058bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058c0:	d0ed      	beq.n	800589e <_dtoa_r+0xab6>
 80058c2:	9a01      	ldr	r2, [sp, #4]
 80058c4:	f109 0301 	add.w	r3, r9, #1
 80058c8:	7013      	strb	r3, [r2, #0]
 80058ca:	e73d      	b.n	8005748 <_dtoa_r+0x960>
 80058cc:	9b04      	ldr	r3, [sp, #16]
 80058ce:	9a08      	ldr	r2, [sp, #32]
 80058d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d043      	beq.n	8005960 <_dtoa_r+0xb78>
 80058d8:	4651      	mov	r1, sl
 80058da:	2300      	movs	r3, #0
 80058dc:	220a      	movs	r2, #10
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 f9d6 	bl	8005c90 <__multadd>
 80058e4:	45b8      	cmp	r8, r7
 80058e6:	4682      	mov	sl, r0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	f04f 020a 	mov.w	r2, #10
 80058f0:	4641      	mov	r1, r8
 80058f2:	4620      	mov	r0, r4
 80058f4:	d107      	bne.n	8005906 <_dtoa_r+0xb1e>
 80058f6:	f000 f9cb 	bl	8005c90 <__multadd>
 80058fa:	4680      	mov	r8, r0
 80058fc:	4607      	mov	r7, r0
 80058fe:	9b04      	ldr	r3, [sp, #16]
 8005900:	3301      	adds	r3, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	e775      	b.n	80057f2 <_dtoa_r+0xa0a>
 8005906:	f000 f9c3 	bl	8005c90 <__multadd>
 800590a:	4639      	mov	r1, r7
 800590c:	4680      	mov	r8, r0
 800590e:	2300      	movs	r3, #0
 8005910:	220a      	movs	r2, #10
 8005912:	4620      	mov	r0, r4
 8005914:	f000 f9bc 	bl	8005c90 <__multadd>
 8005918:	4607      	mov	r7, r0
 800591a:	e7f0      	b.n	80058fe <_dtoa_r+0xb16>
 800591c:	9b04      	ldr	r3, [sp, #16]
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	9d00      	ldr	r5, [sp, #0]
 8005922:	4631      	mov	r1, r6
 8005924:	4650      	mov	r0, sl
 8005926:	f7ff f9d6 	bl	8004cd6 <quorem>
 800592a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800592e:	9b00      	ldr	r3, [sp, #0]
 8005930:	f805 9b01 	strb.w	r9, [r5], #1
 8005934:	1aea      	subs	r2, r5, r3
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	4293      	cmp	r3, r2
 800593a:	dd07      	ble.n	800594c <_dtoa_r+0xb64>
 800593c:	4651      	mov	r1, sl
 800593e:	2300      	movs	r3, #0
 8005940:	220a      	movs	r2, #10
 8005942:	4620      	mov	r0, r4
 8005944:	f000 f9a4 	bl	8005c90 <__multadd>
 8005948:	4682      	mov	sl, r0
 800594a:	e7ea      	b.n	8005922 <_dtoa_r+0xb3a>
 800594c:	9b01      	ldr	r3, [sp, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	bfc8      	it	gt
 8005952:	461d      	movgt	r5, r3
 8005954:	9b00      	ldr	r3, [sp, #0]
 8005956:	bfd8      	it	le
 8005958:	2501      	movle	r5, #1
 800595a:	441d      	add	r5, r3
 800595c:	f04f 0800 	mov.w	r8, #0
 8005960:	4651      	mov	r1, sl
 8005962:	2201      	movs	r2, #1
 8005964:	4620      	mov	r0, r4
 8005966:	f000 fb41 	bl	8005fec <__lshift>
 800596a:	4631      	mov	r1, r6
 800596c:	4682      	mov	sl, r0
 800596e:	f000 fba9 	bl	80060c4 <__mcmp>
 8005972:	2800      	cmp	r0, #0
 8005974:	dc96      	bgt.n	80058a4 <_dtoa_r+0xabc>
 8005976:	d102      	bne.n	800597e <_dtoa_r+0xb96>
 8005978:	f019 0f01 	tst.w	r9, #1
 800597c:	d192      	bne.n	80058a4 <_dtoa_r+0xabc>
 800597e:	462b      	mov	r3, r5
 8005980:	461d      	mov	r5, r3
 8005982:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005986:	2a30      	cmp	r2, #48	; 0x30
 8005988:	d0fa      	beq.n	8005980 <_dtoa_r+0xb98>
 800598a:	e6dd      	b.n	8005748 <_dtoa_r+0x960>
 800598c:	9a00      	ldr	r2, [sp, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d189      	bne.n	80058a6 <_dtoa_r+0xabe>
 8005992:	f10b 0b01 	add.w	fp, fp, #1
 8005996:	2331      	movs	r3, #49	; 0x31
 8005998:	e796      	b.n	80058c8 <_dtoa_r+0xae0>
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <_dtoa_r+0xbdc>)
 800599c:	f7ff ba99 	b.w	8004ed2 <_dtoa_r+0xea>
 80059a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f47f aa6d 	bne.w	8004e82 <_dtoa_r+0x9a>
 80059a8:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <_dtoa_r+0xbe0>)
 80059aa:	f7ff ba92 	b.w	8004ed2 <_dtoa_r+0xea>
 80059ae:	9b01      	ldr	r3, [sp, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	dcb5      	bgt.n	8005920 <_dtoa_r+0xb38>
 80059b4:	9b07      	ldr	r3, [sp, #28]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	f73f aeb1 	bgt.w	800571e <_dtoa_r+0x936>
 80059bc:	e7b0      	b.n	8005920 <_dtoa_r+0xb38>
 80059be:	bf00      	nop
 80059c0:	080069b0 	.word	0x080069b0
 80059c4:	08006910 	.word	0x08006910
 80059c8:	08006934 	.word	0x08006934

080059cc <_free_r>:
 80059cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059ce:	2900      	cmp	r1, #0
 80059d0:	d044      	beq.n	8005a5c <_free_r+0x90>
 80059d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059d6:	9001      	str	r0, [sp, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f1a1 0404 	sub.w	r4, r1, #4
 80059de:	bfb8      	it	lt
 80059e0:	18e4      	addlt	r4, r4, r3
 80059e2:	f000 f8e7 	bl	8005bb4 <__malloc_lock>
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <_free_r+0x94>)
 80059e8:	9801      	ldr	r0, [sp, #4]
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	b933      	cbnz	r3, 80059fc <_free_r+0x30>
 80059ee:	6063      	str	r3, [r4, #4]
 80059f0:	6014      	str	r4, [r2, #0]
 80059f2:	b003      	add	sp, #12
 80059f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059f8:	f000 b8e2 	b.w	8005bc0 <__malloc_unlock>
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	d908      	bls.n	8005a12 <_free_r+0x46>
 8005a00:	6825      	ldr	r5, [r4, #0]
 8005a02:	1961      	adds	r1, r4, r5
 8005a04:	428b      	cmp	r3, r1
 8005a06:	bf01      	itttt	eq
 8005a08:	6819      	ldreq	r1, [r3, #0]
 8005a0a:	685b      	ldreq	r3, [r3, #4]
 8005a0c:	1949      	addeq	r1, r1, r5
 8005a0e:	6021      	streq	r1, [r4, #0]
 8005a10:	e7ed      	b.n	80059ee <_free_r+0x22>
 8005a12:	461a      	mov	r2, r3
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b10b      	cbz	r3, 8005a1c <_free_r+0x50>
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d9fa      	bls.n	8005a12 <_free_r+0x46>
 8005a1c:	6811      	ldr	r1, [r2, #0]
 8005a1e:	1855      	adds	r5, r2, r1
 8005a20:	42a5      	cmp	r5, r4
 8005a22:	d10b      	bne.n	8005a3c <_free_r+0x70>
 8005a24:	6824      	ldr	r4, [r4, #0]
 8005a26:	4421      	add	r1, r4
 8005a28:	1854      	adds	r4, r2, r1
 8005a2a:	42a3      	cmp	r3, r4
 8005a2c:	6011      	str	r1, [r2, #0]
 8005a2e:	d1e0      	bne.n	80059f2 <_free_r+0x26>
 8005a30:	681c      	ldr	r4, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	6053      	str	r3, [r2, #4]
 8005a36:	440c      	add	r4, r1
 8005a38:	6014      	str	r4, [r2, #0]
 8005a3a:	e7da      	b.n	80059f2 <_free_r+0x26>
 8005a3c:	d902      	bls.n	8005a44 <_free_r+0x78>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	6003      	str	r3, [r0, #0]
 8005a42:	e7d6      	b.n	80059f2 <_free_r+0x26>
 8005a44:	6825      	ldr	r5, [r4, #0]
 8005a46:	1961      	adds	r1, r4, r5
 8005a48:	428b      	cmp	r3, r1
 8005a4a:	bf04      	itt	eq
 8005a4c:	6819      	ldreq	r1, [r3, #0]
 8005a4e:	685b      	ldreq	r3, [r3, #4]
 8005a50:	6063      	str	r3, [r4, #4]
 8005a52:	bf04      	itt	eq
 8005a54:	1949      	addeq	r1, r1, r5
 8005a56:	6021      	streq	r1, [r4, #0]
 8005a58:	6054      	str	r4, [r2, #4]
 8005a5a:	e7ca      	b.n	80059f2 <_free_r+0x26>
 8005a5c:	b003      	add	sp, #12
 8005a5e:	bd30      	pop	{r4, r5, pc}
 8005a60:	200003d4 	.word	0x200003d4

08005a64 <malloc>:
 8005a64:	4b02      	ldr	r3, [pc, #8]	; (8005a70 <malloc+0xc>)
 8005a66:	4601      	mov	r1, r0
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	f000 b823 	b.w	8005ab4 <_malloc_r>
 8005a6e:	bf00      	nop
 8005a70:	20000064 	.word	0x20000064

08005a74 <sbrk_aligned>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	4e0e      	ldr	r6, [pc, #56]	; (8005ab0 <sbrk_aligned+0x3c>)
 8005a78:	460c      	mov	r4, r1
 8005a7a:	6831      	ldr	r1, [r6, #0]
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	b911      	cbnz	r1, 8005a86 <sbrk_aligned+0x12>
 8005a80:	f000 fe1c 	bl	80066bc <_sbrk_r>
 8005a84:	6030      	str	r0, [r6, #0]
 8005a86:	4621      	mov	r1, r4
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f000 fe17 	bl	80066bc <_sbrk_r>
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	d00a      	beq.n	8005aa8 <sbrk_aligned+0x34>
 8005a92:	1cc4      	adds	r4, r0, #3
 8005a94:	f024 0403 	bic.w	r4, r4, #3
 8005a98:	42a0      	cmp	r0, r4
 8005a9a:	d007      	beq.n	8005aac <sbrk_aligned+0x38>
 8005a9c:	1a21      	subs	r1, r4, r0
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 fe0c 	bl	80066bc <_sbrk_r>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d101      	bne.n	8005aac <sbrk_aligned+0x38>
 8005aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8005aac:	4620      	mov	r0, r4
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	200003d8 	.word	0x200003d8

08005ab4 <_malloc_r>:
 8005ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab8:	1ccd      	adds	r5, r1, #3
 8005aba:	f025 0503 	bic.w	r5, r5, #3
 8005abe:	3508      	adds	r5, #8
 8005ac0:	2d0c      	cmp	r5, #12
 8005ac2:	bf38      	it	cc
 8005ac4:	250c      	movcc	r5, #12
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	4607      	mov	r7, r0
 8005aca:	db01      	blt.n	8005ad0 <_malloc_r+0x1c>
 8005acc:	42a9      	cmp	r1, r5
 8005ace:	d905      	bls.n	8005adc <_malloc_r+0x28>
 8005ad0:	230c      	movs	r3, #12
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005adc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bb0 <_malloc_r+0xfc>
 8005ae0:	f000 f868 	bl	8005bb4 <__malloc_lock>
 8005ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae8:	461c      	mov	r4, r3
 8005aea:	bb5c      	cbnz	r4, 8005b44 <_malloc_r+0x90>
 8005aec:	4629      	mov	r1, r5
 8005aee:	4638      	mov	r0, r7
 8005af0:	f7ff ffc0 	bl	8005a74 <sbrk_aligned>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	4604      	mov	r4, r0
 8005af8:	d155      	bne.n	8005ba6 <_malloc_r+0xf2>
 8005afa:	f8d8 4000 	ldr.w	r4, [r8]
 8005afe:	4626      	mov	r6, r4
 8005b00:	2e00      	cmp	r6, #0
 8005b02:	d145      	bne.n	8005b90 <_malloc_r+0xdc>
 8005b04:	2c00      	cmp	r4, #0
 8005b06:	d048      	beq.n	8005b9a <_malloc_r+0xe6>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	eb04 0903 	add.w	r9, r4, r3
 8005b12:	f000 fdd3 	bl	80066bc <_sbrk_r>
 8005b16:	4581      	cmp	r9, r0
 8005b18:	d13f      	bne.n	8005b9a <_malloc_r+0xe6>
 8005b1a:	6821      	ldr	r1, [r4, #0]
 8005b1c:	1a6d      	subs	r5, r5, r1
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4638      	mov	r0, r7
 8005b22:	f7ff ffa7 	bl	8005a74 <sbrk_aligned>
 8005b26:	3001      	adds	r0, #1
 8005b28:	d037      	beq.n	8005b9a <_malloc_r+0xe6>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	442b      	add	r3, r5
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	f8d8 3000 	ldr.w	r3, [r8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d038      	beq.n	8005baa <_malloc_r+0xf6>
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	42a2      	cmp	r2, r4
 8005b3c:	d12b      	bne.n	8005b96 <_malloc_r+0xe2>
 8005b3e:	2200      	movs	r2, #0
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	e00f      	b.n	8005b64 <_malloc_r+0xb0>
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	1b52      	subs	r2, r2, r5
 8005b48:	d41f      	bmi.n	8005b8a <_malloc_r+0xd6>
 8005b4a:	2a0b      	cmp	r2, #11
 8005b4c:	d917      	bls.n	8005b7e <_malloc_r+0xca>
 8005b4e:	1961      	adds	r1, r4, r5
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	6025      	str	r5, [r4, #0]
 8005b54:	bf18      	it	ne
 8005b56:	6059      	strne	r1, [r3, #4]
 8005b58:	6863      	ldr	r3, [r4, #4]
 8005b5a:	bf08      	it	eq
 8005b5c:	f8c8 1000 	streq.w	r1, [r8]
 8005b60:	5162      	str	r2, [r4, r5]
 8005b62:	604b      	str	r3, [r1, #4]
 8005b64:	4638      	mov	r0, r7
 8005b66:	f104 060b 	add.w	r6, r4, #11
 8005b6a:	f000 f829 	bl	8005bc0 <__malloc_unlock>
 8005b6e:	f026 0607 	bic.w	r6, r6, #7
 8005b72:	1d23      	adds	r3, r4, #4
 8005b74:	1af2      	subs	r2, r6, r3
 8005b76:	d0ae      	beq.n	8005ad6 <_malloc_r+0x22>
 8005b78:	1b9b      	subs	r3, r3, r6
 8005b7a:	50a3      	str	r3, [r4, r2]
 8005b7c:	e7ab      	b.n	8005ad6 <_malloc_r+0x22>
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	6862      	ldr	r2, [r4, #4]
 8005b82:	d1dd      	bne.n	8005b40 <_malloc_r+0x8c>
 8005b84:	f8c8 2000 	str.w	r2, [r8]
 8005b88:	e7ec      	b.n	8005b64 <_malloc_r+0xb0>
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	6864      	ldr	r4, [r4, #4]
 8005b8e:	e7ac      	b.n	8005aea <_malloc_r+0x36>
 8005b90:	4634      	mov	r4, r6
 8005b92:	6876      	ldr	r6, [r6, #4]
 8005b94:	e7b4      	b.n	8005b00 <_malloc_r+0x4c>
 8005b96:	4613      	mov	r3, r2
 8005b98:	e7cc      	b.n	8005b34 <_malloc_r+0x80>
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	f000 f80e 	bl	8005bc0 <__malloc_unlock>
 8005ba4:	e797      	b.n	8005ad6 <_malloc_r+0x22>
 8005ba6:	6025      	str	r5, [r4, #0]
 8005ba8:	e7dc      	b.n	8005b64 <_malloc_r+0xb0>
 8005baa:	605b      	str	r3, [r3, #4]
 8005bac:	deff      	udf	#255	; 0xff
 8005bae:	bf00      	nop
 8005bb0:	200003d4 	.word	0x200003d4

08005bb4 <__malloc_lock>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	; (8005bbc <__malloc_lock+0x8>)
 8005bb6:	f7ff b88c 	b.w	8004cd2 <__retarget_lock_acquire_recursive>
 8005bba:	bf00      	nop
 8005bbc:	200003d0 	.word	0x200003d0

08005bc0 <__malloc_unlock>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	; (8005bc8 <__malloc_unlock+0x8>)
 8005bc2:	f7ff b887 	b.w	8004cd4 <__retarget_lock_release_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	200003d0 	.word	0x200003d0

08005bcc <_Balloc>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	69c6      	ldr	r6, [r0, #28]
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	b976      	cbnz	r6, 8005bf4 <_Balloc+0x28>
 8005bd6:	2010      	movs	r0, #16
 8005bd8:	f7ff ff44 	bl	8005a64 <malloc>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	61e0      	str	r0, [r4, #28]
 8005be0:	b920      	cbnz	r0, 8005bec <_Balloc+0x20>
 8005be2:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <_Balloc+0x78>)
 8005be4:	4818      	ldr	r0, [pc, #96]	; (8005c48 <_Balloc+0x7c>)
 8005be6:	216b      	movs	r1, #107	; 0x6b
 8005be8:	f000 fd86 	bl	80066f8 <__assert_func>
 8005bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bf0:	6006      	str	r6, [r0, #0]
 8005bf2:	60c6      	str	r6, [r0, #12]
 8005bf4:	69e6      	ldr	r6, [r4, #28]
 8005bf6:	68f3      	ldr	r3, [r6, #12]
 8005bf8:	b183      	cbz	r3, 8005c1c <_Balloc+0x50>
 8005bfa:	69e3      	ldr	r3, [r4, #28]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c02:	b9b8      	cbnz	r0, 8005c34 <_Balloc+0x68>
 8005c04:	2101      	movs	r1, #1
 8005c06:	fa01 f605 	lsl.w	r6, r1, r5
 8005c0a:	1d72      	adds	r2, r6, #5
 8005c0c:	0092      	lsls	r2, r2, #2
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 fd90 	bl	8006734 <_calloc_r>
 8005c14:	b160      	cbz	r0, 8005c30 <_Balloc+0x64>
 8005c16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c1a:	e00e      	b.n	8005c3a <_Balloc+0x6e>
 8005c1c:	2221      	movs	r2, #33	; 0x21
 8005c1e:	2104      	movs	r1, #4
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fd87 	bl	8006734 <_calloc_r>
 8005c26:	69e3      	ldr	r3, [r4, #28]
 8005c28:	60f0      	str	r0, [r6, #12]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e4      	bne.n	8005bfa <_Balloc+0x2e>
 8005c30:	2000      	movs	r0, #0
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	6802      	ldr	r2, [r0, #0]
 8005c36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c40:	e7f7      	b.n	8005c32 <_Balloc+0x66>
 8005c42:	bf00      	nop
 8005c44:	08006941 	.word	0x08006941
 8005c48:	080069c1 	.word	0x080069c1

08005c4c <_Bfree>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	69c6      	ldr	r6, [r0, #28]
 8005c50:	4605      	mov	r5, r0
 8005c52:	460c      	mov	r4, r1
 8005c54:	b976      	cbnz	r6, 8005c74 <_Bfree+0x28>
 8005c56:	2010      	movs	r0, #16
 8005c58:	f7ff ff04 	bl	8005a64 <malloc>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	61e8      	str	r0, [r5, #28]
 8005c60:	b920      	cbnz	r0, 8005c6c <_Bfree+0x20>
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <_Bfree+0x3c>)
 8005c64:	4809      	ldr	r0, [pc, #36]	; (8005c8c <_Bfree+0x40>)
 8005c66:	218f      	movs	r1, #143	; 0x8f
 8005c68:	f000 fd46 	bl	80066f8 <__assert_func>
 8005c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c70:	6006      	str	r6, [r0, #0]
 8005c72:	60c6      	str	r6, [r0, #12]
 8005c74:	b13c      	cbz	r4, 8005c86 <_Bfree+0x3a>
 8005c76:	69eb      	ldr	r3, [r5, #28]
 8005c78:	6862      	ldr	r2, [r4, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c80:	6021      	str	r1, [r4, #0]
 8005c82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	08006941 	.word	0x08006941
 8005c8c:	080069c1 	.word	0x080069c1

08005c90 <__multadd>:
 8005c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	690d      	ldr	r5, [r1, #16]
 8005c96:	4607      	mov	r7, r0
 8005c98:	460c      	mov	r4, r1
 8005c9a:	461e      	mov	r6, r3
 8005c9c:	f101 0c14 	add.w	ip, r1, #20
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f8dc 3000 	ldr.w	r3, [ip]
 8005ca6:	b299      	uxth	r1, r3
 8005ca8:	fb02 6101 	mla	r1, r2, r1, r6
 8005cac:	0c1e      	lsrs	r6, r3, #16
 8005cae:	0c0b      	lsrs	r3, r1, #16
 8005cb0:	fb02 3306 	mla	r3, r2, r6, r3
 8005cb4:	b289      	uxth	r1, r1
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cbc:	4285      	cmp	r5, r0
 8005cbe:	f84c 1b04 	str.w	r1, [ip], #4
 8005cc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cc6:	dcec      	bgt.n	8005ca2 <__multadd+0x12>
 8005cc8:	b30e      	cbz	r6, 8005d0e <__multadd+0x7e>
 8005cca:	68a3      	ldr	r3, [r4, #8]
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dc19      	bgt.n	8005d04 <__multadd+0x74>
 8005cd0:	6861      	ldr	r1, [r4, #4]
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	3101      	adds	r1, #1
 8005cd6:	f7ff ff79 	bl	8005bcc <_Balloc>
 8005cda:	4680      	mov	r8, r0
 8005cdc:	b928      	cbnz	r0, 8005cea <__multadd+0x5a>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <__multadd+0x84>)
 8005ce2:	480d      	ldr	r0, [pc, #52]	; (8005d18 <__multadd+0x88>)
 8005ce4:	21ba      	movs	r1, #186	; 0xba
 8005ce6:	f000 fd07 	bl	80066f8 <__assert_func>
 8005cea:	6922      	ldr	r2, [r4, #16]
 8005cec:	3202      	adds	r2, #2
 8005cee:	f104 010c 	add.w	r1, r4, #12
 8005cf2:	0092      	lsls	r2, r2, #2
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	f000 fcf1 	bl	80066dc <memcpy>
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f7ff ffa5 	bl	8005c4c <_Bfree>
 8005d02:	4644      	mov	r4, r8
 8005d04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d08:	3501      	adds	r5, #1
 8005d0a:	615e      	str	r6, [r3, #20]
 8005d0c:	6125      	str	r5, [r4, #16]
 8005d0e:	4620      	mov	r0, r4
 8005d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d14:	080069b0 	.word	0x080069b0
 8005d18:	080069c1 	.word	0x080069c1

08005d1c <__hi0bits>:
 8005d1c:	0c03      	lsrs	r3, r0, #16
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	b9d3      	cbnz	r3, 8005d58 <__hi0bits+0x3c>
 8005d22:	0400      	lsls	r0, r0, #16
 8005d24:	2310      	movs	r3, #16
 8005d26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d2a:	bf04      	itt	eq
 8005d2c:	0200      	lsleq	r0, r0, #8
 8005d2e:	3308      	addeq	r3, #8
 8005d30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d34:	bf04      	itt	eq
 8005d36:	0100      	lsleq	r0, r0, #4
 8005d38:	3304      	addeq	r3, #4
 8005d3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d3e:	bf04      	itt	eq
 8005d40:	0080      	lsleq	r0, r0, #2
 8005d42:	3302      	addeq	r3, #2
 8005d44:	2800      	cmp	r0, #0
 8005d46:	db05      	blt.n	8005d54 <__hi0bits+0x38>
 8005d48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d4c:	f103 0301 	add.w	r3, r3, #1
 8005d50:	bf08      	it	eq
 8005d52:	2320      	moveq	r3, #32
 8005d54:	4618      	mov	r0, r3
 8005d56:	4770      	bx	lr
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e7e4      	b.n	8005d26 <__hi0bits+0xa>

08005d5c <__lo0bits>:
 8005d5c:	6803      	ldr	r3, [r0, #0]
 8005d5e:	f013 0207 	ands.w	r2, r3, #7
 8005d62:	d00c      	beq.n	8005d7e <__lo0bits+0x22>
 8005d64:	07d9      	lsls	r1, r3, #31
 8005d66:	d422      	bmi.n	8005dae <__lo0bits+0x52>
 8005d68:	079a      	lsls	r2, r3, #30
 8005d6a:	bf49      	itett	mi
 8005d6c:	085b      	lsrmi	r3, r3, #1
 8005d6e:	089b      	lsrpl	r3, r3, #2
 8005d70:	6003      	strmi	r3, [r0, #0]
 8005d72:	2201      	movmi	r2, #1
 8005d74:	bf5c      	itt	pl
 8005d76:	6003      	strpl	r3, [r0, #0]
 8005d78:	2202      	movpl	r2, #2
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4770      	bx	lr
 8005d7e:	b299      	uxth	r1, r3
 8005d80:	b909      	cbnz	r1, 8005d86 <__lo0bits+0x2a>
 8005d82:	0c1b      	lsrs	r3, r3, #16
 8005d84:	2210      	movs	r2, #16
 8005d86:	b2d9      	uxtb	r1, r3
 8005d88:	b909      	cbnz	r1, 8005d8e <__lo0bits+0x32>
 8005d8a:	3208      	adds	r2, #8
 8005d8c:	0a1b      	lsrs	r3, r3, #8
 8005d8e:	0719      	lsls	r1, r3, #28
 8005d90:	bf04      	itt	eq
 8005d92:	091b      	lsreq	r3, r3, #4
 8005d94:	3204      	addeq	r2, #4
 8005d96:	0799      	lsls	r1, r3, #30
 8005d98:	bf04      	itt	eq
 8005d9a:	089b      	lsreq	r3, r3, #2
 8005d9c:	3202      	addeq	r2, #2
 8005d9e:	07d9      	lsls	r1, r3, #31
 8005da0:	d403      	bmi.n	8005daa <__lo0bits+0x4e>
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	f102 0201 	add.w	r2, r2, #1
 8005da8:	d003      	beq.n	8005db2 <__lo0bits+0x56>
 8005daa:	6003      	str	r3, [r0, #0]
 8005dac:	e7e5      	b.n	8005d7a <__lo0bits+0x1e>
 8005dae:	2200      	movs	r2, #0
 8005db0:	e7e3      	b.n	8005d7a <__lo0bits+0x1e>
 8005db2:	2220      	movs	r2, #32
 8005db4:	e7e1      	b.n	8005d7a <__lo0bits+0x1e>
	...

08005db8 <__i2b>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	460c      	mov	r4, r1
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	f7ff ff05 	bl	8005bcc <_Balloc>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	b928      	cbnz	r0, 8005dd2 <__i2b+0x1a>
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <__i2b+0x24>)
 8005dc8:	4805      	ldr	r0, [pc, #20]	; (8005de0 <__i2b+0x28>)
 8005dca:	f240 1145 	movw	r1, #325	; 0x145
 8005dce:	f000 fc93 	bl	80066f8 <__assert_func>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	6144      	str	r4, [r0, #20]
 8005dd6:	6103      	str	r3, [r0, #16]
 8005dd8:	bd10      	pop	{r4, pc}
 8005dda:	bf00      	nop
 8005ddc:	080069b0 	.word	0x080069b0
 8005de0:	080069c1 	.word	0x080069c1

08005de4 <__multiply>:
 8005de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de8:	4691      	mov	r9, r2
 8005dea:	690a      	ldr	r2, [r1, #16]
 8005dec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	bfb8      	it	lt
 8005df4:	460b      	movlt	r3, r1
 8005df6:	460c      	mov	r4, r1
 8005df8:	bfbc      	itt	lt
 8005dfa:	464c      	movlt	r4, r9
 8005dfc:	4699      	movlt	r9, r3
 8005dfe:	6927      	ldr	r7, [r4, #16]
 8005e00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e04:	68a3      	ldr	r3, [r4, #8]
 8005e06:	6861      	ldr	r1, [r4, #4]
 8005e08:	eb07 060a 	add.w	r6, r7, sl
 8005e0c:	42b3      	cmp	r3, r6
 8005e0e:	b085      	sub	sp, #20
 8005e10:	bfb8      	it	lt
 8005e12:	3101      	addlt	r1, #1
 8005e14:	f7ff feda 	bl	8005bcc <_Balloc>
 8005e18:	b930      	cbnz	r0, 8005e28 <__multiply+0x44>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <__multiply+0x14c>)
 8005e1e:	4845      	ldr	r0, [pc, #276]	; (8005f34 <__multiply+0x150>)
 8005e20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005e24:	f000 fc68 	bl	80066f8 <__assert_func>
 8005e28:	f100 0514 	add.w	r5, r0, #20
 8005e2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e30:	462b      	mov	r3, r5
 8005e32:	2200      	movs	r2, #0
 8005e34:	4543      	cmp	r3, r8
 8005e36:	d321      	bcc.n	8005e7c <__multiply+0x98>
 8005e38:	f104 0314 	add.w	r3, r4, #20
 8005e3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e40:	f109 0314 	add.w	r3, r9, #20
 8005e44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e48:	9202      	str	r2, [sp, #8]
 8005e4a:	1b3a      	subs	r2, r7, r4
 8005e4c:	3a15      	subs	r2, #21
 8005e4e:	f022 0203 	bic.w	r2, r2, #3
 8005e52:	3204      	adds	r2, #4
 8005e54:	f104 0115 	add.w	r1, r4, #21
 8005e58:	428f      	cmp	r7, r1
 8005e5a:	bf38      	it	cc
 8005e5c:	2204      	movcc	r2, #4
 8005e5e:	9201      	str	r2, [sp, #4]
 8005e60:	9a02      	ldr	r2, [sp, #8]
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d80c      	bhi.n	8005e82 <__multiply+0x9e>
 8005e68:	2e00      	cmp	r6, #0
 8005e6a:	dd03      	ble.n	8005e74 <__multiply+0x90>
 8005e6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d05b      	beq.n	8005f2c <__multiply+0x148>
 8005e74:	6106      	str	r6, [r0, #16]
 8005e76:	b005      	add	sp, #20
 8005e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7c:	f843 2b04 	str.w	r2, [r3], #4
 8005e80:	e7d8      	b.n	8005e34 <__multiply+0x50>
 8005e82:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e86:	f1ba 0f00 	cmp.w	sl, #0
 8005e8a:	d024      	beq.n	8005ed6 <__multiply+0xf2>
 8005e8c:	f104 0e14 	add.w	lr, r4, #20
 8005e90:	46a9      	mov	r9, r5
 8005e92:	f04f 0c00 	mov.w	ip, #0
 8005e96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005e9a:	f8d9 1000 	ldr.w	r1, [r9]
 8005e9e:	fa1f fb82 	uxth.w	fp, r2
 8005ea2:	b289      	uxth	r1, r1
 8005ea4:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ea8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005eac:	f8d9 2000 	ldr.w	r2, [r9]
 8005eb0:	4461      	add	r1, ip
 8005eb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005eb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005eba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ebe:	b289      	uxth	r1, r1
 8005ec0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ec4:	4577      	cmp	r7, lr
 8005ec6:	f849 1b04 	str.w	r1, [r9], #4
 8005eca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ece:	d8e2      	bhi.n	8005e96 <__multiply+0xb2>
 8005ed0:	9a01      	ldr	r2, [sp, #4]
 8005ed2:	f845 c002 	str.w	ip, [r5, r2]
 8005ed6:	9a03      	ldr	r2, [sp, #12]
 8005ed8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005edc:	3304      	adds	r3, #4
 8005ede:	f1b9 0f00 	cmp.w	r9, #0
 8005ee2:	d021      	beq.n	8005f28 <__multiply+0x144>
 8005ee4:	6829      	ldr	r1, [r5, #0]
 8005ee6:	f104 0c14 	add.w	ip, r4, #20
 8005eea:	46ae      	mov	lr, r5
 8005eec:	f04f 0a00 	mov.w	sl, #0
 8005ef0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ef4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ef8:	fb09 220b 	mla	r2, r9, fp, r2
 8005efc:	4452      	add	r2, sl
 8005efe:	b289      	uxth	r1, r1
 8005f00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f04:	f84e 1b04 	str.w	r1, [lr], #4
 8005f08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f10:	f8be 1000 	ldrh.w	r1, [lr]
 8005f14:	fb09 110a 	mla	r1, r9, sl, r1
 8005f18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005f1c:	4567      	cmp	r7, ip
 8005f1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f22:	d8e5      	bhi.n	8005ef0 <__multiply+0x10c>
 8005f24:	9a01      	ldr	r2, [sp, #4]
 8005f26:	50a9      	str	r1, [r5, r2]
 8005f28:	3504      	adds	r5, #4
 8005f2a:	e799      	b.n	8005e60 <__multiply+0x7c>
 8005f2c:	3e01      	subs	r6, #1
 8005f2e:	e79b      	b.n	8005e68 <__multiply+0x84>
 8005f30:	080069b0 	.word	0x080069b0
 8005f34:	080069c1 	.word	0x080069c1

08005f38 <__pow5mult>:
 8005f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f3c:	4615      	mov	r5, r2
 8005f3e:	f012 0203 	ands.w	r2, r2, #3
 8005f42:	4606      	mov	r6, r0
 8005f44:	460f      	mov	r7, r1
 8005f46:	d007      	beq.n	8005f58 <__pow5mult+0x20>
 8005f48:	4c25      	ldr	r4, [pc, #148]	; (8005fe0 <__pow5mult+0xa8>)
 8005f4a:	3a01      	subs	r2, #1
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f52:	f7ff fe9d 	bl	8005c90 <__multadd>
 8005f56:	4607      	mov	r7, r0
 8005f58:	10ad      	asrs	r5, r5, #2
 8005f5a:	d03d      	beq.n	8005fd8 <__pow5mult+0xa0>
 8005f5c:	69f4      	ldr	r4, [r6, #28]
 8005f5e:	b97c      	cbnz	r4, 8005f80 <__pow5mult+0x48>
 8005f60:	2010      	movs	r0, #16
 8005f62:	f7ff fd7f 	bl	8005a64 <malloc>
 8005f66:	4602      	mov	r2, r0
 8005f68:	61f0      	str	r0, [r6, #28]
 8005f6a:	b928      	cbnz	r0, 8005f78 <__pow5mult+0x40>
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <__pow5mult+0xac>)
 8005f6e:	481e      	ldr	r0, [pc, #120]	; (8005fe8 <__pow5mult+0xb0>)
 8005f70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005f74:	f000 fbc0 	bl	80066f8 <__assert_func>
 8005f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f7c:	6004      	str	r4, [r0, #0]
 8005f7e:	60c4      	str	r4, [r0, #12]
 8005f80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f88:	b94c      	cbnz	r4, 8005f9e <__pow5mult+0x66>
 8005f8a:	f240 2171 	movw	r1, #625	; 0x271
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f7ff ff12 	bl	8005db8 <__i2b>
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	6003      	str	r3, [r0, #0]
 8005f9e:	f04f 0900 	mov.w	r9, #0
 8005fa2:	07eb      	lsls	r3, r5, #31
 8005fa4:	d50a      	bpl.n	8005fbc <__pow5mult+0x84>
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4630      	mov	r0, r6
 8005fac:	f7ff ff1a 	bl	8005de4 <__multiply>
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f7ff fe49 	bl	8005c4c <_Bfree>
 8005fba:	4647      	mov	r7, r8
 8005fbc:	106d      	asrs	r5, r5, #1
 8005fbe:	d00b      	beq.n	8005fd8 <__pow5mult+0xa0>
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	b938      	cbnz	r0, 8005fd4 <__pow5mult+0x9c>
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7ff ff0b 	bl	8005de4 <__multiply>
 8005fce:	6020      	str	r0, [r4, #0]
 8005fd0:	f8c0 9000 	str.w	r9, [r0]
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	e7e4      	b.n	8005fa2 <__pow5mult+0x6a>
 8005fd8:	4638      	mov	r0, r7
 8005fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fde:	bf00      	nop
 8005fe0:	08006b10 	.word	0x08006b10
 8005fe4:	08006941 	.word	0x08006941
 8005fe8:	080069c1 	.word	0x080069c1

08005fec <__lshift>:
 8005fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	6849      	ldr	r1, [r1, #4]
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ffa:	68a3      	ldr	r3, [r4, #8]
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	4691      	mov	r9, r2
 8006000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006004:	f108 0601 	add.w	r6, r8, #1
 8006008:	42b3      	cmp	r3, r6
 800600a:	db0b      	blt.n	8006024 <__lshift+0x38>
 800600c:	4638      	mov	r0, r7
 800600e:	f7ff fddd 	bl	8005bcc <_Balloc>
 8006012:	4605      	mov	r5, r0
 8006014:	b948      	cbnz	r0, 800602a <__lshift+0x3e>
 8006016:	4602      	mov	r2, r0
 8006018:	4b28      	ldr	r3, [pc, #160]	; (80060bc <__lshift+0xd0>)
 800601a:	4829      	ldr	r0, [pc, #164]	; (80060c0 <__lshift+0xd4>)
 800601c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006020:	f000 fb6a 	bl	80066f8 <__assert_func>
 8006024:	3101      	adds	r1, #1
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	e7ee      	b.n	8006008 <__lshift+0x1c>
 800602a:	2300      	movs	r3, #0
 800602c:	f100 0114 	add.w	r1, r0, #20
 8006030:	f100 0210 	add.w	r2, r0, #16
 8006034:	4618      	mov	r0, r3
 8006036:	4553      	cmp	r3, sl
 8006038:	db33      	blt.n	80060a2 <__lshift+0xb6>
 800603a:	6920      	ldr	r0, [r4, #16]
 800603c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006040:	f104 0314 	add.w	r3, r4, #20
 8006044:	f019 091f 	ands.w	r9, r9, #31
 8006048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800604c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006050:	d02b      	beq.n	80060aa <__lshift+0xbe>
 8006052:	f1c9 0e20 	rsb	lr, r9, #32
 8006056:	468a      	mov	sl, r1
 8006058:	2200      	movs	r2, #0
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	fa00 f009 	lsl.w	r0, r0, r9
 8006060:	4310      	orrs	r0, r2
 8006062:	f84a 0b04 	str.w	r0, [sl], #4
 8006066:	f853 2b04 	ldr.w	r2, [r3], #4
 800606a:	459c      	cmp	ip, r3
 800606c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006070:	d8f3      	bhi.n	800605a <__lshift+0x6e>
 8006072:	ebac 0304 	sub.w	r3, ip, r4
 8006076:	3b15      	subs	r3, #21
 8006078:	f023 0303 	bic.w	r3, r3, #3
 800607c:	3304      	adds	r3, #4
 800607e:	f104 0015 	add.w	r0, r4, #21
 8006082:	4584      	cmp	ip, r0
 8006084:	bf38      	it	cc
 8006086:	2304      	movcc	r3, #4
 8006088:	50ca      	str	r2, [r1, r3]
 800608a:	b10a      	cbz	r2, 8006090 <__lshift+0xa4>
 800608c:	f108 0602 	add.w	r6, r8, #2
 8006090:	3e01      	subs	r6, #1
 8006092:	4638      	mov	r0, r7
 8006094:	612e      	str	r6, [r5, #16]
 8006096:	4621      	mov	r1, r4
 8006098:	f7ff fdd8 	bl	8005c4c <_Bfree>
 800609c:	4628      	mov	r0, r5
 800609e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80060a6:	3301      	adds	r3, #1
 80060a8:	e7c5      	b.n	8006036 <__lshift+0x4a>
 80060aa:	3904      	subs	r1, #4
 80060ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80060b4:	459c      	cmp	ip, r3
 80060b6:	d8f9      	bhi.n	80060ac <__lshift+0xc0>
 80060b8:	e7ea      	b.n	8006090 <__lshift+0xa4>
 80060ba:	bf00      	nop
 80060bc:	080069b0 	.word	0x080069b0
 80060c0:	080069c1 	.word	0x080069c1

080060c4 <__mcmp>:
 80060c4:	b530      	push	{r4, r5, lr}
 80060c6:	6902      	ldr	r2, [r0, #16]
 80060c8:	690c      	ldr	r4, [r1, #16]
 80060ca:	1b12      	subs	r2, r2, r4
 80060cc:	d10e      	bne.n	80060ec <__mcmp+0x28>
 80060ce:	f100 0314 	add.w	r3, r0, #20
 80060d2:	3114      	adds	r1, #20
 80060d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80060d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80060dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80060e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80060e4:	42a5      	cmp	r5, r4
 80060e6:	d003      	beq.n	80060f0 <__mcmp+0x2c>
 80060e8:	d305      	bcc.n	80060f6 <__mcmp+0x32>
 80060ea:	2201      	movs	r2, #1
 80060ec:	4610      	mov	r0, r2
 80060ee:	bd30      	pop	{r4, r5, pc}
 80060f0:	4283      	cmp	r3, r0
 80060f2:	d3f3      	bcc.n	80060dc <__mcmp+0x18>
 80060f4:	e7fa      	b.n	80060ec <__mcmp+0x28>
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	e7f7      	b.n	80060ec <__mcmp+0x28>

080060fc <__mdiff>:
 80060fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	460c      	mov	r4, r1
 8006102:	4606      	mov	r6, r0
 8006104:	4611      	mov	r1, r2
 8006106:	4620      	mov	r0, r4
 8006108:	4690      	mov	r8, r2
 800610a:	f7ff ffdb 	bl	80060c4 <__mcmp>
 800610e:	1e05      	subs	r5, r0, #0
 8006110:	d110      	bne.n	8006134 <__mdiff+0x38>
 8006112:	4629      	mov	r1, r5
 8006114:	4630      	mov	r0, r6
 8006116:	f7ff fd59 	bl	8005bcc <_Balloc>
 800611a:	b930      	cbnz	r0, 800612a <__mdiff+0x2e>
 800611c:	4b3a      	ldr	r3, [pc, #232]	; (8006208 <__mdiff+0x10c>)
 800611e:	4602      	mov	r2, r0
 8006120:	f240 2137 	movw	r1, #567	; 0x237
 8006124:	4839      	ldr	r0, [pc, #228]	; (800620c <__mdiff+0x110>)
 8006126:	f000 fae7 	bl	80066f8 <__assert_func>
 800612a:	2301      	movs	r3, #1
 800612c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006134:	bfa4      	itt	ge
 8006136:	4643      	movge	r3, r8
 8006138:	46a0      	movge	r8, r4
 800613a:	4630      	mov	r0, r6
 800613c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006140:	bfa6      	itte	ge
 8006142:	461c      	movge	r4, r3
 8006144:	2500      	movge	r5, #0
 8006146:	2501      	movlt	r5, #1
 8006148:	f7ff fd40 	bl	8005bcc <_Balloc>
 800614c:	b920      	cbnz	r0, 8006158 <__mdiff+0x5c>
 800614e:	4b2e      	ldr	r3, [pc, #184]	; (8006208 <__mdiff+0x10c>)
 8006150:	4602      	mov	r2, r0
 8006152:	f240 2145 	movw	r1, #581	; 0x245
 8006156:	e7e5      	b.n	8006124 <__mdiff+0x28>
 8006158:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800615c:	6926      	ldr	r6, [r4, #16]
 800615e:	60c5      	str	r5, [r0, #12]
 8006160:	f104 0914 	add.w	r9, r4, #20
 8006164:	f108 0514 	add.w	r5, r8, #20
 8006168:	f100 0e14 	add.w	lr, r0, #20
 800616c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006170:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006174:	f108 0210 	add.w	r2, r8, #16
 8006178:	46f2      	mov	sl, lr
 800617a:	2100      	movs	r1, #0
 800617c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006180:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006184:	fa11 f88b 	uxtah	r8, r1, fp
 8006188:	b299      	uxth	r1, r3
 800618a:	0c1b      	lsrs	r3, r3, #16
 800618c:	eba8 0801 	sub.w	r8, r8, r1
 8006190:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006194:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006198:	fa1f f888 	uxth.w	r8, r8
 800619c:	1419      	asrs	r1, r3, #16
 800619e:	454e      	cmp	r6, r9
 80061a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061a4:	f84a 3b04 	str.w	r3, [sl], #4
 80061a8:	d8e8      	bhi.n	800617c <__mdiff+0x80>
 80061aa:	1b33      	subs	r3, r6, r4
 80061ac:	3b15      	subs	r3, #21
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	3304      	adds	r3, #4
 80061b4:	3415      	adds	r4, #21
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	bf38      	it	cc
 80061ba:	2304      	movcc	r3, #4
 80061bc:	441d      	add	r5, r3
 80061be:	4473      	add	r3, lr
 80061c0:	469e      	mov	lr, r3
 80061c2:	462e      	mov	r6, r5
 80061c4:	4566      	cmp	r6, ip
 80061c6:	d30e      	bcc.n	80061e6 <__mdiff+0xea>
 80061c8:	f10c 0203 	add.w	r2, ip, #3
 80061cc:	1b52      	subs	r2, r2, r5
 80061ce:	f022 0203 	bic.w	r2, r2, #3
 80061d2:	3d03      	subs	r5, #3
 80061d4:	45ac      	cmp	ip, r5
 80061d6:	bf38      	it	cc
 80061d8:	2200      	movcc	r2, #0
 80061da:	4413      	add	r3, r2
 80061dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80061e0:	b17a      	cbz	r2, 8006202 <__mdiff+0x106>
 80061e2:	6107      	str	r7, [r0, #16]
 80061e4:	e7a4      	b.n	8006130 <__mdiff+0x34>
 80061e6:	f856 8b04 	ldr.w	r8, [r6], #4
 80061ea:	fa11 f288 	uxtah	r2, r1, r8
 80061ee:	1414      	asrs	r4, r2, #16
 80061f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80061f4:	b292      	uxth	r2, r2
 80061f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80061fa:	f84e 2b04 	str.w	r2, [lr], #4
 80061fe:	1421      	asrs	r1, r4, #16
 8006200:	e7e0      	b.n	80061c4 <__mdiff+0xc8>
 8006202:	3f01      	subs	r7, #1
 8006204:	e7ea      	b.n	80061dc <__mdiff+0xe0>
 8006206:	bf00      	nop
 8006208:	080069b0 	.word	0x080069b0
 800620c:	080069c1 	.word	0x080069c1

08006210 <__d2b>:
 8006210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006214:	460f      	mov	r7, r1
 8006216:	2101      	movs	r1, #1
 8006218:	ec59 8b10 	vmov	r8, r9, d0
 800621c:	4616      	mov	r6, r2
 800621e:	f7ff fcd5 	bl	8005bcc <_Balloc>
 8006222:	4604      	mov	r4, r0
 8006224:	b930      	cbnz	r0, 8006234 <__d2b+0x24>
 8006226:	4602      	mov	r2, r0
 8006228:	4b24      	ldr	r3, [pc, #144]	; (80062bc <__d2b+0xac>)
 800622a:	4825      	ldr	r0, [pc, #148]	; (80062c0 <__d2b+0xb0>)
 800622c:	f240 310f 	movw	r1, #783	; 0x30f
 8006230:	f000 fa62 	bl	80066f8 <__assert_func>
 8006234:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800623c:	bb2d      	cbnz	r5, 800628a <__d2b+0x7a>
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	f1b8 0300 	subs.w	r3, r8, #0
 8006244:	d026      	beq.n	8006294 <__d2b+0x84>
 8006246:	4668      	mov	r0, sp
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	f7ff fd87 	bl	8005d5c <__lo0bits>
 800624e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006252:	b1e8      	cbz	r0, 8006290 <__d2b+0x80>
 8006254:	f1c0 0320 	rsb	r3, r0, #32
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	430b      	orrs	r3, r1
 800625e:	40c2      	lsrs	r2, r0
 8006260:	6163      	str	r3, [r4, #20]
 8006262:	9201      	str	r2, [sp, #4]
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	61a3      	str	r3, [r4, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	bf14      	ite	ne
 800626c:	2202      	movne	r2, #2
 800626e:	2201      	moveq	r2, #1
 8006270:	6122      	str	r2, [r4, #16]
 8006272:	b1bd      	cbz	r5, 80062a4 <__d2b+0x94>
 8006274:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006278:	4405      	add	r5, r0
 800627a:	603d      	str	r5, [r7, #0]
 800627c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006280:	6030      	str	r0, [r6, #0]
 8006282:	4620      	mov	r0, r4
 8006284:	b003      	add	sp, #12
 8006286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800628a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800628e:	e7d6      	b.n	800623e <__d2b+0x2e>
 8006290:	6161      	str	r1, [r4, #20]
 8006292:	e7e7      	b.n	8006264 <__d2b+0x54>
 8006294:	a801      	add	r0, sp, #4
 8006296:	f7ff fd61 	bl	8005d5c <__lo0bits>
 800629a:	9b01      	ldr	r3, [sp, #4]
 800629c:	6163      	str	r3, [r4, #20]
 800629e:	3020      	adds	r0, #32
 80062a0:	2201      	movs	r2, #1
 80062a2:	e7e5      	b.n	8006270 <__d2b+0x60>
 80062a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062ac:	6038      	str	r0, [r7, #0]
 80062ae:	6918      	ldr	r0, [r3, #16]
 80062b0:	f7ff fd34 	bl	8005d1c <__hi0bits>
 80062b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062b8:	e7e2      	b.n	8006280 <__d2b+0x70>
 80062ba:	bf00      	nop
 80062bc:	080069b0 	.word	0x080069b0
 80062c0:	080069c1 	.word	0x080069c1

080062c4 <__sfputc_r>:
 80062c4:	6893      	ldr	r3, [r2, #8]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	b410      	push	{r4}
 80062cc:	6093      	str	r3, [r2, #8]
 80062ce:	da08      	bge.n	80062e2 <__sfputc_r+0x1e>
 80062d0:	6994      	ldr	r4, [r2, #24]
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	db01      	blt.n	80062da <__sfputc_r+0x16>
 80062d6:	290a      	cmp	r1, #10
 80062d8:	d103      	bne.n	80062e2 <__sfputc_r+0x1e>
 80062da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062de:	f7fe bbe6 	b.w	8004aae <__swbuf_r>
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	1c58      	adds	r0, r3, #1
 80062e6:	6010      	str	r0, [r2, #0]
 80062e8:	7019      	strb	r1, [r3, #0]
 80062ea:	4608      	mov	r0, r1
 80062ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <__sfputs_r>:
 80062f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f4:	4606      	mov	r6, r0
 80062f6:	460f      	mov	r7, r1
 80062f8:	4614      	mov	r4, r2
 80062fa:	18d5      	adds	r5, r2, r3
 80062fc:	42ac      	cmp	r4, r5
 80062fe:	d101      	bne.n	8006304 <__sfputs_r+0x12>
 8006300:	2000      	movs	r0, #0
 8006302:	e007      	b.n	8006314 <__sfputs_r+0x22>
 8006304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006308:	463a      	mov	r2, r7
 800630a:	4630      	mov	r0, r6
 800630c:	f7ff ffda 	bl	80062c4 <__sfputc_r>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d1f3      	bne.n	80062fc <__sfputs_r+0xa>
 8006314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006318 <_vfiprintf_r>:
 8006318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	460d      	mov	r5, r1
 800631e:	b09d      	sub	sp, #116	; 0x74
 8006320:	4614      	mov	r4, r2
 8006322:	4698      	mov	r8, r3
 8006324:	4606      	mov	r6, r0
 8006326:	b118      	cbz	r0, 8006330 <_vfiprintf_r+0x18>
 8006328:	6a03      	ldr	r3, [r0, #32]
 800632a:	b90b      	cbnz	r3, 8006330 <_vfiprintf_r+0x18>
 800632c:	f7fe fad0 	bl	80048d0 <__sinit>
 8006330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006332:	07d9      	lsls	r1, r3, #31
 8006334:	d405      	bmi.n	8006342 <_vfiprintf_r+0x2a>
 8006336:	89ab      	ldrh	r3, [r5, #12]
 8006338:	059a      	lsls	r2, r3, #22
 800633a:	d402      	bmi.n	8006342 <_vfiprintf_r+0x2a>
 800633c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800633e:	f7fe fcc8 	bl	8004cd2 <__retarget_lock_acquire_recursive>
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	071b      	lsls	r3, r3, #28
 8006346:	d501      	bpl.n	800634c <_vfiprintf_r+0x34>
 8006348:	692b      	ldr	r3, [r5, #16]
 800634a:	b99b      	cbnz	r3, 8006374 <_vfiprintf_r+0x5c>
 800634c:	4629      	mov	r1, r5
 800634e:	4630      	mov	r0, r6
 8006350:	f7fe fbea 	bl	8004b28 <__swsetup_r>
 8006354:	b170      	cbz	r0, 8006374 <_vfiprintf_r+0x5c>
 8006356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006358:	07dc      	lsls	r4, r3, #31
 800635a:	d504      	bpl.n	8006366 <_vfiprintf_r+0x4e>
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	b01d      	add	sp, #116	; 0x74
 8006362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006366:	89ab      	ldrh	r3, [r5, #12]
 8006368:	0598      	lsls	r0, r3, #22
 800636a:	d4f7      	bmi.n	800635c <_vfiprintf_r+0x44>
 800636c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800636e:	f7fe fcb1 	bl	8004cd4 <__retarget_lock_release_recursive>
 8006372:	e7f3      	b.n	800635c <_vfiprintf_r+0x44>
 8006374:	2300      	movs	r3, #0
 8006376:	9309      	str	r3, [sp, #36]	; 0x24
 8006378:	2320      	movs	r3, #32
 800637a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800637e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006382:	2330      	movs	r3, #48	; 0x30
 8006384:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006538 <_vfiprintf_r+0x220>
 8006388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800638c:	f04f 0901 	mov.w	r9, #1
 8006390:	4623      	mov	r3, r4
 8006392:	469a      	mov	sl, r3
 8006394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006398:	b10a      	cbz	r2, 800639e <_vfiprintf_r+0x86>
 800639a:	2a25      	cmp	r2, #37	; 0x25
 800639c:	d1f9      	bne.n	8006392 <_vfiprintf_r+0x7a>
 800639e:	ebba 0b04 	subs.w	fp, sl, r4
 80063a2:	d00b      	beq.n	80063bc <_vfiprintf_r+0xa4>
 80063a4:	465b      	mov	r3, fp
 80063a6:	4622      	mov	r2, r4
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff ffa1 	bl	80062f2 <__sfputs_r>
 80063b0:	3001      	adds	r0, #1
 80063b2:	f000 80a9 	beq.w	8006508 <_vfiprintf_r+0x1f0>
 80063b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b8:	445a      	add	r2, fp
 80063ba:	9209      	str	r2, [sp, #36]	; 0x24
 80063bc:	f89a 3000 	ldrb.w	r3, [sl]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80a1 	beq.w	8006508 <_vfiprintf_r+0x1f0>
 80063c6:	2300      	movs	r3, #0
 80063c8:	f04f 32ff 	mov.w	r2, #4294967295
 80063cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d0:	f10a 0a01 	add.w	sl, sl, #1
 80063d4:	9304      	str	r3, [sp, #16]
 80063d6:	9307      	str	r3, [sp, #28]
 80063d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063dc:	931a      	str	r3, [sp, #104]	; 0x68
 80063de:	4654      	mov	r4, sl
 80063e0:	2205      	movs	r2, #5
 80063e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e6:	4854      	ldr	r0, [pc, #336]	; (8006538 <_vfiprintf_r+0x220>)
 80063e8:	f7f9 fef2 	bl	80001d0 <memchr>
 80063ec:	9a04      	ldr	r2, [sp, #16]
 80063ee:	b9d8      	cbnz	r0, 8006428 <_vfiprintf_r+0x110>
 80063f0:	06d1      	lsls	r1, r2, #27
 80063f2:	bf44      	itt	mi
 80063f4:	2320      	movmi	r3, #32
 80063f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063fa:	0713      	lsls	r3, r2, #28
 80063fc:	bf44      	itt	mi
 80063fe:	232b      	movmi	r3, #43	; 0x2b
 8006400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006404:	f89a 3000 	ldrb.w	r3, [sl]
 8006408:	2b2a      	cmp	r3, #42	; 0x2a
 800640a:	d015      	beq.n	8006438 <_vfiprintf_r+0x120>
 800640c:	9a07      	ldr	r2, [sp, #28]
 800640e:	4654      	mov	r4, sl
 8006410:	2000      	movs	r0, #0
 8006412:	f04f 0c0a 	mov.w	ip, #10
 8006416:	4621      	mov	r1, r4
 8006418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800641c:	3b30      	subs	r3, #48	; 0x30
 800641e:	2b09      	cmp	r3, #9
 8006420:	d94d      	bls.n	80064be <_vfiprintf_r+0x1a6>
 8006422:	b1b0      	cbz	r0, 8006452 <_vfiprintf_r+0x13a>
 8006424:	9207      	str	r2, [sp, #28]
 8006426:	e014      	b.n	8006452 <_vfiprintf_r+0x13a>
 8006428:	eba0 0308 	sub.w	r3, r0, r8
 800642c:	fa09 f303 	lsl.w	r3, r9, r3
 8006430:	4313      	orrs	r3, r2
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	46a2      	mov	sl, r4
 8006436:	e7d2      	b.n	80063de <_vfiprintf_r+0xc6>
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	1d19      	adds	r1, r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	9103      	str	r1, [sp, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	bfbb      	ittet	lt
 8006444:	425b      	neglt	r3, r3
 8006446:	f042 0202 	orrlt.w	r2, r2, #2
 800644a:	9307      	strge	r3, [sp, #28]
 800644c:	9307      	strlt	r3, [sp, #28]
 800644e:	bfb8      	it	lt
 8006450:	9204      	strlt	r2, [sp, #16]
 8006452:	7823      	ldrb	r3, [r4, #0]
 8006454:	2b2e      	cmp	r3, #46	; 0x2e
 8006456:	d10c      	bne.n	8006472 <_vfiprintf_r+0x15a>
 8006458:	7863      	ldrb	r3, [r4, #1]
 800645a:	2b2a      	cmp	r3, #42	; 0x2a
 800645c:	d134      	bne.n	80064c8 <_vfiprintf_r+0x1b0>
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	9203      	str	r2, [sp, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	bfb8      	it	lt
 800646a:	f04f 33ff 	movlt.w	r3, #4294967295
 800646e:	3402      	adds	r4, #2
 8006470:	9305      	str	r3, [sp, #20]
 8006472:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006548 <_vfiprintf_r+0x230>
 8006476:	7821      	ldrb	r1, [r4, #0]
 8006478:	2203      	movs	r2, #3
 800647a:	4650      	mov	r0, sl
 800647c:	f7f9 fea8 	bl	80001d0 <memchr>
 8006480:	b138      	cbz	r0, 8006492 <_vfiprintf_r+0x17a>
 8006482:	9b04      	ldr	r3, [sp, #16]
 8006484:	eba0 000a 	sub.w	r0, r0, sl
 8006488:	2240      	movs	r2, #64	; 0x40
 800648a:	4082      	lsls	r2, r0
 800648c:	4313      	orrs	r3, r2
 800648e:	3401      	adds	r4, #1
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006496:	4829      	ldr	r0, [pc, #164]	; (800653c <_vfiprintf_r+0x224>)
 8006498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800649c:	2206      	movs	r2, #6
 800649e:	f7f9 fe97 	bl	80001d0 <memchr>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d03f      	beq.n	8006526 <_vfiprintf_r+0x20e>
 80064a6:	4b26      	ldr	r3, [pc, #152]	; (8006540 <_vfiprintf_r+0x228>)
 80064a8:	bb1b      	cbnz	r3, 80064f2 <_vfiprintf_r+0x1da>
 80064aa:	9b03      	ldr	r3, [sp, #12]
 80064ac:	3307      	adds	r3, #7
 80064ae:	f023 0307 	bic.w	r3, r3, #7
 80064b2:	3308      	adds	r3, #8
 80064b4:	9303      	str	r3, [sp, #12]
 80064b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b8:	443b      	add	r3, r7
 80064ba:	9309      	str	r3, [sp, #36]	; 0x24
 80064bc:	e768      	b.n	8006390 <_vfiprintf_r+0x78>
 80064be:	fb0c 3202 	mla	r2, ip, r2, r3
 80064c2:	460c      	mov	r4, r1
 80064c4:	2001      	movs	r0, #1
 80064c6:	e7a6      	b.n	8006416 <_vfiprintf_r+0xfe>
 80064c8:	2300      	movs	r3, #0
 80064ca:	3401      	adds	r4, #1
 80064cc:	9305      	str	r3, [sp, #20]
 80064ce:	4619      	mov	r1, r3
 80064d0:	f04f 0c0a 	mov.w	ip, #10
 80064d4:	4620      	mov	r0, r4
 80064d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064da:	3a30      	subs	r2, #48	; 0x30
 80064dc:	2a09      	cmp	r2, #9
 80064de:	d903      	bls.n	80064e8 <_vfiprintf_r+0x1d0>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0c6      	beq.n	8006472 <_vfiprintf_r+0x15a>
 80064e4:	9105      	str	r1, [sp, #20]
 80064e6:	e7c4      	b.n	8006472 <_vfiprintf_r+0x15a>
 80064e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80064ec:	4604      	mov	r4, r0
 80064ee:	2301      	movs	r3, #1
 80064f0:	e7f0      	b.n	80064d4 <_vfiprintf_r+0x1bc>
 80064f2:	ab03      	add	r3, sp, #12
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	462a      	mov	r2, r5
 80064f8:	4b12      	ldr	r3, [pc, #72]	; (8006544 <_vfiprintf_r+0x22c>)
 80064fa:	a904      	add	r1, sp, #16
 80064fc:	4630      	mov	r0, r6
 80064fe:	f7fd fcd3 	bl	8003ea8 <_printf_float>
 8006502:	4607      	mov	r7, r0
 8006504:	1c78      	adds	r0, r7, #1
 8006506:	d1d6      	bne.n	80064b6 <_vfiprintf_r+0x19e>
 8006508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800650a:	07d9      	lsls	r1, r3, #31
 800650c:	d405      	bmi.n	800651a <_vfiprintf_r+0x202>
 800650e:	89ab      	ldrh	r3, [r5, #12]
 8006510:	059a      	lsls	r2, r3, #22
 8006512:	d402      	bmi.n	800651a <_vfiprintf_r+0x202>
 8006514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006516:	f7fe fbdd 	bl	8004cd4 <__retarget_lock_release_recursive>
 800651a:	89ab      	ldrh	r3, [r5, #12]
 800651c:	065b      	lsls	r3, r3, #25
 800651e:	f53f af1d 	bmi.w	800635c <_vfiprintf_r+0x44>
 8006522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006524:	e71c      	b.n	8006360 <_vfiprintf_r+0x48>
 8006526:	ab03      	add	r3, sp, #12
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	462a      	mov	r2, r5
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <_vfiprintf_r+0x22c>)
 800652e:	a904      	add	r1, sp, #16
 8006530:	4630      	mov	r0, r6
 8006532:	f7fd ff5d 	bl	80043f0 <_printf_i>
 8006536:	e7e4      	b.n	8006502 <_vfiprintf_r+0x1ea>
 8006538:	08006b1c 	.word	0x08006b1c
 800653c:	08006b26 	.word	0x08006b26
 8006540:	08003ea9 	.word	0x08003ea9
 8006544:	080062f3 	.word	0x080062f3
 8006548:	08006b22 	.word	0x08006b22

0800654c <__swhatbuf_r>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	460c      	mov	r4, r1
 8006550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006554:	2900      	cmp	r1, #0
 8006556:	b096      	sub	sp, #88	; 0x58
 8006558:	4615      	mov	r5, r2
 800655a:	461e      	mov	r6, r3
 800655c:	da0d      	bge.n	800657a <__swhatbuf_r+0x2e>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	bf0c      	ite	eq
 800656a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800656e:	2340      	movne	r3, #64	; 0x40
 8006570:	2000      	movs	r0, #0
 8006572:	6031      	str	r1, [r6, #0]
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	b016      	add	sp, #88	; 0x58
 8006578:	bd70      	pop	{r4, r5, r6, pc}
 800657a:	466a      	mov	r2, sp
 800657c:	f000 f87c 	bl	8006678 <_fstat_r>
 8006580:	2800      	cmp	r0, #0
 8006582:	dbec      	blt.n	800655e <__swhatbuf_r+0x12>
 8006584:	9901      	ldr	r1, [sp, #4]
 8006586:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800658a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800658e:	4259      	negs	r1, r3
 8006590:	4159      	adcs	r1, r3
 8006592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006596:	e7eb      	b.n	8006570 <__swhatbuf_r+0x24>

08006598 <__smakebuf_r>:
 8006598:	898b      	ldrh	r3, [r1, #12]
 800659a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800659c:	079d      	lsls	r5, r3, #30
 800659e:	4606      	mov	r6, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	d507      	bpl.n	80065b4 <__smakebuf_r+0x1c>
 80065a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	6123      	str	r3, [r4, #16]
 80065ac:	2301      	movs	r3, #1
 80065ae:	6163      	str	r3, [r4, #20]
 80065b0:	b002      	add	sp, #8
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	ab01      	add	r3, sp, #4
 80065b6:	466a      	mov	r2, sp
 80065b8:	f7ff ffc8 	bl	800654c <__swhatbuf_r>
 80065bc:	9900      	ldr	r1, [sp, #0]
 80065be:	4605      	mov	r5, r0
 80065c0:	4630      	mov	r0, r6
 80065c2:	f7ff fa77 	bl	8005ab4 <_malloc_r>
 80065c6:	b948      	cbnz	r0, 80065dc <__smakebuf_r+0x44>
 80065c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065cc:	059a      	lsls	r2, r3, #22
 80065ce:	d4ef      	bmi.n	80065b0 <__smakebuf_r+0x18>
 80065d0:	f023 0303 	bic.w	r3, r3, #3
 80065d4:	f043 0302 	orr.w	r3, r3, #2
 80065d8:	81a3      	strh	r3, [r4, #12]
 80065da:	e7e3      	b.n	80065a4 <__smakebuf_r+0xc>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	6020      	str	r0, [r4, #0]
 80065e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e4:	81a3      	strh	r3, [r4, #12]
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	6163      	str	r3, [r4, #20]
 80065ea:	9b01      	ldr	r3, [sp, #4]
 80065ec:	6120      	str	r0, [r4, #16]
 80065ee:	b15b      	cbz	r3, 8006608 <__smakebuf_r+0x70>
 80065f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f4:	4630      	mov	r0, r6
 80065f6:	f000 f851 	bl	800669c <_isatty_r>
 80065fa:	b128      	cbz	r0, 8006608 <__smakebuf_r+0x70>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	431d      	orrs	r5, r3
 800660c:	81a5      	strh	r5, [r4, #12]
 800660e:	e7cf      	b.n	80065b0 <__smakebuf_r+0x18>

08006610 <_putc_r>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	460d      	mov	r5, r1
 8006614:	4614      	mov	r4, r2
 8006616:	4606      	mov	r6, r0
 8006618:	b118      	cbz	r0, 8006622 <_putc_r+0x12>
 800661a:	6a03      	ldr	r3, [r0, #32]
 800661c:	b90b      	cbnz	r3, 8006622 <_putc_r+0x12>
 800661e:	f7fe f957 	bl	80048d0 <__sinit>
 8006622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006624:	07d8      	lsls	r0, r3, #31
 8006626:	d405      	bmi.n	8006634 <_putc_r+0x24>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	0599      	lsls	r1, r3, #22
 800662c:	d402      	bmi.n	8006634 <_putc_r+0x24>
 800662e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006630:	f7fe fb4f 	bl	8004cd2 <__retarget_lock_acquire_recursive>
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	3b01      	subs	r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	60a3      	str	r3, [r4, #8]
 800663c:	da05      	bge.n	800664a <_putc_r+0x3a>
 800663e:	69a2      	ldr	r2, [r4, #24]
 8006640:	4293      	cmp	r3, r2
 8006642:	db12      	blt.n	800666a <_putc_r+0x5a>
 8006644:	b2eb      	uxtb	r3, r5
 8006646:	2b0a      	cmp	r3, #10
 8006648:	d00f      	beq.n	800666a <_putc_r+0x5a>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	6022      	str	r2, [r4, #0]
 8006650:	701d      	strb	r5, [r3, #0]
 8006652:	b2ed      	uxtb	r5, r5
 8006654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006656:	07da      	lsls	r2, r3, #31
 8006658:	d405      	bmi.n	8006666 <_putc_r+0x56>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	059b      	lsls	r3, r3, #22
 800665e:	d402      	bmi.n	8006666 <_putc_r+0x56>
 8006660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006662:	f7fe fb37 	bl	8004cd4 <__retarget_lock_release_recursive>
 8006666:	4628      	mov	r0, r5
 8006668:	bd70      	pop	{r4, r5, r6, pc}
 800666a:	4629      	mov	r1, r5
 800666c:	4622      	mov	r2, r4
 800666e:	4630      	mov	r0, r6
 8006670:	f7fe fa1d 	bl	8004aae <__swbuf_r>
 8006674:	4605      	mov	r5, r0
 8006676:	e7ed      	b.n	8006654 <_putc_r+0x44>

08006678 <_fstat_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d07      	ldr	r5, [pc, #28]	; (8006698 <_fstat_r+0x20>)
 800667c:	2300      	movs	r3, #0
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	4611      	mov	r1, r2
 8006684:	602b      	str	r3, [r5, #0]
 8006686:	f7fa fe40 	bl	800130a <_fstat>
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	d102      	bne.n	8006694 <_fstat_r+0x1c>
 800668e:	682b      	ldr	r3, [r5, #0]
 8006690:	b103      	cbz	r3, 8006694 <_fstat_r+0x1c>
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	bd38      	pop	{r3, r4, r5, pc}
 8006696:	bf00      	nop
 8006698:	200003cc 	.word	0x200003cc

0800669c <_isatty_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d06      	ldr	r5, [pc, #24]	; (80066b8 <_isatty_r+0x1c>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	f7fa fe3f 	bl	800132a <_isatty>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_isatty_r+0x1a>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_isatty_r+0x1a>
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	200003cc 	.word	0x200003cc

080066bc <_sbrk_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4d06      	ldr	r5, [pc, #24]	; (80066d8 <_sbrk_r+0x1c>)
 80066c0:	2300      	movs	r3, #0
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	f7fa fe48 	bl	800135c <_sbrk>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_sbrk_r+0x1a>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_sbrk_r+0x1a>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	200003cc 	.word	0x200003cc

080066dc <memcpy>:
 80066dc:	440a      	add	r2, r1
 80066de:	4291      	cmp	r1, r2
 80066e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066e4:	d100      	bne.n	80066e8 <memcpy+0xc>
 80066e6:	4770      	bx	lr
 80066e8:	b510      	push	{r4, lr}
 80066ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066f2:	4291      	cmp	r1, r2
 80066f4:	d1f9      	bne.n	80066ea <memcpy+0xe>
 80066f6:	bd10      	pop	{r4, pc}

080066f8 <__assert_func>:
 80066f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066fa:	4614      	mov	r4, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <__assert_func+0x2c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4605      	mov	r5, r0
 8006704:	68d8      	ldr	r0, [r3, #12]
 8006706:	b14c      	cbz	r4, 800671c <__assert_func+0x24>
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <__assert_func+0x30>)
 800670a:	9100      	str	r1, [sp, #0]
 800670c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006710:	4906      	ldr	r1, [pc, #24]	; (800672c <__assert_func+0x34>)
 8006712:	462b      	mov	r3, r5
 8006714:	f000 f844 	bl	80067a0 <fiprintf>
 8006718:	f000 f854 	bl	80067c4 <abort>
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <__assert_func+0x38>)
 800671e:	461c      	mov	r4, r3
 8006720:	e7f3      	b.n	800670a <__assert_func+0x12>
 8006722:	bf00      	nop
 8006724:	20000064 	.word	0x20000064
 8006728:	08006b37 	.word	0x08006b37
 800672c:	08006b44 	.word	0x08006b44
 8006730:	08006b72 	.word	0x08006b72

08006734 <_calloc_r>:
 8006734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006736:	fba1 2402 	umull	r2, r4, r1, r2
 800673a:	b94c      	cbnz	r4, 8006750 <_calloc_r+0x1c>
 800673c:	4611      	mov	r1, r2
 800673e:	9201      	str	r2, [sp, #4]
 8006740:	f7ff f9b8 	bl	8005ab4 <_malloc_r>
 8006744:	9a01      	ldr	r2, [sp, #4]
 8006746:	4605      	mov	r5, r0
 8006748:	b930      	cbnz	r0, 8006758 <_calloc_r+0x24>
 800674a:	4628      	mov	r0, r5
 800674c:	b003      	add	sp, #12
 800674e:	bd30      	pop	{r4, r5, pc}
 8006750:	220c      	movs	r2, #12
 8006752:	6002      	str	r2, [r0, #0]
 8006754:	2500      	movs	r5, #0
 8006756:	e7f8      	b.n	800674a <_calloc_r+0x16>
 8006758:	4621      	mov	r1, r4
 800675a:	f7fe fa3d 	bl	8004bd8 <memset>
 800675e:	e7f4      	b.n	800674a <_calloc_r+0x16>

08006760 <__ascii_mbtowc>:
 8006760:	b082      	sub	sp, #8
 8006762:	b901      	cbnz	r1, 8006766 <__ascii_mbtowc+0x6>
 8006764:	a901      	add	r1, sp, #4
 8006766:	b142      	cbz	r2, 800677a <__ascii_mbtowc+0x1a>
 8006768:	b14b      	cbz	r3, 800677e <__ascii_mbtowc+0x1e>
 800676a:	7813      	ldrb	r3, [r2, #0]
 800676c:	600b      	str	r3, [r1, #0]
 800676e:	7812      	ldrb	r2, [r2, #0]
 8006770:	1e10      	subs	r0, r2, #0
 8006772:	bf18      	it	ne
 8006774:	2001      	movne	r0, #1
 8006776:	b002      	add	sp, #8
 8006778:	4770      	bx	lr
 800677a:	4610      	mov	r0, r2
 800677c:	e7fb      	b.n	8006776 <__ascii_mbtowc+0x16>
 800677e:	f06f 0001 	mvn.w	r0, #1
 8006782:	e7f8      	b.n	8006776 <__ascii_mbtowc+0x16>

08006784 <__ascii_wctomb>:
 8006784:	b149      	cbz	r1, 800679a <__ascii_wctomb+0x16>
 8006786:	2aff      	cmp	r2, #255	; 0xff
 8006788:	bf85      	ittet	hi
 800678a:	238a      	movhi	r3, #138	; 0x8a
 800678c:	6003      	strhi	r3, [r0, #0]
 800678e:	700a      	strbls	r2, [r1, #0]
 8006790:	f04f 30ff 	movhi.w	r0, #4294967295
 8006794:	bf98      	it	ls
 8006796:	2001      	movls	r0, #1
 8006798:	4770      	bx	lr
 800679a:	4608      	mov	r0, r1
 800679c:	4770      	bx	lr
	...

080067a0 <fiprintf>:
 80067a0:	b40e      	push	{r1, r2, r3}
 80067a2:	b503      	push	{r0, r1, lr}
 80067a4:	4601      	mov	r1, r0
 80067a6:	ab03      	add	r3, sp, #12
 80067a8:	4805      	ldr	r0, [pc, #20]	; (80067c0 <fiprintf+0x20>)
 80067aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ae:	6800      	ldr	r0, [r0, #0]
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	f7ff fdb1 	bl	8006318 <_vfiprintf_r>
 80067b6:	b002      	add	sp, #8
 80067b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067bc:	b003      	add	sp, #12
 80067be:	4770      	bx	lr
 80067c0:	20000064 	.word	0x20000064

080067c4 <abort>:
 80067c4:	b508      	push	{r3, lr}
 80067c6:	2006      	movs	r0, #6
 80067c8:	f000 f82c 	bl	8006824 <raise>
 80067cc:	2001      	movs	r0, #1
 80067ce:	f7fa fd4d 	bl	800126c <_exit>

080067d2 <_raise_r>:
 80067d2:	291f      	cmp	r1, #31
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	d904      	bls.n	80067e6 <_raise_r+0x14>
 80067dc:	2316      	movs	r3, #22
 80067de:	6003      	str	r3, [r0, #0]
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	bd38      	pop	{r3, r4, r5, pc}
 80067e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80067e8:	b112      	cbz	r2, 80067f0 <_raise_r+0x1e>
 80067ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067ee:	b94b      	cbnz	r3, 8006804 <_raise_r+0x32>
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 f831 	bl	8006858 <_getpid_r>
 80067f6:	462a      	mov	r2, r5
 80067f8:	4601      	mov	r1, r0
 80067fa:	4620      	mov	r0, r4
 80067fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006800:	f000 b818 	b.w	8006834 <_kill_r>
 8006804:	2b01      	cmp	r3, #1
 8006806:	d00a      	beq.n	800681e <_raise_r+0x4c>
 8006808:	1c59      	adds	r1, r3, #1
 800680a:	d103      	bne.n	8006814 <_raise_r+0x42>
 800680c:	2316      	movs	r3, #22
 800680e:	6003      	str	r3, [r0, #0]
 8006810:	2001      	movs	r0, #1
 8006812:	e7e7      	b.n	80067e4 <_raise_r+0x12>
 8006814:	2400      	movs	r4, #0
 8006816:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800681a:	4628      	mov	r0, r5
 800681c:	4798      	blx	r3
 800681e:	2000      	movs	r0, #0
 8006820:	e7e0      	b.n	80067e4 <_raise_r+0x12>
	...

08006824 <raise>:
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <raise+0xc>)
 8006826:	4601      	mov	r1, r0
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	f7ff bfd2 	b.w	80067d2 <_raise_r>
 800682e:	bf00      	nop
 8006830:	20000064 	.word	0x20000064

08006834 <_kill_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d07      	ldr	r5, [pc, #28]	; (8006854 <_kill_r+0x20>)
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	4608      	mov	r0, r1
 800683e:	4611      	mov	r1, r2
 8006840:	602b      	str	r3, [r5, #0]
 8006842:	f7fa fd03 	bl	800124c <_kill>
 8006846:	1c43      	adds	r3, r0, #1
 8006848:	d102      	bne.n	8006850 <_kill_r+0x1c>
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	b103      	cbz	r3, 8006850 <_kill_r+0x1c>
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	bd38      	pop	{r3, r4, r5, pc}
 8006852:	bf00      	nop
 8006854:	200003cc 	.word	0x200003cc

08006858 <_getpid_r>:
 8006858:	f7fa bcf0 	b.w	800123c <_getpid>

0800685c <_init>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr

08006868 <_fini>:
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	bf00      	nop
 800686c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686e:	bc08      	pop	{r3}
 8006870:	469e      	mov	lr, r3
 8006872:	4770      	bx	lr
