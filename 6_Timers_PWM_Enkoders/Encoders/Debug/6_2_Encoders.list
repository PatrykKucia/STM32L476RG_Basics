
6_2_Encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005428  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800565c  0800565c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  080056cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080056cc  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010209  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002097  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00032380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba8  00000000  00000000  00033270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276a9  00000000  00000000  00033e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113a3  00000000  00000000  0005b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f413f  00000000  00000000  0006c864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004648  00000000  00000000  001609a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00164fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055a0 	.word	0x080055a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080055a0 	.word	0x080055a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	if(ch=='\n')
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d109      	bne.n	800058e <__io_putchar+0x22>
	{
		uint8_t ch2='\r';	//to fix end of line
 800057a:	230d      	movs	r3, #13
 800057c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 800057e:	f107 010f 	add.w	r1, r7, #15
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <__io_putchar+0x3c>)
 800058a:	f003 fb65 	bl	8003c58 <HAL_UART_Transmit>
	}
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2201      	movs	r2, #1
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <__io_putchar+0x3c>)
 8000598:	f003 fb5e 	bl	8003c58 <HAL_UART_Transmit>
    return 1;
 800059c:	2301      	movs	r3, #1
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000d0 	.word	0x200000d0

080005ac <HAL_TIM_IC_CaptureCallback>:

volatile uint32_t captured_value;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <HAL_TIM_IC_CaptureCallback+0x38>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d10e      	bne.n	80005da <HAL_TIM_IC_CaptureCallback+0x2e>
    switch (HAL_TIM_GetActiveChannel(&htim3)) {
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_TIM_IC_CaptureCallback+0x38>)
 80005be:	f002 ff39 	bl	8003434 <HAL_TIM_GetActiveChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d107      	bne.n	80005d8 <HAL_TIM_IC_CaptureCallback+0x2c>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80005c8:	2100      	movs	r1, #0
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f002 fec6 	bl	800335c <HAL_TIM_ReadCapturedValue>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80005d4:	6013      	str	r3, [r2, #0]
        break;
 80005d6:	e000      	b.n	80005da <HAL_TIM_IC_CaptureCallback+0x2e>
      default:
        break;
 80005d8:	bf00      	nop
    }
  }
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000084 	.word	0x20000084
 80005e8:	20000158 	.word	0x20000158

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fb4c 	bl	8000c8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f83f 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f94d 	bl	8000898 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f91b 	bl	8000838 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000602:	f000 f88b 	bl	800071c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("start");
 8000606:	4816      	ldr	r0, [pc, #88]	; (8000660 <main+0x74>)
 8000608:	f004 fa02 	bl	8004a10 <iprintf>
  fflush(stdout);
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <main+0x78>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	4618      	mov	r0, r3
 8000614:	f004 f926 	bl	8004864 <fflush>
  HAL_TIM_Base_Start(&htim3);//start counting
 8000618:	4813      	ldr	r0, [pc, #76]	; (8000668 <main+0x7c>)
 800061a:	f002 f9e1 	bl	80029e0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);//start chanel 1 counting
 800061e:	2100      	movs	r1, #0
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <main+0x7c>)
 8000622:	f002 faa7 	bl	8002b74 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  int x=HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000626:	2100      	movs	r1, #0
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <main+0x7c>)
 800062a:	f002 fe97 	bl	800335c <HAL_TIM_ReadCapturedValue>
 800062e:	4603      	mov	r3, r0
 8000630:	607b      	str	r3, [r7, #4]
	  if(x>=10000)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f242 720f 	movw	r2, #9999	; 0x270f
 8000638:	4293      	cmp	r3, r2
 800063a:	dd02      	ble.n	8000642 <main+0x56>
  	  {
	  	  printf("full");
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x80>)
 800063e:	f004 f9e7 	bl	8004a10 <iprintf>
  	  }
	  if (captured_value != 0) {
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <main+0x84>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0ed      	beq.n	8000626 <main+0x3a>
	      printf("value = %lu\n", captured_value);
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <main+0x84>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	4808      	ldr	r0, [pc, #32]	; (8000674 <main+0x88>)
 8000652:	f004 f9dd 	bl	8004a10 <iprintf>
	      captured_value = 0;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <main+0x84>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
  {
 800065c:	e7e3      	b.n	8000626 <main+0x3a>
 800065e:	bf00      	nop
 8000660:	080055b8 	.word	0x080055b8
 8000664:	20000064 	.word	0x20000064
 8000668:	20000084 	.word	0x20000084
 800066c:	080055c0 	.word	0x080055c0
 8000670:	20000158 	.word	0x20000158
 8000674:	080055c8 	.word	0x080055c8

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	; 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fa17 	bl	8004aba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069e:	f000 fe35 	bl	800130c <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 f90e 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ac:	2310      	movs	r3, #16
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c0:	2301      	movs	r3, #1
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006c8:	2328      	movs	r3, #40	; 0x28
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe6b 	bl	80013b8 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006e8:	f000 f8ee 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fa33 	bl	8001b70 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000710:	f000 f8da 	bl	80008c8 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3758      	adds	r7, #88	; 0x58
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b090      	sub	sp, #64	; 0x40
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000758:	4b35      	ldr	r3, [pc, #212]	; (8000830 <MX_TIM3_Init+0x114>)
 800075a:	4a36      	ldr	r2, [pc, #216]	; (8000834 <MX_TIM3_Init+0x118>)
 800075c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <MX_TIM3_Init+0x114>)
 8000760:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000764:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <MX_TIM3_Init+0x114>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800076c:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_TIM3_Init+0x114>)
 800076e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000772:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_TIM3_Init+0x114>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_TIM3_Init+0x114>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000780:	482b      	ldr	r0, [pc, #172]	; (8000830 <MX_TIM3_Init+0x114>)
 8000782:	f002 f8d5 	bl	8002930 <HAL_TIM_Base_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800078c:	f000 f89c 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800079a:	4619      	mov	r1, r3
 800079c:	4824      	ldr	r0, [pc, #144]	; (8000830 <MX_TIM3_Init+0x114>)
 800079e:	f002 fcd1 	bl	8003144 <HAL_TIM_ConfigClockSource>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80007a8:	f000 f88e 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80007ac:	4820      	ldr	r0, [pc, #128]	; (8000830 <MX_TIM3_Init+0x114>)
 80007ae:	f002 f97f 	bl	8002ab0 <HAL_TIM_IC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80007b8:	f000 f886 	bl	80008c8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80007bc:	2304      	movs	r3, #4
 80007be:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	4817      	ldr	r0, [pc, #92]	; (8000830 <MX_TIM3_Init+0x114>)
 80007d4:	f002 fd7f 	bl	80032d6 <HAL_TIM_SlaveConfigSynchro>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80007de:	f000 f873 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	4619      	mov	r1, r3
 80007f0:	480f      	ldr	r0, [pc, #60]	; (8000830 <MX_TIM3_Init+0x114>)
 80007f2:	f003 f93d 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80007fc:	f000 f864 	bl	80008c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000804:	2301      	movs	r3, #1
 8000806:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_TIM3_Init+0x114>)
 8000818:	f002 fbf8 	bl	800300c <HAL_TIM_IC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8000822:	f000 f851 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3740      	adds	r7, #64	; 0x40
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000084 	.word	0x20000084
 8000834:	40000400 	.word	0x40000400

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_USART2_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800087c:	f003 f99e 	bl	8003bbc <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f81f 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000d0 	.word	0x200000d0
 8000894:	40004400 	.word	0x40004400

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_GPIO_Init+0x2c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <MX_GPIO_Init+0x2c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_GPIO_Init+0x2c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <HAL_TIM_Base_MspInit+0x8c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d130      	bne.n	80009a0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <HAL_TIM_Base_MspInit+0x90>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <HAL_TIM_Base_MspInit+0x90>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_TIM_Base_MspInit+0x90>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_TIM_Base_MspInit+0x90>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_TIM_Base_MspInit+0x90>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_TIM_Base_MspInit+0x90>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800097e:	2302      	movs	r3, #2
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f000 fb06 	bl	8000f9c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	210a      	movs	r1, #10
 8000994:	201d      	movs	r0, #29
 8000996:	f000 faca 	bl	8000f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800099a:	201d      	movs	r0, #29
 800099c:	f000 fae3 	bl	8000f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40000400 	.word	0x40000400
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0ac      	sub	sp, #176	; 0xb0
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2288      	movs	r2, #136	; 0x88
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f004 f872 	bl	8004aba <memset>
  if(huart->Instance==USART2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <HAL_UART_MspInit+0xb0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d13b      	bne.n	8000a58 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fae3 	bl	8001fb8 <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f8:	f7ff ff66 	bl	80008c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0xb4>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a00:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a06:	6593      	str	r3, [r2, #88]	; 0x58
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a44:	2307      	movs	r3, #7
 8000a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 faa2 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	37b0      	adds	r7, #176	; 0xb0
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004400 	.word	0x40004400
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f940 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM3_IRQHandler+0x10>)
 8000ac2:	f002 f9a1 	bl	8002e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000084 	.word	0x20000084

08000ad0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
  }

  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fd21 	bl	800056c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
  }
  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f003 ffbc 	bl	8004b58 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20018000 	.word	0x20018000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	2000015c 	.word	0x2000015c
 8000c14:	200002b0 	.word	0x200002b0

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	; (8000c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <LoopForever+0xe>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <LoopForever+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f003 ff7b 	bl	8004b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6e:	f7ff fcbd 	bl	80005ec <main>

08000c72 <LoopForever>:

LoopForever:
    b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c80:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 8000c84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c88:	200002b0 	.word	0x200002b0

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>

08000c8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f93d 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f80e 	bl	8000cc0 <HAL_InitTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e001      	b.n	8000cb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb0:	f7ff fe10 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_InitTick+0x6c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d023      	beq.n	8000d1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_InitTick+0x70>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_InitTick+0x6c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f949 	bl	8000f82 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10f      	bne.n	8000d16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d809      	bhi.n	8000d10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f913 	bl	8000f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_InitTick+0x74>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e007      	b.n	8000d20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e004      	b.n	8000d20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e001      	b.n	8000d20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000160 	.word	0x20000160

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000160 	.word	0x20000160

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	; (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff29 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff3e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff31 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffa2 	bl	8000ed4 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	e17f      	b.n	80012ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8171 	beq.w	80012a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x40>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 0201 	and.w	r2, r3, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b03      	cmp	r3, #3
 8001048:	d118      	bne.n	800107c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001050:	2201      	movs	r2, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	f003 0201 	and.w	r2, r3, #1
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b03      	cmp	r3, #3
 8001086:	d017      	beq.n	80010b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d123      	bne.n	800110c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	6939      	ldr	r1, [r7, #16]
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0203 	and.w	r2, r3, #3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80ac 	beq.w	80012a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	4a5e      	ldr	r2, [pc, #376]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6613      	str	r3, [r2, #96]	; 0x60
 800115a:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <HAL_GPIO_Init+0x330>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001166:	4a5a      	ldr	r2, [pc, #360]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x242>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x338>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x23e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <HAL_GPIO_Init+0x33c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x23a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x340>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x236>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_GPIO_Init+0x344>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x232>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_GPIO_Init+0x348>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x22e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <HAL_GPIO_Init+0x34c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x22a>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x244>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x244>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x244>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x244>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x244>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x244>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x244>
 80011de:	2300      	movs	r3, #0
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f0:	4937      	ldr	r1, [pc, #220]	; (80012d0 <HAL_GPIO_Init+0x334>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001222:	4a32      	ldr	r2, [pc, #200]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_GPIO_Init+0x350>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <HAL_GPIO_Init+0x350>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001276:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_GPIO_Init+0x350>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <HAL_GPIO_Init+0x350>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa22 f303 	lsr.w	r3, r2, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f47f ae78 	bne.w	8000fac <HAL_GPIO_Init+0x10>
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	48000c00 	.word	0x48000c00
 80012e0:	48001000 	.word	0x48001000
 80012e4:	48001400 	.word	0x48001400
 80012e8:	48001800 	.word	0x48001800
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <HAL_PWREx_GetVoltageRange+0x18>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131a:	d130      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001328:	d038      	beq.n	800139c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001338:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2232      	movs	r2, #50	; 0x32
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9b      	lsrs	r3, r3, #18
 800134c:	3301      	adds	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001350:	e002      	b.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3b01      	subs	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001364:	d102      	bne.n	800136c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f2      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001378:	d110      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e00f      	b.n	800139e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d007      	beq.n	800139c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40007000 	.word	0x40007000
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83

080013b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e3ca      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ca:	4b97      	ldr	r3, [pc, #604]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d4:	4b94      	ldr	r3, [pc, #592]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80e4 	beq.w	80015b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_RCC_OscConfig+0x4a>
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	f040 808b 	bne.w	8001510 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f040 8087 	bne.w	8001510 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001402:	4b89      	ldr	r3, [pc, #548]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x62>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e3a2      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1a      	ldr	r2, [r3, #32]
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <HAL_RCC_OscConfig+0x7c>
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001432:	e005      	b.n	8001440 <HAL_RCC_OscConfig+0x88>
 8001434:	4b7c      	ldr	r3, [pc, #496]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001440:	4293      	cmp	r3, r2
 8001442:	d223      	bcs.n	800148c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fd55 	bl	8001ef8 <RCC_SetFlashLatencyFromMSIRange>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e383      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001458:	4b73      	ldr	r3, [pc, #460]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a72      	ldr	r2, [pc, #456]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b70      	ldr	r3, [pc, #448]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	496d      	ldr	r1, [pc, #436]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001476:	4b6c      	ldr	r3, [pc, #432]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	4968      	ldr	r1, [pc, #416]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
 800148a:	e025      	b.n	80014d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148c:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a65      	ldr	r2, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b63      	ldr	r3, [pc, #396]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4960      	ldr	r1, [pc, #384]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014aa:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	495b      	ldr	r1, [pc, #364]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fd15 	bl	8001ef8 <RCC_SetFlashLatencyFromMSIRange>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e343      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d8:	f000 fc4a 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b52      	ldr	r3, [pc, #328]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	4950      	ldr	r1, [pc, #320]	; (800162c <HAL_RCC_OscConfig+0x274>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
 80014f4:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_RCC_OscConfig+0x278>)
 80014f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f8:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <HAL_RCC_OscConfig+0x27c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fbdf 	bl	8000cc0 <HAL_InitTick>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d052      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	e327      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d032      	beq.n	800157e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a42      	ldr	r2, [pc, #264]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001524:	f7ff fc1c 	bl	8000d60 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152c:	f7ff fc18 	bl	8000d60 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e310      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a36      	ldr	r2, [pc, #216]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4931      	ldr	r1, [pc, #196]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	492c      	ldr	r1, [pc, #176]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	e01a      	b.n	80015b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158a:	f7ff fbe9 	bl	8000d60 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001592:	f7ff fbe5 	bl	8000d60 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e2dd      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x1da>
 80015b0:	e000      	b.n	80015b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d074      	beq.n	80016aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x21a>
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b0c      	cmp	r3, #12
 80015ca:	d10e      	bne.n	80015ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d10b      	bne.n	80015ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d064      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2f0>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d160      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e2ba      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x24a>
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e026      	b.n	8001650 <HAL_RCC_OscConfig+0x298>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800160a:	d115      	bne.n	8001638 <HAL_RCC_OscConfig+0x280>
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a05      	ldr	r2, [pc, #20]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a02      	ldr	r2, [pc, #8]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e014      	b.n	8001650 <HAL_RCC_OscConfig+0x298>
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	080055d8 	.word	0x080055d8
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004
 8001638:	4ba0      	ldr	r3, [pc, #640]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9f      	ldr	r2, [pc, #636]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b9d      	ldr	r3, [pc, #628]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a9c      	ldr	r2, [pc, #624]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb82 	bl	8000d60 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fb7e 	bl	8000d60 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e276      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001672:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x2a8>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fb6e 	bl	8000d60 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fb6a 	bl	8000d60 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e262      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169a:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d0>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d060      	beq.n	8001778 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x310>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d116      	bne.n	80016f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x328>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e23f      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	4973      	ldr	r1, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f4:	e040      	b.n	8001778 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d023      	beq.n	8001746 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fe:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6e      	ldr	r2, [pc, #440]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fb29 	bl	8000d60 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fb25 	bl	8000d60 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e21d      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001724:	4b65      	ldr	r3, [pc, #404]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b62      	ldr	r3, [pc, #392]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	495f      	ldr	r1, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e018      	b.n	8001778 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5c      	ldr	r2, [pc, #368]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800174c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fb05 	bl	8000d60 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fb01 	bl	8000d60 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1f9      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d03c      	beq.n	80017fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178c:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fae0 	bl	8000d60 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fadc 	bl	8000d60 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1d4      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ef      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3ec>
 80017c4:	e01b      	b.n	80017fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017cc:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fac3 	bl	8000d60 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fabf 	bl	8000d60 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1b7      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ef      	bne.n	80017de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a6 	beq.w	8001958 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10d      	bne.n	8001838 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001826:	6593      	str	r3, [r2, #88]	; 0x58
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001834:	2301      	movs	r3, #1
 8001836:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_RCC_OscConfig+0x508>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d118      	bne.n	8001876 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_RCC_OscConfig+0x508>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <HAL_RCC_OscConfig+0x508>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001850:	f7ff fa86 	bl	8000d60 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001858:	f7ff fa82 	bl	8000d60 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e17a      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_RCC_OscConfig+0x508>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_RCC_OscConfig+0x4d8>
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188e:	e029      	b.n	80018e4 <HAL_RCC_OscConfig+0x52c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d115      	bne.n	80018c4 <HAL_RCC_OscConfig+0x50c>
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ae:	4a03      	ldr	r2, [pc, #12]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x52c>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40007000 	.word	0x40007000
 80018c4:	4b9c      	ldr	r3, [pc, #624]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	4a9b      	ldr	r2, [pc, #620]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d4:	4b98      	ldr	r3, [pc, #608]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	4a97      	ldr	r2, [pc, #604]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fa38 	bl	8000d60 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fa34 	bl	8000d60 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e12a      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ed      	beq.n	80018f4 <HAL_RCC_OscConfig+0x53c>
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff fa21 	bl	8000d60 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fa1d 	bl	8000d60 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e113      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	4b7f      	ldr	r3, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ed      	bne.n	8001922 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b7a      	ldr	r3, [pc, #488]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	4a79      	ldr	r2, [pc, #484]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80fe 	beq.w	8001b5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	2b02      	cmp	r3, #2
 8001968:	f040 80d0 	bne.w	8001b0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800196c:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	429a      	cmp	r2, r3
 800197e:	d130      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	3b01      	subs	r3, #1
 800198c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d127      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019ac:	2a07      	cmp	r2, #7
 80019ae:	bf14      	ite	ne
 80019b0:	2201      	movne	r2, #1
 80019b2:	2200      	moveq	r2, #0
 80019b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d113      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	3b01      	subs	r3, #1
 80019dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d06e      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	d069      	beq.n	8001abc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0ad      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a10:	f7ff f9a6 	bl	8000d60 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff f9a2 	bl	8000d60 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e09a      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a36:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a46:	3a01      	subs	r2, #1
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a50:	0212      	lsls	r2, r2, #8
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0552      	lsls	r2, r2, #21
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a64:	0852      	lsrs	r2, r2, #1
 8001a66:	3a01      	subs	r2, #1
 8001a68:	0652      	lsls	r2, r2, #25
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a70:	0912      	lsrs	r2, r2, #4
 8001a72:	0452      	lsls	r2, r2, #17
 8001a74:	430a      	orrs	r2, r1
 8001a76:	4930      	ldr	r1, [pc, #192]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a94:	f7ff f964 	bl	8000d60 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f960 	bl	8000d60 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e058      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aba:	e050      	b.n	8001b5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e04f      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d148      	bne.n	8001b5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ae4:	f7ff f93c 	bl	8000d60 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff f938 	bl	8000d60 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e030      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x734>
 8001b0a:	e028      	b.n	8001b5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d023      	beq.n	8001b5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001b18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f91f 	bl	8000d60 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b24:	e00c      	b.n	8001b40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff f91b 	bl	8000d60 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d905      	bls.n	8001b40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e013      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_OscConfig+0x7b0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1ec      	bne.n	8001b26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_OscConfig+0x7b0>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4905      	ldr	r1, [pc, #20]	; (8001b68 <HAL_RCC_OscConfig+0x7b0>)
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_OscConfig+0x7b4>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e001      	b.n	8001b5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	feeefffc 	.word	0xfeeefffc

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0e7      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b75      	ldr	r3, [pc, #468]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d910      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4970      	ldr	r1, [pc, #448]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b6e      	ldr	r3, [pc, #440]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0cf      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d908      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4960      	ldr	r1, [pc, #384]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d04c      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d121      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0a6      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d115      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e09a      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c26:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e08e      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c36:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e086      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f023 0203 	bic.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4943      	ldr	r1, [pc, #268]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c58:	f7ff f882 	bl	8000d60 <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff f87e 	bl	8000d60 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e06e      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 020c 	and.w	r2, r3, #12
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1eb      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d208      	bcs.n	8001cb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	492b      	ldr	r1, [pc, #172]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d210      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 0207 	bic.w	r2, r3, #7
 8001ccc:	4923      	ldr	r1, [pc, #140]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e036      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4918      	ldr	r1, [pc, #96]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4910      	ldr	r1, [pc, #64]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d24:	f000 f824 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	490b      	ldr	r1, [pc, #44]	; (8001d64 <HAL_RCC_ClockConfig+0x1f4>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d40:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1fc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe ffb9 	bl	8000cc0 <HAL_InitTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d52:	7afb      	ldrb	r3, [r7, #11]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	080055d8 	.word	0x080055d8
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x34>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d121      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d11e      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001da4:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001db0:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e005      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	e004      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001df6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d134      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d003      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0xac>
 8001e14:	e005      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	e005      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e1e:	617b      	str	r3, [r7, #20]
      break;
 8001e20:	e002      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	617b      	str	r3, [r7, #20]
      break;
 8001e26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	3301      	adds	r3, #1
 8001e34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	fb03 f202 	mul.w	r2, r3, r2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	0e5b      	lsrs	r3, r3, #25
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e68:	69bb      	ldr	r3, [r7, #24]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	080055f0 	.word	0x080055f0
 8001e80:	00f42400 	.word	0x00f42400
 8001e84:	007a1200 	.word	0x007a1200

08001e88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ea4:	f7ff fff0 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4904      	ldr	r1, [pc, #16]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	080055e8 	.word	0x080055e8

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ed0:	f7ff ffda 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0adb      	lsrs	r3, r3, #11
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4904      	ldr	r1, [pc, #16]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	080055e8 	.word	0x080055e8

08001ef8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f10:	f7ff f9ee 	bl	80012f0 <HAL_PWREx_GetVoltageRange>
 8001f14:	6178      	str	r0, [r7, #20]
 8001f16:	e014      	b.n	8001f42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	; 0x58
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f30:	f7ff f9de 	bl	80012f0 <HAL_PWREx_GetVoltageRange>
 8001f34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f48:	d10b      	bne.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	d919      	bls.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2ba0      	cmp	r3, #160	; 0xa0
 8001f54:	d902      	bls.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f56:	2302      	movs	r3, #2
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	e013      	b.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e010      	b.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d902      	bls.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f68:	2303      	movs	r3, #3
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e00a      	b.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d102      	bne.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f74:	2302      	movs	r3, #2
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e004      	b.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b70      	cmp	r3, #112	; 0x70
 8001f7e:	d101      	bne.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f80:	2301      	movs	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0207 	bic.w	r2, r3, #7
 8001f8c:	4909      	ldr	r1, [pc, #36]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40022000 	.word	0x40022000

08001fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d041      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fdc:	d02a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fe2:	d824      	bhi.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fe8:	d008      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fee:	d81e      	bhi.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff8:	d010      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ffa:	e018      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ffc:	4b86      	ldr	r3, [pc, #536]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a85      	ldr	r2, [pc, #532]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002008:	e015      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fabb 	bl	800258c <RCCEx_PLLSAI1_Config>
 8002016:	4603      	mov	r3, r0
 8002018:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800201a:	e00c      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3320      	adds	r3, #32
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fba6 	bl	8002774 <RCCEx_PLLSAI2_Config>
 8002028:	4603      	mov	r3, r0
 800202a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800202c:	e003      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	74fb      	strb	r3, [r7, #19]
      break;
 8002032:	e000      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10b      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800203c:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800204a:	4973      	ldr	r1, [pc, #460]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002052:	e001      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d041      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800206c:	d02a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800206e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002072:	d824      	bhi.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002078:	d008      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800207a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800207e:	d81e      	bhi.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d010      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800208a:	e018      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800208c:	4b62      	ldr	r3, [pc, #392]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a61      	ldr	r2, [pc, #388]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002096:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002098:	e015      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fa73 	bl	800258c <RCCEx_PLLSAI1_Config>
 80020a6:	4603      	mov	r3, r0
 80020a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020aa:	e00c      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3320      	adds	r3, #32
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fb5e 	bl	8002774 <RCCEx_PLLSAI2_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020bc:	e003      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	74fb      	strb	r3, [r7, #19]
      break;
 80020c2:	e000      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020c6:	7cfb      	ldrb	r3, [r7, #19]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020cc:	4b52      	ldr	r3, [pc, #328]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020da:	494f      	ldr	r1, [pc, #316]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020e2:	e001      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a0 	beq.w	8002236 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800210a:	2300      	movs	r3, #0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	4a40      	ldr	r2, [pc, #256]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	; 0x58
 800211c:	4b3e      	ldr	r3, [pc, #248]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002128:	2301      	movs	r3, #1
 800212a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212c:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3a      	ldr	r2, [pc, #232]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002138:	f7fe fe12 	bl	8000d60 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7fe fe0e 	bl	8000d60 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d902      	bls.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	74fb      	strb	r3, [r7, #19]
        break;
 8002152:	e005      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002154:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ef      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d15c      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002166:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002170:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01f      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	d019      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a20      	ldr	r2, [pc, #128]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d016      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7fe fdcd 	bl	8000d60 <HAL_GetTick>
 80021c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c8:	e00b      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fdc9 	bl	8000d60 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d902      	bls.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	74fb      	strb	r3, [r7, #19]
            break;
 80021e0:	e006      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ec      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002206:	4904      	ldr	r1, [pc, #16]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800220e:	e009      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	74bb      	strb	r3, [r7, #18]
 8002214:	e006      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002224:	7c7b      	ldrb	r3, [r7, #17]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b9e      	ldr	r3, [pc, #632]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a9d      	ldr	r2, [pc, #628]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002242:	4b98      	ldr	r3, [pc, #608]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f023 0203 	bic.w	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	4994      	ldr	r1, [pc, #592]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002264:	4b8f      	ldr	r3, [pc, #572]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f023 020c 	bic.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	498c      	ldr	r1, [pc, #560]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002286:	4b87      	ldr	r3, [pc, #540]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	4983      	ldr	r1, [pc, #524]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022a8:	4b7e      	ldr	r3, [pc, #504]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	497b      	ldr	r1, [pc, #492]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ca:	4b76      	ldr	r3, [pc, #472]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d8:	4972      	ldr	r1, [pc, #456]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ec:	4b6d      	ldr	r3, [pc, #436]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	496a      	ldr	r1, [pc, #424]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800230e:	4b65      	ldr	r3, [pc, #404]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002314:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	4961      	ldr	r1, [pc, #388]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002330:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233e:	4959      	ldr	r1, [pc, #356]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002352:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002360:	4950      	ldr	r1, [pc, #320]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002374:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	4948      	ldr	r1, [pc, #288]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	493f      	ldr	r1, [pc, #252]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d028      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b8:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c6:	4937      	ldr	r1, [pc, #220]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d6:	d106      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d8:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e2:	60d3      	str	r3, [r2, #12]
 80023e4:	e011      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ee:	d10c      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f8c8 	bl	800258c <RCCEx_PLLSAI1_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d028      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	491f      	ldr	r1, [pc, #124]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002434:	d106      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002440:	60d3      	str	r3, [r2, #12]
 8002442:	e011      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800244c:	d10c      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f899 	bl	800258c <RCCEx_PLLSAI1_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02b      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002482:	4908      	ldr	r1, [pc, #32]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002492:	d109      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a02      	ldr	r2, [pc, #8]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249e:	60d3      	str	r3, [r2, #12]
 80024a0:	e014      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2101      	movs	r1, #1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f867 	bl	800258c <RCCEx_PLLSAI1_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02f      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e6:	4928      	ldr	r1, [pc, #160]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f6:	d10d      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	2102      	movs	r1, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f844 	bl	800258c <RCCEx_PLLSAI1_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d014      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	74bb      	strb	r3, [r7, #18]
 8002512:	e011      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800251c:	d10c      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3320      	adds	r3, #32
 8002522:	2102      	movs	r1, #2
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f925 	bl	8002774 <RCCEx_PLLSAI2_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002552:	490d      	ldr	r1, [pc, #52]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002576:	4904      	ldr	r1, [pc, #16]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800257e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000

0800258c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800259a:	4b75      	ldr	r3, [pc, #468]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d018      	beq.n	80025d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025a6:	4b72      	ldr	r3, [pc, #456]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0203 	and.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d10d      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025be:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
       ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d047      	beq.n	8002662 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e044      	b.n	8002662 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d018      	beq.n	8002612 <RCCEx_PLLSAI1_Config+0x86>
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d825      	bhi.n	8002630 <RCCEx_PLLSAI1_Config+0xa4>
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d002      	beq.n	80025ee <RCCEx_PLLSAI1_Config+0x62>
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d009      	beq.n	8002600 <RCCEx_PLLSAI1_Config+0x74>
 80025ec:	e020      	b.n	8002630 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ee:	4b60      	ldr	r3, [pc, #384]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11d      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fe:	e01a      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002600:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d116      	bne.n	800263a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002610:	e013      	b.n	800263a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002612:	4b57      	ldr	r3, [pc, #348]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800261e:	4b54      	ldr	r3, [pc, #336]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800262e:	e006      	b.n	800263e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e004      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002636:	bf00      	nop
 8002638:	e002      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800263e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	430b      	orrs	r3, r1
 800265c:	4944      	ldr	r1, [pc, #272]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d17d      	bne.n	8002764 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002668:	4b41      	ldr	r3, [pc, #260]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a40      	ldr	r2, [pc, #256]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002674:	f7fe fb74 	bl	8000d60 <HAL_GetTick>
 8002678:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800267a:	e009      	b.n	8002690 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800267c:	f7fe fb70 	bl	8000d60 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d902      	bls.n	8002690 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	73fb      	strb	r3, [r7, #15]
        break;
 800268e:	e005      	b.n	800269c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ef      	bne.n	800267c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d160      	bne.n	8002764 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6892      	ldr	r2, [r2, #8]
 80026b8:	0211      	lsls	r1, r2, #8
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	0912      	lsrs	r2, r2, #4
 80026c0:	0452      	lsls	r2, r2, #17
 80026c2:	430a      	orrs	r2, r1
 80026c4:	492a      	ldr	r1, [pc, #168]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	610b      	str	r3, [r1, #16]
 80026ca:	e027      	b.n	800271c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d112      	bne.n	80026f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	0211      	lsls	r1, r2, #8
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6912      	ldr	r2, [r2, #16]
 80026e8:	0852      	lsrs	r2, r2, #1
 80026ea:	3a01      	subs	r2, #1
 80026ec:	0552      	lsls	r2, r2, #21
 80026ee:	430a      	orrs	r2, r1
 80026f0:	491f      	ldr	r1, [pc, #124]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	610b      	str	r3, [r1, #16]
 80026f6:	e011      	b.n	800271c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002700:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6892      	ldr	r2, [r2, #8]
 8002708:	0211      	lsls	r1, r2, #8
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6952      	ldr	r2, [r2, #20]
 800270e:	0852      	lsrs	r2, r2, #1
 8002710:	3a01      	subs	r2, #1
 8002712:	0652      	lsls	r2, r2, #25
 8002714:	430a      	orrs	r2, r1
 8002716:	4916      	ldr	r1, [pc, #88]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800271c:	4b14      	ldr	r3, [pc, #80]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a13      	ldr	r2, [pc, #76]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fb1a 	bl	8000d60 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272e:	e009      	b.n	8002744 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002730:	f7fe fb16 	bl	8000d60 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d902      	bls.n	8002744 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	73fb      	strb	r3, [r7, #15]
          break;
 8002742:	e005      	b.n	8002750 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ef      	beq.n	8002730 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	4904      	ldr	r1, [pc, #16]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000

08002774 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002782:	4b6a      	ldr	r3, [pc, #424]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800278e:	4b67      	ldr	r3, [pc, #412]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d10d      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
       ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027a6:	4b61      	ldr	r3, [pc, #388]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
       ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d047      	beq.n	800284a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e044      	b.n	800284a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d018      	beq.n	80027fa <RCCEx_PLLSAI2_Config+0x86>
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d825      	bhi.n	8002818 <RCCEx_PLLSAI2_Config+0xa4>
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d002      	beq.n	80027d6 <RCCEx_PLLSAI2_Config+0x62>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d009      	beq.n	80027e8 <RCCEx_PLLSAI2_Config+0x74>
 80027d4:	e020      	b.n	8002818 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d6:	4b55      	ldr	r3, [pc, #340]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e01a      	b.n	800281e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e8:	4b50      	ldr	r3, [pc, #320]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d116      	bne.n	8002822 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f8:	e013      	b.n	8002822 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027fa:	4b4c      	ldr	r3, [pc, #304]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002806:	4b49      	ldr	r3, [pc, #292]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002816:	e006      	b.n	8002826 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e004      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002826:	bf00      	nop
    }

    if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800282e:	4b3f      	ldr	r3, [pc, #252]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	430b      	orrs	r3, r1
 8002844:	4939      	ldr	r1, [pc, #228]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d167      	bne.n	8002920 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002850:	4b36      	ldr	r3, [pc, #216]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a35      	ldr	r2, [pc, #212]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7fe fa80 	bl	8000d60 <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002862:	e009      	b.n	8002878 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002864:	f7fe fa7c 	bl	8000d60 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	73fb      	strb	r3, [r7, #15]
        break;
 8002876:	e005      	b.n	8002884 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002878:	4b2c      	ldr	r3, [pc, #176]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ef      	bne.n	8002864 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d14a      	bne.n	8002920 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002890:	4b26      	ldr	r3, [pc, #152]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6892      	ldr	r2, [r2, #8]
 80028a0:	0211      	lsls	r1, r2, #8
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	0912      	lsrs	r2, r2, #4
 80028a8:	0452      	lsls	r2, r2, #17
 80028aa:	430a      	orrs	r2, r1
 80028ac:	491f      	ldr	r1, [pc, #124]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	614b      	str	r3, [r1, #20]
 80028b2:	e011      	b.n	80028d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0211      	lsls	r1, r2, #8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6912      	ldr	r2, [r2, #16]
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0652      	lsls	r2, r2, #25
 80028d0:	430a      	orrs	r2, r1
 80028d2:	4916      	ldr	r1, [pc, #88]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a13      	ldr	r2, [pc, #76]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe fa3c 	bl	8000d60 <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ea:	e009      	b.n	8002900 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ec:	f7fe fa38 	bl	8000d60 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d902      	bls.n	8002900 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	73fb      	strb	r3, [r7, #15]
          break;
 80028fe:	e005      	b.n	800290c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4904      	ldr	r1, [pc, #16]	; (800292c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291c:	4313      	orrs	r3, r2
 800291e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000

08002930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e049      	b.n	80029d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fd ffe0 	bl	800091c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 fd6c 	bl	800344c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d001      	beq.n	80029f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e047      	b.n	8002a88 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <HAL_TIM_Base_Start+0xb4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <HAL_TIM_Base_Start+0x66>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a12:	d018      	beq.n	8002a46 <HAL_TIM_Base_Start+0x66>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <HAL_TIM_Base_Start+0xb8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_TIM_Base_Start+0x66>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <HAL_TIM_Base_Start+0xbc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <HAL_TIM_Base_Start+0x66>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_TIM_Base_Start+0xc0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_TIM_Base_Start+0x66>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <HAL_TIM_Base_Start+0xc4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_TIM_Base_Start+0x66>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_TIM_Base_Start+0xc8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d115      	bne.n	8002a72 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_TIM_Base_Start+0xcc>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d015      	beq.n	8002a84 <HAL_TIM_Base_Start+0xa4>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d011      	beq.n	8002a84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	e008      	b.n	8002a84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e000      	b.n	8002a86 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00
 8002aa4:	40013400 	.word	0x40013400
 8002aa8:	40014000 	.word	0x40014000
 8002aac:	00010007 	.word	0x00010007

08002ab0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e049      	b.n	8002b56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f841 	bl	8002b5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f000 fcac 	bl	800344c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_IC_Start_IT+0x1e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e023      	b.n	8002bda <HAL_TIM_IC_Start_IT+0x66>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIM_IC_Start_IT+0x2e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	e01b      	b.n	8002bda <HAL_TIM_IC_Start_IT+0x66>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_IC_Start_IT+0x3e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	e013      	b.n	8002bda <HAL_TIM_IC_Start_IT+0x66>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_IC_Start_IT+0x4e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e00b      	b.n	8002bda <HAL_TIM_IC_Start_IT+0x66>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_IC_Start_IT+0x5e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	e003      	b.n	8002bda <HAL_TIM_IC_Start_IT+0x66>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d104      	bne.n	8002bec <HAL_TIM_IC_Start_IT+0x78>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	e013      	b.n	8002c14 <HAL_TIM_IC_Start_IT+0xa0>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d104      	bne.n	8002bfc <HAL_TIM_IC_Start_IT+0x88>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e00b      	b.n	8002c14 <HAL_TIM_IC_Start_IT+0xa0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d104      	bne.n	8002c0c <HAL_TIM_IC_Start_IT+0x98>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e003      	b.n	8002c14 <HAL_TIM_IC_Start_IT+0xa0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c16:	7bbb      	ldrb	r3, [r7, #14]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d102      	bne.n	8002c22 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c1c:	7b7b      	ldrb	r3, [r7, #13]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0dd      	b.n	8002de2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <HAL_TIM_IC_Start_IT+0xc2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c34:	e023      	b.n	8002c7e <HAL_TIM_IC_Start_IT+0x10a>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d104      	bne.n	8002c46 <HAL_TIM_IC_Start_IT+0xd2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c44:	e01b      	b.n	8002c7e <HAL_TIM_IC_Start_IT+0x10a>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_IC_Start_IT+0xe2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c54:	e013      	b.n	8002c7e <HAL_TIM_IC_Start_IT+0x10a>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_IC_Start_IT+0xf2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c64:	e00b      	b.n	8002c7e <HAL_TIM_IC_Start_IT+0x10a>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_IC_Start_IT+0x102>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c74:	e003      	b.n	8002c7e <HAL_TIM_IC_Start_IT+0x10a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_IC_Start_IT+0x11a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8c:	e013      	b.n	8002cb6 <HAL_TIM_IC_Start_IT+0x142>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_IC_Start_IT+0x12a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c9c:	e00b      	b.n	8002cb6 <HAL_TIM_IC_Start_IT+0x142>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_IC_Start_IT+0x13a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cac:	e003      	b.n	8002cb6 <HAL_TIM_IC_Start_IT+0x142>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d841      	bhi.n	8002d40 <HAL_TIM_IC_Start_IT+0x1cc>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <HAL_TIM_IC_Start_IT+0x150>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cf9 	.word	0x08002cf9
 8002cc8:	08002d41 	.word	0x08002d41
 8002ccc:	08002d41 	.word	0x08002d41
 8002cd0:	08002d41 	.word	0x08002d41
 8002cd4:	08002d0b 	.word	0x08002d0b
 8002cd8:	08002d41 	.word	0x08002d41
 8002cdc:	08002d41 	.word	0x08002d41
 8002ce0:	08002d41 	.word	0x08002d41
 8002ce4:	08002d1d 	.word	0x08002d1d
 8002ce8:	08002d41 	.word	0x08002d41
 8002cec:	08002d41 	.word	0x08002d41
 8002cf0:	08002d41 	.word	0x08002d41
 8002cf4:	08002d2f 	.word	0x08002d2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0202 	orr.w	r2, r2, #2
 8002d06:	60da      	str	r2, [r3, #12]
      break;
 8002d08:	e01d      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0204 	orr.w	r2, r2, #4
 8002d18:	60da      	str	r2, [r3, #12]
      break;
 8002d1a:	e014      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	60da      	str	r2, [r3, #12]
      break;
 8002d2c:	e00b      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0210 	orr.w	r2, r2, #16
 8002d3c:	60da      	str	r2, [r3, #12]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d149      	bne.n	8002de0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2201      	movs	r2, #1
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fe65 	bl	8003a24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a23      	ldr	r2, [pc, #140]	; (8002dec <HAL_TIM_IC_Start_IT+0x278>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d01d      	beq.n	8002da0 <HAL_TIM_IC_Start_IT+0x22c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d018      	beq.n	8002da0 <HAL_TIM_IC_Start_IT+0x22c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_TIM_IC_Start_IT+0x27c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_TIM_IC_Start_IT+0x22c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <HAL_TIM_IC_Start_IT+0x280>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_TIM_IC_Start_IT+0x22c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <HAL_TIM_IC_Start_IT+0x284>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_TIM_IC_Start_IT+0x22c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <HAL_TIM_IC_Start_IT+0x288>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_TIM_IC_Start_IT+0x22c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_TIM_IC_Start_IT+0x28c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d115      	bne.n	8002dcc <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <HAL_TIM_IC_Start_IT+0x290>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d015      	beq.n	8002dde <HAL_TIM_IC_Start_IT+0x26a>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d011      	beq.n	8002dde <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	e008      	b.n	8002dde <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e000      	b.n	8002de0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dde:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	40013400 	.word	0x40013400
 8002e00:	40014000 	.word	0x40014000
 8002e04:	00010007 	.word	0x00010007

08002e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d020      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01b      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0202 	mvn.w	r2, #2
 8002e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd fbaa 	bl	80005ac <HAL_TIM_IC_CaptureCallback>
 8002e58:	e005      	b.n	8002e66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 facc 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fad3 	bl	800340c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d020      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01b      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0204 	mvn.w	r2, #4
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fb84 	bl	80005ac <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 faa6 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 faad 	bl	800340c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0208 	mvn.w	r2, #8
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fb5e 	bl	80005ac <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa80 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa87 	bl	800340c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d020      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0210 	mvn.w	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fb38 	bl	80005ac <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa5a 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa61 	bl	800340c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0201 	mvn.w	r2, #1
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa38 	bl	80033e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fdfe 	bl	8003b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fdf6 	bl	8003ba8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fa20 	bl	8003420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0220 	mvn.w	r2, #32
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fdbe 	bl	8003b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003026:	2302      	movs	r3, #2
 8003028:	e088      	b.n	800313c <HAL_TIM_IC_ConfigChannel+0x130>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003048:	f000 fb2e 	bl	80036a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 020c 	bic.w	r2, r2, #12
 800305a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6999      	ldr	r1, [r3, #24]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	619a      	str	r2, [r3, #24]
 800306e:	e060      	b.n	8003132 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b04      	cmp	r3, #4
 8003074:	d11c      	bne.n	80030b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003086:	f000 fbac 	bl	80037e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003098:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6999      	ldr	r1, [r3, #24]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	619a      	str	r2, [r3, #24]
 80030ae:	e040      	b.n	8003132 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d11b      	bne.n	80030ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80030c6:	f000 fbf9 	bl	80038bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 020c 	bic.w	r2, r2, #12
 80030d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69d9      	ldr	r1, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
 80030ec:	e021      	b.n	8003132 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b0c      	cmp	r3, #12
 80030f2:	d11c      	bne.n	800312e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003104:	f000 fc16 	bl	8003934 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003116:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69d9      	ldr	r1, [r3, #28]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	021a      	lsls	r2, r3, #8
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	61da      	str	r2, [r3, #28]
 800312c:	e001      	b.n	8003132 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIM_ConfigClockSource+0x1c>
 800315c:	2302      	movs	r3, #2
 800315e:	e0b6      	b.n	80032ce <HAL_TIM_ConfigClockSource+0x18a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800318a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319c:	d03e      	beq.n	800321c <HAL_TIM_ConfigClockSource+0xd8>
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a2:	f200 8087 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x170>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	f000 8086 	beq.w	80032ba <HAL_TIM_ConfigClockSource+0x176>
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	d87f      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x170>
 80031b4:	2b70      	cmp	r3, #112	; 0x70
 80031b6:	d01a      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0xaa>
 80031b8:	2b70      	cmp	r3, #112	; 0x70
 80031ba:	d87b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x170>
 80031bc:	2b60      	cmp	r3, #96	; 0x60
 80031be:	d050      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x11e>
 80031c0:	2b60      	cmp	r3, #96	; 0x60
 80031c2:	d877      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x170>
 80031c4:	2b50      	cmp	r3, #80	; 0x50
 80031c6:	d03c      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xfe>
 80031c8:	2b50      	cmp	r3, #80	; 0x50
 80031ca:	d873      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x170>
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d058      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x13e>
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d86f      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x170>
 80031d4:	2b30      	cmp	r3, #48	; 0x30
 80031d6:	d064      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15e>
 80031d8:	2b30      	cmp	r3, #48	; 0x30
 80031da:	d86b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x170>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d060      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15e>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d867      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x170>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d05c      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15e>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d05a      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15e>
 80031ec:	e062      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031fe:	f000 fbf1 	bl	80039e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	609a      	str	r2, [r3, #8]
      break;
 800321a:	e04f      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800322c:	f000 fbda 	bl	80039e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e03c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	461a      	mov	r2, r3
 8003250:	f000 fa98 	bl	8003784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2150      	movs	r1, #80	; 0x50
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fba7 	bl	80039ae <TIM_ITRx_SetConfig>
      break;
 8003260:	e02c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800326e:	461a      	mov	r2, r3
 8003270:	f000 faf4 	bl	800385c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2160      	movs	r1, #96	; 0x60
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fb97 	bl	80039ae <TIM_ITRx_SetConfig>
      break;
 8003280:	e01c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	461a      	mov	r2, r3
 8003290:	f000 fa78 	bl	8003784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2140      	movs	r1, #64	; 0x40
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fb87 	bl	80039ae <TIM_ITRx_SetConfig>
      break;
 80032a0:	e00c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f000 fb7e 	bl	80039ae <TIM_ITRx_SetConfig>
      break;
 80032b2:	e003      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      break;
 80032b8:	e000      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80032ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_SlaveConfigSynchro+0x18>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e031      	b.n	8003352 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f93d 	bl	8003580 <TIM_SlaveTimer_SetConfig>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e018      	b.n	8003352 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800333e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d831      	bhi.n	80033d4 <HAL_TIM_ReadCapturedValue+0x78>
 8003370:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	080033ad 	.word	0x080033ad
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033d5 	.word	0x080033d5
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033d5 	.word	0x080033d5
 8003390:	080033d5 	.word	0x080033d5
 8003394:	080033d5 	.word	0x080033d5
 8003398:	080033c1 	.word	0x080033c1
 800339c:	080033d5 	.word	0x080033d5
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080033d5 	.word	0x080033d5
 80033a8:	080033cb 	.word	0x080033cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	60fb      	str	r3, [r7, #12]

      break;
 80033b4:	e00f      	b.n	80033d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	60fb      	str	r3, [r7, #12]

      break;
 80033be:	e00a      	b.n	80033d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	60fb      	str	r3, [r7, #12]

      break;
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	60fb      	str	r3, [r7, #12]

      break;
 80033d2:	e000      	b.n	80033d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80033d4:	bf00      	nop
  }

  return tmpreg;
 80033d6:	68fb      	ldr	r3, [r7, #12]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7f1b      	ldrb	r3, [r3, #28]
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a40      	ldr	r2, [pc, #256]	; (8003560 <TIM_Base_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346a:	d00f      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a3d      	ldr	r2, [pc, #244]	; (8003564 <TIM_Base_SetConfig+0x118>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00b      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3c      	ldr	r2, [pc, #240]	; (8003568 <TIM_Base_SetConfig+0x11c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d007      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3b      	ldr	r2, [pc, #236]	; (800356c <TIM_Base_SetConfig+0x120>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d003      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3a      	ldr	r2, [pc, #232]	; (8003570 <TIM_Base_SetConfig+0x124>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d108      	bne.n	800349e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <TIM_Base_SetConfig+0x114>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01f      	beq.n	80034e6 <TIM_Base_SetConfig+0x9a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ac:	d01b      	beq.n	80034e6 <TIM_Base_SetConfig+0x9a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2c      	ldr	r2, [pc, #176]	; (8003564 <TIM_Base_SetConfig+0x118>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d017      	beq.n	80034e6 <TIM_Base_SetConfig+0x9a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2b      	ldr	r2, [pc, #172]	; (8003568 <TIM_Base_SetConfig+0x11c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <TIM_Base_SetConfig+0x9a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2a      	ldr	r2, [pc, #168]	; (800356c <TIM_Base_SetConfig+0x120>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00f      	beq.n	80034e6 <TIM_Base_SetConfig+0x9a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a29      	ldr	r2, [pc, #164]	; (8003570 <TIM_Base_SetConfig+0x124>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00b      	beq.n	80034e6 <TIM_Base_SetConfig+0x9a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a28      	ldr	r2, [pc, #160]	; (8003574 <TIM_Base_SetConfig+0x128>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <TIM_Base_SetConfig+0x9a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a27      	ldr	r2, [pc, #156]	; (8003578 <TIM_Base_SetConfig+0x12c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <TIM_Base_SetConfig+0x9a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a26      	ldr	r2, [pc, #152]	; (800357c <TIM_Base_SetConfig+0x130>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d108      	bne.n	80034f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a10      	ldr	r2, [pc, #64]	; (8003560 <TIM_Base_SetConfig+0x114>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00f      	beq.n	8003544 <TIM_Base_SetConfig+0xf8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <TIM_Base_SetConfig+0x124>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00b      	beq.n	8003544 <TIM_Base_SetConfig+0xf8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a11      	ldr	r2, [pc, #68]	; (8003574 <TIM_Base_SetConfig+0x128>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d007      	beq.n	8003544 <TIM_Base_SetConfig+0xf8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a10      	ldr	r2, [pc, #64]	; (8003578 <TIM_Base_SetConfig+0x12c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_Base_SetConfig+0xf8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0f      	ldr	r2, [pc, #60]	; (800357c <TIM_Base_SetConfig+0x130>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d103      	bne.n	800354c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	615a      	str	r2, [r3, #20]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40000c00 	.word	0x40000c00
 8003570:	40013400 	.word	0x40013400
 8003574:	40014000 	.word	0x40014000
 8003578:	40014400 	.word	0x40014400
 800357c:	40014800 	.word	0x40014800

08003580 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b70      	cmp	r3, #112	; 0x70
 80035cc:	d01a      	beq.n	8003604 <TIM_SlaveTimer_SetConfig+0x84>
 80035ce:	2b70      	cmp	r3, #112	; 0x70
 80035d0:	d860      	bhi.n	8003694 <TIM_SlaveTimer_SetConfig+0x114>
 80035d2:	2b60      	cmp	r3, #96	; 0x60
 80035d4:	d054      	beq.n	8003680 <TIM_SlaveTimer_SetConfig+0x100>
 80035d6:	2b60      	cmp	r3, #96	; 0x60
 80035d8:	d85c      	bhi.n	8003694 <TIM_SlaveTimer_SetConfig+0x114>
 80035da:	2b50      	cmp	r3, #80	; 0x50
 80035dc:	d046      	beq.n	800366c <TIM_SlaveTimer_SetConfig+0xec>
 80035de:	2b50      	cmp	r3, #80	; 0x50
 80035e0:	d858      	bhi.n	8003694 <TIM_SlaveTimer_SetConfig+0x114>
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d019      	beq.n	800361a <TIM_SlaveTimer_SetConfig+0x9a>
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d854      	bhi.n	8003694 <TIM_SlaveTimer_SetConfig+0x114>
 80035ea:	2b30      	cmp	r3, #48	; 0x30
 80035ec:	d055      	beq.n	800369a <TIM_SlaveTimer_SetConfig+0x11a>
 80035ee:	2b30      	cmp	r3, #48	; 0x30
 80035f0:	d850      	bhi.n	8003694 <TIM_SlaveTimer_SetConfig+0x114>
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d051      	beq.n	800369a <TIM_SlaveTimer_SetConfig+0x11a>
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d84c      	bhi.n	8003694 <TIM_SlaveTimer_SetConfig+0x114>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d04d      	beq.n	800369a <TIM_SlaveTimer_SetConfig+0x11a>
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d04b      	beq.n	800369a <TIM_SlaveTimer_SetConfig+0x11a>
 8003602:	e047      	b.n	8003694 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003614:	f000 f9e6 	bl	80039e4 <TIM_ETR_SetConfig>
      break;
 8003618:	e040      	b.n	800369c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b05      	cmp	r3, #5
 8003620:	d101      	bne.n	8003626 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e03b      	b.n	800369e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6a1a      	ldr	r2, [r3, #32]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	4313      	orrs	r3, r2
 8003658:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	621a      	str	r2, [r3, #32]
      break;
 800366a:	e017      	b.n	800369c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003678:	461a      	mov	r2, r3
 800367a:	f000 f883 	bl	8003784 <TIM_TI1_ConfigInputStage>
      break;
 800367e:	e00d      	b.n	800369c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800368c:	461a      	mov	r2, r3
 800368e:	f000 f8e5 	bl	800385c <TIM_TI2_ConfigInputStage>
      break;
 8003692:	e003      	b.n	800369c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
      break;
 8003698:	e000      	b.n	800369c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800369a:	bf00      	nop
  }

  return status;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 0201 	bic.w	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <TIM_TI1_SetConfig+0xc4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d017      	beq.n	8003706 <TIM_TI1_SetConfig+0x5e>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036dc:	d013      	beq.n	8003706 <TIM_TI1_SetConfig+0x5e>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a23      	ldr	r2, [pc, #140]	; (8003770 <TIM_TI1_SetConfig+0xc8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00f      	beq.n	8003706 <TIM_TI1_SetConfig+0x5e>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a22      	ldr	r2, [pc, #136]	; (8003774 <TIM_TI1_SetConfig+0xcc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_TI1_SetConfig+0x5e>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a21      	ldr	r2, [pc, #132]	; (8003778 <TIM_TI1_SetConfig+0xd0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_TI1_SetConfig+0x5e>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a20      	ldr	r2, [pc, #128]	; (800377c <TIM_TI1_SetConfig+0xd4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_TI1_SetConfig+0x5e>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <TIM_TI1_SetConfig+0xd8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <TIM_TI1_SetConfig+0x62>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <TIM_TI1_SetConfig+0x64>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	e003      	b.n	800372a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	b2db      	uxtb	r3, r3
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f023 030a 	bic.w	r3, r3, #10
 8003744:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f003 030a 	and.w	r3, r3, #10
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800
 8003778:	40000c00 	.word	0x40000c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000

08003784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 030a 	bic.w	r3, r3, #10
 80037c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0210 	bic.w	r2, r3, #16
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	031b      	lsls	r3, r3, #12
 8003826:	b29b      	uxth	r3, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003834:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f023 0210 	bic.w	r2, r3, #16
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	031b      	lsls	r3, r3, #12
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003898:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	621a      	str	r2, [r3, #32]
}
 80038b0:	bf00      	nop
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f023 0303 	bic.w	r3, r3, #3
 80038e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800390c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	621a      	str	r2, [r3, #32]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003960:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003972:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	031b      	lsls	r3, r3, #12
 8003978:	b29b      	uxth	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003986:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	031b      	lsls	r3, r3, #12
 800398c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f043 0307 	orr.w	r3, r3, #7
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	609a      	str	r2, [r3, #8]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	021a      	lsls	r2, r3, #8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e068      	b.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ac2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d018      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10c      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40013400 	.word	0x40013400
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40014000 	.word	0x40014000

08003b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e040      	b.n	8003c50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fc fee6 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fb6a 	bl	80042dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8af 	bl	8003d6c <UART_SetConfig>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e01b      	b.n	8003c50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fbe9 	bl	8004420 <UART_CheckIdleState>
 8003c4e:	4603      	mov	r3, r0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d178      	bne.n	8003d62 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Transmit+0x24>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e071      	b.n	8003d64 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2221      	movs	r2, #33	; 0x21
 8003c8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8e:	f7fd f867 	bl	8000d60 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cac:	d108      	bne.n	8003cc0 <HAL_UART_Transmit+0x68>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e003      	b.n	8003cc8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cc8:	e030      	b.n	8003d2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fc4b 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e03c      	b.n	8003d64 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	3302      	adds	r3, #2
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e008      	b.n	8003d1a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	b292      	uxth	r2, r2
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1c8      	bne.n	8003cca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fc14 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e005      	b.n	8003d64 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d70:	b08a      	sub	sp, #40	; 0x28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4ba4      	ldr	r3, [pc, #656]	; (800402c <UART_SetConfig+0x2c0>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a99      	ldr	r2, [pc, #612]	; (8004030 <UART_SetConfig+0x2c4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a90      	ldr	r2, [pc, #576]	; (8004034 <UART_SetConfig+0x2c8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d126      	bne.n	8003e44 <UART_SetConfig+0xd8>
 8003df6:	4b90      	ldr	r3, [pc, #576]	; (8004038 <UART_SetConfig+0x2cc>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d81b      	bhi.n	8003e3c <UART_SetConfig+0xd0>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0xa0>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e2d 	.word	0x08003e2d
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e35 	.word	0x08003e35
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e22:	e116      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2a:	e112      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e32:	e10e      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003e34:	2308      	movs	r3, #8
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3a:	e10a      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e42:	e106      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a7c      	ldr	r2, [pc, #496]	; (800403c <UART_SetConfig+0x2d0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d138      	bne.n	8003ec0 <UART_SetConfig+0x154>
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	; (8004038 <UART_SetConfig+0x2cc>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d82d      	bhi.n	8003eb8 <UART_SetConfig+0x14c>
 8003e5c:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0xf8>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003eb9 	.word	0x08003eb9
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003ea1 	.word	0x08003ea1
 8003e88:	08003eb9 	.word	0x08003eb9
 8003e8c:	08003eb9 	.word	0x08003eb9
 8003e90:	08003eb9 	.word	0x08003eb9
 8003e94:	08003eb1 	.word	0x08003eb1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e0d8      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea6:	e0d4      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e0d0      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb6:	e0cc      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	e0c8      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <UART_SetConfig+0x2d4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d125      	bne.n	8003f16 <UART_SetConfig+0x1aa>
 8003eca:	4b5b      	ldr	r3, [pc, #364]	; (8004038 <UART_SetConfig+0x2cc>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ed4:	2b30      	cmp	r3, #48	; 0x30
 8003ed6:	d016      	beq.n	8003f06 <UART_SetConfig+0x19a>
 8003ed8:	2b30      	cmp	r3, #48	; 0x30
 8003eda:	d818      	bhi.n	8003f0e <UART_SetConfig+0x1a2>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d00a      	beq.n	8003ef6 <UART_SetConfig+0x18a>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d814      	bhi.n	8003f0e <UART_SetConfig+0x1a2>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <UART_SetConfig+0x182>
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d008      	beq.n	8003efe <UART_SetConfig+0x192>
 8003eec:	e00f      	b.n	8003f0e <UART_SetConfig+0x1a2>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef4:	e0ad      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efc:	e0a9      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003efe:	2304      	movs	r3, #4
 8003f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f04:	e0a5      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003f06:	2308      	movs	r3, #8
 8003f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0c:	e0a1      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003f0e:	2310      	movs	r3, #16
 8003f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f14:	e09d      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <UART_SetConfig+0x2d8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d125      	bne.n	8003f6c <UART_SetConfig+0x200>
 8003f20:	4b45      	ldr	r3, [pc, #276]	; (8004038 <UART_SetConfig+0x2cc>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f2c:	d016      	beq.n	8003f5c <UART_SetConfig+0x1f0>
 8003f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f30:	d818      	bhi.n	8003f64 <UART_SetConfig+0x1f8>
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d00a      	beq.n	8003f4c <UART_SetConfig+0x1e0>
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d814      	bhi.n	8003f64 <UART_SetConfig+0x1f8>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <UART_SetConfig+0x1d8>
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d008      	beq.n	8003f54 <UART_SetConfig+0x1e8>
 8003f42:	e00f      	b.n	8003f64 <UART_SetConfig+0x1f8>
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e082      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f52:	e07e      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003f54:	2304      	movs	r3, #4
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5a:	e07a      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e076      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003f64:	2310      	movs	r3, #16
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	e072      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a35      	ldr	r2, [pc, #212]	; (8004048 <UART_SetConfig+0x2dc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d12a      	bne.n	8003fcc <UART_SetConfig+0x260>
 8003f76:	4b30      	ldr	r3, [pc, #192]	; (8004038 <UART_SetConfig+0x2cc>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f84:	d01a      	beq.n	8003fbc <UART_SetConfig+0x250>
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8a:	d81b      	bhi.n	8003fc4 <UART_SetConfig+0x258>
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d00c      	beq.n	8003fac <UART_SetConfig+0x240>
 8003f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f96:	d815      	bhi.n	8003fc4 <UART_SetConfig+0x258>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <UART_SetConfig+0x238>
 8003f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa0:	d008      	beq.n	8003fb4 <UART_SetConfig+0x248>
 8003fa2:	e00f      	b.n	8003fc4 <UART_SetConfig+0x258>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003faa:	e052      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003fac:	2302      	movs	r3, #2
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb2:	e04e      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fba:	e04a      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc2:	e046      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e042      	b.n	8004052 <UART_SetConfig+0x2e6>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <UART_SetConfig+0x2c4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d13a      	bne.n	800404c <UART_SetConfig+0x2e0>
 8003fd6:	4b18      	ldr	r3, [pc, #96]	; (8004038 <UART_SetConfig+0x2cc>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fe4:	d01a      	beq.n	800401c <UART_SetConfig+0x2b0>
 8003fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fea:	d81b      	bhi.n	8004024 <UART_SetConfig+0x2b8>
 8003fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff0:	d00c      	beq.n	800400c <UART_SetConfig+0x2a0>
 8003ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff6:	d815      	bhi.n	8004024 <UART_SetConfig+0x2b8>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <UART_SetConfig+0x298>
 8003ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004000:	d008      	beq.n	8004014 <UART_SetConfig+0x2a8>
 8004002:	e00f      	b.n	8004024 <UART_SetConfig+0x2b8>
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400a:	e022      	b.n	8004052 <UART_SetConfig+0x2e6>
 800400c:	2302      	movs	r3, #2
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004012:	e01e      	b.n	8004052 <UART_SetConfig+0x2e6>
 8004014:	2304      	movs	r3, #4
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401a:	e01a      	b.n	8004052 <UART_SetConfig+0x2e6>
 800401c:	2308      	movs	r3, #8
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004022:	e016      	b.n	8004052 <UART_SetConfig+0x2e6>
 8004024:	2310      	movs	r3, #16
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402a:	e012      	b.n	8004052 <UART_SetConfig+0x2e6>
 800402c:	efff69f3 	.word	0xefff69f3
 8004030:	40008000 	.word	0x40008000
 8004034:	40013800 	.word	0x40013800
 8004038:	40021000 	.word	0x40021000
 800403c:	40004400 	.word	0x40004400
 8004040:	40004800 	.word	0x40004800
 8004044:	40004c00 	.word	0x40004c00
 8004048:	40005000 	.word	0x40005000
 800404c:	2310      	movs	r3, #16
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a9f      	ldr	r2, [pc, #636]	; (80042d4 <UART_SetConfig+0x568>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d17a      	bne.n	8004152 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800405c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004060:	2b08      	cmp	r3, #8
 8004062:	d824      	bhi.n	80040ae <UART_SetConfig+0x342>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x300>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004091 	.word	0x08004091
 8004070:	080040af 	.word	0x080040af
 8004074:	08004099 	.word	0x08004099
 8004078:	080040af 	.word	0x080040af
 800407c:	0800409f 	.word	0x0800409f
 8004080:	080040af 	.word	0x080040af
 8004084:	080040af 	.word	0x080040af
 8004088:	080040af 	.word	0x080040af
 800408c:	080040a7 	.word	0x080040a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fd ff06 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 8004094:	61f8      	str	r0, [r7, #28]
        break;
 8004096:	e010      	b.n	80040ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004098:	4b8f      	ldr	r3, [pc, #572]	; (80042d8 <UART_SetConfig+0x56c>)
 800409a:	61fb      	str	r3, [r7, #28]
        break;
 800409c:	e00d      	b.n	80040ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409e:	f7fd fe67 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 80040a2:	61f8      	str	r0, [r7, #28]
        break;
 80040a4:	e009      	b.n	80040ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040aa:	61fb      	str	r3, [r7, #28]
        break;
 80040ac:	e005      	b.n	80040ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80fb 	beq.w	80042b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d305      	bcc.n	80040de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d903      	bls.n	80040e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040e4:	e0e8      	b.n	80042b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	2200      	movs	r2, #0
 80040ea:	461c      	mov	r4, r3
 80040ec:	4615      	mov	r5, r2
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	022b      	lsls	r3, r5, #8
 80040f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040fc:	0222      	lsls	r2, r4, #8
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	6849      	ldr	r1, [r1, #4]
 8004102:	0849      	lsrs	r1, r1, #1
 8004104:	2000      	movs	r0, #0
 8004106:	4688      	mov	r8, r1
 8004108:	4681      	mov	r9, r0
 800410a:	eb12 0a08 	adds.w	sl, r2, r8
 800410e:	eb43 0b09 	adc.w	fp, r3, r9
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004120:	4650      	mov	r0, sl
 8004122:	4659      	mov	r1, fp
 8004124:	f7fc f8a4 	bl	8000270 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004136:	d308      	bcc.n	800414a <UART_SetConfig+0x3de>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413e:	d204      	bcs.n	800414a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	60da      	str	r2, [r3, #12]
 8004148:	e0b6      	b.n	80042b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004150:	e0b2      	b.n	80042b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415a:	d15e      	bne.n	800421a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800415c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004160:	2b08      	cmp	r3, #8
 8004162:	d828      	bhi.n	80041b6 <UART_SetConfig+0x44a>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x400>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	08004191 	.word	0x08004191
 8004170:	08004199 	.word	0x08004199
 8004174:	080041a1 	.word	0x080041a1
 8004178:	080041b7 	.word	0x080041b7
 800417c:	080041a7 	.word	0x080041a7
 8004180:	080041b7 	.word	0x080041b7
 8004184:	080041b7 	.word	0x080041b7
 8004188:	080041b7 	.word	0x080041b7
 800418c:	080041af 	.word	0x080041af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fd fe86 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 8004194:	61f8      	str	r0, [r7, #28]
        break;
 8004196:	e014      	b.n	80041c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7fd fe98 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 800419c:	61f8      	str	r0, [r7, #28]
        break;
 800419e:	e010      	b.n	80041c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b4d      	ldr	r3, [pc, #308]	; (80042d8 <UART_SetConfig+0x56c>)
 80041a2:	61fb      	str	r3, [r7, #28]
        break;
 80041a4:	e00d      	b.n	80041c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fd fde3 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 80041aa:	61f8      	str	r0, [r7, #28]
        break;
 80041ac:	e009      	b.n	80041c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b2:	61fb      	str	r3, [r7, #28]
        break;
 80041b4:	e005      	b.n	80041c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d077      	beq.n	80042b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	005a      	lsls	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	441a      	add	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d916      	bls.n	8004212 <UART_SetConfig+0x4a6>
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ea:	d212      	bcs.n	8004212 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f023 030f 	bic.w	r3, r3, #15
 80041f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	b29a      	uxth	r2, r3
 8004202:	8afb      	ldrh	r3, [r7, #22]
 8004204:	4313      	orrs	r3, r2
 8004206:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	8afa      	ldrh	r2, [r7, #22]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	e052      	b.n	80042b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004218:	e04e      	b.n	80042b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800421a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800421e:	2b08      	cmp	r3, #8
 8004220:	d827      	bhi.n	8004272 <UART_SetConfig+0x506>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0x4bc>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004255 	.word	0x08004255
 8004230:	0800425d 	.word	0x0800425d
 8004234:	08004273 	.word	0x08004273
 8004238:	08004263 	.word	0x08004263
 800423c:	08004273 	.word	0x08004273
 8004240:	08004273 	.word	0x08004273
 8004244:	08004273 	.word	0x08004273
 8004248:	0800426b 	.word	0x0800426b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7fd fe28 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 8004250:	61f8      	str	r0, [r7, #28]
        break;
 8004252:	e014      	b.n	800427e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7fd fe3a 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 8004258:	61f8      	str	r0, [r7, #28]
        break;
 800425a:	e010      	b.n	800427e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800425c:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <UART_SetConfig+0x56c>)
 800425e:	61fb      	str	r3, [r7, #28]
        break;
 8004260:	e00d      	b.n	800427e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004262:	f7fd fd85 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8004266:	61f8      	str	r0, [r7, #28]
        break;
 8004268:	e009      	b.n	800427e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426e:	61fb      	str	r3, [r7, #28]
        break;
 8004270:	e005      	b.n	800427e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800427c:	bf00      	nop
    }

    if (pclk != 0U)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d019      	beq.n	80042b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	085a      	lsrs	r2, r3, #1
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	441a      	add	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b0f      	cmp	r3, #15
 800429c:	d909      	bls.n	80042b2 <UART_SetConfig+0x546>
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d205      	bcs.n	80042b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60da      	str	r2, [r3, #12]
 80042b0:	e002      	b.n	80042b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d2:	bf00      	nop
 80042d4:	40008000 	.word	0x40008000
 80042d8:	00f42400 	.word	0x00f42400

080042dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01a      	beq.n	80043f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043da:	d10a      	bne.n	80043f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b098      	sub	sp, #96	; 0x60
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004430:	f7fc fc96 	bl	8000d60 <HAL_GetTick>
 8004434:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b08      	cmp	r3, #8
 8004442:	d12e      	bne.n	80044a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800444c:	2200      	movs	r2, #0
 800444e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f88c 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d021      	beq.n	80044a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800446c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
 800447e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800448a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e6      	bne.n	800445e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e062      	b.n	8004568 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d149      	bne.n	8004544 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f856 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03c      	beq.n	8004544 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	623b      	str	r3, [r7, #32]
   return(result);
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60fb      	str	r3, [r7, #12]
   return(result);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451c:	61fa      	str	r2, [r7, #28]
 800451e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	617b      	str	r3, [r7, #20]
   return(result);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e011      	b.n	8004568 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3758      	adds	r7, #88	; 0x58
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004580:	e049      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d045      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fc fbe9 	bl	8000d60 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e048      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d031      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d110      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2208      	movs	r2, #8
 80045c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f838 	bl	800463e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2208      	movs	r2, #8
 80045d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e029      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f0:	d111      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f81e 	bl	800463e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e00f      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	429a      	cmp	r2, r3
 8004632:	d0a6      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463e:	b480      	push	{r7}
 8004640:	b095      	sub	sp, #84	; 0x54
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800465a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	643b      	str	r3, [r7, #64]	; 0x40
 8004666:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800466a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e6      	bne.n	8004646 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3308      	adds	r3, #8
 800467e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	61fb      	str	r3, [r7, #28]
   return(result);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800469e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d118      	bne.n	80046e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f023 0310 	bic.w	r3, r3, #16
 80046c8:	647b      	str	r3, [r7, #68]	; 0x44
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	613b      	str	r3, [r7, #16]
   return(result);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046fa:	bf00      	nop
 80046fc:	3754      	adds	r7, #84	; 0x54
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <__sflush_r>:
 8004708:	898a      	ldrh	r2, [r1, #12]
 800470a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	4605      	mov	r5, r0
 8004710:	0710      	lsls	r0, r2, #28
 8004712:	460c      	mov	r4, r1
 8004714:	d458      	bmi.n	80047c8 <__sflush_r+0xc0>
 8004716:	684b      	ldr	r3, [r1, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	dc05      	bgt.n	8004728 <__sflush_r+0x20>
 800471c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	dc02      	bgt.n	8004728 <__sflush_r+0x20>
 8004722:	2000      	movs	r0, #0
 8004724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800472a:	2e00      	cmp	r6, #0
 800472c:	d0f9      	beq.n	8004722 <__sflush_r+0x1a>
 800472e:	2300      	movs	r3, #0
 8004730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004734:	682f      	ldr	r7, [r5, #0]
 8004736:	6a21      	ldr	r1, [r4, #32]
 8004738:	602b      	str	r3, [r5, #0]
 800473a:	d032      	beq.n	80047a2 <__sflush_r+0x9a>
 800473c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	075a      	lsls	r2, r3, #29
 8004742:	d505      	bpl.n	8004750 <__sflush_r+0x48>
 8004744:	6863      	ldr	r3, [r4, #4]
 8004746:	1ac0      	subs	r0, r0, r3
 8004748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800474a:	b10b      	cbz	r3, 8004750 <__sflush_r+0x48>
 800474c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800474e:	1ac0      	subs	r0, r0, r3
 8004750:	2300      	movs	r3, #0
 8004752:	4602      	mov	r2, r0
 8004754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004756:	6a21      	ldr	r1, [r4, #32]
 8004758:	4628      	mov	r0, r5
 800475a:	47b0      	blx	r6
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	d106      	bne.n	8004770 <__sflush_r+0x68>
 8004762:	6829      	ldr	r1, [r5, #0]
 8004764:	291d      	cmp	r1, #29
 8004766:	d82b      	bhi.n	80047c0 <__sflush_r+0xb8>
 8004768:	4a29      	ldr	r2, [pc, #164]	; (8004810 <__sflush_r+0x108>)
 800476a:	410a      	asrs	r2, r1
 800476c:	07d6      	lsls	r6, r2, #31
 800476e:	d427      	bmi.n	80047c0 <__sflush_r+0xb8>
 8004770:	2200      	movs	r2, #0
 8004772:	6062      	str	r2, [r4, #4]
 8004774:	04d9      	lsls	r1, r3, #19
 8004776:	6922      	ldr	r2, [r4, #16]
 8004778:	6022      	str	r2, [r4, #0]
 800477a:	d504      	bpl.n	8004786 <__sflush_r+0x7e>
 800477c:	1c42      	adds	r2, r0, #1
 800477e:	d101      	bne.n	8004784 <__sflush_r+0x7c>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b903      	cbnz	r3, 8004786 <__sflush_r+0x7e>
 8004784:	6560      	str	r0, [r4, #84]	; 0x54
 8004786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004788:	602f      	str	r7, [r5, #0]
 800478a:	2900      	cmp	r1, #0
 800478c:	d0c9      	beq.n	8004722 <__sflush_r+0x1a>
 800478e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004792:	4299      	cmp	r1, r3
 8004794:	d002      	beq.n	800479c <__sflush_r+0x94>
 8004796:	4628      	mov	r0, r5
 8004798:	f000 fa0c 	bl	8004bb4 <_free_r>
 800479c:	2000      	movs	r0, #0
 800479e:	6360      	str	r0, [r4, #52]	; 0x34
 80047a0:	e7c0      	b.n	8004724 <__sflush_r+0x1c>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b0      	blx	r6
 80047a8:	1c41      	adds	r1, r0, #1
 80047aa:	d1c8      	bne.n	800473e <__sflush_r+0x36>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0c5      	beq.n	800473e <__sflush_r+0x36>
 80047b2:	2b1d      	cmp	r3, #29
 80047b4:	d001      	beq.n	80047ba <__sflush_r+0xb2>
 80047b6:	2b16      	cmp	r3, #22
 80047b8:	d101      	bne.n	80047be <__sflush_r+0xb6>
 80047ba:	602f      	str	r7, [r5, #0]
 80047bc:	e7b1      	b.n	8004722 <__sflush_r+0x1a>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e7ad      	b.n	8004724 <__sflush_r+0x1c>
 80047c8:	690f      	ldr	r7, [r1, #16]
 80047ca:	2f00      	cmp	r7, #0
 80047cc:	d0a9      	beq.n	8004722 <__sflush_r+0x1a>
 80047ce:	0793      	lsls	r3, r2, #30
 80047d0:	680e      	ldr	r6, [r1, #0]
 80047d2:	bf08      	it	eq
 80047d4:	694b      	ldreq	r3, [r1, #20]
 80047d6:	600f      	str	r7, [r1, #0]
 80047d8:	bf18      	it	ne
 80047da:	2300      	movne	r3, #0
 80047dc:	eba6 0807 	sub.w	r8, r6, r7
 80047e0:	608b      	str	r3, [r1, #8]
 80047e2:	f1b8 0f00 	cmp.w	r8, #0
 80047e6:	dd9c      	ble.n	8004722 <__sflush_r+0x1a>
 80047e8:	6a21      	ldr	r1, [r4, #32]
 80047ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047ec:	4643      	mov	r3, r8
 80047ee:	463a      	mov	r2, r7
 80047f0:	4628      	mov	r0, r5
 80047f2:	47b0      	blx	r6
 80047f4:	2800      	cmp	r0, #0
 80047f6:	dc06      	bgt.n	8004806 <__sflush_r+0xfe>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e78e      	b.n	8004724 <__sflush_r+0x1c>
 8004806:	4407      	add	r7, r0
 8004808:	eba8 0800 	sub.w	r8, r8, r0
 800480c:	e7e9      	b.n	80047e2 <__sflush_r+0xda>
 800480e:	bf00      	nop
 8004810:	dfbffffe 	.word	0xdfbffffe

08004814 <_fflush_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	690b      	ldr	r3, [r1, #16]
 8004818:	4605      	mov	r5, r0
 800481a:	460c      	mov	r4, r1
 800481c:	b913      	cbnz	r3, 8004824 <_fflush_r+0x10>
 800481e:	2500      	movs	r5, #0
 8004820:	4628      	mov	r0, r5
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	b118      	cbz	r0, 800482e <_fflush_r+0x1a>
 8004826:	6a03      	ldr	r3, [r0, #32]
 8004828:	b90b      	cbnz	r3, 800482e <_fflush_r+0x1a>
 800482a:	f000 f8bb 	bl	80049a4 <__sinit>
 800482e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f3      	beq.n	800481e <_fflush_r+0xa>
 8004836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004838:	07d0      	lsls	r0, r2, #31
 800483a:	d404      	bmi.n	8004846 <_fflush_r+0x32>
 800483c:	0599      	lsls	r1, r3, #22
 800483e:	d402      	bmi.n	8004846 <_fflush_r+0x32>
 8004840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004842:	f000 f9b4 	bl	8004bae <__retarget_lock_acquire_recursive>
 8004846:	4628      	mov	r0, r5
 8004848:	4621      	mov	r1, r4
 800484a:	f7ff ff5d 	bl	8004708 <__sflush_r>
 800484e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004850:	07da      	lsls	r2, r3, #31
 8004852:	4605      	mov	r5, r0
 8004854:	d4e4      	bmi.n	8004820 <_fflush_r+0xc>
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	059b      	lsls	r3, r3, #22
 800485a:	d4e1      	bmi.n	8004820 <_fflush_r+0xc>
 800485c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800485e:	f000 f9a7 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004862:	e7dd      	b.n	8004820 <_fflush_r+0xc>

08004864 <fflush>:
 8004864:	4601      	mov	r1, r0
 8004866:	b920      	cbnz	r0, 8004872 <fflush+0xe>
 8004868:	4a04      	ldr	r2, [pc, #16]	; (800487c <fflush+0x18>)
 800486a:	4905      	ldr	r1, [pc, #20]	; (8004880 <fflush+0x1c>)
 800486c:	4805      	ldr	r0, [pc, #20]	; (8004884 <fflush+0x20>)
 800486e:	f000 b8b1 	b.w	80049d4 <_fwalk_sglue>
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <fflush+0x24>)
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	f7ff bfcd 	b.w	8004814 <_fflush_r>
 800487a:	bf00      	nop
 800487c:	2000000c 	.word	0x2000000c
 8004880:	08004815 	.word	0x08004815
 8004884:	20000018 	.word	0x20000018
 8004888:	20000064 	.word	0x20000064

0800488c <std>:
 800488c:	2300      	movs	r3, #0
 800488e:	b510      	push	{r4, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	e9c0 3300 	strd	r3, r3, [r0]
 8004896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800489a:	6083      	str	r3, [r0, #8]
 800489c:	8181      	strh	r1, [r0, #12]
 800489e:	6643      	str	r3, [r0, #100]	; 0x64
 80048a0:	81c2      	strh	r2, [r0, #14]
 80048a2:	6183      	str	r3, [r0, #24]
 80048a4:	4619      	mov	r1, r3
 80048a6:	2208      	movs	r2, #8
 80048a8:	305c      	adds	r0, #92	; 0x5c
 80048aa:	f000 f906 	bl	8004aba <memset>
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <std+0x58>)
 80048b0:	6263      	str	r3, [r4, #36]	; 0x24
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <std+0x5c>)
 80048b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <std+0x60>)
 80048b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <std+0x64>)
 80048bc:	6323      	str	r3, [r4, #48]	; 0x30
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <std+0x68>)
 80048c0:	6224      	str	r4, [r4, #32]
 80048c2:	429c      	cmp	r4, r3
 80048c4:	d006      	beq.n	80048d4 <std+0x48>
 80048c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80048ca:	4294      	cmp	r4, r2
 80048cc:	d002      	beq.n	80048d4 <std+0x48>
 80048ce:	33d0      	adds	r3, #208	; 0xd0
 80048d0:	429c      	cmp	r4, r3
 80048d2:	d105      	bne.n	80048e0 <std+0x54>
 80048d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048dc:	f000 b966 	b.w	8004bac <__retarget_lock_init_recursive>
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	bf00      	nop
 80048e4:	08004a35 	.word	0x08004a35
 80048e8:	08004a57 	.word	0x08004a57
 80048ec:	08004a8f 	.word	0x08004a8f
 80048f0:	08004ab3 	.word	0x08004ab3
 80048f4:	20000164 	.word	0x20000164

080048f8 <stdio_exit_handler>:
 80048f8:	4a02      	ldr	r2, [pc, #8]	; (8004904 <stdio_exit_handler+0xc>)
 80048fa:	4903      	ldr	r1, [pc, #12]	; (8004908 <stdio_exit_handler+0x10>)
 80048fc:	4803      	ldr	r0, [pc, #12]	; (800490c <stdio_exit_handler+0x14>)
 80048fe:	f000 b869 	b.w	80049d4 <_fwalk_sglue>
 8004902:	bf00      	nop
 8004904:	2000000c 	.word	0x2000000c
 8004908:	08004815 	.word	0x08004815
 800490c:	20000018 	.word	0x20000018

08004910 <cleanup_stdio>:
 8004910:	6841      	ldr	r1, [r0, #4]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <cleanup_stdio+0x34>)
 8004914:	4299      	cmp	r1, r3
 8004916:	b510      	push	{r4, lr}
 8004918:	4604      	mov	r4, r0
 800491a:	d001      	beq.n	8004920 <cleanup_stdio+0x10>
 800491c:	f7ff ff7a 	bl	8004814 <_fflush_r>
 8004920:	68a1      	ldr	r1, [r4, #8]
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <cleanup_stdio+0x38>)
 8004924:	4299      	cmp	r1, r3
 8004926:	d002      	beq.n	800492e <cleanup_stdio+0x1e>
 8004928:	4620      	mov	r0, r4
 800492a:	f7ff ff73 	bl	8004814 <_fflush_r>
 800492e:	68e1      	ldr	r1, [r4, #12]
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <cleanup_stdio+0x3c>)
 8004932:	4299      	cmp	r1, r3
 8004934:	d004      	beq.n	8004940 <cleanup_stdio+0x30>
 8004936:	4620      	mov	r0, r4
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	f7ff bf6a 	b.w	8004814 <_fflush_r>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop
 8004944:	20000164 	.word	0x20000164
 8004948:	200001cc 	.word	0x200001cc
 800494c:	20000234 	.word	0x20000234

08004950 <global_stdio_init.part.0>:
 8004950:	b510      	push	{r4, lr}
 8004952:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <global_stdio_init.part.0+0x30>)
 8004954:	4c0b      	ldr	r4, [pc, #44]	; (8004984 <global_stdio_init.part.0+0x34>)
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <global_stdio_init.part.0+0x38>)
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	4620      	mov	r0, r4
 800495c:	2200      	movs	r2, #0
 800495e:	2104      	movs	r1, #4
 8004960:	f7ff ff94 	bl	800488c <std>
 8004964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004968:	2201      	movs	r2, #1
 800496a:	2109      	movs	r1, #9
 800496c:	f7ff ff8e 	bl	800488c <std>
 8004970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004974:	2202      	movs	r2, #2
 8004976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497a:	2112      	movs	r1, #18
 800497c:	f7ff bf86 	b.w	800488c <std>
 8004980:	2000029c 	.word	0x2000029c
 8004984:	20000164 	.word	0x20000164
 8004988:	080048f9 	.word	0x080048f9

0800498c <__sfp_lock_acquire>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__sfp_lock_acquire+0x8>)
 800498e:	f000 b90e 	b.w	8004bae <__retarget_lock_acquire_recursive>
 8004992:	bf00      	nop
 8004994:	200002a5 	.word	0x200002a5

08004998 <__sfp_lock_release>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__sfp_lock_release+0x8>)
 800499a:	f000 b909 	b.w	8004bb0 <__retarget_lock_release_recursive>
 800499e:	bf00      	nop
 80049a0:	200002a5 	.word	0x200002a5

080049a4 <__sinit>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	4604      	mov	r4, r0
 80049a8:	f7ff fff0 	bl	800498c <__sfp_lock_acquire>
 80049ac:	6a23      	ldr	r3, [r4, #32]
 80049ae:	b11b      	cbz	r3, 80049b8 <__sinit+0x14>
 80049b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b4:	f7ff bff0 	b.w	8004998 <__sfp_lock_release>
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <__sinit+0x28>)
 80049ba:	6223      	str	r3, [r4, #32]
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <__sinit+0x2c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f5      	bne.n	80049b0 <__sinit+0xc>
 80049c4:	f7ff ffc4 	bl	8004950 <global_stdio_init.part.0>
 80049c8:	e7f2      	b.n	80049b0 <__sinit+0xc>
 80049ca:	bf00      	nop
 80049cc:	08004911 	.word	0x08004911
 80049d0:	2000029c 	.word	0x2000029c

080049d4 <_fwalk_sglue>:
 80049d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d8:	4607      	mov	r7, r0
 80049da:	4688      	mov	r8, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	2600      	movs	r6, #0
 80049e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049e4:	f1b9 0901 	subs.w	r9, r9, #1
 80049e8:	d505      	bpl.n	80049f6 <_fwalk_sglue+0x22>
 80049ea:	6824      	ldr	r4, [r4, #0]
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	d1f7      	bne.n	80049e0 <_fwalk_sglue+0xc>
 80049f0:	4630      	mov	r0, r6
 80049f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049f6:	89ab      	ldrh	r3, [r5, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d907      	bls.n	8004a0c <_fwalk_sglue+0x38>
 80049fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a00:	3301      	adds	r3, #1
 8004a02:	d003      	beq.n	8004a0c <_fwalk_sglue+0x38>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	4306      	orrs	r6, r0
 8004a0c:	3568      	adds	r5, #104	; 0x68
 8004a0e:	e7e9      	b.n	80049e4 <_fwalk_sglue+0x10>

08004a10 <iprintf>:
 8004a10:	b40f      	push	{r0, r1, r2, r3}
 8004a12:	b507      	push	{r0, r1, r2, lr}
 8004a14:	4906      	ldr	r1, [pc, #24]	; (8004a30 <iprintf+0x20>)
 8004a16:	ab04      	add	r3, sp, #16
 8004a18:	6808      	ldr	r0, [r1, #0]
 8004a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a1e:	6881      	ldr	r1, [r0, #8]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	f000 f9e9 	bl	8004df8 <_vfiprintf_r>
 8004a26:	b003      	add	sp, #12
 8004a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a2c:	b004      	add	sp, #16
 8004a2e:	4770      	bx	lr
 8004a30:	20000064 	.word	0x20000064

08004a34 <__sread>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	460c      	mov	r4, r1
 8004a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3c:	f000 f868 	bl	8004b10 <_read_r>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	bfab      	itete	ge
 8004a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a46:	89a3      	ldrhlt	r3, [r4, #12]
 8004a48:	181b      	addge	r3, r3, r0
 8004a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a4e:	bfac      	ite	ge
 8004a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a52:	81a3      	strhlt	r3, [r4, #12]
 8004a54:	bd10      	pop	{r4, pc}

08004a56 <__swrite>:
 8004a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	898b      	ldrh	r3, [r1, #12]
 8004a5e:	05db      	lsls	r3, r3, #23
 8004a60:	4605      	mov	r5, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	4616      	mov	r6, r2
 8004a66:	d505      	bpl.n	8004a74 <__swrite+0x1e>
 8004a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f000 f83c 	bl	8004aec <_lseek_r>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	4632      	mov	r2, r6
 8004a82:	463b      	mov	r3, r7
 8004a84:	4628      	mov	r0, r5
 8004a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8a:	f000 b853 	b.w	8004b34 <_write_r>

08004a8e <__sseek>:
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	460c      	mov	r4, r1
 8004a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a96:	f000 f829 	bl	8004aec <_lseek_r>
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	bf15      	itete	ne
 8004aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aaa:	81a3      	strheq	r3, [r4, #12]
 8004aac:	bf18      	it	ne
 8004aae:	81a3      	strhne	r3, [r4, #12]
 8004ab0:	bd10      	pop	{r4, pc}

08004ab2 <__sclose>:
 8004ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab6:	f000 b809 	b.w	8004acc <_close_r>

08004aba <memset>:
 8004aba:	4402      	add	r2, r0
 8004abc:	4603      	mov	r3, r0
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d100      	bne.n	8004ac4 <memset+0xa>
 8004ac2:	4770      	bx	lr
 8004ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ac8:	e7f9      	b.n	8004abe <memset+0x4>
	...

08004acc <_close_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d06      	ldr	r5, [pc, #24]	; (8004ae8 <_close_r+0x1c>)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	f7fc f833 	bl	8000b42 <_close>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_close_r+0x1a>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_close_r+0x1a>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	200002a0 	.word	0x200002a0

08004aec <_lseek_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4d07      	ldr	r5, [pc, #28]	; (8004b0c <_lseek_r+0x20>)
 8004af0:	4604      	mov	r4, r0
 8004af2:	4608      	mov	r0, r1
 8004af4:	4611      	mov	r1, r2
 8004af6:	2200      	movs	r2, #0
 8004af8:	602a      	str	r2, [r5, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f7fc f848 	bl	8000b90 <_lseek>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_lseek_r+0x1e>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_lseek_r+0x1e>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	200002a0 	.word	0x200002a0

08004b10 <_read_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4d07      	ldr	r5, [pc, #28]	; (8004b30 <_read_r+0x20>)
 8004b14:	4604      	mov	r4, r0
 8004b16:	4608      	mov	r0, r1
 8004b18:	4611      	mov	r1, r2
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fb ffd6 	bl	8000ad0 <_read>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_read_r+0x1e>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_read_r+0x1e>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	200002a0 	.word	0x200002a0

08004b34 <_write_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d07      	ldr	r5, [pc, #28]	; (8004b54 <_write_r+0x20>)
 8004b38:	4604      	mov	r4, r0
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	2200      	movs	r2, #0
 8004b40:	602a      	str	r2, [r5, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f7fb ffe1 	bl	8000b0a <_write>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_write_r+0x1e>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_write_r+0x1e>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	200002a0 	.word	0x200002a0

08004b58 <__errno>:
 8004b58:	4b01      	ldr	r3, [pc, #4]	; (8004b60 <__errno+0x8>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000064 	.word	0x20000064

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4d0d      	ldr	r5, [pc, #52]	; (8004b9c <__libc_init_array+0x38>)
 8004b68:	4c0d      	ldr	r4, [pc, #52]	; (8004ba0 <__libc_init_array+0x3c>)
 8004b6a:	1b64      	subs	r4, r4, r5
 8004b6c:	10a4      	asrs	r4, r4, #2
 8004b6e:	2600      	movs	r6, #0
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	4d0b      	ldr	r5, [pc, #44]	; (8004ba4 <__libc_init_array+0x40>)
 8004b76:	4c0c      	ldr	r4, [pc, #48]	; (8004ba8 <__libc_init_array+0x44>)
 8004b78:	f000 fd12 	bl	80055a0 <_init>
 8004b7c:	1b64      	subs	r4, r4, r5
 8004b7e:	10a4      	asrs	r4, r4, #2
 8004b80:	2600      	movs	r6, #0
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	0800565c 	.word	0x0800565c
 8004ba0:	0800565c 	.word	0x0800565c
 8004ba4:	0800565c 	.word	0x0800565c
 8004ba8:	08005660 	.word	0x08005660

08004bac <__retarget_lock_init_recursive>:
 8004bac:	4770      	bx	lr

08004bae <__retarget_lock_acquire_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <__retarget_lock_release_recursive>:
 8004bb0:	4770      	bx	lr
	...

08004bb4 <_free_r>:
 8004bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bb6:	2900      	cmp	r1, #0
 8004bb8:	d044      	beq.n	8004c44 <_free_r+0x90>
 8004bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbe:	9001      	str	r0, [sp, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8004bc6:	bfb8      	it	lt
 8004bc8:	18e4      	addlt	r4, r4, r3
 8004bca:	f000 f8df 	bl	8004d8c <__malloc_lock>
 8004bce:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <_free_r+0x94>)
 8004bd0:	9801      	ldr	r0, [sp, #4]
 8004bd2:	6813      	ldr	r3, [r2, #0]
 8004bd4:	b933      	cbnz	r3, 8004be4 <_free_r+0x30>
 8004bd6:	6063      	str	r3, [r4, #4]
 8004bd8:	6014      	str	r4, [r2, #0]
 8004bda:	b003      	add	sp, #12
 8004bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004be0:	f000 b8da 	b.w	8004d98 <__malloc_unlock>
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	d908      	bls.n	8004bfa <_free_r+0x46>
 8004be8:	6825      	ldr	r5, [r4, #0]
 8004bea:	1961      	adds	r1, r4, r5
 8004bec:	428b      	cmp	r3, r1
 8004bee:	bf01      	itttt	eq
 8004bf0:	6819      	ldreq	r1, [r3, #0]
 8004bf2:	685b      	ldreq	r3, [r3, #4]
 8004bf4:	1949      	addeq	r1, r1, r5
 8004bf6:	6021      	streq	r1, [r4, #0]
 8004bf8:	e7ed      	b.n	8004bd6 <_free_r+0x22>
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b10b      	cbz	r3, 8004c04 <_free_r+0x50>
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	d9fa      	bls.n	8004bfa <_free_r+0x46>
 8004c04:	6811      	ldr	r1, [r2, #0]
 8004c06:	1855      	adds	r5, r2, r1
 8004c08:	42a5      	cmp	r5, r4
 8004c0a:	d10b      	bne.n	8004c24 <_free_r+0x70>
 8004c0c:	6824      	ldr	r4, [r4, #0]
 8004c0e:	4421      	add	r1, r4
 8004c10:	1854      	adds	r4, r2, r1
 8004c12:	42a3      	cmp	r3, r4
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	d1e0      	bne.n	8004bda <_free_r+0x26>
 8004c18:	681c      	ldr	r4, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	6053      	str	r3, [r2, #4]
 8004c1e:	440c      	add	r4, r1
 8004c20:	6014      	str	r4, [r2, #0]
 8004c22:	e7da      	b.n	8004bda <_free_r+0x26>
 8004c24:	d902      	bls.n	8004c2c <_free_r+0x78>
 8004c26:	230c      	movs	r3, #12
 8004c28:	6003      	str	r3, [r0, #0]
 8004c2a:	e7d6      	b.n	8004bda <_free_r+0x26>
 8004c2c:	6825      	ldr	r5, [r4, #0]
 8004c2e:	1961      	adds	r1, r4, r5
 8004c30:	428b      	cmp	r3, r1
 8004c32:	bf04      	itt	eq
 8004c34:	6819      	ldreq	r1, [r3, #0]
 8004c36:	685b      	ldreq	r3, [r3, #4]
 8004c38:	6063      	str	r3, [r4, #4]
 8004c3a:	bf04      	itt	eq
 8004c3c:	1949      	addeq	r1, r1, r5
 8004c3e:	6021      	streq	r1, [r4, #0]
 8004c40:	6054      	str	r4, [r2, #4]
 8004c42:	e7ca      	b.n	8004bda <_free_r+0x26>
 8004c44:	b003      	add	sp, #12
 8004c46:	bd30      	pop	{r4, r5, pc}
 8004c48:	200002a8 	.word	0x200002a8

08004c4c <sbrk_aligned>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4e0e      	ldr	r6, [pc, #56]	; (8004c88 <sbrk_aligned+0x3c>)
 8004c50:	460c      	mov	r4, r1
 8004c52:	6831      	ldr	r1, [r6, #0]
 8004c54:	4605      	mov	r5, r0
 8004c56:	b911      	cbnz	r1, 8004c5e <sbrk_aligned+0x12>
 8004c58:	f000 fc0e 	bl	8005478 <_sbrk_r>
 8004c5c:	6030      	str	r0, [r6, #0]
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 fc09 	bl	8005478 <_sbrk_r>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d00a      	beq.n	8004c80 <sbrk_aligned+0x34>
 8004c6a:	1cc4      	adds	r4, r0, #3
 8004c6c:	f024 0403 	bic.w	r4, r4, #3
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d007      	beq.n	8004c84 <sbrk_aligned+0x38>
 8004c74:	1a21      	subs	r1, r4, r0
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 fbfe 	bl	8005478 <_sbrk_r>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d101      	bne.n	8004c84 <sbrk_aligned+0x38>
 8004c80:	f04f 34ff 	mov.w	r4, #4294967295
 8004c84:	4620      	mov	r0, r4
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	200002ac 	.word	0x200002ac

08004c8c <_malloc_r>:
 8004c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c90:	1ccd      	adds	r5, r1, #3
 8004c92:	f025 0503 	bic.w	r5, r5, #3
 8004c96:	3508      	adds	r5, #8
 8004c98:	2d0c      	cmp	r5, #12
 8004c9a:	bf38      	it	cc
 8004c9c:	250c      	movcc	r5, #12
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	db01      	blt.n	8004ca8 <_malloc_r+0x1c>
 8004ca4:	42a9      	cmp	r1, r5
 8004ca6:	d905      	bls.n	8004cb4 <_malloc_r+0x28>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	2600      	movs	r6, #0
 8004cae:	4630      	mov	r0, r6
 8004cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d88 <_malloc_r+0xfc>
 8004cb8:	f000 f868 	bl	8004d8c <__malloc_lock>
 8004cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc0:	461c      	mov	r4, r3
 8004cc2:	bb5c      	cbnz	r4, 8004d1c <_malloc_r+0x90>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	f7ff ffc0 	bl	8004c4c <sbrk_aligned>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	4604      	mov	r4, r0
 8004cd0:	d155      	bne.n	8004d7e <_malloc_r+0xf2>
 8004cd2:	f8d8 4000 	ldr.w	r4, [r8]
 8004cd6:	4626      	mov	r6, r4
 8004cd8:	2e00      	cmp	r6, #0
 8004cda:	d145      	bne.n	8004d68 <_malloc_r+0xdc>
 8004cdc:	2c00      	cmp	r4, #0
 8004cde:	d048      	beq.n	8004d72 <_malloc_r+0xe6>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	eb04 0903 	add.w	r9, r4, r3
 8004cea:	f000 fbc5 	bl	8005478 <_sbrk_r>
 8004cee:	4581      	cmp	r9, r0
 8004cf0:	d13f      	bne.n	8004d72 <_malloc_r+0xe6>
 8004cf2:	6821      	ldr	r1, [r4, #0]
 8004cf4:	1a6d      	subs	r5, r5, r1
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f7ff ffa7 	bl	8004c4c <sbrk_aligned>
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d037      	beq.n	8004d72 <_malloc_r+0xe6>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	442b      	add	r3, r5
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	f8d8 3000 	ldr.w	r3, [r8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d038      	beq.n	8004d82 <_malloc_r+0xf6>
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	42a2      	cmp	r2, r4
 8004d14:	d12b      	bne.n	8004d6e <_malloc_r+0xe2>
 8004d16:	2200      	movs	r2, #0
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	e00f      	b.n	8004d3c <_malloc_r+0xb0>
 8004d1c:	6822      	ldr	r2, [r4, #0]
 8004d1e:	1b52      	subs	r2, r2, r5
 8004d20:	d41f      	bmi.n	8004d62 <_malloc_r+0xd6>
 8004d22:	2a0b      	cmp	r2, #11
 8004d24:	d917      	bls.n	8004d56 <_malloc_r+0xca>
 8004d26:	1961      	adds	r1, r4, r5
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	6025      	str	r5, [r4, #0]
 8004d2c:	bf18      	it	ne
 8004d2e:	6059      	strne	r1, [r3, #4]
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	bf08      	it	eq
 8004d34:	f8c8 1000 	streq.w	r1, [r8]
 8004d38:	5162      	str	r2, [r4, r5]
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	f104 060b 	add.w	r6, r4, #11
 8004d42:	f000 f829 	bl	8004d98 <__malloc_unlock>
 8004d46:	f026 0607 	bic.w	r6, r6, #7
 8004d4a:	1d23      	adds	r3, r4, #4
 8004d4c:	1af2      	subs	r2, r6, r3
 8004d4e:	d0ae      	beq.n	8004cae <_malloc_r+0x22>
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	50a3      	str	r3, [r4, r2]
 8004d54:	e7ab      	b.n	8004cae <_malloc_r+0x22>
 8004d56:	42a3      	cmp	r3, r4
 8004d58:	6862      	ldr	r2, [r4, #4]
 8004d5a:	d1dd      	bne.n	8004d18 <_malloc_r+0x8c>
 8004d5c:	f8c8 2000 	str.w	r2, [r8]
 8004d60:	e7ec      	b.n	8004d3c <_malloc_r+0xb0>
 8004d62:	4623      	mov	r3, r4
 8004d64:	6864      	ldr	r4, [r4, #4]
 8004d66:	e7ac      	b.n	8004cc2 <_malloc_r+0x36>
 8004d68:	4634      	mov	r4, r6
 8004d6a:	6876      	ldr	r6, [r6, #4]
 8004d6c:	e7b4      	b.n	8004cd8 <_malloc_r+0x4c>
 8004d6e:	4613      	mov	r3, r2
 8004d70:	e7cc      	b.n	8004d0c <_malloc_r+0x80>
 8004d72:	230c      	movs	r3, #12
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4638      	mov	r0, r7
 8004d78:	f000 f80e 	bl	8004d98 <__malloc_unlock>
 8004d7c:	e797      	b.n	8004cae <_malloc_r+0x22>
 8004d7e:	6025      	str	r5, [r4, #0]
 8004d80:	e7dc      	b.n	8004d3c <_malloc_r+0xb0>
 8004d82:	605b      	str	r3, [r3, #4]
 8004d84:	deff      	udf	#255	; 0xff
 8004d86:	bf00      	nop
 8004d88:	200002a8 	.word	0x200002a8

08004d8c <__malloc_lock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	; (8004d94 <__malloc_lock+0x8>)
 8004d8e:	f7ff bf0e 	b.w	8004bae <__retarget_lock_acquire_recursive>
 8004d92:	bf00      	nop
 8004d94:	200002a4 	.word	0x200002a4

08004d98 <__malloc_unlock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__malloc_unlock+0x8>)
 8004d9a:	f7ff bf09 	b.w	8004bb0 <__retarget_lock_release_recursive>
 8004d9e:	bf00      	nop
 8004da0:	200002a4 	.word	0x200002a4

08004da4 <__sfputc_r>:
 8004da4:	6893      	ldr	r3, [r2, #8]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	b410      	push	{r4}
 8004dac:	6093      	str	r3, [r2, #8]
 8004dae:	da08      	bge.n	8004dc2 <__sfputc_r+0x1e>
 8004db0:	6994      	ldr	r4, [r2, #24]
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	db01      	blt.n	8004dba <__sfputc_r+0x16>
 8004db6:	290a      	cmp	r1, #10
 8004db8:	d103      	bne.n	8004dc2 <__sfputc_r+0x1e>
 8004dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dbe:	f000 bac5 	b.w	800534c <__swbuf_r>
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	1c58      	adds	r0, r3, #1
 8004dc6:	6010      	str	r0, [r2, #0]
 8004dc8:	7019      	strb	r1, [r3, #0]
 8004dca:	4608      	mov	r0, r1
 8004dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <__sfputs_r>:
 8004dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	460f      	mov	r7, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	18d5      	adds	r5, r2, r3
 8004ddc:	42ac      	cmp	r4, r5
 8004dde:	d101      	bne.n	8004de4 <__sfputs_r+0x12>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e007      	b.n	8004df4 <__sfputs_r+0x22>
 8004de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de8:	463a      	mov	r2, r7
 8004dea:	4630      	mov	r0, r6
 8004dec:	f7ff ffda 	bl	8004da4 <__sfputc_r>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d1f3      	bne.n	8004ddc <__sfputs_r+0xa>
 8004df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004df8 <_vfiprintf_r>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	b09d      	sub	sp, #116	; 0x74
 8004e00:	4614      	mov	r4, r2
 8004e02:	4698      	mov	r8, r3
 8004e04:	4606      	mov	r6, r0
 8004e06:	b118      	cbz	r0, 8004e10 <_vfiprintf_r+0x18>
 8004e08:	6a03      	ldr	r3, [r0, #32]
 8004e0a:	b90b      	cbnz	r3, 8004e10 <_vfiprintf_r+0x18>
 8004e0c:	f7ff fdca 	bl	80049a4 <__sinit>
 8004e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e12:	07d9      	lsls	r1, r3, #31
 8004e14:	d405      	bmi.n	8004e22 <_vfiprintf_r+0x2a>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	059a      	lsls	r2, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_vfiprintf_r+0x2a>
 8004e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e1e:	f7ff fec6 	bl	8004bae <__retarget_lock_acquire_recursive>
 8004e22:	89ab      	ldrh	r3, [r5, #12]
 8004e24:	071b      	lsls	r3, r3, #28
 8004e26:	d501      	bpl.n	8004e2c <_vfiprintf_r+0x34>
 8004e28:	692b      	ldr	r3, [r5, #16]
 8004e2a:	b99b      	cbnz	r3, 8004e54 <_vfiprintf_r+0x5c>
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f000 faca 	bl	80053c8 <__swsetup_r>
 8004e34:	b170      	cbz	r0, 8004e54 <_vfiprintf_r+0x5c>
 8004e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e38:	07dc      	lsls	r4, r3, #31
 8004e3a:	d504      	bpl.n	8004e46 <_vfiprintf_r+0x4e>
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	b01d      	add	sp, #116	; 0x74
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	0598      	lsls	r0, r3, #22
 8004e4a:	d4f7      	bmi.n	8004e3c <_vfiprintf_r+0x44>
 8004e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e4e:	f7ff feaf 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004e52:	e7f3      	b.n	8004e3c <_vfiprintf_r+0x44>
 8004e54:	2300      	movs	r3, #0
 8004e56:	9309      	str	r3, [sp, #36]	; 0x24
 8004e58:	2320      	movs	r3, #32
 8004e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e62:	2330      	movs	r3, #48	; 0x30
 8004e64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005018 <_vfiprintf_r+0x220>
 8004e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e6c:	f04f 0901 	mov.w	r9, #1
 8004e70:	4623      	mov	r3, r4
 8004e72:	469a      	mov	sl, r3
 8004e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e78:	b10a      	cbz	r2, 8004e7e <_vfiprintf_r+0x86>
 8004e7a:	2a25      	cmp	r2, #37	; 0x25
 8004e7c:	d1f9      	bne.n	8004e72 <_vfiprintf_r+0x7a>
 8004e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e82:	d00b      	beq.n	8004e9c <_vfiprintf_r+0xa4>
 8004e84:	465b      	mov	r3, fp
 8004e86:	4622      	mov	r2, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7ff ffa1 	bl	8004dd2 <__sfputs_r>
 8004e90:	3001      	adds	r0, #1
 8004e92:	f000 80a9 	beq.w	8004fe8 <_vfiprintf_r+0x1f0>
 8004e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e98:	445a      	add	r2, fp
 8004e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80a1 	beq.w	8004fe8 <_vfiprintf_r+0x1f0>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb0:	f10a 0a01 	add.w	sl, sl, #1
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	9307      	str	r3, [sp, #28]
 8004eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8004ebe:	4654      	mov	r4, sl
 8004ec0:	2205      	movs	r2, #5
 8004ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec6:	4854      	ldr	r0, [pc, #336]	; (8005018 <_vfiprintf_r+0x220>)
 8004ec8:	f7fb f982 	bl	80001d0 <memchr>
 8004ecc:	9a04      	ldr	r2, [sp, #16]
 8004ece:	b9d8      	cbnz	r0, 8004f08 <_vfiprintf_r+0x110>
 8004ed0:	06d1      	lsls	r1, r2, #27
 8004ed2:	bf44      	itt	mi
 8004ed4:	2320      	movmi	r3, #32
 8004ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eda:	0713      	lsls	r3, r2, #28
 8004edc:	bf44      	itt	mi
 8004ede:	232b      	movmi	r3, #43	; 0x2b
 8004ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eea:	d015      	beq.n	8004f18 <_vfiprintf_r+0x120>
 8004eec:	9a07      	ldr	r2, [sp, #28]
 8004eee:	4654      	mov	r4, sl
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f04f 0c0a 	mov.w	ip, #10
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004efc:	3b30      	subs	r3, #48	; 0x30
 8004efe:	2b09      	cmp	r3, #9
 8004f00:	d94d      	bls.n	8004f9e <_vfiprintf_r+0x1a6>
 8004f02:	b1b0      	cbz	r0, 8004f32 <_vfiprintf_r+0x13a>
 8004f04:	9207      	str	r2, [sp, #28]
 8004f06:	e014      	b.n	8004f32 <_vfiprintf_r+0x13a>
 8004f08:	eba0 0308 	sub.w	r3, r0, r8
 8004f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f10:	4313      	orrs	r3, r2
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	46a2      	mov	sl, r4
 8004f16:	e7d2      	b.n	8004ebe <_vfiprintf_r+0xc6>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	1d19      	adds	r1, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9103      	str	r1, [sp, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bfbb      	ittet	lt
 8004f24:	425b      	neglt	r3, r3
 8004f26:	f042 0202 	orrlt.w	r2, r2, #2
 8004f2a:	9307      	strge	r3, [sp, #28]
 8004f2c:	9307      	strlt	r3, [sp, #28]
 8004f2e:	bfb8      	it	lt
 8004f30:	9204      	strlt	r2, [sp, #16]
 8004f32:	7823      	ldrb	r3, [r4, #0]
 8004f34:	2b2e      	cmp	r3, #46	; 0x2e
 8004f36:	d10c      	bne.n	8004f52 <_vfiprintf_r+0x15a>
 8004f38:	7863      	ldrb	r3, [r4, #1]
 8004f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3c:	d134      	bne.n	8004fa8 <_vfiprintf_r+0x1b0>
 8004f3e:	9b03      	ldr	r3, [sp, #12]
 8004f40:	1d1a      	adds	r2, r3, #4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	9203      	str	r2, [sp, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfb8      	it	lt
 8004f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f4e:	3402      	adds	r4, #2
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005028 <_vfiprintf_r+0x230>
 8004f56:	7821      	ldrb	r1, [r4, #0]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	4650      	mov	r0, sl
 8004f5c:	f7fb f938 	bl	80001d0 <memchr>
 8004f60:	b138      	cbz	r0, 8004f72 <_vfiprintf_r+0x17a>
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	eba0 000a 	sub.w	r0, r0, sl
 8004f68:	2240      	movs	r2, #64	; 0x40
 8004f6a:	4082      	lsls	r2, r0
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	3401      	adds	r4, #1
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f76:	4829      	ldr	r0, [pc, #164]	; (800501c <_vfiprintf_r+0x224>)
 8004f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f7c:	2206      	movs	r2, #6
 8004f7e:	f7fb f927 	bl	80001d0 <memchr>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d03f      	beq.n	8005006 <_vfiprintf_r+0x20e>
 8004f86:	4b26      	ldr	r3, [pc, #152]	; (8005020 <_vfiprintf_r+0x228>)
 8004f88:	bb1b      	cbnz	r3, 8004fd2 <_vfiprintf_r+0x1da>
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	3307      	adds	r3, #7
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	3308      	adds	r3, #8
 8004f94:	9303      	str	r3, [sp, #12]
 8004f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f98:	443b      	add	r3, r7
 8004f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f9c:	e768      	b.n	8004e70 <_vfiprintf_r+0x78>
 8004f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	e7a6      	b.n	8004ef6 <_vfiprintf_r+0xfe>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	3401      	adds	r4, #1
 8004fac:	9305      	str	r3, [sp, #20]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f04f 0c0a 	mov.w	ip, #10
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fba:	3a30      	subs	r2, #48	; 0x30
 8004fbc:	2a09      	cmp	r2, #9
 8004fbe:	d903      	bls.n	8004fc8 <_vfiprintf_r+0x1d0>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0c6      	beq.n	8004f52 <_vfiprintf_r+0x15a>
 8004fc4:	9105      	str	r1, [sp, #20]
 8004fc6:	e7c4      	b.n	8004f52 <_vfiprintf_r+0x15a>
 8004fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fcc:	4604      	mov	r4, r0
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e7f0      	b.n	8004fb4 <_vfiprintf_r+0x1bc>
 8004fd2:	ab03      	add	r3, sp, #12
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	462a      	mov	r2, r5
 8004fd8:	4b12      	ldr	r3, [pc, #72]	; (8005024 <_vfiprintf_r+0x22c>)
 8004fda:	a904      	add	r1, sp, #16
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f3af 8000 	nop.w
 8004fe2:	4607      	mov	r7, r0
 8004fe4:	1c78      	adds	r0, r7, #1
 8004fe6:	d1d6      	bne.n	8004f96 <_vfiprintf_r+0x19e>
 8004fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fea:	07d9      	lsls	r1, r3, #31
 8004fec:	d405      	bmi.n	8004ffa <_vfiprintf_r+0x202>
 8004fee:	89ab      	ldrh	r3, [r5, #12]
 8004ff0:	059a      	lsls	r2, r3, #22
 8004ff2:	d402      	bmi.n	8004ffa <_vfiprintf_r+0x202>
 8004ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ff6:	f7ff fddb 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004ffa:	89ab      	ldrh	r3, [r5, #12]
 8004ffc:	065b      	lsls	r3, r3, #25
 8004ffe:	f53f af1d 	bmi.w	8004e3c <_vfiprintf_r+0x44>
 8005002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005004:	e71c      	b.n	8004e40 <_vfiprintf_r+0x48>
 8005006:	ab03      	add	r3, sp, #12
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	462a      	mov	r2, r5
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <_vfiprintf_r+0x22c>)
 800500e:	a904      	add	r1, sp, #16
 8005010:	4630      	mov	r0, r6
 8005012:	f000 f879 	bl	8005108 <_printf_i>
 8005016:	e7e4      	b.n	8004fe2 <_vfiprintf_r+0x1ea>
 8005018:	08005620 	.word	0x08005620
 800501c:	0800562a 	.word	0x0800562a
 8005020:	00000000 	.word	0x00000000
 8005024:	08004dd3 	.word	0x08004dd3
 8005028:	08005626 	.word	0x08005626

0800502c <_printf_common>:
 800502c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005030:	4616      	mov	r6, r2
 8005032:	4699      	mov	r9, r3
 8005034:	688a      	ldr	r2, [r1, #8]
 8005036:	690b      	ldr	r3, [r1, #16]
 8005038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800503c:	4293      	cmp	r3, r2
 800503e:	bfb8      	it	lt
 8005040:	4613      	movlt	r3, r2
 8005042:	6033      	str	r3, [r6, #0]
 8005044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005048:	4607      	mov	r7, r0
 800504a:	460c      	mov	r4, r1
 800504c:	b10a      	cbz	r2, 8005052 <_printf_common+0x26>
 800504e:	3301      	adds	r3, #1
 8005050:	6033      	str	r3, [r6, #0]
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	0699      	lsls	r1, r3, #26
 8005056:	bf42      	ittt	mi
 8005058:	6833      	ldrmi	r3, [r6, #0]
 800505a:	3302      	addmi	r3, #2
 800505c:	6033      	strmi	r3, [r6, #0]
 800505e:	6825      	ldr	r5, [r4, #0]
 8005060:	f015 0506 	ands.w	r5, r5, #6
 8005064:	d106      	bne.n	8005074 <_printf_common+0x48>
 8005066:	f104 0a19 	add.w	sl, r4, #25
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	6832      	ldr	r2, [r6, #0]
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	42ab      	cmp	r3, r5
 8005072:	dc26      	bgt.n	80050c2 <_printf_common+0x96>
 8005074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005078:	1e13      	subs	r3, r2, #0
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	bf18      	it	ne
 800507e:	2301      	movne	r3, #1
 8005080:	0692      	lsls	r2, r2, #26
 8005082:	d42b      	bmi.n	80050dc <_printf_common+0xb0>
 8005084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005088:	4649      	mov	r1, r9
 800508a:	4638      	mov	r0, r7
 800508c:	47c0      	blx	r8
 800508e:	3001      	adds	r0, #1
 8005090:	d01e      	beq.n	80050d0 <_printf_common+0xa4>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	6922      	ldr	r2, [r4, #16]
 8005096:	f003 0306 	and.w	r3, r3, #6
 800509a:	2b04      	cmp	r3, #4
 800509c:	bf02      	ittt	eq
 800509e:	68e5      	ldreq	r5, [r4, #12]
 80050a0:	6833      	ldreq	r3, [r6, #0]
 80050a2:	1aed      	subeq	r5, r5, r3
 80050a4:	68a3      	ldr	r3, [r4, #8]
 80050a6:	bf0c      	ite	eq
 80050a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050ac:	2500      	movne	r5, #0
 80050ae:	4293      	cmp	r3, r2
 80050b0:	bfc4      	itt	gt
 80050b2:	1a9b      	subgt	r3, r3, r2
 80050b4:	18ed      	addgt	r5, r5, r3
 80050b6:	2600      	movs	r6, #0
 80050b8:	341a      	adds	r4, #26
 80050ba:	42b5      	cmp	r5, r6
 80050bc:	d11a      	bne.n	80050f4 <_printf_common+0xc8>
 80050be:	2000      	movs	r0, #0
 80050c0:	e008      	b.n	80050d4 <_printf_common+0xa8>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4652      	mov	r2, sl
 80050c6:	4649      	mov	r1, r9
 80050c8:	4638      	mov	r0, r7
 80050ca:	47c0      	blx	r8
 80050cc:	3001      	adds	r0, #1
 80050ce:	d103      	bne.n	80050d8 <_printf_common+0xac>
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d8:	3501      	adds	r5, #1
 80050da:	e7c6      	b.n	800506a <_printf_common+0x3e>
 80050dc:	18e1      	adds	r1, r4, r3
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	2030      	movs	r0, #48	; 0x30
 80050e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050e6:	4422      	add	r2, r4
 80050e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050f0:	3302      	adds	r3, #2
 80050f2:	e7c7      	b.n	8005084 <_printf_common+0x58>
 80050f4:	2301      	movs	r3, #1
 80050f6:	4622      	mov	r2, r4
 80050f8:	4649      	mov	r1, r9
 80050fa:	4638      	mov	r0, r7
 80050fc:	47c0      	blx	r8
 80050fe:	3001      	adds	r0, #1
 8005100:	d0e6      	beq.n	80050d0 <_printf_common+0xa4>
 8005102:	3601      	adds	r6, #1
 8005104:	e7d9      	b.n	80050ba <_printf_common+0x8e>
	...

08005108 <_printf_i>:
 8005108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	7e0f      	ldrb	r7, [r1, #24]
 800510e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005110:	2f78      	cmp	r7, #120	; 0x78
 8005112:	4691      	mov	r9, r2
 8005114:	4680      	mov	r8, r0
 8005116:	460c      	mov	r4, r1
 8005118:	469a      	mov	sl, r3
 800511a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800511e:	d807      	bhi.n	8005130 <_printf_i+0x28>
 8005120:	2f62      	cmp	r7, #98	; 0x62
 8005122:	d80a      	bhi.n	800513a <_printf_i+0x32>
 8005124:	2f00      	cmp	r7, #0
 8005126:	f000 80d4 	beq.w	80052d2 <_printf_i+0x1ca>
 800512a:	2f58      	cmp	r7, #88	; 0x58
 800512c:	f000 80c0 	beq.w	80052b0 <_printf_i+0x1a8>
 8005130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005138:	e03a      	b.n	80051b0 <_printf_i+0xa8>
 800513a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800513e:	2b15      	cmp	r3, #21
 8005140:	d8f6      	bhi.n	8005130 <_printf_i+0x28>
 8005142:	a101      	add	r1, pc, #4	; (adr r1, 8005148 <_printf_i+0x40>)
 8005144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005148:	080051a1 	.word	0x080051a1
 800514c:	080051b5 	.word	0x080051b5
 8005150:	08005131 	.word	0x08005131
 8005154:	08005131 	.word	0x08005131
 8005158:	08005131 	.word	0x08005131
 800515c:	08005131 	.word	0x08005131
 8005160:	080051b5 	.word	0x080051b5
 8005164:	08005131 	.word	0x08005131
 8005168:	08005131 	.word	0x08005131
 800516c:	08005131 	.word	0x08005131
 8005170:	08005131 	.word	0x08005131
 8005174:	080052b9 	.word	0x080052b9
 8005178:	080051e1 	.word	0x080051e1
 800517c:	08005273 	.word	0x08005273
 8005180:	08005131 	.word	0x08005131
 8005184:	08005131 	.word	0x08005131
 8005188:	080052db 	.word	0x080052db
 800518c:	08005131 	.word	0x08005131
 8005190:	080051e1 	.word	0x080051e1
 8005194:	08005131 	.word	0x08005131
 8005198:	08005131 	.word	0x08005131
 800519c:	0800527b 	.word	0x0800527b
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	602a      	str	r2, [r5, #0]
 80051a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051b0:	2301      	movs	r3, #1
 80051b2:	e09f      	b.n	80052f4 <_printf_i+0x1ec>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	0607      	lsls	r7, r0, #24
 80051ba:	f103 0104 	add.w	r1, r3, #4
 80051be:	6029      	str	r1, [r5, #0]
 80051c0:	d501      	bpl.n	80051c6 <_printf_i+0xbe>
 80051c2:	681e      	ldr	r6, [r3, #0]
 80051c4:	e003      	b.n	80051ce <_printf_i+0xc6>
 80051c6:	0646      	lsls	r6, r0, #25
 80051c8:	d5fb      	bpl.n	80051c2 <_printf_i+0xba>
 80051ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	da03      	bge.n	80051da <_printf_i+0xd2>
 80051d2:	232d      	movs	r3, #45	; 0x2d
 80051d4:	4276      	negs	r6, r6
 80051d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051da:	485a      	ldr	r0, [pc, #360]	; (8005344 <_printf_i+0x23c>)
 80051dc:	230a      	movs	r3, #10
 80051de:	e012      	b.n	8005206 <_printf_i+0xfe>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	6820      	ldr	r0, [r4, #0]
 80051e4:	1d19      	adds	r1, r3, #4
 80051e6:	6029      	str	r1, [r5, #0]
 80051e8:	0605      	lsls	r5, r0, #24
 80051ea:	d501      	bpl.n	80051f0 <_printf_i+0xe8>
 80051ec:	681e      	ldr	r6, [r3, #0]
 80051ee:	e002      	b.n	80051f6 <_printf_i+0xee>
 80051f0:	0641      	lsls	r1, r0, #25
 80051f2:	d5fb      	bpl.n	80051ec <_printf_i+0xe4>
 80051f4:	881e      	ldrh	r6, [r3, #0]
 80051f6:	4853      	ldr	r0, [pc, #332]	; (8005344 <_printf_i+0x23c>)
 80051f8:	2f6f      	cmp	r7, #111	; 0x6f
 80051fa:	bf0c      	ite	eq
 80051fc:	2308      	moveq	r3, #8
 80051fe:	230a      	movne	r3, #10
 8005200:	2100      	movs	r1, #0
 8005202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005206:	6865      	ldr	r5, [r4, #4]
 8005208:	60a5      	str	r5, [r4, #8]
 800520a:	2d00      	cmp	r5, #0
 800520c:	bfa2      	ittt	ge
 800520e:	6821      	ldrge	r1, [r4, #0]
 8005210:	f021 0104 	bicge.w	r1, r1, #4
 8005214:	6021      	strge	r1, [r4, #0]
 8005216:	b90e      	cbnz	r6, 800521c <_printf_i+0x114>
 8005218:	2d00      	cmp	r5, #0
 800521a:	d04b      	beq.n	80052b4 <_printf_i+0x1ac>
 800521c:	4615      	mov	r5, r2
 800521e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005222:	fb03 6711 	mls	r7, r3, r1, r6
 8005226:	5dc7      	ldrb	r7, [r0, r7]
 8005228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800522c:	4637      	mov	r7, r6
 800522e:	42bb      	cmp	r3, r7
 8005230:	460e      	mov	r6, r1
 8005232:	d9f4      	bls.n	800521e <_printf_i+0x116>
 8005234:	2b08      	cmp	r3, #8
 8005236:	d10b      	bne.n	8005250 <_printf_i+0x148>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	07de      	lsls	r6, r3, #31
 800523c:	d508      	bpl.n	8005250 <_printf_i+0x148>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	6861      	ldr	r1, [r4, #4]
 8005242:	4299      	cmp	r1, r3
 8005244:	bfde      	ittt	le
 8005246:	2330      	movle	r3, #48	; 0x30
 8005248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800524c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005250:	1b52      	subs	r2, r2, r5
 8005252:	6122      	str	r2, [r4, #16]
 8005254:	f8cd a000 	str.w	sl, [sp]
 8005258:	464b      	mov	r3, r9
 800525a:	aa03      	add	r2, sp, #12
 800525c:	4621      	mov	r1, r4
 800525e:	4640      	mov	r0, r8
 8005260:	f7ff fee4 	bl	800502c <_printf_common>
 8005264:	3001      	adds	r0, #1
 8005266:	d14a      	bne.n	80052fe <_printf_i+0x1f6>
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	b004      	add	sp, #16
 800526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	4833      	ldr	r0, [pc, #204]	; (8005348 <_printf_i+0x240>)
 800527c:	2778      	movs	r7, #120	; 0x78
 800527e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	6829      	ldr	r1, [r5, #0]
 8005286:	061f      	lsls	r7, r3, #24
 8005288:	f851 6b04 	ldr.w	r6, [r1], #4
 800528c:	d402      	bmi.n	8005294 <_printf_i+0x18c>
 800528e:	065f      	lsls	r7, r3, #25
 8005290:	bf48      	it	mi
 8005292:	b2b6      	uxthmi	r6, r6
 8005294:	07df      	lsls	r7, r3, #31
 8005296:	bf48      	it	mi
 8005298:	f043 0320 	orrmi.w	r3, r3, #32
 800529c:	6029      	str	r1, [r5, #0]
 800529e:	bf48      	it	mi
 80052a0:	6023      	strmi	r3, [r4, #0]
 80052a2:	b91e      	cbnz	r6, 80052ac <_printf_i+0x1a4>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f023 0320 	bic.w	r3, r3, #32
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	2310      	movs	r3, #16
 80052ae:	e7a7      	b.n	8005200 <_printf_i+0xf8>
 80052b0:	4824      	ldr	r0, [pc, #144]	; (8005344 <_printf_i+0x23c>)
 80052b2:	e7e4      	b.n	800527e <_printf_i+0x176>
 80052b4:	4615      	mov	r5, r2
 80052b6:	e7bd      	b.n	8005234 <_printf_i+0x12c>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	6826      	ldr	r6, [r4, #0]
 80052bc:	6961      	ldr	r1, [r4, #20]
 80052be:	1d18      	adds	r0, r3, #4
 80052c0:	6028      	str	r0, [r5, #0]
 80052c2:	0635      	lsls	r5, r6, #24
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	d501      	bpl.n	80052cc <_printf_i+0x1c4>
 80052c8:	6019      	str	r1, [r3, #0]
 80052ca:	e002      	b.n	80052d2 <_printf_i+0x1ca>
 80052cc:	0670      	lsls	r0, r6, #25
 80052ce:	d5fb      	bpl.n	80052c8 <_printf_i+0x1c0>
 80052d0:	8019      	strh	r1, [r3, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	6123      	str	r3, [r4, #16]
 80052d6:	4615      	mov	r5, r2
 80052d8:	e7bc      	b.n	8005254 <_printf_i+0x14c>
 80052da:	682b      	ldr	r3, [r5, #0]
 80052dc:	1d1a      	adds	r2, r3, #4
 80052de:	602a      	str	r2, [r5, #0]
 80052e0:	681d      	ldr	r5, [r3, #0]
 80052e2:	6862      	ldr	r2, [r4, #4]
 80052e4:	2100      	movs	r1, #0
 80052e6:	4628      	mov	r0, r5
 80052e8:	f7fa ff72 	bl	80001d0 <memchr>
 80052ec:	b108      	cbz	r0, 80052f2 <_printf_i+0x1ea>
 80052ee:	1b40      	subs	r0, r0, r5
 80052f0:	6060      	str	r0, [r4, #4]
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	6123      	str	r3, [r4, #16]
 80052f6:	2300      	movs	r3, #0
 80052f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052fc:	e7aa      	b.n	8005254 <_printf_i+0x14c>
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	462a      	mov	r2, r5
 8005302:	4649      	mov	r1, r9
 8005304:	4640      	mov	r0, r8
 8005306:	47d0      	blx	sl
 8005308:	3001      	adds	r0, #1
 800530a:	d0ad      	beq.n	8005268 <_printf_i+0x160>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	079b      	lsls	r3, r3, #30
 8005310:	d413      	bmi.n	800533a <_printf_i+0x232>
 8005312:	68e0      	ldr	r0, [r4, #12]
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	4298      	cmp	r0, r3
 8005318:	bfb8      	it	lt
 800531a:	4618      	movlt	r0, r3
 800531c:	e7a6      	b.n	800526c <_printf_i+0x164>
 800531e:	2301      	movs	r3, #1
 8005320:	4632      	mov	r2, r6
 8005322:	4649      	mov	r1, r9
 8005324:	4640      	mov	r0, r8
 8005326:	47d0      	blx	sl
 8005328:	3001      	adds	r0, #1
 800532a:	d09d      	beq.n	8005268 <_printf_i+0x160>
 800532c:	3501      	adds	r5, #1
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	9903      	ldr	r1, [sp, #12]
 8005332:	1a5b      	subs	r3, r3, r1
 8005334:	42ab      	cmp	r3, r5
 8005336:	dcf2      	bgt.n	800531e <_printf_i+0x216>
 8005338:	e7eb      	b.n	8005312 <_printf_i+0x20a>
 800533a:	2500      	movs	r5, #0
 800533c:	f104 0619 	add.w	r6, r4, #25
 8005340:	e7f5      	b.n	800532e <_printf_i+0x226>
 8005342:	bf00      	nop
 8005344:	08005631 	.word	0x08005631
 8005348:	08005642 	.word	0x08005642

0800534c <__swbuf_r>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	460e      	mov	r6, r1
 8005350:	4614      	mov	r4, r2
 8005352:	4605      	mov	r5, r0
 8005354:	b118      	cbz	r0, 800535e <__swbuf_r+0x12>
 8005356:	6a03      	ldr	r3, [r0, #32]
 8005358:	b90b      	cbnz	r3, 800535e <__swbuf_r+0x12>
 800535a:	f7ff fb23 	bl	80049a4 <__sinit>
 800535e:	69a3      	ldr	r3, [r4, #24]
 8005360:	60a3      	str	r3, [r4, #8]
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	071a      	lsls	r2, r3, #28
 8005366:	d525      	bpl.n	80053b4 <__swbuf_r+0x68>
 8005368:	6923      	ldr	r3, [r4, #16]
 800536a:	b31b      	cbz	r3, 80053b4 <__swbuf_r+0x68>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	6922      	ldr	r2, [r4, #16]
 8005370:	1a98      	subs	r0, r3, r2
 8005372:	6963      	ldr	r3, [r4, #20]
 8005374:	b2f6      	uxtb	r6, r6
 8005376:	4283      	cmp	r3, r0
 8005378:	4637      	mov	r7, r6
 800537a:	dc04      	bgt.n	8005386 <__swbuf_r+0x3a>
 800537c:	4621      	mov	r1, r4
 800537e:	4628      	mov	r0, r5
 8005380:	f7ff fa48 	bl	8004814 <_fflush_r>
 8005384:	b9e0      	cbnz	r0, 80053c0 <__swbuf_r+0x74>
 8005386:	68a3      	ldr	r3, [r4, #8]
 8005388:	3b01      	subs	r3, #1
 800538a:	60a3      	str	r3, [r4, #8]
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	6022      	str	r2, [r4, #0]
 8005392:	701e      	strb	r6, [r3, #0]
 8005394:	6962      	ldr	r2, [r4, #20]
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	429a      	cmp	r2, r3
 800539a:	d004      	beq.n	80053a6 <__swbuf_r+0x5a>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	07db      	lsls	r3, r3, #31
 80053a0:	d506      	bpl.n	80053b0 <__swbuf_r+0x64>
 80053a2:	2e0a      	cmp	r6, #10
 80053a4:	d104      	bne.n	80053b0 <__swbuf_r+0x64>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7ff fa33 	bl	8004814 <_fflush_r>
 80053ae:	b938      	cbnz	r0, 80053c0 <__swbuf_r+0x74>
 80053b0:	4638      	mov	r0, r7
 80053b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b4:	4621      	mov	r1, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f806 	bl	80053c8 <__swsetup_r>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d0d5      	beq.n	800536c <__swbuf_r+0x20>
 80053c0:	f04f 37ff 	mov.w	r7, #4294967295
 80053c4:	e7f4      	b.n	80053b0 <__swbuf_r+0x64>
	...

080053c8 <__swsetup_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <__swsetup_r+0xac>)
 80053cc:	4605      	mov	r5, r0
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	460c      	mov	r4, r1
 80053d2:	b118      	cbz	r0, 80053dc <__swsetup_r+0x14>
 80053d4:	6a03      	ldr	r3, [r0, #32]
 80053d6:	b90b      	cbnz	r3, 80053dc <__swsetup_r+0x14>
 80053d8:	f7ff fae4 	bl	80049a4 <__sinit>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053e2:	0718      	lsls	r0, r3, #28
 80053e4:	d422      	bmi.n	800542c <__swsetup_r+0x64>
 80053e6:	06d9      	lsls	r1, r3, #27
 80053e8:	d407      	bmi.n	80053fa <__swsetup_r+0x32>
 80053ea:	2309      	movs	r3, #9
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053f2:	81a3      	strh	r3, [r4, #12]
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	e034      	b.n	8005464 <__swsetup_r+0x9c>
 80053fa:	0758      	lsls	r0, r3, #29
 80053fc:	d512      	bpl.n	8005424 <__swsetup_r+0x5c>
 80053fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005400:	b141      	cbz	r1, 8005414 <__swsetup_r+0x4c>
 8005402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005406:	4299      	cmp	r1, r3
 8005408:	d002      	beq.n	8005410 <__swsetup_r+0x48>
 800540a:	4628      	mov	r0, r5
 800540c:	f7ff fbd2 	bl	8004bb4 <_free_r>
 8005410:	2300      	movs	r3, #0
 8005412:	6363      	str	r3, [r4, #52]	; 0x34
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	2300      	movs	r3, #0
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	f043 0308 	orr.w	r3, r3, #8
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	b94b      	cbnz	r3, 8005444 <__swsetup_r+0x7c>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543a:	d003      	beq.n	8005444 <__swsetup_r+0x7c>
 800543c:	4621      	mov	r1, r4
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f850 	bl	80054e4 <__smakebuf_r>
 8005444:	89a0      	ldrh	r0, [r4, #12]
 8005446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800544a:	f010 0301 	ands.w	r3, r0, #1
 800544e:	d00a      	beq.n	8005466 <__swsetup_r+0x9e>
 8005450:	2300      	movs	r3, #0
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	6963      	ldr	r3, [r4, #20]
 8005456:	425b      	negs	r3, r3
 8005458:	61a3      	str	r3, [r4, #24]
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	b943      	cbnz	r3, 8005470 <__swsetup_r+0xa8>
 800545e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005462:	d1c4      	bne.n	80053ee <__swsetup_r+0x26>
 8005464:	bd38      	pop	{r3, r4, r5, pc}
 8005466:	0781      	lsls	r1, r0, #30
 8005468:	bf58      	it	pl
 800546a:	6963      	ldrpl	r3, [r4, #20]
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	e7f4      	b.n	800545a <__swsetup_r+0x92>
 8005470:	2000      	movs	r0, #0
 8005472:	e7f7      	b.n	8005464 <__swsetup_r+0x9c>
 8005474:	20000064 	.word	0x20000064

08005478 <_sbrk_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	; (8005494 <_sbrk_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fb fb92 	bl	8000bac <_sbrk>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_sbrk_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_sbrk_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	200002a0 	.word	0x200002a0

08005498 <__swhatbuf_r>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	460c      	mov	r4, r1
 800549c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a0:	2900      	cmp	r1, #0
 80054a2:	b096      	sub	sp, #88	; 0x58
 80054a4:	4615      	mov	r5, r2
 80054a6:	461e      	mov	r6, r3
 80054a8:	da0d      	bge.n	80054c6 <__swhatbuf_r+0x2e>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054b0:	f04f 0100 	mov.w	r1, #0
 80054b4:	bf0c      	ite	eq
 80054b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80054ba:	2340      	movne	r3, #64	; 0x40
 80054bc:	2000      	movs	r0, #0
 80054be:	6031      	str	r1, [r6, #0]
 80054c0:	602b      	str	r3, [r5, #0]
 80054c2:	b016      	add	sp, #88	; 0x58
 80054c4:	bd70      	pop	{r4, r5, r6, pc}
 80054c6:	466a      	mov	r2, sp
 80054c8:	f000 f848 	bl	800555c <_fstat_r>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	dbec      	blt.n	80054aa <__swhatbuf_r+0x12>
 80054d0:	9901      	ldr	r1, [sp, #4]
 80054d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80054d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80054da:	4259      	negs	r1, r3
 80054dc:	4159      	adcs	r1, r3
 80054de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e2:	e7eb      	b.n	80054bc <__swhatbuf_r+0x24>

080054e4 <__smakebuf_r>:
 80054e4:	898b      	ldrh	r3, [r1, #12]
 80054e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054e8:	079d      	lsls	r5, r3, #30
 80054ea:	4606      	mov	r6, r0
 80054ec:	460c      	mov	r4, r1
 80054ee:	d507      	bpl.n	8005500 <__smakebuf_r+0x1c>
 80054f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	2301      	movs	r3, #1
 80054fa:	6163      	str	r3, [r4, #20]
 80054fc:	b002      	add	sp, #8
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	ab01      	add	r3, sp, #4
 8005502:	466a      	mov	r2, sp
 8005504:	f7ff ffc8 	bl	8005498 <__swhatbuf_r>
 8005508:	9900      	ldr	r1, [sp, #0]
 800550a:	4605      	mov	r5, r0
 800550c:	4630      	mov	r0, r6
 800550e:	f7ff fbbd 	bl	8004c8c <_malloc_r>
 8005512:	b948      	cbnz	r0, 8005528 <__smakebuf_r+0x44>
 8005514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005518:	059a      	lsls	r2, r3, #22
 800551a:	d4ef      	bmi.n	80054fc <__smakebuf_r+0x18>
 800551c:	f023 0303 	bic.w	r3, r3, #3
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	81a3      	strh	r3, [r4, #12]
 8005526:	e7e3      	b.n	80054f0 <__smakebuf_r+0xc>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	6020      	str	r0, [r4, #0]
 800552c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005530:	81a3      	strh	r3, [r4, #12]
 8005532:	9b00      	ldr	r3, [sp, #0]
 8005534:	6163      	str	r3, [r4, #20]
 8005536:	9b01      	ldr	r3, [sp, #4]
 8005538:	6120      	str	r0, [r4, #16]
 800553a:	b15b      	cbz	r3, 8005554 <__smakebuf_r+0x70>
 800553c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005540:	4630      	mov	r0, r6
 8005542:	f000 f81d 	bl	8005580 <_isatty_r>
 8005546:	b128      	cbz	r0, 8005554 <__smakebuf_r+0x70>
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	431d      	orrs	r5, r3
 8005558:	81a5      	strh	r5, [r4, #12]
 800555a:	e7cf      	b.n	80054fc <__smakebuf_r+0x18>

0800555c <_fstat_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d07      	ldr	r5, [pc, #28]	; (800557c <_fstat_r+0x20>)
 8005560:	2300      	movs	r3, #0
 8005562:	4604      	mov	r4, r0
 8005564:	4608      	mov	r0, r1
 8005566:	4611      	mov	r1, r2
 8005568:	602b      	str	r3, [r5, #0]
 800556a:	f7fb faf6 	bl	8000b5a <_fstat>
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	d102      	bne.n	8005578 <_fstat_r+0x1c>
 8005572:	682b      	ldr	r3, [r5, #0]
 8005574:	b103      	cbz	r3, 8005578 <_fstat_r+0x1c>
 8005576:	6023      	str	r3, [r4, #0]
 8005578:	bd38      	pop	{r3, r4, r5, pc}
 800557a:	bf00      	nop
 800557c:	200002a0 	.word	0x200002a0

08005580 <_isatty_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d06      	ldr	r5, [pc, #24]	; (800559c <_isatty_r+0x1c>)
 8005584:	2300      	movs	r3, #0
 8005586:	4604      	mov	r4, r0
 8005588:	4608      	mov	r0, r1
 800558a:	602b      	str	r3, [r5, #0]
 800558c:	f7fb faf5 	bl	8000b7a <_isatty>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_isatty_r+0x1a>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_isatty_r+0x1a>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	200002a0 	.word	0x200002a0

080055a0 <_init>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr

080055ac <_fini>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr
