
8_SPI_MCP23S08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed0  08004ed0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed8  08004ed8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed8  08004ed8  00014ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08004f48  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004f48  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c54e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c9c  00000000  00000000  0002c629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008be  00000000  00000000  0002ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c43  00000000  00000000  0002f6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8f3  00000000  00000000  00056331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb626  00000000  00000000  00063c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035d8  00000000  00000000  0014f24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00152824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e24 	.word	0x08004e24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004e24 	.word	0x08004e24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <mcp_reg_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Write to MCP
void mcp_reg_write(uint8_t reg, uint8_t value)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[3]={0x40, reg, value};//0x40 to write
 800057c:	2340      	movs	r3, #64	; 0x40
 800057e:	733b      	strb	r3, [r7, #12]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	737b      	strb	r3, [r7, #13]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(IOEXP_CS_GPIO_Port, IOEXP_CS_Pin, GPIO_PIN_RESET);//SET SLAVE SELECT 0
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <mcp_reg_write+0x48>)
 800058e:	f000 fe95 	bl	80012bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, tx, 3, HAL_MAX_DELAY);
 8000592:	f107 010c 	add.w	r1, r7, #12
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	2203      	movs	r2, #3
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <mcp_reg_write+0x4c>)
 800059e:	f002 fa68 	bl	8002a72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(IOEXP_CS_GPIO_Port, IOEXP_CS_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2101      	movs	r1, #1
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <mcp_reg_write+0x48>)
 80005a8:	f000 fe88 	bl	80012bc <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	48000800 	.word	0x48000800
 80005b8:	20000084 	.word	0x20000084

080005bc <mcp_reg_read>:

//Read from MCP
uint8_t mcp_reg_read(uint8_t reg)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	//uint8_t tx[2]={0x41,reg};//0x41 to read
	//uint8_t value;

	uint8_t tx[3] = { 0x41, reg, 0xff};
 80005c6:	2341      	movs	r3, #65	; 0x41
 80005c8:	733b      	strb	r3, [r7, #12]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	737b      	strb	r3, [r7, #13]
 80005ce:	23ff      	movs	r3, #255	; 0xff
 80005d0:	73bb      	strb	r3, [r7, #14]

	//HAL_SPI_Transmit(&hspi2, tx, 2, HAL_MAX_DELAY);//send read request			//ok but we to use less space we can use HAL_SPI_TRANSMITRECEIVE
	//HAL_SPI_Receive(&hspi2, &value, 1, HAL_MAX_DELAY);//wait for response


	HAL_GPIO_WritePin(IOEXP_CS_GPIO_Port, IOEXP_CS_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2101      	movs	r1, #1
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <mcp_reg_read+0x4c>)
 80005d8:	f000 fe70 	bl	80012bc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, tx, rx, 3, HAL_MAX_DELAY);//3 for size
 80005dc:	f107 0208 	add.w	r2, r7, #8
 80005e0:	f107 010c 	add.w	r1, r7, #12
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2303      	movs	r3, #3
 80005ec:	4807      	ldr	r0, [pc, #28]	; (800060c <mcp_reg_read+0x50>)
 80005ee:	f002 fbb5 	bl	8002d5c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(IOEXP_CS_GPIO_Port, IOEXP_CS_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <mcp_reg_read+0x4c>)
 80005f8:	f000 fe60 	bl	80012bc <HAL_GPIO_WritePin>
	//printf("%d %#X %d\n",rx[1],rx[2],rx[3]);
	return rx[2];
 80005fc:	7abb      	ldrb	r3, [r7, #10]

}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	48000800 	.word	0x48000800
 800060c:	20000084 	.word	0x20000084

08000610 <__io_putchar>:

int __io_putchar(int ch)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	if(ch=='\n')
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d109      	bne.n	8000632 <__io_putchar+0x22>
	{
		uint8_t ch2='\r';	//to fix end of line
 800061e:	230d      	movs	r3, #13
 8000620:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 8000622:	f107 010f 	add.w	r1, r7, #15
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2201      	movs	r2, #1
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <__io_putchar+0x3c>)
 800062e:	f002 ff69 	bl	8003504 <HAL_UART_Transmit>
	}
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000632:	1d39      	adds	r1, r7, #4
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	2201      	movs	r2, #1
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <__io_putchar+0x3c>)
 800063c:	f002 ff62 	bl	8003504 <HAL_UART_Transmit>
    return 1;
 8000640:	2301      	movs	r3, #1
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000e8 	.word	0x200000e8

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fb2d 	bl	8000cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f830 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8ee 	bl	800083c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000660:	f000 f87e 	bl	8000760 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000664:	f000 f8ba 	bl	80007dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  mcp_reg_write(MCP_IODIR,0xFE);//OUTPUT PIN SETUP
 8000668:	21fe      	movs	r1, #254	; 0xfe
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff ff7e 	bl	800056c <mcp_reg_write>
  mcp_reg_write(MCP_GPPU, 0x02);//GPI1 pull-up
 8000670:	2102      	movs	r1, #2
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff ff7a 	bl	800056c <mcp_reg_write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LED ON
	  printf("readed %x\n", mcp_reg_read(MCP_GPIO));
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ff9f 	bl	80005bc <mcp_reg_read>
 800067e:	4603      	mov	r3, r0
 8000680:	4619      	mov	r1, r3
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0x64>)
 8000684:	f003 fd58 	bl	8004138 <iprintf>
	  printf("const %x\n", 0x02);
 8000688:	2102      	movs	r1, #2
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <main+0x68>)
 800068c:	f003 fd54 	bl	8004138 <iprintf>
	  if ((mcp_reg_read(MCP_GPIO) & 0x02) == 0) {
 8000690:	2009      	movs	r0, #9
 8000692:	f7ff ff93 	bl	80005bc <mcp_reg_read>
 8000696:	4603      	mov	r3, r0
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d104      	bne.n	80006aa <main+0x5a>
	      // włącz diodę
	      mcp_reg_write(MCP_OLAT, 0x01);
 80006a0:	2101      	movs	r1, #1
 80006a2:	200a      	movs	r0, #10
 80006a4:	f7ff ff62 	bl	800056c <mcp_reg_write>
 80006a8:	e7e6      	b.n	8000678 <main+0x28>
	    } else {
	      // wyłącz diodę
	      mcp_reg_write(MCP_OLAT, 0x00);
 80006aa:	2100      	movs	r1, #0
 80006ac:	200a      	movs	r0, #10
 80006ae:	f7ff ff5d 	bl	800056c <mcp_reg_write>
	  printf("readed %x\n", mcp_reg_read(MCP_GPIO));
 80006b2:	e7e1      	b.n	8000678 <main+0x28>
 80006b4:	08004e3c 	.word	0x08004e3c
 80006b8:	08004e48 	.word	0x08004e48

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b096      	sub	sp, #88	; 0x58
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2244      	movs	r2, #68	; 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fd89 	bl	80041e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e2:	f000 fe11 	bl	8001308 <HAL_PWREx_ControlVoltageScaling>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ec:	f000 f8f0 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006f0:	2310      	movs	r3, #16
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006fc:	2360      	movs	r3, #96	; 0x60
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000704:	2301      	movs	r3, #1
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800070c:	2328      	movs	r3, #40	; 0x28
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fe47 	bl	80013b4 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800072c:	f000 f8d0 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2303      	movs	r3, #3
 8000736:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	2104      	movs	r1, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fa0f 	bl	8001b6c <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000754:	f000 f8bc 	bl	80008d0 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3758      	adds	r7, #88	; 0x58
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_SPI2_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_SPI2_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_SPI2_Init+0x74>)
 800076c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_SPI2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI2_Init+0x74>)
 800077a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800077e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_SPI2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI2_Init+0x74>)
 800078e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000792:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI2_Init+0x74>)
 8000796:	2210      	movs	r2, #16
 8000798:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI2_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_SPI2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI2_Init+0x74>)
 80007ae:	2207      	movs	r2, #7
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_SPI2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI2_Init+0x74>)
 80007ba:	2208      	movs	r2, #8
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_SPI2_Init+0x74>)
 80007c0:	f002 f8b4 	bl	800292c <HAL_SPI_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f881 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000084 	.word	0x20000084
 80007d8:	40003800 	.word	0x40003800

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <MX_USART2_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x58>)
 8000820:	f002 fe22 	bl	8003468 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 f851 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000e8 	.word	0x200000e8
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_GPIO_Init+0x8c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IOEXP_CS_GPIO_Port, IOEXP_CS_Pin, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	2101      	movs	r1, #1
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0x90>)
 80008a0:	f000 fd0c 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IOEXP_CS_Pin */
  GPIO_InitStruct.Pin = IOEXP_CS_Pin;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IOEXP_CS_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0x90>)
 80008bc:	f000 fb54 	bl	8000f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	; 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <HAL_SPI_MspInit+0xb4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d144      	bne.n	80009d0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a24      	ldr	r2, [pc, #144]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098e:	230c      	movs	r3, #12
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099e:	2305      	movs	r3, #5
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <HAL_SPI_MspInit+0xbc>)
 80009aa:	f000 fadd 	bl	8000f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c0:	2305      	movs	r3, #5
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <HAL_SPI_MspInit+0xc0>)
 80009cc:	f000 facc 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40003800 	.word	0x40003800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000800 	.word	0x48000800
 80009e4:	48000400 	.word	0x48000400

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0ac      	sub	sp, #176	; 0xb0
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2288      	movs	r2, #136	; 0x88
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fbea 	bl	80041e2 <memset>
  if(huart->Instance==USART2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <HAL_UART_MspInit+0xb0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d13b      	bne.n	8000a90 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fac5 	bl	8001fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a30:	f7ff ff4e 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a64:	230c      	movs	r3, #12
 8000a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f000 fa6c 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	37b0      	adds	r7, #176	; 0xb0
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f936 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e009      	b.n	8000b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fd61 	bl	8000610 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf1      	blt.n	8000b40 <_write+0x12>
  }
  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_close>:

int _close(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_isatty>:

int _isatty(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f003 fb3e 	bl	8004280 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20018000 	.word	0x20018000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	20000170 	.word	0x20000170
 8000c38:	200002c8 	.word	0x200002c8

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f003 fafd 	bl	800428c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c92:	f7ff fcdd 	bl	8000650 <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca4:	08004ee0 	.word	0x08004ee0
  ldr r2, =_sbss
 8000ca8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cac:	200002c4 	.word	0x200002c4

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>

08000cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f91f 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f000 f80e 	bl	8000ce4 <HAL_InitTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	e001      	b.n	8000cd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd4:	f7ff fe02 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_InitTick+0x6c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d023      	beq.n	8000d40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_InitTick+0x70>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_InitTick+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f91d 	bl	8000f4e <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10f      	bne.n	8000d3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d809      	bhi.n	8000d34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f8f5 	bl	8000f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_InitTick+0x74>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	e007      	b.n	8000d44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e004      	b.n	8000d44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e001      	b.n	8000d44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000174 	.word	0x20000174

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000174 	.word	0x20000174

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff47 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff5c 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffb0 	bl	8000ebc <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e17f      	b.n	8001278 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8171 	beq.w	8001272 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x40>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	f003 0201 	and.w	r2, r3, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b03      	cmp	r3, #3
 8001014:	d118      	bne.n	8001048 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b03      	cmp	r3, #3
 8001052:	d017      	beq.n	8001084 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d123      	bne.n	80010d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	6939      	ldr	r1, [r7, #16]
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80ac 	beq.w	8001272 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <HAL_GPIO_Init+0x330>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	4a5e      	ldr	r2, [pc, #376]	; (8001298 <HAL_GPIO_Init+0x330>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6613      	str	r3, [r2, #96]	; 0x60
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <HAL_GPIO_Init+0x330>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001132:	4a5a      	ldr	r2, [pc, #360]	; (800129c <HAL_GPIO_Init+0x334>)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800115c:	d025      	beq.n	80011aa <HAL_GPIO_Init+0x242>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <HAL_GPIO_Init+0x338>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d01f      	beq.n	80011a6 <HAL_GPIO_Init+0x23e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <HAL_GPIO_Init+0x33c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x23a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4d      	ldr	r2, [pc, #308]	; (80012a8 <HAL_GPIO_Init+0x340>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x236>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x344>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x232>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <HAL_GPIO_Init+0x348>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x22e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4a      	ldr	r2, [pc, #296]	; (80012b4 <HAL_GPIO_Init+0x34c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x22a>
 800118e:	2306      	movs	r3, #6
 8001190:	e00c      	b.n	80011ac <HAL_GPIO_Init+0x244>
 8001192:	2307      	movs	r3, #7
 8001194:	e00a      	b.n	80011ac <HAL_GPIO_Init+0x244>
 8001196:	2305      	movs	r3, #5
 8001198:	e008      	b.n	80011ac <HAL_GPIO_Init+0x244>
 800119a:	2304      	movs	r3, #4
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x244>
 800119e:	2303      	movs	r3, #3
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x244>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x244>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x244>
 80011aa:	2300      	movs	r3, #0
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	f002 0203 	and.w	r2, r2, #3
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4093      	lsls	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011bc:	4937      	ldr	r1, [pc, #220]	; (800129c <HAL_GPIO_Init+0x334>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ca:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <HAL_GPIO_Init+0x350>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ee:	4a32      	ldr	r2, [pc, #200]	; (80012b8 <HAL_GPIO_Init+0x350>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <HAL_GPIO_Init+0x350>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <HAL_GPIO_Init+0x350>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_GPIO_Init+0x350>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_GPIO_Init+0x350>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_GPIO_Init+0x350>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800126c:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_GPIO_Init+0x350>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f ae78 	bne.w	8000f78 <HAL_GPIO_Init+0x10>
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800
 80012a8:	48000c00 	.word	0x48000c00
 80012ac:	48001000 	.word	0x48001000
 80012b0:	48001400 	.word	0x48001400
 80012b4:	48001800 	.word	0x48001800
 80012b8:	40010400 	.word	0x40010400

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_PWREx_GetVoltageRange+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000

08001308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001316:	d130      	bne.n	800137a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001324:	d038      	beq.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2232      	movs	r2, #50	; 0x32
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	e002      	b.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3b01      	subs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001360:	d102      	bne.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f2      	bne.n	800134e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001374:	d110      	bne.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e00f      	b.n	800139a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001386:	d007      	beq.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40007000 	.word	0x40007000
 80013ac:	20000000 	.word	0x20000000
 80013b0:	431bde83 	.word	0x431bde83

080013b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e3ca      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c6:	4b97      	ldr	r3, [pc, #604]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d0:	4b94      	ldr	r3, [pc, #592]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80e4 	beq.w	80015b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <HAL_RCC_OscConfig+0x4a>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b0c      	cmp	r3, #12
 80013f2:	f040 808b 	bne.w	800150c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 8087 	bne.w	800150c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fe:	4b89      	ldr	r3, [pc, #548]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x62>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e3a2      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1a      	ldr	r2, [r3, #32]
 800141a:	4b82      	ldr	r3, [pc, #520]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_RCC_OscConfig+0x7c>
 8001426:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800142e:	e005      	b.n	800143c <HAL_RCC_OscConfig+0x88>
 8001430:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800143c:	4293      	cmp	r3, r2
 800143e:	d223      	bcs.n	8001488 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fd55 	bl	8001ef4 <RCC_SetFlashLatencyFromMSIRange>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e383      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001454:	4b73      	ldr	r3, [pc, #460]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a72      	ldr	r2, [pc, #456]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	496d      	ldr	r1, [pc, #436]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001472:	4b6c      	ldr	r3, [pc, #432]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	4968      	ldr	r1, [pc, #416]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
 8001486:	e025      	b.n	80014d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001488:	4b66      	ldr	r3, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a65      	ldr	r2, [pc, #404]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4960      	ldr	r1, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	495b      	ldr	r1, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d109      	bne.n	80014d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fd15 	bl	8001ef4 <RCC_SetFlashLatencyFromMSIRange>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e343      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d4:	f000 fc4a 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b52      	ldr	r3, [pc, #328]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	4950      	ldr	r1, [pc, #320]	; (8001628 <HAL_RCC_OscConfig+0x274>)
 80014e6:	5ccb      	ldrb	r3, [r1, r3]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	4a4e      	ldr	r2, [pc, #312]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f4:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fbf3 	bl	8000ce4 <HAL_InitTick>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d052      	beq.n	80015ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	e327      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d032      	beq.n	800157a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001514:	4b43      	ldr	r3, [pc, #268]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a42      	ldr	r2, [pc, #264]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001520:	f7ff fc30 	bl	8000d84 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001528:	f7ff fc2c 	bl	8000d84 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e310      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a36      	ldr	r2, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4931      	ldr	r1, [pc, #196]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	492c      	ldr	r1, [pc, #176]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
 8001578:	e01a      	b.n	80015b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a29      	ldr	r2, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001586:	f7ff fbfd 	bl	8000d84 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158e:	f7ff fbf9 	bl	8000d84 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e2dd      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x1da>
 80015ac:	e000      	b.n	80015b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d074      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_OscConfig+0x21a>
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d10e      	bne.n	80015e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d10b      	bne.n	80015e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d064      	beq.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d160      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e2ba      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x24a>
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e026      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001606:	d115      	bne.n	8001634 <HAL_RCC_OscConfig+0x280>
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800160e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a02      	ldr	r2, [pc, #8]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800161a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	08004e54 	.word	0x08004e54
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004
 8001634:	4ba0      	ldr	r3, [pc, #640]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a9f      	ldr	r2, [pc, #636]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b9d      	ldr	r3, [pc, #628]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a9c      	ldr	r2, [pc, #624]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fb96 	bl	8000d84 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fb92 	bl	8000d84 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e276      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x2a8>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb82 	bl	8000d84 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb7e 	bl	8000d84 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e262      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x2d0>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d060      	beq.n	8001774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x310>
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d116      	bne.n	80016f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_OscConfig+0x328>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e23f      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	4973      	ldr	r1, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f0:	e040      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d023      	beq.n	8001742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fa:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fb3d 	bl	8000d84 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff fb39 	bl	8000d84 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e21d      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b62      	ldr	r3, [pc, #392]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	495f      	ldr	r1, [pc, #380]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	e018      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fb19 	bl	8000d84 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fb15 	bl	8000d84 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1f9      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03c      	beq.n	80017fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800178a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178e:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff faf4 	bl	8000d84 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff faf0 	bl	8000d84 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1d4      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ef      	beq.n	80017a0 <HAL_RCC_OscConfig+0x3ec>
 80017c0:	e01b      	b.n	80017fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c8:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff fad7 	bl	8000d84 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff fad3 	bl	8000d84 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1b7      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ef      	bne.n	80017da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80a6 	beq.w	8001954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10d      	bne.n	8001834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800181e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001822:	6593      	str	r3, [r2, #88]	; 0x58
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001830:	2301      	movs	r3, #1
 8001832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d118      	bne.n	8001872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184c:	f7ff fa9a 	bl	8000d84 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001854:	f7ff fa96 	bl	8000d84 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e17a      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_RCC_OscConfig+0x4d8>
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188a:	e029      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d115      	bne.n	80018c0 <HAL_RCC_OscConfig+0x50c>
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b4:	e014      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	4b9c      	ldr	r3, [pc, #624]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a9b      	ldr	r2, [pc, #620]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d0:	4b98      	ldr	r3, [pc, #608]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	4a97      	ldr	r2, [pc, #604]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d016      	beq.n	8001916 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa4c 	bl	8000d84 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff fa48 	bl	8000d84 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e12a      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001906:	4b8b      	ldr	r3, [pc, #556]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ed      	beq.n	80018f0 <HAL_RCC_OscConfig+0x53c>
 8001914:	e015      	b.n	8001942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fa35 	bl	8000d84 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fa31 	bl	8000d84 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e113      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001934:	4b7f      	ldr	r3, [pc, #508]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ed      	bne.n	800191e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a79      	ldr	r2, [pc, #484]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 800194e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80fe 	beq.w	8001b5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	2b02      	cmp	r3, #2
 8001964:	f040 80d0 	bne.w	8001b08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001968:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0203 	and.w	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	429a      	cmp	r2, r3
 800197a:	d130      	bne.n	80019de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	3b01      	subs	r3, #1
 8001988:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d127      	bne.n	80019de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d11f      	bne.n	80019de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a8:	2a07      	cmp	r2, #7
 80019aa:	bf14      	ite	ne
 80019ac:	2201      	movne	r2, #1
 80019ae:	2200      	moveq	r2, #0
 80019b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d113      	bne.n	80019de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d109      	bne.n	80019de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d06e      	beq.n	8001abc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d069      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0ad      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a0c:	f7ff f9ba 	bl	8000d84 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f9b6 	bl	8000d84 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e09a      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a32:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a42:	3a01      	subs	r2, #1
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a4c:	0212      	lsls	r2, r2, #8
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a54:	0852      	lsrs	r2, r2, #1
 8001a56:	3a01      	subs	r2, #1
 8001a58:	0552      	lsls	r2, r2, #21
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a60:	0852      	lsrs	r2, r2, #1
 8001a62:	3a01      	subs	r2, #1
 8001a64:	0652      	lsls	r2, r2, #25
 8001a66:	4311      	orrs	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a6c:	0912      	lsrs	r2, r2, #4
 8001a6e:	0452      	lsls	r2, r2, #17
 8001a70:	430a      	orrs	r2, r1
 8001a72:	4930      	ldr	r1, [pc, #192]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a90:	f7ff f978 	bl	8000d84 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f974 	bl	8000d84 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e058      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab6:	e050      	b.n	8001b5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e04f      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d148      	bne.n	8001b5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ae0:	f7ff f950 	bl	8000d84 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f94c 	bl	8000d84 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e030      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x734>
 8001b06:	e028      	b.n	8001b5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	d023      	beq.n	8001b56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f933 	bl	8000d84 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	e00c      	b.n	8001b3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f92f 	bl	8000d84 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d905      	bls.n	8001b3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e013      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
 8001b34:	40021000 	.word	0x40021000
 8001b38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_OscConfig+0x7b0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ec      	bne.n	8001b22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x7b0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4905      	ldr	r1, [pc, #20]	; (8001b64 <HAL_RCC_OscConfig+0x7b0>)
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_OscConfig+0x7b4>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e001      	b.n	8001b5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	feeefffc 	.word	0xfeeefffc

08001b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0e7      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b75      	ldr	r3, [pc, #468]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4970      	ldr	r1, [pc, #448]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0cf      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d010      	beq.n	8001bde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d908      	bls.n	8001bde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4960      	ldr	r1, [pc, #384]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d04c      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d121      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0a6      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0a:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d115      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e09a      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c22:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e08e      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c32:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e086      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4943      	ldr	r1, [pc, #268]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c54:	f7ff f896 	bl	8000d84 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff f892 	bl	8000d84 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e06e      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d208      	bcs.n	8001cb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	492b      	ldr	r1, [pc, #172]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d210      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 0207 	bic.w	r2, r3, #7
 8001cc8:	4923      	ldr	r1, [pc, #140]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e036      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4918      	ldr	r1, [pc, #96]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4910      	ldr	r1, [pc, #64]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d20:	f000 f824 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	490b      	ldr	r1, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1f4>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1fc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe ffcd 	bl	8000ce4 <HAL_InitTick>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08004e54 	.word	0x08004e54
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d84:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x34>
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d121      	bne.n	8001dde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d11e      	bne.n	8001dde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	e005      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d102      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	e004      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001df2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d134      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d003      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0xac>
 8001e10:	e005      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e14:	617b      	str	r3, [r7, #20]
      break;
 8001e16:	e005      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e1a:	617b      	str	r3, [r7, #20]
      break;
 8001e1c:	e002      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	617b      	str	r3, [r7, #20]
      break;
 8001e22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	3301      	adds	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	fb03 f202 	mul.w	r2, r3, r2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	0e5b      	lsrs	r3, r3, #25
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	3301      	adds	r3, #1
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e64:	69bb      	ldr	r3, [r7, #24]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08004e6c 	.word	0x08004e6c
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200

08001e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ea0:	f7ff fff0 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08004e64 	.word	0x08004e64

08001ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ecc:	f7ff ffda 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0adb      	lsrs	r3, r3, #11
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08004e64 	.word	0x08004e64

08001ef4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f0c:	f7ff f9ee 	bl	80012ec <HAL_PWREx_GetVoltageRange>
 8001f10:	6178      	str	r0, [r7, #20]
 8001f12:	e014      	b.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f20:	4b22      	ldr	r3, [pc, #136]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f2c:	f7ff f9de 	bl	80012ec <HAL_PWREx_GetVoltageRange>
 8001f30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f44:	d10b      	bne.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d919      	bls.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f50:	d902      	bls.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f52:	2302      	movs	r3, #2
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e013      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f58:	2301      	movs	r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e010      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d902      	bls.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f64:	2303      	movs	r3, #3
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	e00a      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d102      	bne.n	8001f76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f70:	2302      	movs	r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	e004      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b70      	cmp	r3, #112	; 0x70
 8001f7a:	d101      	bne.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 0207 	bic.w	r2, r3, #7
 8001f88:	4909      	ldr	r1, [pc, #36]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d001      	beq.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d041      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fd8:	d02a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fde:	d824      	bhi.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fe4:	d008      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fea:	d81e      	bhi.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff4:	d010      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ff6:	e018      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff8:	4b86      	ldr	r3, [pc, #536]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a85      	ldr	r2, [pc, #532]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002002:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002004:	e015      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fabb 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002012:	4603      	mov	r3, r0
 8002014:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002016:	e00c      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3320      	adds	r3, #32
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fba6 	bl	8002770 <RCCEx_PLLSAI2_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002028:	e003      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	74fb      	strb	r3, [r7, #19]
      break;
 800202e:	e000      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002032:	7cfb      	ldrb	r3, [r7, #19]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10b      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002038:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002046:	4973      	ldr	r1, [pc, #460]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800204e:	e001      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d041      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002068:	d02a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800206a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800206e:	d824      	bhi.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002074:	d008      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800207a:	d81e      	bhi.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d010      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002086:	e018      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002088:	4b62      	ldr	r3, [pc, #392]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a61      	ldr	r2, [pc, #388]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002094:	e015      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3304      	adds	r3, #4
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f000 fa73 	bl	8002588 <RCCEx_PLLSAI1_Config>
 80020a2:	4603      	mov	r3, r0
 80020a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a6:	e00c      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3320      	adds	r3, #32
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fb5e 	bl	8002770 <RCCEx_PLLSAI2_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b8:	e003      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	74fb      	strb	r3, [r7, #19]
      break;
 80020be:	e000      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020c8:	4b52      	ldr	r3, [pc, #328]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d6:	494f      	ldr	r1, [pc, #316]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020de:	e001      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a0 	beq.w	8002232 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002106:	2300      	movs	r3, #0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	4a40      	ldr	r2, [pc, #256]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002116:	6593      	str	r3, [r2, #88]	; 0x58
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002124:	2301      	movs	r3, #1
 8002126:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002134:	f7fe fe26 	bl	8000d84 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800213a:	e009      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213c:	f7fe fe22 	bl	8000d84 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d902      	bls.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	74fb      	strb	r3, [r7, #19]
        break;
 800214e:	e005      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ef      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d15c      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002162:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01f      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	d019      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	4a20      	ldr	r2, [pc, #128]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ac:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7fe fde1 	bl	8000d84 <HAL_GetTick>
 80021c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c4:	e00b      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe fddd 	bl	8000d84 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d902      	bls.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	74fb      	strb	r3, [r7, #19]
            break;
 80021dc:	e006      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ec      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002202:	4904      	ldr	r1, [pc, #16]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800220a:	e009      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
 8002210:	e006      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002220:	7c7b      	ldrb	r3, [r7, #17]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b9e      	ldr	r3, [pc, #632]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	4a9d      	ldr	r2, [pc, #628]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800223e:	4b98      	ldr	r3, [pc, #608]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f023 0203 	bic.w	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	4994      	ldr	r1, [pc, #592]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f023 020c 	bic.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	498c      	ldr	r1, [pc, #560]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002282:	4b87      	ldr	r3, [pc, #540]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4983      	ldr	r1, [pc, #524]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022a4:	4b7e      	ldr	r3, [pc, #504]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	497b      	ldr	r1, [pc, #492]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022c6:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d4:	4972      	ldr	r1, [pc, #456]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e8:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	496a      	ldr	r1, [pc, #424]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	4961      	ldr	r1, [pc, #388]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800232c:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	4959      	ldr	r1, [pc, #356]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235c:	4950      	ldr	r1, [pc, #320]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002370:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	4948      	ldr	r1, [pc, #288]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	493f      	ldr	r1, [pc, #252]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d028      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c2:	4937      	ldr	r1, [pc, #220]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023de:	60d3      	str	r3, [r2, #12]
 80023e0:	e011      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ea:	d10c      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f8c8 	bl	8002588 <RCCEx_PLLSAI1_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d028      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	491f      	ldr	r1, [pc, #124]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002430:	d106      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243c:	60d3      	str	r3, [r2, #12]
 800243e:	e011      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002448:	d10c      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2101      	movs	r1, #1
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f899 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d02b      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248e:	d109      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a02      	ldr	r2, [pc, #8]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249a:	60d3      	str	r3, [r2, #12]
 800249c:	e014      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f867 	bl	8002588 <RCCEx_PLLSAI1_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02f      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e2:	4928      	ldr	r1, [pc, #160]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f2:	d10d      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f844 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d014      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	74bb      	strb	r3, [r7, #18]
 800250e:	e011      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d10c      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3320      	adds	r3, #32
 800251e:	2102      	movs	r1, #2
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f925 	bl	8002770 <RCCEx_PLLSAI2_Config>
 8002526:	4603      	mov	r3, r0
 8002528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800254e:	490d      	ldr	r1, [pc, #52]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002572:	4904      	ldr	r1, [pc, #16]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800257a:	7cbb      	ldrb	r3, [r7, #18]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000

08002588 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002596:	4b75      	ldr	r3, [pc, #468]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d018      	beq.n	80025d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025a2:	4b72      	ldr	r3, [pc, #456]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0203 	and.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d10d      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
       ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ba:	4b6c      	ldr	r3, [pc, #432]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d047      	beq.n	800265e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	e044      	b.n	800265e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d018      	beq.n	800260e <RCCEx_PLLSAI1_Config+0x86>
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d825      	bhi.n	800262c <RCCEx_PLLSAI1_Config+0xa4>
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d002      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0x62>
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d009      	beq.n	80025fc <RCCEx_PLLSAI1_Config+0x74>
 80025e8:	e020      	b.n	800262c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ea:	4b60      	ldr	r3, [pc, #384]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11d      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fa:	e01a      	b.n	8002632 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025fc:	4b5b      	ldr	r3, [pc, #364]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d116      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260c:	e013      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800260e:	4b57      	ldr	r3, [pc, #348]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800261a:	4b54      	ldr	r3, [pc, #336]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800262a:	e006      	b.n	800263a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      break;
 8002630:	e004      	b.n	800263c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002632:	bf00      	nop
 8002634:	e002      	b.n	800263c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800263a:	bf00      	nop
    }

    if(status == HAL_OK)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002642:	4b4a      	ldr	r3, [pc, #296]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	430b      	orrs	r3, r1
 8002658:	4944      	ldr	r1, [pc, #272]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d17d      	bne.n	8002760 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002664:	4b41      	ldr	r3, [pc, #260]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a40      	ldr	r2, [pc, #256]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 800266a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800266e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002670:	f7fe fb88 	bl	8000d84 <HAL_GetTick>
 8002674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002676:	e009      	b.n	800268c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002678:	f7fe fb84 	bl	8000d84 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d902      	bls.n	800268c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	73fb      	strb	r3, [r7, #15]
        break;
 800268a:	e005      	b.n	8002698 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800268c:	4b37      	ldr	r3, [pc, #220]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ef      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d160      	bne.n	8002760 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a4:	4b31      	ldr	r3, [pc, #196]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	0211      	lsls	r1, r2, #8
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	0912      	lsrs	r2, r2, #4
 80026bc:	0452      	lsls	r2, r2, #17
 80026be:	430a      	orrs	r2, r1
 80026c0:	492a      	ldr	r1, [pc, #168]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	610b      	str	r3, [r1, #16]
 80026c6:	e027      	b.n	8002718 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d112      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ce:	4b27      	ldr	r3, [pc, #156]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6892      	ldr	r2, [r2, #8]
 80026de:	0211      	lsls	r1, r2, #8
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6912      	ldr	r2, [r2, #16]
 80026e4:	0852      	lsrs	r2, r2, #1
 80026e6:	3a01      	subs	r2, #1
 80026e8:	0552      	lsls	r2, r2, #21
 80026ea:	430a      	orrs	r2, r1
 80026ec:	491f      	ldr	r1, [pc, #124]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	610b      	str	r3, [r1, #16]
 80026f2:	e011      	b.n	8002718 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6892      	ldr	r2, [r2, #8]
 8002704:	0211      	lsls	r1, r2, #8
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6952      	ldr	r2, [r2, #20]
 800270a:	0852      	lsrs	r2, r2, #1
 800270c:	3a01      	subs	r2, #1
 800270e:	0652      	lsls	r2, r2, #25
 8002710:	430a      	orrs	r2, r1
 8002712:	4916      	ldr	r1, [pc, #88]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a13      	ldr	r2, [pc, #76]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 800271e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe fb2e 	bl	8000d84 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272a:	e009      	b.n	8002740 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800272c:	f7fe fb2a 	bl	8000d84 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d902      	bls.n	8002740 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	73fb      	strb	r3, [r7, #15]
          break;
 800273e:	e005      	b.n	800274c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ef      	beq.n	800272c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	4904      	ldr	r1, [pc, #16]	; (800276c <RCCEx_PLLSAI1_Config+0x1e4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000

08002770 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800277e:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d018      	beq.n	80027bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0203 	and.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d10d      	bne.n	80027b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
       ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027a2:	4b61      	ldr	r3, [pc, #388]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
       ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d047      	beq.n	8002846 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e044      	b.n	8002846 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d018      	beq.n	80027f6 <RCCEx_PLLSAI2_Config+0x86>
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d825      	bhi.n	8002814 <RCCEx_PLLSAI2_Config+0xa4>
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d002      	beq.n	80027d2 <RCCEx_PLLSAI2_Config+0x62>
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d009      	beq.n	80027e4 <RCCEx_PLLSAI2_Config+0x74>
 80027d0:	e020      	b.n	8002814 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d2:	4b55      	ldr	r3, [pc, #340]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11d      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e2:	e01a      	b.n	800281a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d116      	bne.n	800281e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e013      	b.n	800281e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027f6:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10f      	bne.n	8002822 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002802:	4b49      	ldr	r3, [pc, #292]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002812:	e006      	b.n	8002822 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e004      	b.n	8002824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002822:	bf00      	nop
    }

    if(status == HAL_OK)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10d      	bne.n	8002846 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800282a:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	430b      	orrs	r3, r1
 8002840:	4939      	ldr	r1, [pc, #228]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d167      	bne.n	800291c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a35      	ldr	r2, [pc, #212]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fa94 	bl	8000d84 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800285e:	e009      	b.n	8002874 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002860:	f7fe fa90 	bl	8000d84 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	73fb      	strb	r3, [r7, #15]
        break;
 8002872:	e005      	b.n	8002880 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002874:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ef      	bne.n	8002860 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d14a      	bne.n	800291c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800288c:	4b26      	ldr	r3, [pc, #152]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6892      	ldr	r2, [r2, #8]
 800289c:	0211      	lsls	r1, r2, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68d2      	ldr	r2, [r2, #12]
 80028a2:	0912      	lsrs	r2, r2, #4
 80028a4:	0452      	lsls	r2, r2, #17
 80028a6:	430a      	orrs	r2, r1
 80028a8:	491f      	ldr	r1, [pc, #124]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	614b      	str	r3, [r1, #20]
 80028ae:	e011      	b.n	80028d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6892      	ldr	r2, [r2, #8]
 80028c0:	0211      	lsls	r1, r2, #8
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6912      	ldr	r2, [r2, #16]
 80028c6:	0852      	lsrs	r2, r2, #1
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0652      	lsls	r2, r2, #25
 80028cc:	430a      	orrs	r2, r1
 80028ce:	4916      	ldr	r1, [pc, #88]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7fe fa50 	bl	8000d84 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028e6:	e009      	b.n	80028fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028e8:	f7fe fa4c 	bl	8000d84 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d902      	bls.n	80028fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	73fb      	strb	r3, [r7, #15]
          break;
 80028fa:	e005      	b.n	8002908 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ef      	beq.n	80028e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	4904      	ldr	r1, [pc, #16]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002918:	4313      	orrs	r3, r2
 800291a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000

0800292c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e095      	b.n	8002a6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d108      	bne.n	8002958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294e:	d009      	beq.n	8002964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
 8002956:	e005      	b.n	8002964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fd ffd0 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029a4:	d902      	bls.n	80029ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e002      	b.n	80029b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029ba:	d007      	beq.n	80029cc <HAL_SPI_Init+0xa0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0e:	ea42 0103 	orr.w	r1, r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	0c1b      	lsrs	r3, r3, #16
 8002a28:	f003 0204 	and.w	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a48:	ea42 0103 	orr.w	r1, r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b088      	sub	sp, #32
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_SPI_Transmit+0x22>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e15f      	b.n	8002d54 <HAL_SPI_Transmit+0x2e2>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a9c:	f7fe f972 	bl	8000d84 <HAL_GetTick>
 8002aa0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ab6:	e148      	b.n	8002d4a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_SPI_Transmit+0x52>
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac8:	e13f      	b.n	8002d4a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2203      	movs	r2, #3
 8002ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b14:	d10f      	bne.n	8002b36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d007      	beq.n	8002b54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b5c:	d94f      	bls.n	8002bfe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_SPI_Transmit+0xfa>
 8002b66:	8afb      	ldrh	r3, [r7, #22]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d142      	bne.n	8002bf2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	1c9a      	adds	r2, r3, #2
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b90:	e02f      	b.n	8002bf2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d112      	bne.n	8002bc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	881a      	ldrh	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	1c9a      	adds	r2, r3, #2
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bc4:	e015      	b.n	8002bf2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bc6:	f7fe f8dd 	bl	8000d84 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d803      	bhi.n	8002bde <HAL_SPI_Transmit+0x16c>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d102      	bne.n	8002be4 <HAL_SPI_Transmit+0x172>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002bf0:	e0ab      	b.n	8002d4a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ca      	bne.n	8002b92 <HAL_SPI_Transmit+0x120>
 8002bfc:	e080      	b.n	8002d00 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_SPI_Transmit+0x19a>
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d174      	bne.n	8002cf6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d912      	bls.n	8002c3c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	1c9a      	adds	r2, r3, #2
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b02      	subs	r3, #2
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c3a:	e05c      	b.n	8002cf6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c62:	e048      	b.n	8002cf6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d12b      	bne.n	8002cca <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d912      	bls.n	8002ca2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b02      	subs	r3, #2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ca0:	e029      	b.n	8002cf6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc8:	e015      	b.n	8002cf6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cca:	f7fe f85b 	bl	8000d84 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d803      	bhi.n	8002ce2 <HAL_SPI_Transmit+0x270>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d102      	bne.n	8002ce8 <HAL_SPI_Transmit+0x276>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002cf4:	e029      	b.n	8002d4a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1b1      	bne.n	8002c64 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	6839      	ldr	r1, [r7, #0]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fb69 	bl	80033dc <SPI_EndRxTxTransaction>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
 8002d40:	e003      	b.n	8002d4a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x26>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e20a      	b.n	8003198 <HAL_SPI_TransmitReceive+0x43c>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d8a:	f7fd fffb 	bl	8000d84 <HAL_GetTick>
 8002d8e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d96:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002da6:	7efb      	ldrb	r3, [r7, #27]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d00e      	beq.n	8002dca <HAL_SPI_TransmitReceive+0x6e>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db2:	d106      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x66>
 8002dbc:	7efb      	ldrb	r3, [r7, #27]
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d003      	beq.n	8002dca <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dc8:	e1e0      	b.n	800318c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x80>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x80>
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002de2:	e1d3      	b.n	800318c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d003      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2205      	movs	r2, #5
 8002df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	887a      	ldrh	r2, [r7, #2]
 8002e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e3a:	d802      	bhi.n	8002e42 <HAL_SPI_TransmitReceive+0xe6>
 8002e3c:	8a3b      	ldrh	r3, [r7, #16]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d908      	bls.n	8002e54 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	e007      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e62:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d007      	beq.n	8002e82 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e8a:	f240 8081 	bls.w	8002f90 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x140>
 8002e96:	8a7b      	ldrh	r3, [r7, #18]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d16d      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	1c9a      	adds	r2, r3, #2
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec0:	e05a      	b.n	8002f78 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11b      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x1ac>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x1ac>
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d113      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	881a      	ldrh	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d11c      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x1f4>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f50:	f7fd ff18 	bl	8000d84 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d80b      	bhi.n	8002f78 <HAL_SPI_TransmitReceive+0x21c>
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d007      	beq.n	8002f78 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002f76:	e109      	b.n	800318c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d19f      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x166>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d199      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x166>
 8002f8e:	e0e3      	b.n	8003158 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x244>
 8002f98:	8a7b      	ldrh	r3, [r7, #18]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	f040 80cf 	bne.w	800313e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d912      	bls.n	8002fd0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b02      	subs	r3, #2
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fce:	e0b6      	b.n	800313e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff6:	e0a2      	b.n	800313e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d134      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x314>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d02f      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x314>
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	2b01      	cmp	r3, #1
 8003014:	d12c      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d912      	bls.n	8003046 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	881a      	ldrh	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b02      	subs	r3, #2
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003044:	e012      	b.n	800306c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d148      	bne.n	8003110 <HAL_SPI_TransmitReceive+0x3b4>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d042      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d923      	bls.n	80030de <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	b292      	uxth	r2, r2
 80030a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b02      	subs	r3, #2
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d81f      	bhi.n	800310c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	e016      	b.n	800310c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f103 020c 	add.w	r2, r3, #12
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800310c:	2301      	movs	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003110:	f7fd fe38 	bl	8000d84 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311c:	429a      	cmp	r2, r3
 800311e:	d803      	bhi.n	8003128 <HAL_SPI_TransmitReceive+0x3cc>
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d102      	bne.n	800312e <HAL_SPI_TransmitReceive+0x3d2>
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800313c:	e026      	b.n	800318c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f af57 	bne.w	8002ff8 <HAL_SPI_TransmitReceive+0x29c>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	f47f af50 	bne.w	8002ff8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f93d 	bl	80033dc <SPI_EndRxTxTransaction>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003182:	e003      	b.n	800318c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003198:	4618      	mov	r0, r3
 800319a:	3728      	adds	r7, #40	; 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b0:	f7fd fde8 	bl	8000d84 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c0:	f7fd fde0 	bl	8000d84 <HAL_GetTick>
 80031c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	015b      	lsls	r3, r3, #5
 80031cc:	0d1b      	lsrs	r3, r3, #20
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d6:	e054      	b.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d050      	beq.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031e0:	f7fd fdd0 	bl	8000d84 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d902      	bls.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d13d      	bne.n	8003272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800320e:	d111      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003218:	d004      	beq.n	8003224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d107      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323c:	d10f      	bne.n	800325e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800325c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e017      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3b01      	subs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	429a      	cmp	r2, r3
 800329e:	d19b      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032c2:	f7fd fd5f 	bl	8000d84 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032d2:	f7fd fd57 	bl	8000d84 <HAL_GetTick>
 80032d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032e0:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	0d1b      	lsrs	r3, r3, #20
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032f8:	e060      	b.n	80033bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003300:	d107      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d050      	beq.n	80033bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800331a:	f7fd fd33 	bl	8000d84 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	429a      	cmp	r2, r3
 8003328:	d902      	bls.n	8003330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d13d      	bne.n	80033ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800333e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003348:	d111      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003352:	d004      	beq.n	800335e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	d107      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003376:	d10f      	bne.n	8003398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e010      	b.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d196      	bne.n	80032fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3728      	adds	r7, #40	; 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000

080033dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ff5b 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e027      	b.n	8003460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fec0 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e014      	b.n	8003460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff ff34 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e000      	b.n	8003460 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e040      	b.n	80034fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd faac 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fb6a 	bl	8003b88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f8af 	bl	8003618 <UART_SetConfig>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e01b      	b.n	80034fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fbe9 	bl	8003ccc <UART_CheckIdleState>
 80034fa:	4603      	mov	r3, r0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003518:	2b20      	cmp	r3, #32
 800351a:	d178      	bne.n	800360e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_Transmit+0x24>
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e071      	b.n	8003610 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2221      	movs	r2, #33	; 0x21
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800353a:	f7fd fc23 	bl	8000d84 <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003558:	d108      	bne.n	800356c <HAL_UART_Transmit+0x68>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e003      	b.n	8003574 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003574:	e030      	b.n	80035d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fc4b 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e03c      	b.n	8003610 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a8:	b292      	uxth	r2, r2
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	3302      	adds	r3, #2
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e008      	b.n	80035c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	b292      	uxth	r2, r2
 80035be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	3301      	adds	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1c8      	bne.n	8003576 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	2140      	movs	r1, #64	; 0x40
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fc14 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d004      	beq.n	8003604 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e005      	b.n	8003610 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361c:	b08a      	sub	sp, #40	; 0x28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	431a      	orrs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	431a      	orrs	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4313      	orrs	r3, r2
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4ba4      	ldr	r3, [pc, #656]	; (80038d8 <UART_SetConfig+0x2c0>)
 8003648:	4013      	ands	r3, r2
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003650:	430b      	orrs	r3, r1
 8003652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a99      	ldr	r2, [pc, #612]	; (80038dc <UART_SetConfig+0x2c4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	4313      	orrs	r3, r2
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a90      	ldr	r2, [pc, #576]	; (80038e0 <UART_SetConfig+0x2c8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d126      	bne.n	80036f0 <UART_SetConfig+0xd8>
 80036a2:	4b90      	ldr	r3, [pc, #576]	; (80038e4 <UART_SetConfig+0x2cc>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d81b      	bhi.n	80036e8 <UART_SetConfig+0xd0>
 80036b0:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <UART_SetConfig+0xa0>)
 80036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b6:	bf00      	nop
 80036b8:	080036c9 	.word	0x080036c9
 80036bc:	080036d9 	.word	0x080036d9
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036e1 	.word	0x080036e1
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ce:	e116      	b.n	80038fe <UART_SetConfig+0x2e6>
 80036d0:	2302      	movs	r3, #2
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d6:	e112      	b.n	80038fe <UART_SetConfig+0x2e6>
 80036d8:	2304      	movs	r3, #4
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036de:	e10e      	b.n	80038fe <UART_SetConfig+0x2e6>
 80036e0:	2308      	movs	r3, #8
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e6:	e10a      	b.n	80038fe <UART_SetConfig+0x2e6>
 80036e8:	2310      	movs	r3, #16
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ee:	e106      	b.n	80038fe <UART_SetConfig+0x2e6>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a7c      	ldr	r2, [pc, #496]	; (80038e8 <UART_SetConfig+0x2d0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d138      	bne.n	800376c <UART_SetConfig+0x154>
 80036fa:	4b7a      	ldr	r3, [pc, #488]	; (80038e4 <UART_SetConfig+0x2cc>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b0c      	cmp	r3, #12
 8003706:	d82d      	bhi.n	8003764 <UART_SetConfig+0x14c>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <UART_SetConfig+0xf8>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003745 	.word	0x08003745
 8003714:	08003765 	.word	0x08003765
 8003718:	08003765 	.word	0x08003765
 800371c:	08003765 	.word	0x08003765
 8003720:	08003755 	.word	0x08003755
 8003724:	08003765 	.word	0x08003765
 8003728:	08003765 	.word	0x08003765
 800372c:	08003765 	.word	0x08003765
 8003730:	0800374d 	.word	0x0800374d
 8003734:	08003765 	.word	0x08003765
 8003738:	08003765 	.word	0x08003765
 800373c:	08003765 	.word	0x08003765
 8003740:	0800375d 	.word	0x0800375d
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e0d8      	b.n	80038fe <UART_SetConfig+0x2e6>
 800374c:	2302      	movs	r3, #2
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e0d4      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003754:	2304      	movs	r3, #4
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e0d0      	b.n	80038fe <UART_SetConfig+0x2e6>
 800375c:	2308      	movs	r3, #8
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003762:	e0cc      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003764:	2310      	movs	r3, #16
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376a:	e0c8      	b.n	80038fe <UART_SetConfig+0x2e6>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a5e      	ldr	r2, [pc, #376]	; (80038ec <UART_SetConfig+0x2d4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d125      	bne.n	80037c2 <UART_SetConfig+0x1aa>
 8003776:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <UART_SetConfig+0x2cc>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003780:	2b30      	cmp	r3, #48	; 0x30
 8003782:	d016      	beq.n	80037b2 <UART_SetConfig+0x19a>
 8003784:	2b30      	cmp	r3, #48	; 0x30
 8003786:	d818      	bhi.n	80037ba <UART_SetConfig+0x1a2>
 8003788:	2b20      	cmp	r3, #32
 800378a:	d00a      	beq.n	80037a2 <UART_SetConfig+0x18a>
 800378c:	2b20      	cmp	r3, #32
 800378e:	d814      	bhi.n	80037ba <UART_SetConfig+0x1a2>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <UART_SetConfig+0x182>
 8003794:	2b10      	cmp	r3, #16
 8003796:	d008      	beq.n	80037aa <UART_SetConfig+0x192>
 8003798:	e00f      	b.n	80037ba <UART_SetConfig+0x1a2>
 800379a:	2300      	movs	r3, #0
 800379c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a0:	e0ad      	b.n	80038fe <UART_SetConfig+0x2e6>
 80037a2:	2302      	movs	r3, #2
 80037a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a8:	e0a9      	b.n	80038fe <UART_SetConfig+0x2e6>
 80037aa:	2304      	movs	r3, #4
 80037ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b0:	e0a5      	b.n	80038fe <UART_SetConfig+0x2e6>
 80037b2:	2308      	movs	r3, #8
 80037b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b8:	e0a1      	b.n	80038fe <UART_SetConfig+0x2e6>
 80037ba:	2310      	movs	r3, #16
 80037bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c0:	e09d      	b.n	80038fe <UART_SetConfig+0x2e6>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a4a      	ldr	r2, [pc, #296]	; (80038f0 <UART_SetConfig+0x2d8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d125      	bne.n	8003818 <UART_SetConfig+0x200>
 80037cc:	4b45      	ldr	r3, [pc, #276]	; (80038e4 <UART_SetConfig+0x2cc>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037d6:	2bc0      	cmp	r3, #192	; 0xc0
 80037d8:	d016      	beq.n	8003808 <UART_SetConfig+0x1f0>
 80037da:	2bc0      	cmp	r3, #192	; 0xc0
 80037dc:	d818      	bhi.n	8003810 <UART_SetConfig+0x1f8>
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d00a      	beq.n	80037f8 <UART_SetConfig+0x1e0>
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d814      	bhi.n	8003810 <UART_SetConfig+0x1f8>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <UART_SetConfig+0x1d8>
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d008      	beq.n	8003800 <UART_SetConfig+0x1e8>
 80037ee:	e00f      	b.n	8003810 <UART_SetConfig+0x1f8>
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e082      	b.n	80038fe <UART_SetConfig+0x2e6>
 80037f8:	2302      	movs	r3, #2
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e07e      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003800:	2304      	movs	r3, #4
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e07a      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003808:	2308      	movs	r3, #8
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e076      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003810:	2310      	movs	r3, #16
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003816:	e072      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a35      	ldr	r2, [pc, #212]	; (80038f4 <UART_SetConfig+0x2dc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d12a      	bne.n	8003878 <UART_SetConfig+0x260>
 8003822:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <UART_SetConfig+0x2cc>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003830:	d01a      	beq.n	8003868 <UART_SetConfig+0x250>
 8003832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003836:	d81b      	bhi.n	8003870 <UART_SetConfig+0x258>
 8003838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383c:	d00c      	beq.n	8003858 <UART_SetConfig+0x240>
 800383e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003842:	d815      	bhi.n	8003870 <UART_SetConfig+0x258>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <UART_SetConfig+0x238>
 8003848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384c:	d008      	beq.n	8003860 <UART_SetConfig+0x248>
 800384e:	e00f      	b.n	8003870 <UART_SetConfig+0x258>
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e052      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003858:	2302      	movs	r3, #2
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e04e      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003860:	2304      	movs	r3, #4
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e04a      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003868:	2308      	movs	r3, #8
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e046      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003870:	2310      	movs	r3, #16
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003876:	e042      	b.n	80038fe <UART_SetConfig+0x2e6>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <UART_SetConfig+0x2c4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d13a      	bne.n	80038f8 <UART_SetConfig+0x2e0>
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <UART_SetConfig+0x2cc>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800388c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003890:	d01a      	beq.n	80038c8 <UART_SetConfig+0x2b0>
 8003892:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003896:	d81b      	bhi.n	80038d0 <UART_SetConfig+0x2b8>
 8003898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389c:	d00c      	beq.n	80038b8 <UART_SetConfig+0x2a0>
 800389e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a2:	d815      	bhi.n	80038d0 <UART_SetConfig+0x2b8>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <UART_SetConfig+0x298>
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ac:	d008      	beq.n	80038c0 <UART_SetConfig+0x2a8>
 80038ae:	e00f      	b.n	80038d0 <UART_SetConfig+0x2b8>
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e022      	b.n	80038fe <UART_SetConfig+0x2e6>
 80038b8:	2302      	movs	r3, #2
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038be:	e01e      	b.n	80038fe <UART_SetConfig+0x2e6>
 80038c0:	2304      	movs	r3, #4
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c6:	e01a      	b.n	80038fe <UART_SetConfig+0x2e6>
 80038c8:	2308      	movs	r3, #8
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ce:	e016      	b.n	80038fe <UART_SetConfig+0x2e6>
 80038d0:	2310      	movs	r3, #16
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d6:	e012      	b.n	80038fe <UART_SetConfig+0x2e6>
 80038d8:	efff69f3 	.word	0xefff69f3
 80038dc:	40008000 	.word	0x40008000
 80038e0:	40013800 	.word	0x40013800
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40004400 	.word	0x40004400
 80038ec:	40004800 	.word	0x40004800
 80038f0:	40004c00 	.word	0x40004c00
 80038f4:	40005000 	.word	0x40005000
 80038f8:	2310      	movs	r3, #16
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a9f      	ldr	r2, [pc, #636]	; (8003b80 <UART_SetConfig+0x568>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d17a      	bne.n	80039fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800390c:	2b08      	cmp	r3, #8
 800390e:	d824      	bhi.n	800395a <UART_SetConfig+0x342>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x300>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800393d 	.word	0x0800393d
 800391c:	0800395b 	.word	0x0800395b
 8003920:	08003945 	.word	0x08003945
 8003924:	0800395b 	.word	0x0800395b
 8003928:	0800394b 	.word	0x0800394b
 800392c:	0800395b 	.word	0x0800395b
 8003930:	0800395b 	.word	0x0800395b
 8003934:	0800395b 	.word	0x0800395b
 8003938:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7fe faae 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8003940:	61f8      	str	r0, [r7, #28]
        break;
 8003942:	e010      	b.n	8003966 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b8f      	ldr	r3, [pc, #572]	; (8003b84 <UART_SetConfig+0x56c>)
 8003946:	61fb      	str	r3, [r7, #28]
        break;
 8003948:	e00d      	b.n	8003966 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe fa0f 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 800394e:	61f8      	str	r0, [r7, #28]
        break;
 8003950:	e009      	b.n	8003966 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003956:	61fb      	str	r3, [r7, #28]
        break;
 8003958:	e005      	b.n	8003966 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003964:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80fb 	beq.w	8003b64 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	429a      	cmp	r2, r3
 800397c:	d305      	bcc.n	800398a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	429a      	cmp	r2, r3
 8003988:	d903      	bls.n	8003992 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003990:	e0e8      	b.n	8003b64 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2200      	movs	r2, #0
 8003996:	461c      	mov	r4, r3
 8003998:	4615      	mov	r5, r2
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	022b      	lsls	r3, r5, #8
 80039a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039a8:	0222      	lsls	r2, r4, #8
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	6849      	ldr	r1, [r1, #4]
 80039ae:	0849      	lsrs	r1, r1, #1
 80039b0:	2000      	movs	r0, #0
 80039b2:	4688      	mov	r8, r1
 80039b4:	4681      	mov	r9, r0
 80039b6:	eb12 0a08 	adds.w	sl, r2, r8
 80039ba:	eb43 0b09 	adc.w	fp, r3, r9
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039cc:	4650      	mov	r0, sl
 80039ce:	4659      	mov	r1, fp
 80039d0:	f7fc fc4e 	bl	8000270 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e2:	d308      	bcc.n	80039f6 <UART_SetConfig+0x3de>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ea:	d204      	bcs.n	80039f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	e0b6      	b.n	8003b64 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039fc:	e0b2      	b.n	8003b64 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a06:	d15e      	bne.n	8003ac6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d828      	bhi.n	8003a62 <UART_SetConfig+0x44a>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <UART_SetConfig+0x400>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a3d 	.word	0x08003a3d
 8003a1c:	08003a45 	.word	0x08003a45
 8003a20:	08003a4d 	.word	0x08003a4d
 8003a24:	08003a63 	.word	0x08003a63
 8003a28:	08003a53 	.word	0x08003a53
 8003a2c:	08003a63 	.word	0x08003a63
 8003a30:	08003a63 	.word	0x08003a63
 8003a34:	08003a63 	.word	0x08003a63
 8003a38:	08003a5b 	.word	0x08003a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7fe fa2e 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8003a40:	61f8      	str	r0, [r7, #28]
        break;
 8003a42:	e014      	b.n	8003a6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7fe fa40 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 8003a48:	61f8      	str	r0, [r7, #28]
        break;
 8003a4a:	e010      	b.n	8003a6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a4c:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <UART_SetConfig+0x56c>)
 8003a4e:	61fb      	str	r3, [r7, #28]
        break;
 8003a50:	e00d      	b.n	8003a6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a52:	f7fe f98b 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8003a56:	61f8      	str	r0, [r7, #28]
        break;
 8003a58:	e009      	b.n	8003a6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5e:	61fb      	str	r3, [r7, #28]
        break;
 8003a60:	e005      	b.n	8003a6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d077      	beq.n	8003b64 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005a      	lsls	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b0f      	cmp	r3, #15
 8003a8e:	d916      	bls.n	8003abe <UART_SetConfig+0x4a6>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a96:	d212      	bcs.n	8003abe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f023 030f 	bic.w	r3, r3, #15
 8003aa0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	8afb      	ldrh	r3, [r7, #22]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	8afa      	ldrh	r2, [r7, #22]
 8003aba:	60da      	str	r2, [r3, #12]
 8003abc:	e052      	b.n	8003b64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ac4:	e04e      	b.n	8003b64 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d827      	bhi.n	8003b1e <UART_SetConfig+0x506>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0x4bc>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b01 	.word	0x08003b01
 8003adc:	08003b09 	.word	0x08003b09
 8003ae0:	08003b1f 	.word	0x08003b1f
 8003ae4:	08003b0f 	.word	0x08003b0f
 8003ae8:	08003b1f 	.word	0x08003b1f
 8003aec:	08003b1f 	.word	0x08003b1f
 8003af0:	08003b1f 	.word	0x08003b1f
 8003af4:	08003b17 	.word	0x08003b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7fe f9d0 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8003afc:	61f8      	str	r0, [r7, #28]
        break;
 8003afe:	e014      	b.n	8003b2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7fe f9e2 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 8003b04:	61f8      	str	r0, [r7, #28]
        break;
 8003b06:	e010      	b.n	8003b2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <UART_SetConfig+0x56c>)
 8003b0a:	61fb      	str	r3, [r7, #28]
        break;
 8003b0c:	e00d      	b.n	8003b2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0e:	f7fe f92d 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8003b12:	61f8      	str	r0, [r7, #28]
        break;
 8003b14:	e009      	b.n	8003b2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1a:	61fb      	str	r3, [r7, #28]
        break;
 8003b1c:	e005      	b.n	8003b2a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b28:	bf00      	nop
    }

    if (pclk != 0U)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d019      	beq.n	8003b64 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	085a      	lsrs	r2, r3, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	441a      	add	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	d909      	bls.n	8003b5e <UART_SetConfig+0x546>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d205      	bcs.n	8003b5e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60da      	str	r2, [r3, #12]
 8003b5c:	e002      	b.n	8003b64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3728      	adds	r7, #40	; 0x28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b7e:	bf00      	nop
 8003b80:	40008000 	.word	0x40008000
 8003b84:	00f42400 	.word	0x00f42400

08003b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01a      	beq.n	8003c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c86:	d10a      	bne.n	8003c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b098      	sub	sp, #96	; 0x60
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cdc:	f7fd f852 	bl	8000d84 <HAL_GetTick>
 8003ce0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d12e      	bne.n	8003d4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f88c 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d021      	beq.n	8003d4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d28:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e6      	bne.n	8003d0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e062      	b.n	8003e14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d149      	bne.n	8003df0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d64:	2200      	movs	r2, #0
 8003d66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f856 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d03c      	beq.n	8003df0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	623b      	str	r3, [r7, #32]
   return(result);
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
 8003d96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3308      	adds	r3, #8
 8003dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc8:	61fa      	str	r2, [r7, #28]
 8003dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	69b9      	ldr	r1, [r7, #24]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e011      	b.n	8003e14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3758      	adds	r7, #88	; 0x58
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2c:	e049      	b.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d045      	beq.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e36:	f7fc ffa5 	bl	8000d84 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e048      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d031      	beq.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d110      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2208      	movs	r2, #8
 8003e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f838 	bl	8003eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e029      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e9c:	d111      	bne.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f81e 	bl	8003eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e00f      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d0a6      	beq.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b095      	sub	sp, #84	; 0x54
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f10:	643b      	str	r3, [r7, #64]	; 0x40
 8003f12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e6      	bne.n	8003ef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d118      	bne.n	8003f92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 0310 	bic.w	r3, r3, #16
 8003f74:	647b      	str	r3, [r7, #68]	; 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6979      	ldr	r1, [r7, #20]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fa6:	bf00      	nop
 8003fa8:	3754      	adds	r7, #84	; 0x54
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <std>:
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	b510      	push	{r4, lr}
 8003fb8:	4604      	mov	r4, r0
 8003fba:	e9c0 3300 	strd	r3, r3, [r0]
 8003fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fc2:	6083      	str	r3, [r0, #8]
 8003fc4:	8181      	strh	r1, [r0, #12]
 8003fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8003fc8:	81c2      	strh	r2, [r0, #14]
 8003fca:	6183      	str	r3, [r0, #24]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	2208      	movs	r2, #8
 8003fd0:	305c      	adds	r0, #92	; 0x5c
 8003fd2:	f000 f906 	bl	80041e2 <memset>
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <std+0x58>)
 8003fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <std+0x5c>)
 8003fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <std+0x60>)
 8003fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <std+0x64>)
 8003fe4:	6323      	str	r3, [r4, #48]	; 0x30
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <std+0x68>)
 8003fe8:	6224      	str	r4, [r4, #32]
 8003fea:	429c      	cmp	r4, r3
 8003fec:	d006      	beq.n	8003ffc <std+0x48>
 8003fee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003ff2:	4294      	cmp	r4, r2
 8003ff4:	d002      	beq.n	8003ffc <std+0x48>
 8003ff6:	33d0      	adds	r3, #208	; 0xd0
 8003ff8:	429c      	cmp	r4, r3
 8003ffa:	d105      	bne.n	8004008 <std+0x54>
 8003ffc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004004:	f000 b966 	b.w	80042d4 <__retarget_lock_init_recursive>
 8004008:	bd10      	pop	{r4, pc}
 800400a:	bf00      	nop
 800400c:	0800415d 	.word	0x0800415d
 8004010:	0800417f 	.word	0x0800417f
 8004014:	080041b7 	.word	0x080041b7
 8004018:	080041db 	.word	0x080041db
 800401c:	20000178 	.word	0x20000178

08004020 <stdio_exit_handler>:
 8004020:	4a02      	ldr	r2, [pc, #8]	; (800402c <stdio_exit_handler+0xc>)
 8004022:	4903      	ldr	r1, [pc, #12]	; (8004030 <stdio_exit_handler+0x10>)
 8004024:	4803      	ldr	r0, [pc, #12]	; (8004034 <stdio_exit_handler+0x14>)
 8004026:	f000 b869 	b.w	80040fc <_fwalk_sglue>
 800402a:	bf00      	nop
 800402c:	2000000c 	.word	0x2000000c
 8004030:	08004b81 	.word	0x08004b81
 8004034:	20000018 	.word	0x20000018

08004038 <cleanup_stdio>:
 8004038:	6841      	ldr	r1, [r0, #4]
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <cleanup_stdio+0x34>)
 800403c:	4299      	cmp	r1, r3
 800403e:	b510      	push	{r4, lr}
 8004040:	4604      	mov	r4, r0
 8004042:	d001      	beq.n	8004048 <cleanup_stdio+0x10>
 8004044:	f000 fd9c 	bl	8004b80 <_fflush_r>
 8004048:	68a1      	ldr	r1, [r4, #8]
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <cleanup_stdio+0x38>)
 800404c:	4299      	cmp	r1, r3
 800404e:	d002      	beq.n	8004056 <cleanup_stdio+0x1e>
 8004050:	4620      	mov	r0, r4
 8004052:	f000 fd95 	bl	8004b80 <_fflush_r>
 8004056:	68e1      	ldr	r1, [r4, #12]
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <cleanup_stdio+0x3c>)
 800405a:	4299      	cmp	r1, r3
 800405c:	d004      	beq.n	8004068 <cleanup_stdio+0x30>
 800405e:	4620      	mov	r0, r4
 8004060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004064:	f000 bd8c 	b.w	8004b80 <_fflush_r>
 8004068:	bd10      	pop	{r4, pc}
 800406a:	bf00      	nop
 800406c:	20000178 	.word	0x20000178
 8004070:	200001e0 	.word	0x200001e0
 8004074:	20000248 	.word	0x20000248

08004078 <global_stdio_init.part.0>:
 8004078:	b510      	push	{r4, lr}
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <global_stdio_init.part.0+0x30>)
 800407c:	4c0b      	ldr	r4, [pc, #44]	; (80040ac <global_stdio_init.part.0+0x34>)
 800407e:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <global_stdio_init.part.0+0x38>)
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	4620      	mov	r0, r4
 8004084:	2200      	movs	r2, #0
 8004086:	2104      	movs	r1, #4
 8004088:	f7ff ff94 	bl	8003fb4 <std>
 800408c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004090:	2201      	movs	r2, #1
 8004092:	2109      	movs	r1, #9
 8004094:	f7ff ff8e 	bl	8003fb4 <std>
 8004098:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800409c:	2202      	movs	r2, #2
 800409e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040a2:	2112      	movs	r1, #18
 80040a4:	f7ff bf86 	b.w	8003fb4 <std>
 80040a8:	200002b0 	.word	0x200002b0
 80040ac:	20000178 	.word	0x20000178
 80040b0:	08004021 	.word	0x08004021

080040b4 <__sfp_lock_acquire>:
 80040b4:	4801      	ldr	r0, [pc, #4]	; (80040bc <__sfp_lock_acquire+0x8>)
 80040b6:	f000 b90e 	b.w	80042d6 <__retarget_lock_acquire_recursive>
 80040ba:	bf00      	nop
 80040bc:	200002b9 	.word	0x200002b9

080040c0 <__sfp_lock_release>:
 80040c0:	4801      	ldr	r0, [pc, #4]	; (80040c8 <__sfp_lock_release+0x8>)
 80040c2:	f000 b909 	b.w	80042d8 <__retarget_lock_release_recursive>
 80040c6:	bf00      	nop
 80040c8:	200002b9 	.word	0x200002b9

080040cc <__sinit>:
 80040cc:	b510      	push	{r4, lr}
 80040ce:	4604      	mov	r4, r0
 80040d0:	f7ff fff0 	bl	80040b4 <__sfp_lock_acquire>
 80040d4:	6a23      	ldr	r3, [r4, #32]
 80040d6:	b11b      	cbz	r3, 80040e0 <__sinit+0x14>
 80040d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040dc:	f7ff bff0 	b.w	80040c0 <__sfp_lock_release>
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <__sinit+0x28>)
 80040e2:	6223      	str	r3, [r4, #32]
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <__sinit+0x2c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f5      	bne.n	80040d8 <__sinit+0xc>
 80040ec:	f7ff ffc4 	bl	8004078 <global_stdio_init.part.0>
 80040f0:	e7f2      	b.n	80040d8 <__sinit+0xc>
 80040f2:	bf00      	nop
 80040f4:	08004039 	.word	0x08004039
 80040f8:	200002b0 	.word	0x200002b0

080040fc <_fwalk_sglue>:
 80040fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004100:	4607      	mov	r7, r0
 8004102:	4688      	mov	r8, r1
 8004104:	4614      	mov	r4, r2
 8004106:	2600      	movs	r6, #0
 8004108:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800410c:	f1b9 0901 	subs.w	r9, r9, #1
 8004110:	d505      	bpl.n	800411e <_fwalk_sglue+0x22>
 8004112:	6824      	ldr	r4, [r4, #0]
 8004114:	2c00      	cmp	r4, #0
 8004116:	d1f7      	bne.n	8004108 <_fwalk_sglue+0xc>
 8004118:	4630      	mov	r0, r6
 800411a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800411e:	89ab      	ldrh	r3, [r5, #12]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d907      	bls.n	8004134 <_fwalk_sglue+0x38>
 8004124:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004128:	3301      	adds	r3, #1
 800412a:	d003      	beq.n	8004134 <_fwalk_sglue+0x38>
 800412c:	4629      	mov	r1, r5
 800412e:	4638      	mov	r0, r7
 8004130:	47c0      	blx	r8
 8004132:	4306      	orrs	r6, r0
 8004134:	3568      	adds	r5, #104	; 0x68
 8004136:	e7e9      	b.n	800410c <_fwalk_sglue+0x10>

08004138 <iprintf>:
 8004138:	b40f      	push	{r0, r1, r2, r3}
 800413a:	b507      	push	{r0, r1, r2, lr}
 800413c:	4906      	ldr	r1, [pc, #24]	; (8004158 <iprintf+0x20>)
 800413e:	ab04      	add	r3, sp, #16
 8004140:	6808      	ldr	r0, [r1, #0]
 8004142:	f853 2b04 	ldr.w	r2, [r3], #4
 8004146:	6881      	ldr	r1, [r0, #8]
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	f000 f9e9 	bl	8004520 <_vfiprintf_r>
 800414e:	b003      	add	sp, #12
 8004150:	f85d eb04 	ldr.w	lr, [sp], #4
 8004154:	b004      	add	sp, #16
 8004156:	4770      	bx	lr
 8004158:	20000064 	.word	0x20000064

0800415c <__sread>:
 800415c:	b510      	push	{r4, lr}
 800415e:	460c      	mov	r4, r1
 8004160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004164:	f000 f868 	bl	8004238 <_read_r>
 8004168:	2800      	cmp	r0, #0
 800416a:	bfab      	itete	ge
 800416c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800416e:	89a3      	ldrhlt	r3, [r4, #12]
 8004170:	181b      	addge	r3, r3, r0
 8004172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004176:	bfac      	ite	ge
 8004178:	6563      	strge	r3, [r4, #84]	; 0x54
 800417a:	81a3      	strhlt	r3, [r4, #12]
 800417c:	bd10      	pop	{r4, pc}

0800417e <__swrite>:
 800417e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004182:	461f      	mov	r7, r3
 8004184:	898b      	ldrh	r3, [r1, #12]
 8004186:	05db      	lsls	r3, r3, #23
 8004188:	4605      	mov	r5, r0
 800418a:	460c      	mov	r4, r1
 800418c:	4616      	mov	r6, r2
 800418e:	d505      	bpl.n	800419c <__swrite+0x1e>
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	2302      	movs	r3, #2
 8004196:	2200      	movs	r2, #0
 8004198:	f000 f83c 	bl	8004214 <_lseek_r>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	4632      	mov	r2, r6
 80041aa:	463b      	mov	r3, r7
 80041ac:	4628      	mov	r0, r5
 80041ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	f000 b853 	b.w	800425c <_write_r>

080041b6 <__sseek>:
 80041b6:	b510      	push	{r4, lr}
 80041b8:	460c      	mov	r4, r1
 80041ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041be:	f000 f829 	bl	8004214 <_lseek_r>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	bf15      	itete	ne
 80041c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80041ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041d2:	81a3      	strheq	r3, [r4, #12]
 80041d4:	bf18      	it	ne
 80041d6:	81a3      	strhne	r3, [r4, #12]
 80041d8:	bd10      	pop	{r4, pc}

080041da <__sclose>:
 80041da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041de:	f000 b809 	b.w	80041f4 <_close_r>

080041e2 <memset>:
 80041e2:	4402      	add	r2, r0
 80041e4:	4603      	mov	r3, r0
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d100      	bne.n	80041ec <memset+0xa>
 80041ea:	4770      	bx	lr
 80041ec:	f803 1b01 	strb.w	r1, [r3], #1
 80041f0:	e7f9      	b.n	80041e6 <memset+0x4>
	...

080041f4 <_close_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4d06      	ldr	r5, [pc, #24]	; (8004210 <_close_r+0x1c>)
 80041f8:	2300      	movs	r3, #0
 80041fa:	4604      	mov	r4, r0
 80041fc:	4608      	mov	r0, r1
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	f7fc fcb1 	bl	8000b66 <_close>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_close_r+0x1a>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_close_r+0x1a>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	200002b4 	.word	0x200002b4

08004214 <_lseek_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4d07      	ldr	r5, [pc, #28]	; (8004234 <_lseek_r+0x20>)
 8004218:	4604      	mov	r4, r0
 800421a:	4608      	mov	r0, r1
 800421c:	4611      	mov	r1, r2
 800421e:	2200      	movs	r2, #0
 8004220:	602a      	str	r2, [r5, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fc fcc6 	bl	8000bb4 <_lseek>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_lseek_r+0x1e>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_lseek_r+0x1e>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	200002b4 	.word	0x200002b4

08004238 <_read_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4d07      	ldr	r5, [pc, #28]	; (8004258 <_read_r+0x20>)
 800423c:	4604      	mov	r4, r0
 800423e:	4608      	mov	r0, r1
 8004240:	4611      	mov	r1, r2
 8004242:	2200      	movs	r2, #0
 8004244:	602a      	str	r2, [r5, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	f7fc fc54 	bl	8000af4 <_read>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_read_r+0x1e>
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	b103      	cbz	r3, 8004256 <_read_r+0x1e>
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	200002b4 	.word	0x200002b4

0800425c <_write_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4d07      	ldr	r5, [pc, #28]	; (800427c <_write_r+0x20>)
 8004260:	4604      	mov	r4, r0
 8004262:	4608      	mov	r0, r1
 8004264:	4611      	mov	r1, r2
 8004266:	2200      	movs	r2, #0
 8004268:	602a      	str	r2, [r5, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	f7fc fc5f 	bl	8000b2e <_write>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	d102      	bne.n	800427a <_write_r+0x1e>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	b103      	cbz	r3, 800427a <_write_r+0x1e>
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	200002b4 	.word	0x200002b4

08004280 <__errno>:
 8004280:	4b01      	ldr	r3, [pc, #4]	; (8004288 <__errno+0x8>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000064 	.word	0x20000064

0800428c <__libc_init_array>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	4d0d      	ldr	r5, [pc, #52]	; (80042c4 <__libc_init_array+0x38>)
 8004290:	4c0d      	ldr	r4, [pc, #52]	; (80042c8 <__libc_init_array+0x3c>)
 8004292:	1b64      	subs	r4, r4, r5
 8004294:	10a4      	asrs	r4, r4, #2
 8004296:	2600      	movs	r6, #0
 8004298:	42a6      	cmp	r6, r4
 800429a:	d109      	bne.n	80042b0 <__libc_init_array+0x24>
 800429c:	4d0b      	ldr	r5, [pc, #44]	; (80042cc <__libc_init_array+0x40>)
 800429e:	4c0c      	ldr	r4, [pc, #48]	; (80042d0 <__libc_init_array+0x44>)
 80042a0:	f000 fdc0 	bl	8004e24 <_init>
 80042a4:	1b64      	subs	r4, r4, r5
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	2600      	movs	r6, #0
 80042aa:	42a6      	cmp	r6, r4
 80042ac:	d105      	bne.n	80042ba <__libc_init_array+0x2e>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b4:	4798      	blx	r3
 80042b6:	3601      	adds	r6, #1
 80042b8:	e7ee      	b.n	8004298 <__libc_init_array+0xc>
 80042ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80042be:	4798      	blx	r3
 80042c0:	3601      	adds	r6, #1
 80042c2:	e7f2      	b.n	80042aa <__libc_init_array+0x1e>
 80042c4:	08004ed8 	.word	0x08004ed8
 80042c8:	08004ed8 	.word	0x08004ed8
 80042cc:	08004ed8 	.word	0x08004ed8
 80042d0:	08004edc 	.word	0x08004edc

080042d4 <__retarget_lock_init_recursive>:
 80042d4:	4770      	bx	lr

080042d6 <__retarget_lock_acquire_recursive>:
 80042d6:	4770      	bx	lr

080042d8 <__retarget_lock_release_recursive>:
 80042d8:	4770      	bx	lr
	...

080042dc <_free_r>:
 80042dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042de:	2900      	cmp	r1, #0
 80042e0:	d044      	beq.n	800436c <_free_r+0x90>
 80042e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e6:	9001      	str	r0, [sp, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f1a1 0404 	sub.w	r4, r1, #4
 80042ee:	bfb8      	it	lt
 80042f0:	18e4      	addlt	r4, r4, r3
 80042f2:	f000 f8df 	bl	80044b4 <__malloc_lock>
 80042f6:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <_free_r+0x94>)
 80042f8:	9801      	ldr	r0, [sp, #4]
 80042fa:	6813      	ldr	r3, [r2, #0]
 80042fc:	b933      	cbnz	r3, 800430c <_free_r+0x30>
 80042fe:	6063      	str	r3, [r4, #4]
 8004300:	6014      	str	r4, [r2, #0]
 8004302:	b003      	add	sp, #12
 8004304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004308:	f000 b8da 	b.w	80044c0 <__malloc_unlock>
 800430c:	42a3      	cmp	r3, r4
 800430e:	d908      	bls.n	8004322 <_free_r+0x46>
 8004310:	6825      	ldr	r5, [r4, #0]
 8004312:	1961      	adds	r1, r4, r5
 8004314:	428b      	cmp	r3, r1
 8004316:	bf01      	itttt	eq
 8004318:	6819      	ldreq	r1, [r3, #0]
 800431a:	685b      	ldreq	r3, [r3, #4]
 800431c:	1949      	addeq	r1, r1, r5
 800431e:	6021      	streq	r1, [r4, #0]
 8004320:	e7ed      	b.n	80042fe <_free_r+0x22>
 8004322:	461a      	mov	r2, r3
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	b10b      	cbz	r3, 800432c <_free_r+0x50>
 8004328:	42a3      	cmp	r3, r4
 800432a:	d9fa      	bls.n	8004322 <_free_r+0x46>
 800432c:	6811      	ldr	r1, [r2, #0]
 800432e:	1855      	adds	r5, r2, r1
 8004330:	42a5      	cmp	r5, r4
 8004332:	d10b      	bne.n	800434c <_free_r+0x70>
 8004334:	6824      	ldr	r4, [r4, #0]
 8004336:	4421      	add	r1, r4
 8004338:	1854      	adds	r4, r2, r1
 800433a:	42a3      	cmp	r3, r4
 800433c:	6011      	str	r1, [r2, #0]
 800433e:	d1e0      	bne.n	8004302 <_free_r+0x26>
 8004340:	681c      	ldr	r4, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	6053      	str	r3, [r2, #4]
 8004346:	440c      	add	r4, r1
 8004348:	6014      	str	r4, [r2, #0]
 800434a:	e7da      	b.n	8004302 <_free_r+0x26>
 800434c:	d902      	bls.n	8004354 <_free_r+0x78>
 800434e:	230c      	movs	r3, #12
 8004350:	6003      	str	r3, [r0, #0]
 8004352:	e7d6      	b.n	8004302 <_free_r+0x26>
 8004354:	6825      	ldr	r5, [r4, #0]
 8004356:	1961      	adds	r1, r4, r5
 8004358:	428b      	cmp	r3, r1
 800435a:	bf04      	itt	eq
 800435c:	6819      	ldreq	r1, [r3, #0]
 800435e:	685b      	ldreq	r3, [r3, #4]
 8004360:	6063      	str	r3, [r4, #4]
 8004362:	bf04      	itt	eq
 8004364:	1949      	addeq	r1, r1, r5
 8004366:	6021      	streq	r1, [r4, #0]
 8004368:	6054      	str	r4, [r2, #4]
 800436a:	e7ca      	b.n	8004302 <_free_r+0x26>
 800436c:	b003      	add	sp, #12
 800436e:	bd30      	pop	{r4, r5, pc}
 8004370:	200002bc 	.word	0x200002bc

08004374 <sbrk_aligned>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4e0e      	ldr	r6, [pc, #56]	; (80043b0 <sbrk_aligned+0x3c>)
 8004378:	460c      	mov	r4, r1
 800437a:	6831      	ldr	r1, [r6, #0]
 800437c:	4605      	mov	r5, r0
 800437e:	b911      	cbnz	r1, 8004386 <sbrk_aligned+0x12>
 8004380:	f000 fcbc 	bl	8004cfc <_sbrk_r>
 8004384:	6030      	str	r0, [r6, #0]
 8004386:	4621      	mov	r1, r4
 8004388:	4628      	mov	r0, r5
 800438a:	f000 fcb7 	bl	8004cfc <_sbrk_r>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d00a      	beq.n	80043a8 <sbrk_aligned+0x34>
 8004392:	1cc4      	adds	r4, r0, #3
 8004394:	f024 0403 	bic.w	r4, r4, #3
 8004398:	42a0      	cmp	r0, r4
 800439a:	d007      	beq.n	80043ac <sbrk_aligned+0x38>
 800439c:	1a21      	subs	r1, r4, r0
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 fcac 	bl	8004cfc <_sbrk_r>
 80043a4:	3001      	adds	r0, #1
 80043a6:	d101      	bne.n	80043ac <sbrk_aligned+0x38>
 80043a8:	f04f 34ff 	mov.w	r4, #4294967295
 80043ac:	4620      	mov	r0, r4
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	200002c0 	.word	0x200002c0

080043b4 <_malloc_r>:
 80043b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043b8:	1ccd      	adds	r5, r1, #3
 80043ba:	f025 0503 	bic.w	r5, r5, #3
 80043be:	3508      	adds	r5, #8
 80043c0:	2d0c      	cmp	r5, #12
 80043c2:	bf38      	it	cc
 80043c4:	250c      	movcc	r5, #12
 80043c6:	2d00      	cmp	r5, #0
 80043c8:	4607      	mov	r7, r0
 80043ca:	db01      	blt.n	80043d0 <_malloc_r+0x1c>
 80043cc:	42a9      	cmp	r1, r5
 80043ce:	d905      	bls.n	80043dc <_malloc_r+0x28>
 80043d0:	230c      	movs	r3, #12
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	2600      	movs	r6, #0
 80043d6:	4630      	mov	r0, r6
 80043d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044b0 <_malloc_r+0xfc>
 80043e0:	f000 f868 	bl	80044b4 <__malloc_lock>
 80043e4:	f8d8 3000 	ldr.w	r3, [r8]
 80043e8:	461c      	mov	r4, r3
 80043ea:	bb5c      	cbnz	r4, 8004444 <_malloc_r+0x90>
 80043ec:	4629      	mov	r1, r5
 80043ee:	4638      	mov	r0, r7
 80043f0:	f7ff ffc0 	bl	8004374 <sbrk_aligned>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	4604      	mov	r4, r0
 80043f8:	d155      	bne.n	80044a6 <_malloc_r+0xf2>
 80043fa:	f8d8 4000 	ldr.w	r4, [r8]
 80043fe:	4626      	mov	r6, r4
 8004400:	2e00      	cmp	r6, #0
 8004402:	d145      	bne.n	8004490 <_malloc_r+0xdc>
 8004404:	2c00      	cmp	r4, #0
 8004406:	d048      	beq.n	800449a <_malloc_r+0xe6>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	4631      	mov	r1, r6
 800440c:	4638      	mov	r0, r7
 800440e:	eb04 0903 	add.w	r9, r4, r3
 8004412:	f000 fc73 	bl	8004cfc <_sbrk_r>
 8004416:	4581      	cmp	r9, r0
 8004418:	d13f      	bne.n	800449a <_malloc_r+0xe6>
 800441a:	6821      	ldr	r1, [r4, #0]
 800441c:	1a6d      	subs	r5, r5, r1
 800441e:	4629      	mov	r1, r5
 8004420:	4638      	mov	r0, r7
 8004422:	f7ff ffa7 	bl	8004374 <sbrk_aligned>
 8004426:	3001      	adds	r0, #1
 8004428:	d037      	beq.n	800449a <_malloc_r+0xe6>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	442b      	add	r3, r5
 800442e:	6023      	str	r3, [r4, #0]
 8004430:	f8d8 3000 	ldr.w	r3, [r8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d038      	beq.n	80044aa <_malloc_r+0xf6>
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	42a2      	cmp	r2, r4
 800443c:	d12b      	bne.n	8004496 <_malloc_r+0xe2>
 800443e:	2200      	movs	r2, #0
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	e00f      	b.n	8004464 <_malloc_r+0xb0>
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	1b52      	subs	r2, r2, r5
 8004448:	d41f      	bmi.n	800448a <_malloc_r+0xd6>
 800444a:	2a0b      	cmp	r2, #11
 800444c:	d917      	bls.n	800447e <_malloc_r+0xca>
 800444e:	1961      	adds	r1, r4, r5
 8004450:	42a3      	cmp	r3, r4
 8004452:	6025      	str	r5, [r4, #0]
 8004454:	bf18      	it	ne
 8004456:	6059      	strne	r1, [r3, #4]
 8004458:	6863      	ldr	r3, [r4, #4]
 800445a:	bf08      	it	eq
 800445c:	f8c8 1000 	streq.w	r1, [r8]
 8004460:	5162      	str	r2, [r4, r5]
 8004462:	604b      	str	r3, [r1, #4]
 8004464:	4638      	mov	r0, r7
 8004466:	f104 060b 	add.w	r6, r4, #11
 800446a:	f000 f829 	bl	80044c0 <__malloc_unlock>
 800446e:	f026 0607 	bic.w	r6, r6, #7
 8004472:	1d23      	adds	r3, r4, #4
 8004474:	1af2      	subs	r2, r6, r3
 8004476:	d0ae      	beq.n	80043d6 <_malloc_r+0x22>
 8004478:	1b9b      	subs	r3, r3, r6
 800447a:	50a3      	str	r3, [r4, r2]
 800447c:	e7ab      	b.n	80043d6 <_malloc_r+0x22>
 800447e:	42a3      	cmp	r3, r4
 8004480:	6862      	ldr	r2, [r4, #4]
 8004482:	d1dd      	bne.n	8004440 <_malloc_r+0x8c>
 8004484:	f8c8 2000 	str.w	r2, [r8]
 8004488:	e7ec      	b.n	8004464 <_malloc_r+0xb0>
 800448a:	4623      	mov	r3, r4
 800448c:	6864      	ldr	r4, [r4, #4]
 800448e:	e7ac      	b.n	80043ea <_malloc_r+0x36>
 8004490:	4634      	mov	r4, r6
 8004492:	6876      	ldr	r6, [r6, #4]
 8004494:	e7b4      	b.n	8004400 <_malloc_r+0x4c>
 8004496:	4613      	mov	r3, r2
 8004498:	e7cc      	b.n	8004434 <_malloc_r+0x80>
 800449a:	230c      	movs	r3, #12
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4638      	mov	r0, r7
 80044a0:	f000 f80e 	bl	80044c0 <__malloc_unlock>
 80044a4:	e797      	b.n	80043d6 <_malloc_r+0x22>
 80044a6:	6025      	str	r5, [r4, #0]
 80044a8:	e7dc      	b.n	8004464 <_malloc_r+0xb0>
 80044aa:	605b      	str	r3, [r3, #4]
 80044ac:	deff      	udf	#255	; 0xff
 80044ae:	bf00      	nop
 80044b0:	200002bc 	.word	0x200002bc

080044b4 <__malloc_lock>:
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <__malloc_lock+0x8>)
 80044b6:	f7ff bf0e 	b.w	80042d6 <__retarget_lock_acquire_recursive>
 80044ba:	bf00      	nop
 80044bc:	200002b8 	.word	0x200002b8

080044c0 <__malloc_unlock>:
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <__malloc_unlock+0x8>)
 80044c2:	f7ff bf09 	b.w	80042d8 <__retarget_lock_release_recursive>
 80044c6:	bf00      	nop
 80044c8:	200002b8 	.word	0x200002b8

080044cc <__sfputc_r>:
 80044cc:	6893      	ldr	r3, [r2, #8]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	b410      	push	{r4}
 80044d4:	6093      	str	r3, [r2, #8]
 80044d6:	da08      	bge.n	80044ea <__sfputc_r+0x1e>
 80044d8:	6994      	ldr	r4, [r2, #24]
 80044da:	42a3      	cmp	r3, r4
 80044dc:	db01      	blt.n	80044e2 <__sfputc_r+0x16>
 80044de:	290a      	cmp	r1, #10
 80044e0:	d103      	bne.n	80044ea <__sfputc_r+0x1e>
 80044e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044e6:	f000 bb73 	b.w	8004bd0 <__swbuf_r>
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	1c58      	adds	r0, r3, #1
 80044ee:	6010      	str	r0, [r2, #0]
 80044f0:	7019      	strb	r1, [r3, #0]
 80044f2:	4608      	mov	r0, r1
 80044f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <__sfputs_r>:
 80044fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fc:	4606      	mov	r6, r0
 80044fe:	460f      	mov	r7, r1
 8004500:	4614      	mov	r4, r2
 8004502:	18d5      	adds	r5, r2, r3
 8004504:	42ac      	cmp	r4, r5
 8004506:	d101      	bne.n	800450c <__sfputs_r+0x12>
 8004508:	2000      	movs	r0, #0
 800450a:	e007      	b.n	800451c <__sfputs_r+0x22>
 800450c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004510:	463a      	mov	r2, r7
 8004512:	4630      	mov	r0, r6
 8004514:	f7ff ffda 	bl	80044cc <__sfputc_r>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d1f3      	bne.n	8004504 <__sfputs_r+0xa>
 800451c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004520 <_vfiprintf_r>:
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	460d      	mov	r5, r1
 8004526:	b09d      	sub	sp, #116	; 0x74
 8004528:	4614      	mov	r4, r2
 800452a:	4698      	mov	r8, r3
 800452c:	4606      	mov	r6, r0
 800452e:	b118      	cbz	r0, 8004538 <_vfiprintf_r+0x18>
 8004530:	6a03      	ldr	r3, [r0, #32]
 8004532:	b90b      	cbnz	r3, 8004538 <_vfiprintf_r+0x18>
 8004534:	f7ff fdca 	bl	80040cc <__sinit>
 8004538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800453a:	07d9      	lsls	r1, r3, #31
 800453c:	d405      	bmi.n	800454a <_vfiprintf_r+0x2a>
 800453e:	89ab      	ldrh	r3, [r5, #12]
 8004540:	059a      	lsls	r2, r3, #22
 8004542:	d402      	bmi.n	800454a <_vfiprintf_r+0x2a>
 8004544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004546:	f7ff fec6 	bl	80042d6 <__retarget_lock_acquire_recursive>
 800454a:	89ab      	ldrh	r3, [r5, #12]
 800454c:	071b      	lsls	r3, r3, #28
 800454e:	d501      	bpl.n	8004554 <_vfiprintf_r+0x34>
 8004550:	692b      	ldr	r3, [r5, #16]
 8004552:	b99b      	cbnz	r3, 800457c <_vfiprintf_r+0x5c>
 8004554:	4629      	mov	r1, r5
 8004556:	4630      	mov	r0, r6
 8004558:	f000 fb78 	bl	8004c4c <__swsetup_r>
 800455c:	b170      	cbz	r0, 800457c <_vfiprintf_r+0x5c>
 800455e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004560:	07dc      	lsls	r4, r3, #31
 8004562:	d504      	bpl.n	800456e <_vfiprintf_r+0x4e>
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	b01d      	add	sp, #116	; 0x74
 800456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456e:	89ab      	ldrh	r3, [r5, #12]
 8004570:	0598      	lsls	r0, r3, #22
 8004572:	d4f7      	bmi.n	8004564 <_vfiprintf_r+0x44>
 8004574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004576:	f7ff feaf 	bl	80042d8 <__retarget_lock_release_recursive>
 800457a:	e7f3      	b.n	8004564 <_vfiprintf_r+0x44>
 800457c:	2300      	movs	r3, #0
 800457e:	9309      	str	r3, [sp, #36]	; 0x24
 8004580:	2320      	movs	r3, #32
 8004582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004586:	f8cd 800c 	str.w	r8, [sp, #12]
 800458a:	2330      	movs	r3, #48	; 0x30
 800458c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004740 <_vfiprintf_r+0x220>
 8004590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004594:	f04f 0901 	mov.w	r9, #1
 8004598:	4623      	mov	r3, r4
 800459a:	469a      	mov	sl, r3
 800459c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045a0:	b10a      	cbz	r2, 80045a6 <_vfiprintf_r+0x86>
 80045a2:	2a25      	cmp	r2, #37	; 0x25
 80045a4:	d1f9      	bne.n	800459a <_vfiprintf_r+0x7a>
 80045a6:	ebba 0b04 	subs.w	fp, sl, r4
 80045aa:	d00b      	beq.n	80045c4 <_vfiprintf_r+0xa4>
 80045ac:	465b      	mov	r3, fp
 80045ae:	4622      	mov	r2, r4
 80045b0:	4629      	mov	r1, r5
 80045b2:	4630      	mov	r0, r6
 80045b4:	f7ff ffa1 	bl	80044fa <__sfputs_r>
 80045b8:	3001      	adds	r0, #1
 80045ba:	f000 80a9 	beq.w	8004710 <_vfiprintf_r+0x1f0>
 80045be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045c0:	445a      	add	r2, fp
 80045c2:	9209      	str	r2, [sp, #36]	; 0x24
 80045c4:	f89a 3000 	ldrb.w	r3, [sl]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80a1 	beq.w	8004710 <_vfiprintf_r+0x1f0>
 80045ce:	2300      	movs	r3, #0
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045d8:	f10a 0a01 	add.w	sl, sl, #1
 80045dc:	9304      	str	r3, [sp, #16]
 80045de:	9307      	str	r3, [sp, #28]
 80045e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045e4:	931a      	str	r3, [sp, #104]	; 0x68
 80045e6:	4654      	mov	r4, sl
 80045e8:	2205      	movs	r2, #5
 80045ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ee:	4854      	ldr	r0, [pc, #336]	; (8004740 <_vfiprintf_r+0x220>)
 80045f0:	f7fb fdee 	bl	80001d0 <memchr>
 80045f4:	9a04      	ldr	r2, [sp, #16]
 80045f6:	b9d8      	cbnz	r0, 8004630 <_vfiprintf_r+0x110>
 80045f8:	06d1      	lsls	r1, r2, #27
 80045fa:	bf44      	itt	mi
 80045fc:	2320      	movmi	r3, #32
 80045fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004602:	0713      	lsls	r3, r2, #28
 8004604:	bf44      	itt	mi
 8004606:	232b      	movmi	r3, #43	; 0x2b
 8004608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800460c:	f89a 3000 	ldrb.w	r3, [sl]
 8004610:	2b2a      	cmp	r3, #42	; 0x2a
 8004612:	d015      	beq.n	8004640 <_vfiprintf_r+0x120>
 8004614:	9a07      	ldr	r2, [sp, #28]
 8004616:	4654      	mov	r4, sl
 8004618:	2000      	movs	r0, #0
 800461a:	f04f 0c0a 	mov.w	ip, #10
 800461e:	4621      	mov	r1, r4
 8004620:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004624:	3b30      	subs	r3, #48	; 0x30
 8004626:	2b09      	cmp	r3, #9
 8004628:	d94d      	bls.n	80046c6 <_vfiprintf_r+0x1a6>
 800462a:	b1b0      	cbz	r0, 800465a <_vfiprintf_r+0x13a>
 800462c:	9207      	str	r2, [sp, #28]
 800462e:	e014      	b.n	800465a <_vfiprintf_r+0x13a>
 8004630:	eba0 0308 	sub.w	r3, r0, r8
 8004634:	fa09 f303 	lsl.w	r3, r9, r3
 8004638:	4313      	orrs	r3, r2
 800463a:	9304      	str	r3, [sp, #16]
 800463c:	46a2      	mov	sl, r4
 800463e:	e7d2      	b.n	80045e6 <_vfiprintf_r+0xc6>
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	1d19      	adds	r1, r3, #4
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	9103      	str	r1, [sp, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	bfbb      	ittet	lt
 800464c:	425b      	neglt	r3, r3
 800464e:	f042 0202 	orrlt.w	r2, r2, #2
 8004652:	9307      	strge	r3, [sp, #28]
 8004654:	9307      	strlt	r3, [sp, #28]
 8004656:	bfb8      	it	lt
 8004658:	9204      	strlt	r2, [sp, #16]
 800465a:	7823      	ldrb	r3, [r4, #0]
 800465c:	2b2e      	cmp	r3, #46	; 0x2e
 800465e:	d10c      	bne.n	800467a <_vfiprintf_r+0x15a>
 8004660:	7863      	ldrb	r3, [r4, #1]
 8004662:	2b2a      	cmp	r3, #42	; 0x2a
 8004664:	d134      	bne.n	80046d0 <_vfiprintf_r+0x1b0>
 8004666:	9b03      	ldr	r3, [sp, #12]
 8004668:	1d1a      	adds	r2, r3, #4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	9203      	str	r2, [sp, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	bfb8      	it	lt
 8004672:	f04f 33ff 	movlt.w	r3, #4294967295
 8004676:	3402      	adds	r4, #2
 8004678:	9305      	str	r3, [sp, #20]
 800467a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004750 <_vfiprintf_r+0x230>
 800467e:	7821      	ldrb	r1, [r4, #0]
 8004680:	2203      	movs	r2, #3
 8004682:	4650      	mov	r0, sl
 8004684:	f7fb fda4 	bl	80001d0 <memchr>
 8004688:	b138      	cbz	r0, 800469a <_vfiprintf_r+0x17a>
 800468a:	9b04      	ldr	r3, [sp, #16]
 800468c:	eba0 000a 	sub.w	r0, r0, sl
 8004690:	2240      	movs	r2, #64	; 0x40
 8004692:	4082      	lsls	r2, r0
 8004694:	4313      	orrs	r3, r2
 8004696:	3401      	adds	r4, #1
 8004698:	9304      	str	r3, [sp, #16]
 800469a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800469e:	4829      	ldr	r0, [pc, #164]	; (8004744 <_vfiprintf_r+0x224>)
 80046a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046a4:	2206      	movs	r2, #6
 80046a6:	f7fb fd93 	bl	80001d0 <memchr>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d03f      	beq.n	800472e <_vfiprintf_r+0x20e>
 80046ae:	4b26      	ldr	r3, [pc, #152]	; (8004748 <_vfiprintf_r+0x228>)
 80046b0:	bb1b      	cbnz	r3, 80046fa <_vfiprintf_r+0x1da>
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	3307      	adds	r3, #7
 80046b6:	f023 0307 	bic.w	r3, r3, #7
 80046ba:	3308      	adds	r3, #8
 80046bc:	9303      	str	r3, [sp, #12]
 80046be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c0:	443b      	add	r3, r7
 80046c2:	9309      	str	r3, [sp, #36]	; 0x24
 80046c4:	e768      	b.n	8004598 <_vfiprintf_r+0x78>
 80046c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80046ca:	460c      	mov	r4, r1
 80046cc:	2001      	movs	r0, #1
 80046ce:	e7a6      	b.n	800461e <_vfiprintf_r+0xfe>
 80046d0:	2300      	movs	r3, #0
 80046d2:	3401      	adds	r4, #1
 80046d4:	9305      	str	r3, [sp, #20]
 80046d6:	4619      	mov	r1, r3
 80046d8:	f04f 0c0a 	mov.w	ip, #10
 80046dc:	4620      	mov	r0, r4
 80046de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e2:	3a30      	subs	r2, #48	; 0x30
 80046e4:	2a09      	cmp	r2, #9
 80046e6:	d903      	bls.n	80046f0 <_vfiprintf_r+0x1d0>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0c6      	beq.n	800467a <_vfiprintf_r+0x15a>
 80046ec:	9105      	str	r1, [sp, #20]
 80046ee:	e7c4      	b.n	800467a <_vfiprintf_r+0x15a>
 80046f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80046f4:	4604      	mov	r4, r0
 80046f6:	2301      	movs	r3, #1
 80046f8:	e7f0      	b.n	80046dc <_vfiprintf_r+0x1bc>
 80046fa:	ab03      	add	r3, sp, #12
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	462a      	mov	r2, r5
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <_vfiprintf_r+0x22c>)
 8004702:	a904      	add	r1, sp, #16
 8004704:	4630      	mov	r0, r6
 8004706:	f3af 8000 	nop.w
 800470a:	4607      	mov	r7, r0
 800470c:	1c78      	adds	r0, r7, #1
 800470e:	d1d6      	bne.n	80046be <_vfiprintf_r+0x19e>
 8004710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004712:	07d9      	lsls	r1, r3, #31
 8004714:	d405      	bmi.n	8004722 <_vfiprintf_r+0x202>
 8004716:	89ab      	ldrh	r3, [r5, #12]
 8004718:	059a      	lsls	r2, r3, #22
 800471a:	d402      	bmi.n	8004722 <_vfiprintf_r+0x202>
 800471c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800471e:	f7ff fddb 	bl	80042d8 <__retarget_lock_release_recursive>
 8004722:	89ab      	ldrh	r3, [r5, #12]
 8004724:	065b      	lsls	r3, r3, #25
 8004726:	f53f af1d 	bmi.w	8004564 <_vfiprintf_r+0x44>
 800472a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800472c:	e71c      	b.n	8004568 <_vfiprintf_r+0x48>
 800472e:	ab03      	add	r3, sp, #12
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	462a      	mov	r2, r5
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <_vfiprintf_r+0x22c>)
 8004736:	a904      	add	r1, sp, #16
 8004738:	4630      	mov	r0, r6
 800473a:	f000 f879 	bl	8004830 <_printf_i>
 800473e:	e7e4      	b.n	800470a <_vfiprintf_r+0x1ea>
 8004740:	08004e9c 	.word	0x08004e9c
 8004744:	08004ea6 	.word	0x08004ea6
 8004748:	00000000 	.word	0x00000000
 800474c:	080044fb 	.word	0x080044fb
 8004750:	08004ea2 	.word	0x08004ea2

08004754 <_printf_common>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	4616      	mov	r6, r2
 800475a:	4699      	mov	r9, r3
 800475c:	688a      	ldr	r2, [r1, #8]
 800475e:	690b      	ldr	r3, [r1, #16]
 8004760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004764:	4293      	cmp	r3, r2
 8004766:	bfb8      	it	lt
 8004768:	4613      	movlt	r3, r2
 800476a:	6033      	str	r3, [r6, #0]
 800476c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004770:	4607      	mov	r7, r0
 8004772:	460c      	mov	r4, r1
 8004774:	b10a      	cbz	r2, 800477a <_printf_common+0x26>
 8004776:	3301      	adds	r3, #1
 8004778:	6033      	str	r3, [r6, #0]
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	0699      	lsls	r1, r3, #26
 800477e:	bf42      	ittt	mi
 8004780:	6833      	ldrmi	r3, [r6, #0]
 8004782:	3302      	addmi	r3, #2
 8004784:	6033      	strmi	r3, [r6, #0]
 8004786:	6825      	ldr	r5, [r4, #0]
 8004788:	f015 0506 	ands.w	r5, r5, #6
 800478c:	d106      	bne.n	800479c <_printf_common+0x48>
 800478e:	f104 0a19 	add.w	sl, r4, #25
 8004792:	68e3      	ldr	r3, [r4, #12]
 8004794:	6832      	ldr	r2, [r6, #0]
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	42ab      	cmp	r3, r5
 800479a:	dc26      	bgt.n	80047ea <_printf_common+0x96>
 800479c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a0:	1e13      	subs	r3, r2, #0
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	bf18      	it	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	0692      	lsls	r2, r2, #26
 80047aa:	d42b      	bmi.n	8004804 <_printf_common+0xb0>
 80047ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b0:	4649      	mov	r1, r9
 80047b2:	4638      	mov	r0, r7
 80047b4:	47c0      	blx	r8
 80047b6:	3001      	adds	r0, #1
 80047b8:	d01e      	beq.n	80047f8 <_printf_common+0xa4>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	6922      	ldr	r2, [r4, #16]
 80047be:	f003 0306 	and.w	r3, r3, #6
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	bf02      	ittt	eq
 80047c6:	68e5      	ldreq	r5, [r4, #12]
 80047c8:	6833      	ldreq	r3, [r6, #0]
 80047ca:	1aed      	subeq	r5, r5, r3
 80047cc:	68a3      	ldr	r3, [r4, #8]
 80047ce:	bf0c      	ite	eq
 80047d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d4:	2500      	movne	r5, #0
 80047d6:	4293      	cmp	r3, r2
 80047d8:	bfc4      	itt	gt
 80047da:	1a9b      	subgt	r3, r3, r2
 80047dc:	18ed      	addgt	r5, r5, r3
 80047de:	2600      	movs	r6, #0
 80047e0:	341a      	adds	r4, #26
 80047e2:	42b5      	cmp	r5, r6
 80047e4:	d11a      	bne.n	800481c <_printf_common+0xc8>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e008      	b.n	80047fc <_printf_common+0xa8>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4652      	mov	r2, sl
 80047ee:	4649      	mov	r1, r9
 80047f0:	4638      	mov	r0, r7
 80047f2:	47c0      	blx	r8
 80047f4:	3001      	adds	r0, #1
 80047f6:	d103      	bne.n	8004800 <_printf_common+0xac>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	3501      	adds	r5, #1
 8004802:	e7c6      	b.n	8004792 <_printf_common+0x3e>
 8004804:	18e1      	adds	r1, r4, r3
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	2030      	movs	r0, #48	; 0x30
 800480a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800480e:	4422      	add	r2, r4
 8004810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004818:	3302      	adds	r3, #2
 800481a:	e7c7      	b.n	80047ac <_printf_common+0x58>
 800481c:	2301      	movs	r3, #1
 800481e:	4622      	mov	r2, r4
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d0e6      	beq.n	80047f8 <_printf_common+0xa4>
 800482a:	3601      	adds	r6, #1
 800482c:	e7d9      	b.n	80047e2 <_printf_common+0x8e>
	...

08004830 <_printf_i>:
 8004830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	7e0f      	ldrb	r7, [r1, #24]
 8004836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004838:	2f78      	cmp	r7, #120	; 0x78
 800483a:	4691      	mov	r9, r2
 800483c:	4680      	mov	r8, r0
 800483e:	460c      	mov	r4, r1
 8004840:	469a      	mov	sl, r3
 8004842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004846:	d807      	bhi.n	8004858 <_printf_i+0x28>
 8004848:	2f62      	cmp	r7, #98	; 0x62
 800484a:	d80a      	bhi.n	8004862 <_printf_i+0x32>
 800484c:	2f00      	cmp	r7, #0
 800484e:	f000 80d4 	beq.w	80049fa <_printf_i+0x1ca>
 8004852:	2f58      	cmp	r7, #88	; 0x58
 8004854:	f000 80c0 	beq.w	80049d8 <_printf_i+0x1a8>
 8004858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800485c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004860:	e03a      	b.n	80048d8 <_printf_i+0xa8>
 8004862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004866:	2b15      	cmp	r3, #21
 8004868:	d8f6      	bhi.n	8004858 <_printf_i+0x28>
 800486a:	a101      	add	r1, pc, #4	; (adr r1, 8004870 <_printf_i+0x40>)
 800486c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004870:	080048c9 	.word	0x080048c9
 8004874:	080048dd 	.word	0x080048dd
 8004878:	08004859 	.word	0x08004859
 800487c:	08004859 	.word	0x08004859
 8004880:	08004859 	.word	0x08004859
 8004884:	08004859 	.word	0x08004859
 8004888:	080048dd 	.word	0x080048dd
 800488c:	08004859 	.word	0x08004859
 8004890:	08004859 	.word	0x08004859
 8004894:	08004859 	.word	0x08004859
 8004898:	08004859 	.word	0x08004859
 800489c:	080049e1 	.word	0x080049e1
 80048a0:	08004909 	.word	0x08004909
 80048a4:	0800499b 	.word	0x0800499b
 80048a8:	08004859 	.word	0x08004859
 80048ac:	08004859 	.word	0x08004859
 80048b0:	08004a03 	.word	0x08004a03
 80048b4:	08004859 	.word	0x08004859
 80048b8:	08004909 	.word	0x08004909
 80048bc:	08004859 	.word	0x08004859
 80048c0:	08004859 	.word	0x08004859
 80048c4:	080049a3 	.word	0x080049a3
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	1d1a      	adds	r2, r3, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d8:	2301      	movs	r3, #1
 80048da:	e09f      	b.n	8004a1c <_printf_i+0x1ec>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	0607      	lsls	r7, r0, #24
 80048e2:	f103 0104 	add.w	r1, r3, #4
 80048e6:	6029      	str	r1, [r5, #0]
 80048e8:	d501      	bpl.n	80048ee <_printf_i+0xbe>
 80048ea:	681e      	ldr	r6, [r3, #0]
 80048ec:	e003      	b.n	80048f6 <_printf_i+0xc6>
 80048ee:	0646      	lsls	r6, r0, #25
 80048f0:	d5fb      	bpl.n	80048ea <_printf_i+0xba>
 80048f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	da03      	bge.n	8004902 <_printf_i+0xd2>
 80048fa:	232d      	movs	r3, #45	; 0x2d
 80048fc:	4276      	negs	r6, r6
 80048fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004902:	485a      	ldr	r0, [pc, #360]	; (8004a6c <_printf_i+0x23c>)
 8004904:	230a      	movs	r3, #10
 8004906:	e012      	b.n	800492e <_printf_i+0xfe>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	6820      	ldr	r0, [r4, #0]
 800490c:	1d19      	adds	r1, r3, #4
 800490e:	6029      	str	r1, [r5, #0]
 8004910:	0605      	lsls	r5, r0, #24
 8004912:	d501      	bpl.n	8004918 <_printf_i+0xe8>
 8004914:	681e      	ldr	r6, [r3, #0]
 8004916:	e002      	b.n	800491e <_printf_i+0xee>
 8004918:	0641      	lsls	r1, r0, #25
 800491a:	d5fb      	bpl.n	8004914 <_printf_i+0xe4>
 800491c:	881e      	ldrh	r6, [r3, #0]
 800491e:	4853      	ldr	r0, [pc, #332]	; (8004a6c <_printf_i+0x23c>)
 8004920:	2f6f      	cmp	r7, #111	; 0x6f
 8004922:	bf0c      	ite	eq
 8004924:	2308      	moveq	r3, #8
 8004926:	230a      	movne	r3, #10
 8004928:	2100      	movs	r1, #0
 800492a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800492e:	6865      	ldr	r5, [r4, #4]
 8004930:	60a5      	str	r5, [r4, #8]
 8004932:	2d00      	cmp	r5, #0
 8004934:	bfa2      	ittt	ge
 8004936:	6821      	ldrge	r1, [r4, #0]
 8004938:	f021 0104 	bicge.w	r1, r1, #4
 800493c:	6021      	strge	r1, [r4, #0]
 800493e:	b90e      	cbnz	r6, 8004944 <_printf_i+0x114>
 8004940:	2d00      	cmp	r5, #0
 8004942:	d04b      	beq.n	80049dc <_printf_i+0x1ac>
 8004944:	4615      	mov	r5, r2
 8004946:	fbb6 f1f3 	udiv	r1, r6, r3
 800494a:	fb03 6711 	mls	r7, r3, r1, r6
 800494e:	5dc7      	ldrb	r7, [r0, r7]
 8004950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004954:	4637      	mov	r7, r6
 8004956:	42bb      	cmp	r3, r7
 8004958:	460e      	mov	r6, r1
 800495a:	d9f4      	bls.n	8004946 <_printf_i+0x116>
 800495c:	2b08      	cmp	r3, #8
 800495e:	d10b      	bne.n	8004978 <_printf_i+0x148>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	07de      	lsls	r6, r3, #31
 8004964:	d508      	bpl.n	8004978 <_printf_i+0x148>
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	6861      	ldr	r1, [r4, #4]
 800496a:	4299      	cmp	r1, r3
 800496c:	bfde      	ittt	le
 800496e:	2330      	movle	r3, #48	; 0x30
 8004970:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004974:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004978:	1b52      	subs	r2, r2, r5
 800497a:	6122      	str	r2, [r4, #16]
 800497c:	f8cd a000 	str.w	sl, [sp]
 8004980:	464b      	mov	r3, r9
 8004982:	aa03      	add	r2, sp, #12
 8004984:	4621      	mov	r1, r4
 8004986:	4640      	mov	r0, r8
 8004988:	f7ff fee4 	bl	8004754 <_printf_common>
 800498c:	3001      	adds	r0, #1
 800498e:	d14a      	bne.n	8004a26 <_printf_i+0x1f6>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	b004      	add	sp, #16
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	f043 0320 	orr.w	r3, r3, #32
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	4833      	ldr	r0, [pc, #204]	; (8004a70 <_printf_i+0x240>)
 80049a4:	2778      	movs	r7, #120	; 0x78
 80049a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	6829      	ldr	r1, [r5, #0]
 80049ae:	061f      	lsls	r7, r3, #24
 80049b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80049b4:	d402      	bmi.n	80049bc <_printf_i+0x18c>
 80049b6:	065f      	lsls	r7, r3, #25
 80049b8:	bf48      	it	mi
 80049ba:	b2b6      	uxthmi	r6, r6
 80049bc:	07df      	lsls	r7, r3, #31
 80049be:	bf48      	it	mi
 80049c0:	f043 0320 	orrmi.w	r3, r3, #32
 80049c4:	6029      	str	r1, [r5, #0]
 80049c6:	bf48      	it	mi
 80049c8:	6023      	strmi	r3, [r4, #0]
 80049ca:	b91e      	cbnz	r6, 80049d4 <_printf_i+0x1a4>
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	f023 0320 	bic.w	r3, r3, #32
 80049d2:	6023      	str	r3, [r4, #0]
 80049d4:	2310      	movs	r3, #16
 80049d6:	e7a7      	b.n	8004928 <_printf_i+0xf8>
 80049d8:	4824      	ldr	r0, [pc, #144]	; (8004a6c <_printf_i+0x23c>)
 80049da:	e7e4      	b.n	80049a6 <_printf_i+0x176>
 80049dc:	4615      	mov	r5, r2
 80049de:	e7bd      	b.n	800495c <_printf_i+0x12c>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	6826      	ldr	r6, [r4, #0]
 80049e4:	6961      	ldr	r1, [r4, #20]
 80049e6:	1d18      	adds	r0, r3, #4
 80049e8:	6028      	str	r0, [r5, #0]
 80049ea:	0635      	lsls	r5, r6, #24
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	d501      	bpl.n	80049f4 <_printf_i+0x1c4>
 80049f0:	6019      	str	r1, [r3, #0]
 80049f2:	e002      	b.n	80049fa <_printf_i+0x1ca>
 80049f4:	0670      	lsls	r0, r6, #25
 80049f6:	d5fb      	bpl.n	80049f0 <_printf_i+0x1c0>
 80049f8:	8019      	strh	r1, [r3, #0]
 80049fa:	2300      	movs	r3, #0
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	4615      	mov	r5, r2
 8004a00:	e7bc      	b.n	800497c <_printf_i+0x14c>
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	1d1a      	adds	r2, r3, #4
 8004a06:	602a      	str	r2, [r5, #0]
 8004a08:	681d      	ldr	r5, [r3, #0]
 8004a0a:	6862      	ldr	r2, [r4, #4]
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f7fb fbde 	bl	80001d0 <memchr>
 8004a14:	b108      	cbz	r0, 8004a1a <_printf_i+0x1ea>
 8004a16:	1b40      	subs	r0, r0, r5
 8004a18:	6060      	str	r0, [r4, #4]
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	6123      	str	r3, [r4, #16]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a24:	e7aa      	b.n	800497c <_printf_i+0x14c>
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	47d0      	blx	sl
 8004a30:	3001      	adds	r0, #1
 8004a32:	d0ad      	beq.n	8004990 <_printf_i+0x160>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	079b      	lsls	r3, r3, #30
 8004a38:	d413      	bmi.n	8004a62 <_printf_i+0x232>
 8004a3a:	68e0      	ldr	r0, [r4, #12]
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	4298      	cmp	r0, r3
 8004a40:	bfb8      	it	lt
 8004a42:	4618      	movlt	r0, r3
 8004a44:	e7a6      	b.n	8004994 <_printf_i+0x164>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4632      	mov	r2, r6
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	47d0      	blx	sl
 8004a50:	3001      	adds	r0, #1
 8004a52:	d09d      	beq.n	8004990 <_printf_i+0x160>
 8004a54:	3501      	adds	r5, #1
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	9903      	ldr	r1, [sp, #12]
 8004a5a:	1a5b      	subs	r3, r3, r1
 8004a5c:	42ab      	cmp	r3, r5
 8004a5e:	dcf2      	bgt.n	8004a46 <_printf_i+0x216>
 8004a60:	e7eb      	b.n	8004a3a <_printf_i+0x20a>
 8004a62:	2500      	movs	r5, #0
 8004a64:	f104 0619 	add.w	r6, r4, #25
 8004a68:	e7f5      	b.n	8004a56 <_printf_i+0x226>
 8004a6a:	bf00      	nop
 8004a6c:	08004ead 	.word	0x08004ead
 8004a70:	08004ebe 	.word	0x08004ebe

08004a74 <__sflush_r>:
 8004a74:	898a      	ldrh	r2, [r1, #12]
 8004a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	0710      	lsls	r0, r2, #28
 8004a7e:	460c      	mov	r4, r1
 8004a80:	d458      	bmi.n	8004b34 <__sflush_r+0xc0>
 8004a82:	684b      	ldr	r3, [r1, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dc05      	bgt.n	8004a94 <__sflush_r+0x20>
 8004a88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	dc02      	bgt.n	8004a94 <__sflush_r+0x20>
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a96:	2e00      	cmp	r6, #0
 8004a98:	d0f9      	beq.n	8004a8e <__sflush_r+0x1a>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004aa0:	682f      	ldr	r7, [r5, #0]
 8004aa2:	6a21      	ldr	r1, [r4, #32]
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	d032      	beq.n	8004b0e <__sflush_r+0x9a>
 8004aa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	075a      	lsls	r2, r3, #29
 8004aae:	d505      	bpl.n	8004abc <__sflush_r+0x48>
 8004ab0:	6863      	ldr	r3, [r4, #4]
 8004ab2:	1ac0      	subs	r0, r0, r3
 8004ab4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ab6:	b10b      	cbz	r3, 8004abc <__sflush_r+0x48>
 8004ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aba:	1ac0      	subs	r0, r0, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ac2:	6a21      	ldr	r1, [r4, #32]
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b0      	blx	r6
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	d106      	bne.n	8004adc <__sflush_r+0x68>
 8004ace:	6829      	ldr	r1, [r5, #0]
 8004ad0:	291d      	cmp	r1, #29
 8004ad2:	d82b      	bhi.n	8004b2c <__sflush_r+0xb8>
 8004ad4:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <__sflush_r+0x108>)
 8004ad6:	410a      	asrs	r2, r1
 8004ad8:	07d6      	lsls	r6, r2, #31
 8004ada:	d427      	bmi.n	8004b2c <__sflush_r+0xb8>
 8004adc:	2200      	movs	r2, #0
 8004ade:	6062      	str	r2, [r4, #4]
 8004ae0:	04d9      	lsls	r1, r3, #19
 8004ae2:	6922      	ldr	r2, [r4, #16]
 8004ae4:	6022      	str	r2, [r4, #0]
 8004ae6:	d504      	bpl.n	8004af2 <__sflush_r+0x7e>
 8004ae8:	1c42      	adds	r2, r0, #1
 8004aea:	d101      	bne.n	8004af0 <__sflush_r+0x7c>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b903      	cbnz	r3, 8004af2 <__sflush_r+0x7e>
 8004af0:	6560      	str	r0, [r4, #84]	; 0x54
 8004af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af4:	602f      	str	r7, [r5, #0]
 8004af6:	2900      	cmp	r1, #0
 8004af8:	d0c9      	beq.n	8004a8e <__sflush_r+0x1a>
 8004afa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004afe:	4299      	cmp	r1, r3
 8004b00:	d002      	beq.n	8004b08 <__sflush_r+0x94>
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7ff fbea 	bl	80042dc <_free_r>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	6360      	str	r0, [r4, #52]	; 0x34
 8004b0c:	e7c0      	b.n	8004a90 <__sflush_r+0x1c>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4628      	mov	r0, r5
 8004b12:	47b0      	blx	r6
 8004b14:	1c41      	adds	r1, r0, #1
 8004b16:	d1c8      	bne.n	8004aaa <__sflush_r+0x36>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0c5      	beq.n	8004aaa <__sflush_r+0x36>
 8004b1e:	2b1d      	cmp	r3, #29
 8004b20:	d001      	beq.n	8004b26 <__sflush_r+0xb2>
 8004b22:	2b16      	cmp	r3, #22
 8004b24:	d101      	bne.n	8004b2a <__sflush_r+0xb6>
 8004b26:	602f      	str	r7, [r5, #0]
 8004b28:	e7b1      	b.n	8004a8e <__sflush_r+0x1a>
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	e7ad      	b.n	8004a90 <__sflush_r+0x1c>
 8004b34:	690f      	ldr	r7, [r1, #16]
 8004b36:	2f00      	cmp	r7, #0
 8004b38:	d0a9      	beq.n	8004a8e <__sflush_r+0x1a>
 8004b3a:	0793      	lsls	r3, r2, #30
 8004b3c:	680e      	ldr	r6, [r1, #0]
 8004b3e:	bf08      	it	eq
 8004b40:	694b      	ldreq	r3, [r1, #20]
 8004b42:	600f      	str	r7, [r1, #0]
 8004b44:	bf18      	it	ne
 8004b46:	2300      	movne	r3, #0
 8004b48:	eba6 0807 	sub.w	r8, r6, r7
 8004b4c:	608b      	str	r3, [r1, #8]
 8004b4e:	f1b8 0f00 	cmp.w	r8, #0
 8004b52:	dd9c      	ble.n	8004a8e <__sflush_r+0x1a>
 8004b54:	6a21      	ldr	r1, [r4, #32]
 8004b56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b58:	4643      	mov	r3, r8
 8004b5a:	463a      	mov	r2, r7
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b0      	blx	r6
 8004b60:	2800      	cmp	r0, #0
 8004b62:	dc06      	bgt.n	8004b72 <__sflush_r+0xfe>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	e78e      	b.n	8004a90 <__sflush_r+0x1c>
 8004b72:	4407      	add	r7, r0
 8004b74:	eba8 0800 	sub.w	r8, r8, r0
 8004b78:	e7e9      	b.n	8004b4e <__sflush_r+0xda>
 8004b7a:	bf00      	nop
 8004b7c:	dfbffffe 	.word	0xdfbffffe

08004b80 <_fflush_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	4605      	mov	r5, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	b913      	cbnz	r3, 8004b90 <_fflush_r+0x10>
 8004b8a:	2500      	movs	r5, #0
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	b118      	cbz	r0, 8004b9a <_fflush_r+0x1a>
 8004b92:	6a03      	ldr	r3, [r0, #32]
 8004b94:	b90b      	cbnz	r3, 8004b9a <_fflush_r+0x1a>
 8004b96:	f7ff fa99 	bl	80040cc <__sinit>
 8004b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f3      	beq.n	8004b8a <_fflush_r+0xa>
 8004ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ba4:	07d0      	lsls	r0, r2, #31
 8004ba6:	d404      	bmi.n	8004bb2 <_fflush_r+0x32>
 8004ba8:	0599      	lsls	r1, r3, #22
 8004baa:	d402      	bmi.n	8004bb2 <_fflush_r+0x32>
 8004bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bae:	f7ff fb92 	bl	80042d6 <__retarget_lock_acquire_recursive>
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	f7ff ff5d 	bl	8004a74 <__sflush_r>
 8004bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bbc:	07da      	lsls	r2, r3, #31
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	d4e4      	bmi.n	8004b8c <_fflush_r+0xc>
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	059b      	lsls	r3, r3, #22
 8004bc6:	d4e1      	bmi.n	8004b8c <_fflush_r+0xc>
 8004bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bca:	f7ff fb85 	bl	80042d8 <__retarget_lock_release_recursive>
 8004bce:	e7dd      	b.n	8004b8c <_fflush_r+0xc>

08004bd0 <__swbuf_r>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	460e      	mov	r6, r1
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	b118      	cbz	r0, 8004be2 <__swbuf_r+0x12>
 8004bda:	6a03      	ldr	r3, [r0, #32]
 8004bdc:	b90b      	cbnz	r3, 8004be2 <__swbuf_r+0x12>
 8004bde:	f7ff fa75 	bl	80040cc <__sinit>
 8004be2:	69a3      	ldr	r3, [r4, #24]
 8004be4:	60a3      	str	r3, [r4, #8]
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	071a      	lsls	r2, r3, #28
 8004bea:	d525      	bpl.n	8004c38 <__swbuf_r+0x68>
 8004bec:	6923      	ldr	r3, [r4, #16]
 8004bee:	b31b      	cbz	r3, 8004c38 <__swbuf_r+0x68>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	6922      	ldr	r2, [r4, #16]
 8004bf4:	1a98      	subs	r0, r3, r2
 8004bf6:	6963      	ldr	r3, [r4, #20]
 8004bf8:	b2f6      	uxtb	r6, r6
 8004bfa:	4283      	cmp	r3, r0
 8004bfc:	4637      	mov	r7, r6
 8004bfe:	dc04      	bgt.n	8004c0a <__swbuf_r+0x3a>
 8004c00:	4621      	mov	r1, r4
 8004c02:	4628      	mov	r0, r5
 8004c04:	f7ff ffbc 	bl	8004b80 <_fflush_r>
 8004c08:	b9e0      	cbnz	r0, 8004c44 <__swbuf_r+0x74>
 8004c0a:	68a3      	ldr	r3, [r4, #8]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	60a3      	str	r3, [r4, #8]
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	6022      	str	r2, [r4, #0]
 8004c16:	701e      	strb	r6, [r3, #0]
 8004c18:	6962      	ldr	r2, [r4, #20]
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d004      	beq.n	8004c2a <__swbuf_r+0x5a>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	07db      	lsls	r3, r3, #31
 8004c24:	d506      	bpl.n	8004c34 <__swbuf_r+0x64>
 8004c26:	2e0a      	cmp	r6, #10
 8004c28:	d104      	bne.n	8004c34 <__swbuf_r+0x64>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f7ff ffa7 	bl	8004b80 <_fflush_r>
 8004c32:	b938      	cbnz	r0, 8004c44 <__swbuf_r+0x74>
 8004c34:	4638      	mov	r0, r7
 8004c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 f806 	bl	8004c4c <__swsetup_r>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d0d5      	beq.n	8004bf0 <__swbuf_r+0x20>
 8004c44:	f04f 37ff 	mov.w	r7, #4294967295
 8004c48:	e7f4      	b.n	8004c34 <__swbuf_r+0x64>
	...

08004c4c <__swsetup_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <__swsetup_r+0xac>)
 8004c50:	4605      	mov	r5, r0
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	460c      	mov	r4, r1
 8004c56:	b118      	cbz	r0, 8004c60 <__swsetup_r+0x14>
 8004c58:	6a03      	ldr	r3, [r0, #32]
 8004c5a:	b90b      	cbnz	r3, 8004c60 <__swsetup_r+0x14>
 8004c5c:	f7ff fa36 	bl	80040cc <__sinit>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c66:	0718      	lsls	r0, r3, #28
 8004c68:	d422      	bmi.n	8004cb0 <__swsetup_r+0x64>
 8004c6a:	06d9      	lsls	r1, r3, #27
 8004c6c:	d407      	bmi.n	8004c7e <__swsetup_r+0x32>
 8004c6e:	2309      	movs	r3, #9
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c76:	81a3      	strh	r3, [r4, #12]
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	e034      	b.n	8004ce8 <__swsetup_r+0x9c>
 8004c7e:	0758      	lsls	r0, r3, #29
 8004c80:	d512      	bpl.n	8004ca8 <__swsetup_r+0x5c>
 8004c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c84:	b141      	cbz	r1, 8004c98 <__swsetup_r+0x4c>
 8004c86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c8a:	4299      	cmp	r1, r3
 8004c8c:	d002      	beq.n	8004c94 <__swsetup_r+0x48>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f7ff fb24 	bl	80042dc <_free_r>
 8004c94:	2300      	movs	r3, #0
 8004c96:	6363      	str	r3, [r4, #52]	; 0x34
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	6063      	str	r3, [r4, #4]
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f043 0308 	orr.w	r3, r3, #8
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	6923      	ldr	r3, [r4, #16]
 8004cb2:	b94b      	cbnz	r3, 8004cc8 <__swsetup_r+0x7c>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cbe:	d003      	beq.n	8004cc8 <__swsetup_r+0x7c>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f850 	bl	8004d68 <__smakebuf_r>
 8004cc8:	89a0      	ldrh	r0, [r4, #12]
 8004cca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cce:	f010 0301 	ands.w	r3, r0, #1
 8004cd2:	d00a      	beq.n	8004cea <__swsetup_r+0x9e>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60a3      	str	r3, [r4, #8]
 8004cd8:	6963      	ldr	r3, [r4, #20]
 8004cda:	425b      	negs	r3, r3
 8004cdc:	61a3      	str	r3, [r4, #24]
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	b943      	cbnz	r3, 8004cf4 <__swsetup_r+0xa8>
 8004ce2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ce6:	d1c4      	bne.n	8004c72 <__swsetup_r+0x26>
 8004ce8:	bd38      	pop	{r3, r4, r5, pc}
 8004cea:	0781      	lsls	r1, r0, #30
 8004cec:	bf58      	it	pl
 8004cee:	6963      	ldrpl	r3, [r4, #20]
 8004cf0:	60a3      	str	r3, [r4, #8]
 8004cf2:	e7f4      	b.n	8004cde <__swsetup_r+0x92>
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	e7f7      	b.n	8004ce8 <__swsetup_r+0x9c>
 8004cf8:	20000064 	.word	0x20000064

08004cfc <_sbrk_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d06      	ldr	r5, [pc, #24]	; (8004d18 <_sbrk_r+0x1c>)
 8004d00:	2300      	movs	r3, #0
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	f7fb ff62 	bl	8000bd0 <_sbrk>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_sbrk_r+0x1a>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_sbrk_r+0x1a>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	200002b4 	.word	0x200002b4

08004d1c <__swhatbuf_r>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	460c      	mov	r4, r1
 8004d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d24:	2900      	cmp	r1, #0
 8004d26:	b096      	sub	sp, #88	; 0x58
 8004d28:	4615      	mov	r5, r2
 8004d2a:	461e      	mov	r6, r3
 8004d2c:	da0d      	bge.n	8004d4a <__swhatbuf_r+0x2e>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	bf0c      	ite	eq
 8004d3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d3e:	2340      	movne	r3, #64	; 0x40
 8004d40:	2000      	movs	r0, #0
 8004d42:	6031      	str	r1, [r6, #0]
 8004d44:	602b      	str	r3, [r5, #0]
 8004d46:	b016      	add	sp, #88	; 0x58
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	466a      	mov	r2, sp
 8004d4c:	f000 f848 	bl	8004de0 <_fstat_r>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	dbec      	blt.n	8004d2e <__swhatbuf_r+0x12>
 8004d54:	9901      	ldr	r1, [sp, #4]
 8004d56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004d5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004d5e:	4259      	negs	r1, r3
 8004d60:	4159      	adcs	r1, r3
 8004d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d66:	e7eb      	b.n	8004d40 <__swhatbuf_r+0x24>

08004d68 <__smakebuf_r>:
 8004d68:	898b      	ldrh	r3, [r1, #12]
 8004d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d6c:	079d      	lsls	r5, r3, #30
 8004d6e:	4606      	mov	r6, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	d507      	bpl.n	8004d84 <__smakebuf_r+0x1c>
 8004d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6163      	str	r3, [r4, #20]
 8004d80:	b002      	add	sp, #8
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	ab01      	add	r3, sp, #4
 8004d86:	466a      	mov	r2, sp
 8004d88:	f7ff ffc8 	bl	8004d1c <__swhatbuf_r>
 8004d8c:	9900      	ldr	r1, [sp, #0]
 8004d8e:	4605      	mov	r5, r0
 8004d90:	4630      	mov	r0, r6
 8004d92:	f7ff fb0f 	bl	80043b4 <_malloc_r>
 8004d96:	b948      	cbnz	r0, 8004dac <__smakebuf_r+0x44>
 8004d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d9c:	059a      	lsls	r2, r3, #22
 8004d9e:	d4ef      	bmi.n	8004d80 <__smakebuf_r+0x18>
 8004da0:	f023 0303 	bic.w	r3, r3, #3
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	e7e3      	b.n	8004d74 <__smakebuf_r+0xc>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	6020      	str	r0, [r4, #0]
 8004db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	9b00      	ldr	r3, [sp, #0]
 8004db8:	6163      	str	r3, [r4, #20]
 8004dba:	9b01      	ldr	r3, [sp, #4]
 8004dbc:	6120      	str	r0, [r4, #16]
 8004dbe:	b15b      	cbz	r3, 8004dd8 <__smakebuf_r+0x70>
 8004dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f81d 	bl	8004e04 <_isatty_r>
 8004dca:	b128      	cbz	r0, 8004dd8 <__smakebuf_r+0x70>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	431d      	orrs	r5, r3
 8004ddc:	81a5      	strh	r5, [r4, #12]
 8004dde:	e7cf      	b.n	8004d80 <__smakebuf_r+0x18>

08004de0 <_fstat_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d07      	ldr	r5, [pc, #28]	; (8004e00 <_fstat_r+0x20>)
 8004de4:	2300      	movs	r3, #0
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	f7fb fec6 	bl	8000b7e <_fstat>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	d102      	bne.n	8004dfc <_fstat_r+0x1c>
 8004df6:	682b      	ldr	r3, [r5, #0]
 8004df8:	b103      	cbz	r3, 8004dfc <_fstat_r+0x1c>
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	bd38      	pop	{r3, r4, r5, pc}
 8004dfe:	bf00      	nop
 8004e00:	200002b4 	.word	0x200002b4

08004e04 <_isatty_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d06      	ldr	r5, [pc, #24]	; (8004e20 <_isatty_r+0x1c>)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	f7fb fec5 	bl	8000b9e <_isatty>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_isatty_r+0x1a>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_isatty_r+0x1a>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	200002b4 	.word	0x200002b4

08004e24 <_init>:
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e26:	bf00      	nop
 8004e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	469e      	mov	lr, r3
 8004e2e:	4770      	bx	lr

08004e30 <_fini>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr
