
8_SPI_MCP23S08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002030  08002030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002070  08002070  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002070  08002070  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002070  08002070  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002070  08002070  00012070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002084  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002084  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000067f9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000141b  00000000  00000000  00026878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  00027c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a3  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024701  00000000  00000000  000289cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007f08  00000000  00000000  0004d0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e05ee  00000000  00000000  00054fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d70  00000000  00000000  001355c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00137334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002018 	.word	0x08002018

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002018 	.word	0x08002018

080001c8 <mcp_reg_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mcp_reg_write(uint8_t reg, uint8_t value)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[3]={0x40, reg, value};
 80001d8:	2340      	movs	r3, #64	; 0x40
 80001da:	733b      	strb	r3, [r7, #12]
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	737b      	strb	r3, [r7, #13]
 80001e0:	79bb      	ldrb	r3, [r7, #6]
 80001e2:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(IOEXP_CS_GPIO_Port, IOEXP_CS_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2101      	movs	r1, #1
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <mcp_reg_write+0x48>)
 80001ea:	f000 fd29 	bl	8000c40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, tx, 3, HAL_MAX_DELAY);
 80001ee:	f107 010c 	add.w	r1, r7, #12
 80001f2:	f04f 33ff 	mov.w	r3, #4294967295
 80001f6:	2203      	movs	r2, #3
 80001f8:	4806      	ldr	r0, [pc, #24]	; (8000214 <mcp_reg_write+0x4c>)
 80001fa:	f001 fc08 	bl	8001a0e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(IOEXP_CS_GPIO_Port, IOEXP_CS_Pin, GPIO_PIN_SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	2101      	movs	r1, #1
 8000202:	4803      	ldr	r0, [pc, #12]	; (8000210 <mcp_reg_write+0x48>)
 8000204:	f000 fd1c 	bl	8000c40 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	48000800 	.word	0x48000800
 8000214:	20000028 	.word	0x20000028

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9e7 	bl	80005ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f819 	bl	8000256 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8a8 	bl	8000378 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000228:	f000 f868 	bl	80002fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  mcp_reg_write(MCP_IODIR,0xFE);
 800022c:	21fe      	movs	r1, #254	; 0xfe
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffca 	bl	80001c8 <mcp_reg_write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LED ON
	  mcp_reg_write(MCP_OLAT,0x01);
 8000234:	2101      	movs	r1, #1
 8000236:	200a      	movs	r0, #10
 8000238:	f7ff ffc6 	bl	80001c8 <mcp_reg_write>
	  HAL_Delay(500);
 800023c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000240:	f000 fa4a 	bl	80006d8 <HAL_Delay>

	  //LED OFF
	  mcp_reg_write(MCP_OLAT,0x00);
 8000244:	2100      	movs	r1, #0
 8000246:	200a      	movs	r0, #10
 8000248:	f7ff ffbe 	bl	80001c8 <mcp_reg_write>

	  HAL_Delay(500);
 800024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000250:	f000 fa42 	bl	80006d8 <HAL_Delay>
	  mcp_reg_write(MCP_OLAT,0x01);
 8000254:	e7ee      	b.n	8000234 <main+0x1c>

08000256 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b096      	sub	sp, #88	; 0x58
 800025a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2244      	movs	r2, #68	; 0x44
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f001 feab 	bl	8001fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	463b      	mov	r3, r7
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000278:	f44f 7000 	mov.w	r0, #512	; 0x200
 800027c:	f000 fd06 	bl	8000c8c <HAL_PWREx_ControlVoltageScaling>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000286:	f000 f8c1 	bl	800040c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800028a:	2310      	movs	r3, #16
 800028c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800028e:	2301      	movs	r3, #1
 8000290:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000296:	2360      	movs	r3, #96	; 0x60
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800029e:	2301      	movs	r3, #1
 80002a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002a6:	2328      	movs	r3, #40	; 0x28
 80002a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002aa:	2307      	movs	r3, #7
 80002ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b2:	2302      	movs	r3, #2
 80002b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fd3c 	bl	8000d38 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002c6:	f000 f8a1 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2303      	movs	r3, #3
 80002d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002de:	463b      	mov	r3, r7
 80002e0:	2104      	movs	r1, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 f904 	bl	80014f0 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002ee:	f000 f88d 	bl	800040c <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3758      	adds	r7, #88	; 0x58
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_SPI2_Init+0x74>)
 8000302:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <MX_SPI2_Init+0x78>)
 8000304:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_SPI2_Init+0x74>)
 8000308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800030c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_SPI2_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <MX_SPI2_Init+0x74>)
 8000316:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800031a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_SPI2_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000322:	4b13      	ldr	r3, [pc, #76]	; (8000370 <MX_SPI2_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_SPI2_Init+0x74>)
 800032a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800032e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_SPI2_Init+0x74>)
 8000332:	2210      	movs	r2, #16
 8000334:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_SPI2_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_SPI2_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_SPI2_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_SPI2_Init+0x74>)
 800034a:	2207      	movs	r2, #7
 800034c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_SPI2_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_SPI2_Init+0x74>)
 8000356:	2208      	movs	r2, #8
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_SPI2_Init+0x74>)
 800035c:	f001 fab4 	bl	80018c8 <HAL_SPI_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000366:	f000 f851 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000028 	.word	0x20000028
 8000374:	40003800 	.word	0x40003800

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <MX_GPIO_Init+0x8c>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000392:	4a1c      	ldr	r2, [pc, #112]	; (8000404 <MX_GPIO_Init+0x8c>)
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <MX_GPIO_Init+0x8c>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	f003 0304 	and.w	r3, r3, #4
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <MX_GPIO_Init+0x8c>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	4a16      	ldr	r2, [pc, #88]	; (8000404 <MX_GPIO_Init+0x8c>)
 80003ac:	f043 0302 	orr.w	r3, r3, #2
 80003b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_GPIO_Init+0x8c>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	f003 0302 	and.w	r3, r3, #2
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_GPIO_Init+0x8c>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a10      	ldr	r2, [pc, #64]	; (8000404 <MX_GPIO_Init+0x8c>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_GPIO_Init+0x8c>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IOEXP_CS_GPIO_Port, IOEXP_CS_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2101      	movs	r1, #1
 80003da:	480b      	ldr	r0, [pc, #44]	; (8000408 <MX_GPIO_Init+0x90>)
 80003dc:	f000 fc30 	bl	8000c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IOEXP_CS_Pin */
  GPIO_InitStruct.Pin = IOEXP_CS_Pin;
 80003e0:	2301      	movs	r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IOEXP_CS_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	4619      	mov	r1, r3
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_GPIO_Init+0x90>)
 80003f8:	f000 fa78 	bl	80008ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000
 8000408:	48000800 	.word	0x48000800

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x44>)
 8000420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000422:	4a0e      	ldr	r2, [pc, #56]	; (800045c <HAL_MspInit+0x44>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6613      	str	r3, [r2, #96]	; 0x60
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <HAL_MspInit+0x44>)
 800042c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <HAL_MspInit+0x44>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	4a08      	ldr	r2, [pc, #32]	; (800045c <HAL_MspInit+0x44>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	6593      	str	r3, [r2, #88]	; 0x58
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_MspInit+0x44>)
 8000444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a25      	ldr	r2, [pc, #148]	; (8000514 <HAL_SPI_MspInit+0xb4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d144      	bne.n	800050c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000482:	4b25      	ldr	r3, [pc, #148]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 8000484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000486:	4a24      	ldr	r2, [pc, #144]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 8000488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048c:	6593      	str	r3, [r2, #88]	; 0x58
 800048e:	4b22      	ldr	r3, [pc, #136]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	4a1e      	ldr	r2, [pc, #120]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a6:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	4a18      	ldr	r2, [pc, #96]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 80004b8:	f043 0302 	orr.w	r3, r3, #2
 80004bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <HAL_SPI_MspInit+0xb8>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	f003 0302 	and.w	r3, r3, #2
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004ca:	230c      	movs	r3, #12
 80004cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d6:	2303      	movs	r3, #3
 80004d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004da:	2305      	movs	r3, #5
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <HAL_SPI_MspInit+0xbc>)
 80004e6:	f000 fa01 	bl	80008ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004fc:	2305      	movs	r3, #5
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <HAL_SPI_MspInit+0xc0>)
 8000508:	f000 f9f0 	bl	80008ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800050c:	bf00      	nop
 800050e:	3728      	adds	r7, #40	; 0x28
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40003800 	.word	0x40003800
 8000518:	40021000 	.word	0x40021000
 800051c:	48000800 	.word	0x48000800
 8000520:	48000400 	.word	0x48000400

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000528:	e7fe      	b.n	8000528 <NMI_Handler+0x4>

0800052a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <MemManage_Handler+0x4>

08000536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <BusFault_Handler+0x4>

0800053c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler+0x4>

08000542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000570:	f000 f892 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f7ff ffea 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	; (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f001 fd01 	bl	8001fd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ce:	f7ff fe23 	bl	8000218 <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e0:	08002078 	.word	0x08002078
  ldr r2, =_sbss
 80005e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e8:	20000090 	.word	0x20000090

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>

080005ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f943 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fe:	200f      	movs	r0, #15
 8000600:	f000 f80e 	bl	8000620 <HAL_InitTick>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e001      	b.n	8000614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000610:	f7ff ff02 	bl	8000418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000614:	79fb      	ldrb	r3, [r7, #7]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_InitTick+0x6c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d023      	beq.n	800067c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_InitTick+0x70>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_InitTick+0x6c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f941 	bl	80008d2 <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10f      	bne.n	8000676 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d809      	bhi.n	8000670 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f000 f919 	bl	800089a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <HAL_InitTick+0x74>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	e007      	b.n	8000680 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e004      	b.n	8000680 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e001      	b.n	8000680 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000008 	.word	0x20000008
 8000690:	20000000 	.word	0x20000000
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x20>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_IncTick+0x24>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000008 	.word	0x20000008
 80006bc:	2000008c 	.word	0x2000008c

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000008c 	.word	0x2000008c

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff ffee 	bl	80006c0 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d005      	beq.n	80006fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_Delay+0x44>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fe:	bf00      	nop
 8000700:	f7ff ffde 	bl	80006c0 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f7      	bhi.n	8000700 <HAL_Delay+0x28>
  {
  }
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000008 	.word	0x20000008

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff47 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008ac:	f7ff ff5c 	bl	8000768 <__NVIC_GetPriorityGrouping>
 80008b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff ff8e 	bl	80007d8 <NVIC_EncodePriority>
 80008bc:	4602      	mov	r2, r0
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ffb0 	bl	8000840 <SysTick_Config>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e17f      	b.n	8000bfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8171 	beq.w	8000bf6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 0303 	and.w	r3, r3, #3
 800091c:	2b01      	cmp	r3, #1
 800091e:	d005      	beq.n	800092c <HAL_GPIO_Init+0x40>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	2b02      	cmp	r3, #2
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	f003 0201 	and.w	r2, r3, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	2b03      	cmp	r3, #3
 8000998:	d118      	bne.n	80009cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009a0:	2201      	movs	r2, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	08db      	lsrs	r3, r3, #3
 80009b6:	f003 0201 	and.w	r2, r3, #1
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d017      	beq.n	8000a08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d123      	bne.n	8000a5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	08da      	lsrs	r2, r3, #3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3208      	adds	r2, #8
 8000a56:	6939      	ldr	r1, [r7, #16]
 8000a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0203 	and.w	r2, r3, #3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f000 80ac 	beq.w	8000bf6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <HAL_GPIO_Init+0x330>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	4a5e      	ldr	r2, [pc, #376]	; (8000c1c <HAL_GPIO_Init+0x330>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aaa:	4b5c      	ldr	r3, [pc, #368]	; (8000c1c <HAL_GPIO_Init+0x330>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ab6:	4a5a      	ldr	r2, [pc, #360]	; (8000c20 <HAL_GPIO_Init+0x334>)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	3302      	adds	r3, #2
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	220f      	movs	r2, #15
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ae0:	d025      	beq.n	8000b2e <HAL_GPIO_Init+0x242>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4f      	ldr	r2, [pc, #316]	; (8000c24 <HAL_GPIO_Init+0x338>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d01f      	beq.n	8000b2a <HAL_GPIO_Init+0x23e>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a4e      	ldr	r2, [pc, #312]	; (8000c28 <HAL_GPIO_Init+0x33c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d019      	beq.n	8000b26 <HAL_GPIO_Init+0x23a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4d      	ldr	r2, [pc, #308]	; (8000c2c <HAL_GPIO_Init+0x340>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d013      	beq.n	8000b22 <HAL_GPIO_Init+0x236>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4c      	ldr	r2, [pc, #304]	; (8000c30 <HAL_GPIO_Init+0x344>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d00d      	beq.n	8000b1e <HAL_GPIO_Init+0x232>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <HAL_GPIO_Init+0x348>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d007      	beq.n	8000b1a <HAL_GPIO_Init+0x22e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4a      	ldr	r2, [pc, #296]	; (8000c38 <HAL_GPIO_Init+0x34c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_GPIO_Init+0x22a>
 8000b12:	2306      	movs	r3, #6
 8000b14:	e00c      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b16:	2307      	movs	r3, #7
 8000b18:	e00a      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	e008      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b1e:	2304      	movs	r3, #4
 8000b20:	e006      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b22:	2303      	movs	r3, #3
 8000b24:	e004      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b26:	2302      	movs	r3, #2
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e000      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	f002 0203 	and.w	r2, r2, #3
 8000b36:	0092      	lsls	r2, r2, #2
 8000b38:	4093      	lsls	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b40:	4937      	ldr	r1, [pc, #220]	; (8000c20 <HAL_GPIO_Init+0x334>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b9c:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa22 f303 	lsr.w	r3, r2, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f47f ae78 	bne.w	80008fc <HAL_GPIO_Init+0x10>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	48000c00 	.word	0x48000c00
 8000c30:	48001000 	.word	0x48001000
 8000c34:	48001400 	.word	0x48001400
 8000c38:	48001800 	.word	0x48001800
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c50:	787b      	ldrb	r3, [r7, #1]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c5c:	e002      	b.n	8000c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40007000 	.word	0x40007000

08000c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c9a:	d130      	bne.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca8:	d038      	beq.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2232      	movs	r2, #50	; 0x32
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	0c9b      	lsrs	r3, r3, #18
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd0:	e002      	b.n	8000cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce4:	d102      	bne.n	8000cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1f2      	bne.n	8000cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf8:	d110      	bne.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e00f      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0a:	d007      	beq.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	20000000 	.word	0x20000000
 8000d34:	431bde83 	.word	0x431bde83

08000d38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e3ca      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d4a:	4b97      	ldr	r3, [pc, #604]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d54:	4b94      	ldr	r3, [pc, #592]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 80e4 	beq.w	8000f34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <HAL_RCC_OscConfig+0x4a>
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	2b0c      	cmp	r3, #12
 8000d76:	f040 808b 	bne.w	8000e90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	f040 8087 	bne.w	8000e90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d82:	4b89      	ldr	r3, [pc, #548]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HAL_RCC_OscConfig+0x62>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e3a2      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a1a      	ldr	r2, [r3, #32]
 8000d9e:	4b82      	ldr	r3, [pc, #520]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d004      	beq.n	8000db4 <HAL_RCC_OscConfig+0x7c>
 8000daa:	4b7f      	ldr	r3, [pc, #508]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db2:	e005      	b.n	8000dc0 <HAL_RCC_OscConfig+0x88>
 8000db4:	4b7c      	ldr	r3, [pc, #496]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d223      	bcs.n	8000e0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fd1d 	bl	8001808 <RCC_SetFlashLatencyFromMSIRange>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e383      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd8:	4b73      	ldr	r3, [pc, #460]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a72      	ldr	r2, [pc, #456]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b70      	ldr	r3, [pc, #448]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	496d      	ldr	r1, [pc, #436]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df6:	4b6c      	ldr	r3, [pc, #432]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	4968      	ldr	r1, [pc, #416]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	604b      	str	r3, [r1, #4]
 8000e0a:	e025      	b.n	8000e58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e0c:	4b66      	ldr	r3, [pc, #408]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a65      	ldr	r2, [pc, #404]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	4960      	ldr	r1, [pc, #384]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e2a:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	495b      	ldr	r1, [pc, #364]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d109      	bne.n	8000e58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fcdd 	bl	8001808 <RCC_SetFlashLatencyFromMSIRange>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e343      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e58:	f000 fc4a 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	4950      	ldr	r1, [pc, #320]	; (8000fac <HAL_RCC_OscConfig+0x274>)
 8000e6a:	5ccb      	ldrb	r3, [r1, r3]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	fa22 f303 	lsr.w	r3, r2, r3
 8000e74:	4a4e      	ldr	r2, [pc, #312]	; (8000fb0 <HAL_RCC_OscConfig+0x278>)
 8000e76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e78:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fbcf 	bl	8000620 <HAL_InitTick>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d052      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	e327      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d032      	beq.n	8000efe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e98:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a42      	ldr	r2, [pc, #264]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fc0c 	bl	80006c0 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eac:	f7ff fc08 	bl	80006c0 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e310      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f0      	beq.n	8000eac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a36      	ldr	r2, [pc, #216]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4931      	ldr	r1, [pc, #196]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	492c      	ldr	r1, [pc, #176]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
 8000efc:	e01a      	b.n	8000f34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fbd9 	bl	80006c0 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f12:	f7ff fbd5 	bl	80006c0 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e2dd      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f0      	bne.n	8000f12 <HAL_RCC_OscConfig+0x1da>
 8000f30:	e000      	b.n	8000f34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d074      	beq.n	800102a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d005      	beq.n	8000f52 <HAL_RCC_OscConfig+0x21a>
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d10e      	bne.n	8000f6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d10b      	bne.n	8000f6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d064      	beq.n	8001028 <HAL_RCC_OscConfig+0x2f0>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d160      	bne.n	8001028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e2ba      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f72:	d106      	bne.n	8000f82 <HAL_RCC_OscConfig+0x24a>
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	e026      	b.n	8000fd0 <HAL_RCC_OscConfig+0x298>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8a:	d115      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x280>
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a02      	ldr	r2, [pc, #8]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e014      	b.n	8000fd0 <HAL_RCC_OscConfig+0x298>
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	08002030 	.word	0x08002030
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	4ba0      	ldr	r3, [pc, #640]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a9f      	ldr	r2, [pc, #636]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8000fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b9d      	ldr	r3, [pc, #628]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a9c      	ldr	r2, [pc, #624]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d013      	beq.n	8001000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fb72 	bl	80006c0 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fb6e 	bl	80006c0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e276      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff2:	4b92      	ldr	r3, [pc, #584]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x2a8>
 8000ffe:	e014      	b.n	800102a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fb5e 	bl	80006c0 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fb5a 	bl	80006c0 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e262      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800101a:	4b88      	ldr	r3, [pc, #544]	; (800123c <HAL_RCC_OscConfig+0x504>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x2d0>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d060      	beq.n	80010f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b04      	cmp	r3, #4
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x310>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	d119      	bne.n	8001076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d116      	bne.n	8001076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001048:	4b7c      	ldr	r3, [pc, #496]	; (800123c <HAL_RCC_OscConfig+0x504>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_OscConfig+0x328>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e23f      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b76      	ldr	r3, [pc, #472]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	4973      	ldr	r1, [pc, #460]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001074:	e040      	b.n	80010f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d023      	beq.n	80010c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107e:	4b6f      	ldr	r3, [pc, #444]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a6e      	ldr	r2, [pc, #440]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fb19 	bl	80006c0 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fb15 	bl	80006c0 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e21d      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a4:	4b65      	ldr	r3, [pc, #404]	; (800123c <HAL_RCC_OscConfig+0x504>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f0      	beq.n	8001092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b0:	4b62      	ldr	r3, [pc, #392]	; (800123c <HAL_RCC_OscConfig+0x504>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	495f      	ldr	r1, [pc, #380]	; (800123c <HAL_RCC_OscConfig+0x504>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
 80010c4:	e018      	b.n	80010f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b5d      	ldr	r3, [pc, #372]	; (800123c <HAL_RCC_OscConfig+0x504>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a5c      	ldr	r2, [pc, #368]	; (800123c <HAL_RCC_OscConfig+0x504>)
 80010cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff faf5 	bl	80006c0 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff faf1 	bl	80006c0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e1f9      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010ec:	4b53      	ldr	r3, [pc, #332]	; (800123c <HAL_RCC_OscConfig+0x504>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03c      	beq.n	800117e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01c      	beq.n	8001146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <HAL_RCC_OscConfig+0x504>)
 800110e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001112:	4a4a      	ldr	r2, [pc, #296]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111c:	f7ff fad0 	bl	80006c0 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff facc 	bl	80006c0 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1d4      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001136:	4b41      	ldr	r3, [pc, #260]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0ef      	beq.n	8001124 <HAL_RCC_OscConfig+0x3ec>
 8001144:	e01b      	b.n	800117e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114c:	4a3b      	ldr	r2, [pc, #236]	; (800123c <HAL_RCC_OscConfig+0x504>)
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff fab3 	bl	80006c0 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff faaf 	bl	80006c0 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1b7      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1ef      	bne.n	800115e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a6 	beq.w	80012d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10d      	bne.n	80011b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <HAL_RCC_OscConfig+0x504>)
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	4a26      	ldr	r2, [pc, #152]	; (800123c <HAL_RCC_OscConfig+0x504>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6593      	str	r3, [r2, #88]	; 0x58
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_RCC_OscConfig+0x504>)
 80011aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b4:	2301      	movs	r3, #1
 80011b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_RCC_OscConfig+0x508>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d118      	bne.n	80011f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_RCC_OscConfig+0x508>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_RCC_OscConfig+0x508>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d0:	f7ff fa76 	bl	80006c0 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d8:	f7ff fa72 	bl	80006c0 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e17a      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_RCC_OscConfig+0x508>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_RCC_OscConfig+0x4d8>
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800120e:	e029      	b.n	8001264 <HAL_RCC_OscConfig+0x52c>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b05      	cmp	r3, #5
 8001216:	d115      	bne.n	8001244 <HAL_RCC_OscConfig+0x50c>
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_RCC_OscConfig+0x504>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_RCC_OscConfig+0x504>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	4a03      	ldr	r2, [pc, #12]	; (800123c <HAL_RCC_OscConfig+0x504>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001238:	e014      	b.n	8001264 <HAL_RCC_OscConfig+0x52c>
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000
 8001240:	40007000 	.word	0x40007000
 8001244:	4b9c      	ldr	r3, [pc, #624]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124a:	4a9b      	ldr	r2, [pc, #620]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001254:	4b98      	ldr	r3, [pc, #608]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125a:	4a97      	ldr	r2, [pc, #604]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d016      	beq.n	800129a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126c:	f7ff fa28 	bl	80006c0 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001272:	e00a      	b.n	800128a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7ff fa24 	bl	80006c0 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e12a      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800128a:	4b8b      	ldr	r3, [pc, #556]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800128c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ed      	beq.n	8001274 <HAL_RCC_OscConfig+0x53c>
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129a:	f7ff fa11 	bl	80006c0 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fa0d 	bl	80006c0 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e113      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b8:	4b7f      	ldr	r3, [pc, #508]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ed      	bne.n	80012a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012cc:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d0:	4a79      	ldr	r2, [pc, #484]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 80012d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80fe 	beq.w	80014de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	f040 80d0 	bne.w	800148c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012ec:	4b72      	ldr	r3, [pc, #456]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d130      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	3b01      	subs	r3, #1
 800130c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800130e:	429a      	cmp	r2, r3
 8001310:	d127      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800131e:	429a      	cmp	r2, r3
 8001320:	d11f      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800132c:	2a07      	cmp	r2, #7
 800132e:	bf14      	ite	ne
 8001330:	2201      	movne	r2, #1
 8001332:	2200      	moveq	r2, #0
 8001334:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001336:	4293      	cmp	r3, r2
 8001338:	d113      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	3b01      	subs	r3, #1
 8001348:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800134a:	429a      	cmp	r2, r3
 800134c:	d109      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	3b01      	subs	r3, #1
 800135c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d06e      	beq.n	8001440 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d069      	beq.n	800143c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001374:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0ad      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001384:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001390:	f7ff f996 	bl	80006c0 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff f992 	bl	80006c0 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e09a      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013aa:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	4b40      	ldr	r3, [pc, #256]	; (80014bc <HAL_RCC_OscConfig+0x784>)
 80013bc:	4013      	ands	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013c6:	3a01      	subs	r2, #1
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	4311      	orrs	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013d0:	0212      	lsls	r2, r2, #8
 80013d2:	4311      	orrs	r1, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013d8:	0852      	lsrs	r2, r2, #1
 80013da:	3a01      	subs	r2, #1
 80013dc:	0552      	lsls	r2, r2, #21
 80013de:	4311      	orrs	r1, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013e4:	0852      	lsrs	r2, r2, #1
 80013e6:	3a01      	subs	r2, #1
 80013e8:	0652      	lsls	r2, r2, #25
 80013ea:	4311      	orrs	r1, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013f0:	0912      	lsrs	r2, r2, #4
 80013f2:	0452      	lsls	r2, r2, #17
 80013f4:	430a      	orrs	r2, r1
 80013f6:	4930      	ldr	r1, [pc, #192]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013fc:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800140e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001414:	f7ff f954 	bl	80006c0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff f950 	bl	80006c0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e058      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800143a:	e050      	b.n	80014de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e04f      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d148      	bne.n	80014de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001464:	f7ff f92c 	bl	80006c0 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff f928 	bl	80006c0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e030      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x734>
 800148a:	e028      	b.n	80014de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b0c      	cmp	r3, #12
 8001490:	d023      	beq.n	80014da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_RCC_OscConfig+0x780>)
 8001498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800149c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff f90f 	bl	80006c0 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a4:	e00c      	b.n	80014c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff f90b 	bl	80006c0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d905      	bls.n	80014c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e013      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_OscConfig+0x7b0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ec      	bne.n	80014a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_RCC_OscConfig+0x7b0>)
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	4905      	ldr	r1, [pc, #20]	; (80014e8 <HAL_RCC_OscConfig+0x7b0>)
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_RCC_OscConfig+0x7b4>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
 80014d8:	e001      	b.n	80014de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	feeefffc 	.word	0xfeeefffc

080014f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0e7      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b75      	ldr	r3, [pc, #468]	; (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d910      	bls.n	8001534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b72      	ldr	r3, [pc, #456]	; (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 0207 	bic.w	r2, r3, #7
 800151a:	4970      	ldr	r1, [pc, #448]	; (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0cf      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d010      	beq.n	8001562 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	4b66      	ldr	r3, [pc, #408]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800154c:	429a      	cmp	r2, r3
 800154e:	d908      	bls.n	8001562 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001550:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4960      	ldr	r1, [pc, #384]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d04c      	beq.n	8001608 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001576:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d121      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0a6      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d115      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e09a      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	4b4e      	ldr	r3, [pc, #312]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e08e      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b6:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e086      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b46      	ldr	r3, [pc, #280]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4943      	ldr	r1, [pc, #268]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015d8:	f7ff f872 	bl	80006c0 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff f86e 	bl	80006c0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e06e      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d010      	beq.n	8001636 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001620:	429a      	cmp	r2, r3
 8001622:	d208      	bcs.n	8001636 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	492b      	ldr	r1, [pc, #172]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d210      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 0207 	bic.w	r2, r3, #7
 800164c:	4923      	ldr	r1, [pc, #140]	; (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e036      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	4918      	ldr	r1, [pc, #96]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4910      	ldr	r1, [pc, #64]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016a4:	f000 f824 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	490b      	ldr	r1, [pc, #44]	; (80016e4 <HAL_RCC_ClockConfig+0x1f4>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1f8>)
 80016c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1fc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ffa9 	bl	8000620 <HAL_InitTick>
 80016ce:	4603      	mov	r3, r0
 80016d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80016d2:	7afb      	ldrb	r3, [r7, #11]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08002030 	.word	0x08002030
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001708:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x34>
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d121      	bne.n	8001762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d11e      	bne.n	8001762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001724:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d107      	bne.n	8001740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e005      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800174c:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10d      	bne.n	8001778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d102      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_GetSysClockFreq+0x110>)
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	e004      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d101      	bne.n	8001778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_RCC_GetSysClockFreq+0x114>)
 8001776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d134      	bne.n	80017e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d003      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0xa6>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d003      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0xac>
 8001794:	e005      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_RCC_GetSysClockFreq+0x110>)
 8001798:	617b      	str	r3, [r7, #20]
      break;
 800179a:	e005      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_GetSysClockFreq+0x114>)
 800179e:	617b      	str	r3, [r7, #20]
      break;
 80017a0:	e002      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	617b      	str	r3, [r7, #20]
      break;
 80017a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	3301      	adds	r3, #1
 80017b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	fb03 f202 	mul.w	r2, r3, r2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	0e5b      	lsrs	r3, r3, #25
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	3301      	adds	r3, #1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017e8:	69bb      	ldr	r3, [r7, #24]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	08002040 	.word	0x08002040
 8001800:	00f42400 	.word	0x00f42400
 8001804:	007a1200 	.word	0x007a1200

08001808 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001820:	f7ff fa26 	bl	8000c70 <HAL_PWREx_GetVoltageRange>
 8001824:	6178      	str	r0, [r7, #20]
 8001826:	e014      	b.n	8001852 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001832:	6593      	str	r3, [r2, #88]	; 0x58
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001840:	f7ff fa16 	bl	8000c70 <HAL_PWREx_GetVoltageRange>
 8001844:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001850:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001858:	d10b      	bne.n	8001872 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b80      	cmp	r3, #128	; 0x80
 800185e:	d919      	bls.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2ba0      	cmp	r3, #160	; 0xa0
 8001864:	d902      	bls.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001866:	2302      	movs	r3, #2
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	e013      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	e010      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b80      	cmp	r3, #128	; 0x80
 8001876:	d902      	bls.n	800187e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001878:	2303      	movs	r3, #3
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	e00a      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d102      	bne.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001884:	2302      	movs	r3, #2
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e004      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b70      	cmp	r3, #112	; 0x70
 800188e:	d101      	bne.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001890:	2301      	movs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 0207 	bic.w	r2, r3, #7
 800189c:	4909      	ldr	r1, [pc, #36]	; (80018c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e095      	b.n	8001a06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018ea:	d009      	beq.n	8001900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
 80018f2:	e005      	b.n	8001900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7fe fda0 	bl	8000460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001936:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001940:	d902      	bls.n	8001948 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e002      	b.n	800194e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001956:	d007      	beq.n	8001968 <HAL_SPI_Init+0xa0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001960:	d002      	beq.n	8001968 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019aa:	ea42 0103 	orr.w	r1, r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	f003 0204 	and.w	r2, r3, #4
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80019e4:	ea42 0103 	orr.w	r1, r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b088      	sub	sp, #32
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_SPI_Transmit+0x22>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e15f      	b.n	8001cf0 <HAL_SPI_Transmit+0x2e2>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a38:	f7fe fe42 	bl	80006c0 <HAL_GetTick>
 8001a3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d002      	beq.n	8001a54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a52:	e148      	b.n	8001ce6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_SPI_Transmit+0x52>
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a64:	e13f      	b.n	8001ce6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	88fa      	ldrh	r2, [r7, #6]
 8001a84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab0:	d10f      	bne.n	8001ad2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ac0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ad0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001adc:	2b40      	cmp	r3, #64	; 0x40
 8001ade:	d007      	beq.n	8001af0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001af8:	d94f      	bls.n	8001b9a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_SPI_Transmit+0xfa>
 8001b02:	8afb      	ldrh	r3, [r7, #22]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d142      	bne.n	8001b8e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	1c9a      	adds	r2, r3, #2
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b2c:	e02f      	b.n	8001b8e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d112      	bne.n	8001b62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	881a      	ldrh	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	1c9a      	adds	r2, r3, #2
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b60:	e015      	b.n	8001b8e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b62:	f7fe fdad 	bl	80006c0 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d803      	bhi.n	8001b7a <HAL_SPI_Transmit+0x16c>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d102      	bne.n	8001b80 <HAL_SPI_Transmit+0x172>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d106      	bne.n	8001b8e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001b8c:	e0ab      	b.n	8001ce6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ca      	bne.n	8001b2e <HAL_SPI_Transmit+0x120>
 8001b98:	e080      	b.n	8001c9c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_SPI_Transmit+0x19a>
 8001ba2:	8afb      	ldrh	r3, [r7, #22]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d174      	bne.n	8001c92 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d912      	bls.n	8001bd8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb6:	881a      	ldrh	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	1c9a      	adds	r2, r3, #2
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b02      	subs	r3, #2
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bd6:	e05c      	b.n	8001c92 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	330c      	adds	r3, #12
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001bfe:	e048      	b.n	8001c92 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d12b      	bne.n	8001c66 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d912      	bls.n	8001c3e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	1c9a      	adds	r2, r3, #2
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b02      	subs	r3, #2
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c3c:	e029      	b.n	8001c92 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	330c      	adds	r3, #12
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c64:	e015      	b.n	8001c92 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c66:	f7fe fd2b 	bl	80006c0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d803      	bhi.n	8001c7e <HAL_SPI_Transmit+0x270>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d102      	bne.n	8001c84 <HAL_SPI_Transmit+0x276>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001c90:	e029      	b.n	8001ce6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1b1      	bne.n	8001c00 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f947 	bl	8001f34 <SPI_EndRxTxTransaction>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	77fb      	strb	r3, [r7, #31]
 8001cdc:	e003      	b.n	8001ce6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d08:	f7fe fcda 	bl	80006c0 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	4413      	add	r3, r2
 8001d16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d18:	f7fe fcd2 	bl	80006c0 <HAL_GetTick>
 8001d1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	015b      	lsls	r3, r3, #5
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d2e:	e054      	b.n	8001dda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d36:	d050      	beq.n	8001dda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d38:	f7fe fcc2 	bl	80006c0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d902      	bls.n	8001d4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d13d      	bne.n	8001dca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d66:	d111      	bne.n	8001d8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d70:	d004      	beq.n	8001d7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d107      	bne.n	8001d8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d94:	d10f      	bne.n	8001db6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e017      	b.n	8001dfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4013      	ands	r3, r2
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d19b      	bne.n	8001d30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000

08001e08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001e1a:	f7fe fc51 	bl	80006c0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001e2a:	f7fe fc49 	bl	80006c0 <HAL_GetTick>
 8001e2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	330c      	adds	r3, #12
 8001e36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001e38:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00da      	lsls	r2, r3, #3
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	0d1b      	lsrs	r3, r3, #20
 8001e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001e50:	e060      	b.n	8001f14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001e58:	d107      	bne.n	8001e6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d050      	beq.n	8001f14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e72:	f7fe fc25 	bl	80006c0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d902      	bls.n	8001e88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d13d      	bne.n	8001f04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ea0:	d111      	bne.n	8001ec6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eaa:	d004      	beq.n	8001eb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb4:	d107      	bne.n	8001ec6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ece:	d10f      	bne.n	8001ef0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e010      	b.n	8001f26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d196      	bne.n	8001e52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000

08001f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7ff ff5b 	bl	8001e08 <SPI_WaitFifoStateUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5c:	f043 0220 	orr.w	r2, r3, #32
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e027      	b.n	8001fb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff fec0 	bl	8001cf8 <SPI_WaitFlagStateUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f82:	f043 0220 	orr.w	r2, r3, #32
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e014      	b.n	8001fb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff ff34 	bl	8001e08 <SPI_WaitFifoStateUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f043 0220 	orr.w	r2, r3, #32
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e000      	b.n	8001fb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <memset>:
 8001fc0:	4402      	add	r2, r0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d100      	bne.n	8001fca <memset+0xa>
 8001fc8:	4770      	bx	lr
 8001fca:	f803 1b01 	strb.w	r1, [r3], #1
 8001fce:	e7f9      	b.n	8001fc4 <memset+0x4>

08001fd0 <__libc_init_array>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	4d0d      	ldr	r5, [pc, #52]	; (8002008 <__libc_init_array+0x38>)
 8001fd4:	4c0d      	ldr	r4, [pc, #52]	; (800200c <__libc_init_array+0x3c>)
 8001fd6:	1b64      	subs	r4, r4, r5
 8001fd8:	10a4      	asrs	r4, r4, #2
 8001fda:	2600      	movs	r6, #0
 8001fdc:	42a6      	cmp	r6, r4
 8001fde:	d109      	bne.n	8001ff4 <__libc_init_array+0x24>
 8001fe0:	4d0b      	ldr	r5, [pc, #44]	; (8002010 <__libc_init_array+0x40>)
 8001fe2:	4c0c      	ldr	r4, [pc, #48]	; (8002014 <__libc_init_array+0x44>)
 8001fe4:	f000 f818 	bl	8002018 <_init>
 8001fe8:	1b64      	subs	r4, r4, r5
 8001fea:	10a4      	asrs	r4, r4, #2
 8001fec:	2600      	movs	r6, #0
 8001fee:	42a6      	cmp	r6, r4
 8001ff0:	d105      	bne.n	8001ffe <__libc_init_array+0x2e>
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff8:	4798      	blx	r3
 8001ffa:	3601      	adds	r6, #1
 8001ffc:	e7ee      	b.n	8001fdc <__libc_init_array+0xc>
 8001ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002002:	4798      	blx	r3
 8002004:	3601      	adds	r6, #1
 8002006:	e7f2      	b.n	8001fee <__libc_init_array+0x1e>
 8002008:	08002070 	.word	0x08002070
 800200c:	08002070 	.word	0x08002070
 8002010:	08002070 	.word	0x08002070
 8002014:	08002074 	.word	0x08002074

08002018 <_init>:
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	bf00      	nop
 800201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800201e:	bc08      	pop	{r3}
 8002020:	469e      	mov	lr, r3
 8002022:	4770      	bx	lr

08002024 <_fini>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr
